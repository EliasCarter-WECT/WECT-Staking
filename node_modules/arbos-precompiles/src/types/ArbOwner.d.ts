/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArbOwnerInterface extends ethers.utils.Interface {
  functions: {
    "addAllowedSender(address)": FunctionFragment;
    "addToReserveFunds()": FunctionFragment;
    "allowAllSenders()": FunctionFragment;
    "allowOnlyOwnerToSend()": FunctionFragment;
    "bindAddressToPluggable(address,uint256)": FunctionFragment;
    "continueCodeUpload(bytes)": FunctionFragment;
    "createChainParameter(bytes32,uint256)": FunctionFragment;
    "deployContract(bytes,address,uint256)": FunctionFragment;
    "finishCodeUploadAsArbosUpgrade(bytes32,bytes32)": FunctionFragment;
    "finishCodeUploadAsPluggable(uint256,bool)": FunctionFragment;
    "getAllAllowedSenders()": FunctionFragment;
    "getAllFairGasPriceSenders()": FunctionFragment;
    "getChainParameter(bytes32)": FunctionFragment;
    "getTotalOfEthBalances()": FunctionFragment;
    "getUploadedCodeHash()": FunctionFragment;
    "isAllowedSender(address)": FunctionFragment;
    "isFairGasPriceSender(address)": FunctionFragment;
    "removeAllowedSender(address)": FunctionFragment;
    "serializeAllParameters()": FunctionFragment;
    "setChainParameter(bytes32,uint256)": FunctionFragment;
    "setFairGasPriceSender(address,bool)": FunctionFragment;
    "setL1GasPriceEstimate(uint256)": FunctionFragment;
    "startCodeUpload()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAllowedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToReserveFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowAllSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowOnlyOwnerToSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bindAddressToPluggable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "continueCodeUpload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createChainParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishCodeUploadAsArbosUpgrade",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finishCodeUploadAsPluggable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFairGasPriceSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainParameter",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOfEthBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUploadedCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFairGasPriceSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeAllParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChainParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFairGasPriceSender",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1GasPriceEstimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startCodeUpload",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToReserveFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowAllSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowOnlyOwnerToSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bindAddressToPluggable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "continueCodeUpload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChainParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishCodeUploadAsArbosUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishCodeUploadAsPluggable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFairGasPriceSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOfEthBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUploadedCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFairGasPriceSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeAllParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFairGasPriceSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1GasPriceEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startCodeUpload",
    data: BytesLike
  ): Result;

  events: {};
}

export class ArbOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArbOwnerInterface;

  functions: {
    addAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToReserveFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowAllSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowOnlyOwnerToSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployContract(
      constructorData: BytesLike,
      deemedSender: string,
      deemedNonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishCodeUploadAsArbosUpgrade(
      newCodeHash: BytesLike,
      oldCodeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllAllowedSenders(overrides?: CallOverrides): Promise<[string]>;

    getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<[string]>;

    getChainParameter(
      which: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOfEthBalances(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUploadedCodeHash(overrides?: CallOverrides): Promise<[string]>;

    isAllowedSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFairGasPriceSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serializeAllParameters(overrides?: CallOverrides): Promise<[string]>;

    setChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFairGasPriceSender(
      addr: string,
      isFairGasPriceSender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL1GasPriceEstimate(
      priceInGwei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startCodeUpload(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAllowedSender(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToReserveFunds(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowAllSenders(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowOnlyOwnerToSend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bindAddressToPluggable(
    addr: string,
    pluggableId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  continueCodeUpload(
    marshalledCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createChainParameter(
    which: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployContract(
    constructorData: BytesLike,
    deemedSender: string,
    deemedNonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishCodeUploadAsArbosUpgrade(
    newCodeHash: BytesLike,
    oldCodeHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishCodeUploadAsPluggable(
    id: BigNumberish,
    keepState: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllAllowedSenders(overrides?: CallOverrides): Promise<string>;

  getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<string>;

  getChainParameter(
    which: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;

  getUploadedCodeHash(overrides?: CallOverrides): Promise<string>;

  isAllowedSender(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isFairGasPriceSender(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAllowedSender(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serializeAllParameters(overrides?: CallOverrides): Promise<string>;

  setChainParameter(
    which: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFairGasPriceSender(
    addr: string,
    isFairGasPriceSender: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL1GasPriceEstimate(
    priceInGwei: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startCodeUpload(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAllowedSender(addr: string, overrides?: CallOverrides): Promise<void>;

    addToReserveFunds(overrides?: CallOverrides): Promise<void>;

    allowAllSenders(overrides?: CallOverrides): Promise<void>;

    allowOnlyOwnerToSend(overrides?: CallOverrides): Promise<void>;

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployContract(
      constructorData: BytesLike,
      deemedSender: string,
      deemedNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finishCodeUploadAsArbosUpgrade(
      newCodeHash: BytesLike,
      oldCodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllAllowedSenders(overrides?: CallOverrides): Promise<string>;

    getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<string>;

    getChainParameter(
      which: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getUploadedCodeHash(overrides?: CallOverrides): Promise<string>;

    isAllowedSender(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isFairGasPriceSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAllowedSender(addr: string, overrides?: CallOverrides): Promise<void>;

    serializeAllParameters(overrides?: CallOverrides): Promise<string>;

    setChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFairGasPriceSender(
      addr: string,
      isFairGasPriceSender: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1GasPriceEstimate(
      priceInGwei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startCodeUpload(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToReserveFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowAllSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowOnlyOwnerToSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployContract(
      constructorData: BytesLike,
      deemedSender: string,
      deemedNonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishCodeUploadAsArbosUpgrade(
      newCodeHash: BytesLike,
      oldCodeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllAllowedSenders(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<BigNumber>;

    getChainParameter(
      which: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getUploadedCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFairGasPriceSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serializeAllParameters(overrides?: CallOverrides): Promise<BigNumber>;

    setChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFairGasPriceSender(
      addr: string,
      isFairGasPriceSender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL1GasPriceEstimate(
      priceInGwei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startCodeUpload(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToReserveFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowAllSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowOnlyOwnerToSend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bindAddressToPluggable(
      addr: string,
      pluggableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    continueCodeUpload(
      marshalledCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployContract(
      constructorData: BytesLike,
      deemedSender: string,
      deemedNonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishCodeUploadAsArbosUpgrade(
      newCodeHash: BytesLike,
      oldCodeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishCodeUploadAsPluggable(
      id: BigNumberish,
      keepState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllAllowedSenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllFairGasPriceSenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainParameter(
      which: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOfEthBalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUploadedCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFairGasPriceSender(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedSender(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serializeAllParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChainParameter(
      which: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFairGasPriceSender(
      addr: string,
      isFairGasPriceSender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL1GasPriceEstimate(
      priceInGwei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startCodeUpload(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
