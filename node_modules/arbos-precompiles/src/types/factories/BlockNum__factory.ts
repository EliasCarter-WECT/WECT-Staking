/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BlockNum, BlockNumInterface } from "../BlockNum";

const _abi = [
  {
    inputs: [],
    name: "currBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d38061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80632e97766d14604157806345f32e7714605d578063fe5afe51146079575b600080fd5b60476081565b6040518082815260200191505060405180910390f35b60636089565b6040518082815260200191505060405180910390f35b607f608f565b005b600043905090565b60005481565b60956081565b60008190555056fea264697066735822122014d2db31bdd60f0b2f74197a3bfad7a76a4712207a50414e74d70c5908fe04fb64736f6c634300060b0033";

export class BlockNum__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BlockNum> {
    return super.deploy(overrides || {}) as Promise<BlockNum>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BlockNum {
    return super.attach(address) as BlockNum;
  }
  connect(signer: Signer): BlockNum__factory {
    return super.connect(signer) as BlockNum__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockNumInterface {
    return new utils.Interface(_abi) as BlockNumInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockNum {
    return new Contract(address, _abi, signerOrProvider) as BlockNum;
  }
}
