/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MemoryUsage, MemoryUsageInterface } from "../MemoryUsage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "test",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50609a8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806329e99f0714602d575b600080fd5b605660048036036020811015604157600080fd5b81019080803590602001909291905050506058565b005b6000819050818152505056fea264697066735822122012cdbaca56bda2ca060a1d4ad45340c7f10ca75e0da7ef9e594a5b8832568e3e64736f6c634300060b0033";

export class MemoryUsage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MemoryUsage> {
    return super.deploy(overrides || {}) as Promise<MemoryUsage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MemoryUsage {
    return super.attach(address) as MemoryUsage;
  }
  connect(signer: Signer): MemoryUsage__factory {
    return super.connect(signer) as MemoryUsage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MemoryUsageInterface {
    return new utils.Interface(_abi) as MemoryUsageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MemoryUsage {
    return new Contract(address, _abi, signerOrProvider) as MemoryUsage;
  }
}
