/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArbRetryableTxInterface extends ethers.utils.Interface {
  functions: {
    "cancel(bytes32)": FunctionFragment;
    "getBeneficiary(bytes32)": FunctionFragment;
    "getKeepalivePrice(bytes32)": FunctionFragment;
    "getLifetime()": FunctionFragment;
    "getSubmissionPrice(uint256)": FunctionFragment;
    "getTimeout(bytes32)": FunctionFragment;
    "keepalive(bytes32)": FunctionFragment;
    "redeem(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeepalivePrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLifetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeout",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keepalive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeepalivePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTimeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepalive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;

  events: {
    "Canceled(bytes32)": EventFragment;
    "LifetimeExtended(bytes32,uint256)": EventFragment;
    "Redeemed(bytes32)": EventFragment;
    "TicketCreated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LifetimeExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketCreated"): EventFragment;
}

export class ArbRetryableTx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArbRetryableTxInterface;

  functions: {
    cancel(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBeneficiary(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getKeepalivePrice(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getLifetime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSubmissionPrice(
      calldataSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimeout(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keepalive(
      userTxHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    userTxHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBeneficiary(
    userTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getKeepalivePrice(
    userTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

  getSubmissionPrice(
    calldataSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTimeout(
    userTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keepalive(
    userTxHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    userTxHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(userTxHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    getBeneficiary(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getKeepalivePrice(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmissionPrice(
      calldataSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimeout(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepalive(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(userTxHash: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Canceled(
      userTxHash?: BytesLike | null
    ): TypedEventFilter<[string], { userTxHash: string }>;

    LifetimeExtended(
      userTxHash?: BytesLike | null,
      newTimeout?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { userTxHash: string; newTimeout: BigNumber }
    >;

    Redeemed(
      userTxHash?: BytesLike | null
    ): TypedEventFilter<[string], { userTxHash: string }>;

    TicketCreated(
      userTxHash?: BytesLike | null
    ): TypedEventFilter<[string], { userTxHash: string }>;
  };

  estimateGas: {
    cancel(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBeneficiary(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeepalivePrice(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmissionPrice(
      calldataSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeout(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepalive(
      userTxHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBeneficiary(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeepalivePrice(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLifetime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubmissionPrice(
      calldataSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeout(
      userTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepalive(
      userTxHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      userTxHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
