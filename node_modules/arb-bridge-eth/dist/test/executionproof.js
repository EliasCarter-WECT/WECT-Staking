"use strict";
/*
 * Copyright 2020, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env node, mocha */
const hardhat_1 = require("hardhat");
const ethers_1 = require("ethers");
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
const { utils } = hardhat_1.ethers;
let ospTester;
let executors;
let bridge;
let sequencerInbox;
function getProver(op) {
    if ((op >= 0xa1 && op <= 0xa6) || op == 0x70) {
        return 1;
    }
    else if (op >= 0x20 && op <= 0x24) {
        return 2;
    }
    else {
        return 0;
    }
}
describe.only('OneStepProof', function () {
    before(async () => {
        const OneStepProofTester = await hardhat_1.ethers.getContractFactory('OneStepProofTester');
        ospTester = (await OneStepProofTester.deploy());
        await ospTester.deployed();
        const OneStepProof = await hardhat_1.ethers.getContractFactory('OneStepProof');
        const osp1 = (await OneStepProof.deploy());
        await osp1.deployed();
        const OneStepProof2 = await hardhat_1.ethers.getContractFactory('OneStepProof2');
        const osp2 = (await OneStepProof2.deploy());
        await osp2.deployed();
        const OneStepProofHash = await hardhat_1.ethers.getContractFactory('OneStepProofHash');
        const osp3 = (await OneStepProofHash.deploy());
        await osp3.deployed();
        executors = [osp1, osp2, osp3];
        const Bridge = await hardhat_1.ethers.getContractFactory('Bridge');
        bridge = (await Bridge.deploy());
        await bridge.deployed();
        await bridge.initialize();
        const RollupMock = await hardhat_1.ethers.getContractFactory('RollupMock');
        const rollupMock = await RollupMock.deploy();
        await rollupMock.deployed();
        await rollupMock.setMock(15, 900);
        const SequencerInbox = await hardhat_1.ethers.getContractFactory('SequencerInbox');
        sequencerInbox = (await SequencerInbox.deploy());
        await sequencerInbox.deployed();
        await sequencerInbox.initialize(bridge.address, hardhat_1.ethers.constants.AddressZero, rollupMock.address);
    });
    const files = fs.readdirSync('./test/proofs');
    for (const filename of files) {
        if (!filename.endsWith('json')) {
            continue;
        }
        if (filename == 'opcodetestecops.mexe-proofs.json' ||
            filename == 'opcodeecpairing.mexe-proofs.json') {
            continue;
        }
        const file = fs.readFileSync('./test/proofs/' + filename);
        let data;
        try {
            data = JSON.parse(file.toString());
        }
        catch (e) {
            console.log(`Failed to load ${file}`);
            throw e;
        }
        describe(`proofs from ${filename}`, function () {
            this.timeout(100000);
            const receipts = [];
            const opcodes = [];
            it(`should execute steps`, async function () {
                for (const proof of data.slice(0, 50)) {
                    const proofData = hardhat_1.ethers.utils.arrayify(proof.Proof);
                    const opcode = proofData[0];
                    if (opcode == 131) {
                        // Skip too expensive opcode
                        continue;
                    }
                    const prover = getProver(opcode);
                    try {
                        const tx = await ospTester.executeStepTest(executors[prover].address, sequencerInbox.address, bridge.address, proof.Assertion.Before.TotalMessagesRead, [proof.Assertion.Before.SendAcc, proof.Assertion.Before.LogAcc], proof.Proof, proof.BufferProof);
                        const receipt = await tx.wait();
                        receipts.push(receipt);
                        opcodes.push(opcode);
                    }
                    catch (e) {
                        chai_1.assert.fail(`Failed to generate proof ${opcode}, ${prover}`);
                    }
                }
            });
            it(`should have correct proof`, async function () {
                for (let i = 0; i < receipts.length; i++) {
                    const receipt = receipts[i];
                    const opcode = opcodes[i];
                    const proof = data[i];
                    let message = `Opcode ${opcode}`;
                    if (i > 0) {
                        message = `Opcode ${opcode.toString(16)}, Prev Opcode ${opcodes[i - 1].toString(16)}`;
                    }
                    const ev = ospTester.interface.parseLog(receipt.logs[receipt.logs.length - 1]);
                    chai_1.expect(ev.name, message).to.equal('OneStepProofResult');
                    const parsedEv = ev;
                    // console.log("opcode", opcode, fields)
                    chai_1.expect(parsedEv.args.fields[0], message).to.equal(utils.hexlify(proof.Assertion.Before.MachineHash));
                    chai_1.expect(parsedEv.args.fields[1], message).to.equal(utils.hexlify(proof.Assertion.After.MachineHash));
                    chai_1.expect(parsedEv.args.fields[2], message).to.equal(utils.hexlify(proof.Assertion.After.SendAcc));
                    chai_1.expect(parsedEv.args.fields[3], message).to.equal(utils.hexlify(proof.Assertion.After.LogAcc));
                    chai_1.expect(parsedEv.args.totalMessagesRead, message).to.equal(ethers_1.BigNumber.from(proof.Assertion.After.TotalMessagesRead));
                    chai_1.expect(parsedEv.args.gas, message).to.equal(ethers_1.BigNumber.from(proof.Assertion.After.TotalGasConsumed).sub(proof.Assertion.Before.TotalGasConsumed));
                }
            });
            it(`should have efficient proof [ @skip-on-coverage ]`, async function () {
                for (let i = 0; i < receipts.length; i++) {
                    const receipt = receipts[i];
                    const opcode = opcodes[i];
                    if (receipt.gasUsed.toNumber() > 1000000) {
                        console.log(`opcode ${opcode} used ${receipt.gasUsed} gas`);
                    }
                    chai_1.expect(receipt.gasUsed.toNumber()).to.be.lessThan(5000000);
                }
            });
        });
    }
});
