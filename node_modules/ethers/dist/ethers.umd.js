<<<<<<< HEAD
const __$G = (typeof globalThis !== 'undefined' ? globalThis: typeof window !== 'undefined' ? window: typeof global !== 'undefined' ? global: typeof self !== 'undefined' ? self: {});
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ethers = {}));
})(this, (function (exports) { 'use strict';

    /* Do NOT modify this file; see /src.ts/_admin/update-version.ts */
    /**
     *  The current version of Ethers.
     */
    const version = "6.13.5";

    /**
     *  Property helper functions.
     *
     *  @_subsection api/utils:Properties  [about-properties]
     */
    function checkType(value, type, name) {
        const types = type.split("|").map(t => t.trim());
        for (let i = 0; i < types.length; i++) {
            switch (type) {
                case "any":
                    return;
                case "bigint":
                case "boolean":
                case "number":
                case "string":
                    if (typeof (value) === type) {
                        return;
                    }
            }
        }
        const error = new Error(`invalid value for type ${type}`);
        error.code = "INVALID_ARGUMENT";
        error.argument = `value.${name}`;
        error.value = value;
        throw error;
    }
    /**
     *  Resolves to a new object that is a copy of %%value%%, but with all
     *  values resolved.
     */
    async function resolveProperties(value) {
        const keys = Object.keys(value);
        const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
        return results.reduce((accum, v, index) => {
            accum[keys[index]] = v;
            return accum;
        }, {});
    }
    /**
     *  Assigns the %%values%% to %%target%% as read-only values.
     *
     *  It %%types%% is specified, the values are checked.
     */
    function defineProperties(target, values, types) {
        for (let key in values) {
            let value = values[key];
            const type = (types ? types[key] : null);
            if (type) {
                checkType(value, type, key);
            }
            Object.defineProperty(target, key, { enumerable: true, value, writable: false });
        }
    }

    /**
     *  All errors in ethers include properties to ensure they are both
     *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).
     *
     *  The [[isError]] function can be used to check the error ``code`` and
     *  provide a type guard for the properties present on that error interface.
     *
     *  @_section: api/utils/errors:Errors  [about-errors]
     */
    function stringify$1(value) {
        if (value == null) {
            return "null";
        }
        if (Array.isArray(value)) {
            return "[ " + (value.map(stringify$1)).join(", ") + " ]";
        }
        if (value instanceof Uint8Array) {
            const HEX = "0123456789abcdef";
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                result += HEX[value[i] >> 4];
                result += HEX[value[i] & 0xf];
            }
            return result;
        }
        if (typeof (value) === "object" && typeof (value.toJSON) === "function") {
            return stringify$1(value.toJSON());
        }
        switch (typeof (value)) {
            case "boolean":
            case "symbol":
                return value.toString();
            case "bigint":
                return BigInt(value).toString();
            case "number":
                return (value).toString();
            case "string":
                return JSON.stringify(value);
            case "object": {
                const keys = Object.keys(value);
                keys.sort();
                return "{ " + keys.map((k) => `${stringify$1(k)}: ${stringify$1(value[k])}`).join(", ") + " }";
            }
        }
        return `[ COULD NOT SERIALIZE ]`;
    }
    /**
     *  Returns true if the %%error%% matches an error thrown by ethers
     *  that matches the error %%code%%.
     *
     *  In TypeScript environments, this can be used to check that %%error%%
     *  matches an EthersError type, which means the expected properties will
     *  be set.
     *
     *  @See [ErrorCodes](api:ErrorCode)
     *  @example
     *    try {
     *      // code....
     *    } catch (e) {
     *      if (isError(e, "CALL_EXCEPTION")) {
     *          // The Type Guard has validated this object
     *          console.log(e.data);
     *      }
     *    }
     */
    function isError(error, code) {
        return (error && error.code === code);
    }
    /**
     *  Returns true if %%error%% is a [[CallExceptionError].
     */
    function isCallException(error) {
        return isError(error, "CALL_EXCEPTION");
    }
    /**
     *  Returns a new Error configured to the format ethers emits errors, with
     *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties
     *  for the corresponding EthersError.
     *
     *  Each error in ethers includes the version of ethers, a
     *  machine-readable [[ErrorCode]], and depending on %%code%%, additional
     *  required properties. The error message will also include the %%message%%,
     *  ethers version, %%code%% and all additional properties, serialized.
     */
    function makeError(message, code, info) {
        let shortMessage = message;
        {
            const details = [];
            if (info) {
                if ("message" in info || "code" in info || "name" in info) {
                    throw new Error(`value will overwrite populated values: ${stringify$1(info)}`);
                }
                for (const key in info) {
                    if (key === "shortMessage") {
                        continue;
                    }
                    const value = (info[key]);
                    //                try {
                    details.push(key + "=" + stringify$1(value));
                    //                } catch (error: any) {
                    //                console.log("MMM", error.message);
                    //                    details.push(key + "=[could not serialize object]");
                    //                }
                }
            }
            details.push(`code=${code}`);
            details.push(`version=${version}`);
            if (details.length) {
                message += " (" + details.join(", ") + ")";
            }
        }
        let error;
        switch (code) {
            case "INVALID_ARGUMENT":
                error = new TypeError(message);
                break;
            case "NUMERIC_FAULT":
            case "BUFFER_OVERRUN":
                error = new RangeError(message);
                break;
            default:
                error = new Error(message);
        }
        defineProperties(error, { code });
        if (info) {
            Object.assign(error, info);
        }
        if (error.shortMessage == null) {
            defineProperties(error, { shortMessage });
        }
        return error;
    }
    /**
     *  Throws an EthersError with %%message%%, %%code%% and additional error
     *  %%info%% when %%check%% is falsish..
     *
     *  @see [[api:makeError]]
     */
    function assert(check, message, code, info) {
        if (!check) {
            throw makeError(message, code, info);
        }
    }
    /**
     *  A simple helper to simply ensuring provided arguments match expected
     *  constraints, throwing if not.
     *
     *  In TypeScript environments, the %%check%% has been asserted true, so
     *  any further code does not need additional compile-time checks.
     */
    function assertArgument(check, message, name, value) {
        assert(check, message, "INVALID_ARGUMENT", { argument: name, value: value });
    }
    function assertArgumentCount(count, expectedCount, message) {
        if (message == null) {
            message = "";
        }
        if (message) {
            message = ": " + message;
        }
        assert(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
            count: count,
            expectedCount: expectedCount
        });
        assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
            count: count,
            expectedCount: expectedCount
        });
    }
    const _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
        try {
            // General test for normalize
            /* c8 ignore start */
            if ("test".normalize(form) !== "test") {
                throw new Error("bad");
            }
            ;
            /* c8 ignore stop */
            if (form === "NFD") {
                const check = String.fromCharCode(0xe9).normalize("NFD");
                const expected = String.fromCharCode(0x65, 0x0301);
                /* c8 ignore start */
                if (check !== expected) {
                    throw new Error("broken");
                }
                /* c8 ignore stop */
            }
            accum.push(form);
        }
        catch (error) { }
        return accum;
    }, []);
    /**
     *  Throws if the normalization %%form%% is not supported.
     */
    function assertNormalize(form) {
        assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
            operation: "String.prototype.normalize", info: { form }
        });
    }
    /**
     *  Many classes use file-scoped values to guard the constructor,
     *  making it effectively private. This facilitates that pattern
     *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,
     *  throwing if not, indicating the %%className%% if provided.
     */
    function assertPrivate(givenGuard, guard, className) {
        if (className == null) {
            className = "";
        }
        if (givenGuard !== guard) {
            let method = className, operation = "new";
            if (className) {
                method += ".";
                operation += " " + className;
            }
            assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
                operation
            });
        }
    }

    /**
     *  Some data helpers.
     *
     *
     *  @_subsection api/utils:Data Helpers  [about-data]
     */
    function _getBytes(value, name, copy) {
        if (value instanceof Uint8Array) {
            if (copy) {
                return new Uint8Array(value);
            }
            return value;
        }
        if (typeof (value) === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
            const result = new Uint8Array((value.length - 2) / 2);
            let offset = 2;
            for (let i = 0; i < result.length; i++) {
                result[i] = parseInt(value.substring(offset, offset + 2), 16);
                offset += 2;
            }
            return result;
        }
        assertArgument(false, "invalid BytesLike value", name || "value", value);
    }
    /**
     *  Get a typed Uint8Array for %%value%%. If already a Uint8Array
     *  the original %%value%% is returned; if a copy is required use
     *  [[getBytesCopy]].
     *
     *  @see: getBytesCopy
     */
    function getBytes(value, name) {
        return _getBytes(value, name, false);
    }
    /**
     *  Get a typed Uint8Array for %%value%%, creating a copy if necessary
     *  to prevent any modifications of the returned value from being
     *  reflected elsewhere.
     *
     *  @see: getBytes
     */
    function getBytesCopy(value, name) {
        return _getBytes(value, name, true);
    }
    /**
     *  Returns true if %%value%% is a valid [[HexString]].
     *
     *  If %%length%% is ``true`` or a //number//, it also checks that
     *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)
     *  bytes of data (e.g. ``0x1234`` is 2 bytes).
     */
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (typeof (length) === "number" && value.length !== 2 + 2 * length) {
            return false;
        }
        if (length === true && (value.length % 2) !== 0) {
            return false;
        }
        return true;
    }
    /**
     *  Returns true if %%value%% is a valid representation of arbitrary
     *  data (i.e. a valid [[DataHexString]] or a Uint8Array).
     */
    function isBytesLike(value) {
        return (isHexString(value, true) || (value instanceof Uint8Array));
    }
    const HexCharacters = "0123456789abcdef";
    /**
     *  Returns a [[DataHexString]] representation of %%data%%.
     */
    function hexlify(data) {
        const bytes = getBytes(data);
        let result = "0x";
        for (let i = 0; i < bytes.length; i++) {
            const v = bytes[i];
            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
        }
        return result;
    }
    /**
     *  Returns a [[DataHexString]] by concatenating all values
     *  within %%data%%.
     */
    function concat(datas) {
        return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
    }
    /**
     *  Returns the length of %%data%%, in bytes.
     */
    function dataLength(data) {
        if (isHexString(data, true)) {
            return (data.length - 2) / 2;
        }
        return getBytes(data).length;
    }
    /**
     *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%
     *  offset to the %%end%% offset.
     *
     *  By default %%start%% is 0 and %%end%% is the length of %%data%%.
     */
    function dataSlice(data, start, end) {
        const bytes = getBytes(data);
        if (end != null && end > bytes.length) {
            assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
                buffer: bytes, length: bytes.length, offset: end
            });
        }
        return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));
    }
    /**
     *  Return the [[DataHexString]] result by stripping all **leading**
     ** zero bytes from %%data%%.
     */
    function stripZerosLeft(data) {
        let bytes = hexlify(data).substring(2);
        while (bytes.startsWith("00")) {
            bytes = bytes.substring(2);
        }
        return "0x" + bytes;
    }
    function zeroPad(data, length, left) {
        const bytes = getBytes(data);
        assert(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
            buffer: new Uint8Array(bytes),
            length: length,
            offset: length + 1
        });
        const result = new Uint8Array(length);
        result.fill(0);
        if (left) {
            result.set(bytes, length - bytes.length);
        }
        else {
            result.set(bytes, 0);
        }
        return hexlify(result);
    }
    /**
     *  Return the [[DataHexString]] of %%data%% padded on the **left**
     *  to %%length%% bytes.
     *
     *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
     *  thrown.
     *
     *  This pads data the same as **values** are in Solidity
     *  (e.g. ``uint128``).
     */
    function zeroPadValue(data, length) {
        return zeroPad(data, length, true);
    }
    /**
     *  Return the [[DataHexString]] of %%data%% padded on the **right**
     *  to %%length%% bytes.
     *
     *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
     *  thrown.
     *
     *  This pads data the same as **bytes** are in Solidity
     *  (e.g. ``bytes16``).
     */
    function zeroPadBytes(data, length) {
        return zeroPad(data, length, false);
    }

    /**
     *  Some mathematic operations.
     *
     *  @_subsection: api/utils:Math Helpers  [about-maths]
     */
    const BN_0$a = BigInt(0);
    const BN_1$5 = BigInt(1);
    //const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;
    // IEEE 754 support 53-bits of mantissa
    const maxValue = 0x1fffffffffffff;
    /**
     *  Convert %%value%% from a twos-compliment representation of %%width%%
     *  bits to its value.
     *
     *  If the highest bit is ``1``, the result will be negative.
     */
    function fromTwos(_value, _width) {
        const value = getUint(_value, "value");
        const width = BigInt(getNumber(_width, "width"));
        assert((value >> width) === BN_0$a, "overflow", "NUMERIC_FAULT", {
            operation: "fromTwos", fault: "overflow", value: _value
        });
        // Top bit set; treat as a negative value
        if (value >> (width - BN_1$5)) {
            const mask = (BN_1$5 << width) - BN_1$5;
            return -(((~value) & mask) + BN_1$5);
        }
        return value;
    }
    /**
     *  Convert %%value%% to a twos-compliment representation of
     *  %%width%% bits.
     *
     *  The result will always be positive.
     */
    function toTwos(_value, _width) {
        let value = getBigInt(_value, "value");
        const width = BigInt(getNumber(_width, "width"));
        const limit = (BN_1$5 << (width - BN_1$5));
        if (value < BN_0$a) {
            value = -value;
            assert(value <= limit, "too low", "NUMERIC_FAULT", {
                operation: "toTwos", fault: "overflow", value: _value
            });
            const mask = (BN_1$5 << width) - BN_1$5;
            return ((~value) & mask) + BN_1$5;
        }
        else {
            assert(value < limit, "too high", "NUMERIC_FAULT", {
                operation: "toTwos", fault: "overflow", value: _value
            });
        }
        return value;
    }
    /**
     *  Mask %%value%% with a bitmask of %%bits%% ones.
     */
    function mask(_value, _bits) {
        const value = getUint(_value, "value");
        const bits = BigInt(getNumber(_bits, "bits"));
        return value & ((BN_1$5 << bits) - BN_1$5);
    }
    /**
     *  Gets a BigInt from %%value%%. If it is an invalid value for
     *  a BigInt, then an ArgumentError will be thrown for %%name%%.
     */
    function getBigInt(value, name) {
        switch (typeof (value)) {
            case "bigint": return value;
            case "number":
                assertArgument(Number.isInteger(value), "underflow", name || "value", value);
                assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
                return BigInt(value);
            case "string":
                try {
                    if (value === "") {
                        throw new Error("empty string");
                    }
                    if (value[0] === "-" && value[1] !== "-") {
                        return -BigInt(value.substring(1));
                    }
                    return BigInt(value);
                }
                catch (e) {
                    assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
                }
        }
        assertArgument(false, "invalid BigNumberish value", name || "value", value);
    }
    /**
     *  Returns %%value%% as a bigint, validating it is valid as a bigint
     *  value and that it is positive.
     */
    function getUint(value, name) {
        const result = getBigInt(value, name);
        assert(result >= BN_0$a, "unsigned value cannot be negative", "NUMERIC_FAULT", {
            fault: "overflow", operation: "getUint", value
        });
        return result;
    }
    const Nibbles$1 = "0123456789abcdef";
    /*
     * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it
     * is treated as Big Endian data.
     */
    function toBigInt(value) {
        if (value instanceof Uint8Array) {
            let result = "0x0";
            for (const v of value) {
                result += Nibbles$1[v >> 4];
                result += Nibbles$1[v & 0x0f];
            }
            return BigInt(result);
        }
        return getBigInt(value);
    }
    /**
     *  Gets a //number// from %%value%%. If it is an invalid value for
     *  a //number//, then an ArgumentError will be thrown for %%name%%.
     */
    function getNumber(value, name) {
        switch (typeof (value)) {
            case "bigint":
                assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
                return Number(value);
            case "number":
                assertArgument(Number.isInteger(value), "underflow", name || "value", value);
                assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
                return value;
            case "string":
                try {
                    if (value === "") {
                        throw new Error("empty string");
                    }
                    return getNumber(BigInt(value), name);
                }
                catch (e) {
                    assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
                }
        }
        assertArgument(false, "invalid numeric value", name || "value", value);
    }
    /**
     *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it
     *  is treated as Big Endian data. Throws if the value is not safe.
     */
    function toNumber(value) {
        return getNumber(toBigInt(value));
    }
    /**
     *  Converts %%value%% to a Big Endian hexstring, optionally padded to
     *  %%width%% bytes.
     */
    function toBeHex(_value, _width) {
        const value = getUint(_value, "value");
        let result = value.toString(16);
        if (_width == null) {
            // Ensure the value is of even length
            if (result.length % 2) {
                result = "0" + result;
            }
        }
        else {
            const width = getNumber(_width, "width");
            assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
                operation: "toBeHex",
                fault: "overflow",
                value: _value
            });
            // Pad the value to the required width
            while (result.length < (width * 2)) {
                result = "0" + result;
            }
        }
        return "0x" + result;
    }
    /**
     *  Converts %%value%% to a Big Endian Uint8Array.
     */
    function toBeArray(_value) {
        const value = getUint(_value, "value");
        if (value === BN_0$a) {
            return new Uint8Array([]);
        }
        let hex = value.toString(16);
        if (hex.length % 2) {
            hex = "0" + hex;
        }
        const result = new Uint8Array(hex.length / 2);
        for (let i = 0; i < result.length; i++) {
            const offset = i * 2;
            result[i] = parseInt(hex.substring(offset, offset + 2), 16);
        }
        return result;
    }
    /**
     *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.
     *
     *  A //Quantity// does not have and leading 0 values unless the value is
     *  the literal value `0x0`. This is most commonly used for JSSON-RPC
     *  numeric values.
     */
    function toQuantity(value) {
        let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
        while (result.startsWith("0")) {
            result = result.substring(1);
        }
        if (result === "") {
            result = "0";
        }
        return "0x" + result;
    }

    /**
     *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value
     *  to be encoded as a compact string using a radix of 58 using only
     *  alpha-numeric characters. Confusingly similar characters are omitted
     *  (i.e. ``"l0O"``).
     *
     *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,
     *  since any zero-bytes on the left would get removed. To mitigate this
     *  issue most schemes that use Base58 choose specific high-order values
     *  to ensure non-zero prefixes.
     *
     *  @_subsection: api/utils:Base58 Encoding [about-base58]
     */
    const Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    let Lookup = null;
    function getAlpha(letter) {
        if (Lookup == null) {
            Lookup = {};
            for (let i = 0; i < Alphabet.length; i++) {
                Lookup[Alphabet[i]] = BigInt(i);
            }
        }
        const result = Lookup[letter];
        assertArgument(result != null, `invalid base58 value`, "letter", letter);
        return result;
    }
    const BN_0$9 = BigInt(0);
    const BN_58 = BigInt(58);
    /**
     *  Encode %%value%% as a Base58-encoded string.
     */
    function encodeBase58(_value) {
        const bytes = getBytes(_value);
        let value = toBigInt(bytes);
        let result = "";
        while (value) {
            result = Alphabet[Number(value % BN_58)] + result;
            value /= BN_58;
        }
        // Account for leading padding zeros
        for (let i = 0; i < bytes.length; i++) {
            if (bytes[i]) {
                break;
            }
            result = Alphabet[0] + result;
        }
        return result;
    }
    /**
     *  Decode the Base58-encoded %%value%%.
     */
    function decodeBase58(value) {
        let result = BN_0$9;
        for (let i = 0; i < value.length; i++) {
            result *= BN_58;
            result += getAlpha(value[i]);
        }
        return result;
    }

    // utils/base64-browser
    function decodeBase64(textData) {
        textData = atob(textData);
        const data = new Uint8Array(textData.length);
        for (let i = 0; i < textData.length; i++) {
            data[i] = textData.charCodeAt(i);
        }
        return getBytes(data);
    }
    function encodeBase64(_data) {
        const data = getBytes(_data);
        let textData = "";
        for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }

    /**
     *  Events allow for applications to use the observer pattern, which
     *  allows subscribing and publishing events, outside the normal
     *  execution paths.
     *
     *  @_section api/utils/events:Events  [about-events]
     */
    /**
     *  When an [[EventEmitterable]] triggers a [[Listener]], the
     *  callback always ahas one additional argument passed, which is
     *  an **EventPayload**.
     */
    class EventPayload {
        /**
         *  The event filter.
         */
        filter;
        /**
         *  The **EventEmitterable**.
         */
        emitter;
        #listener;
        /**
         *  Create a new **EventPayload** for %%emitter%% with
         *  the %%listener%% and for %%filter%%.
         */
        constructor(emitter, listener, filter) {
            this.#listener = listener;
            defineProperties(this, { emitter, filter });
        }
        /**
         *  Unregister the triggered listener for future events.
         */
        async removeListener() {
            if (this.#listener == null) {
                return;
            }
            await this.emitter.off(this.filter, this.#listener);
        }
    }

    /**
     *  Using strings in Ethereum (or any security-basd system) requires
     *  additional care. These utilities attempt to mitigate some of the
     *  safety issues as well as provide the ability to recover and analyse
     *  strings.
     *
     *  @_subsection api/utils:Strings and UTF-8  [about-strings]
     */
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === "OVERRUN") {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === "OVERLONG") {
            assertArgument(typeof (badCodepoint) === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    /**
     *  A handful of popular, built-in UTF-8 error handling strategies.
     *
     *  **``"error"``** - throws on ANY illegal UTF-8 sequence or
     *  non-canonical (overlong) codepoints (this is the default)
     *
     *  **``"ignore"``** - silently drops any illegal UTF-8 sequence
     *  and accepts non-canonical (overlong) codepoints
     *
     *  **``"replace"``** - replace any illegal UTF-8 sequence with the
     *  UTF-8 replacement character (i.e. ``"\\ufffd"``) and accepts
     *  non-canonical (overlong) codepoints
     *
     *  @returns: Record<"error" | "ignore" | "replace", Utf8ErrorFunc>
     */
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(_bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        const bytes = getBytes(_bytes, "bytes");
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
                }
                else {
                    i += onError("BAD_PREFIX", i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError("OVERRUN", i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError("MISSING_CONTINUE", i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    /**
     *  Returns the UTF-8 byte representation of %%str%%.
     *
     *  If %%form%% is specified, the string is normalized.
     */
    function toUtf8Bytes(str, form) {
        assertArgument(typeof (str) === "string", "invalid string value", "str", str);
        if (form != null) {
            assertNormalize(form);
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), "invalid surrogate pair", "str", str);
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return new Uint8Array(result);
    }
    //export 
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    /**
     *  Returns the string represented by the UTF-8 data %%bytes%%.
     *
     *  When %%onError%% function is specified, it is called on UTF-8
     *  errors allowing recovery using the [[Utf8ErrorFunc]] API.
     *  (default: [error](Utf8ErrorFuncs))
     */
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    /**
     *  Returns the UTF-8 code-points for %%str%%.
     *
     *  If %%form%% is specified, the string is normalized.
     */
    function toUtf8CodePoints(str, form) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }

    function createGetUrl(options) {
        async function getUrl(req, _signal) {
            assert(_signal == null || !_signal.cancelled, "request cancelled before sending", "CANCELLED");
            const protocol = req.url.split(":")[0].toLowerCase();
            assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
                info: { protocol },
                operation: "request"
            });
            assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
                operation: "request"
            });
            let error = null;
            const controller = new AbortController();
            const timer = setTimeout(() => {
                error = makeError("request timeout", "TIMEOUT");
                controller.abort();
            }, req.timeout);
            if (_signal) {
                _signal.addListener(() => {
                    error = makeError("request cancelled", "CANCELLED");
                    controller.abort();
                });
            }
            const init = {
                method: req.method,
                headers: new Headers(Array.from(req)),
                body: req.body || undefined,
                signal: controller.signal
            };
            let resp;
            try {
                resp = await fetch(req.url, init);
            }
            catch (_error) {
                clearTimeout(timer);
                if (error) {
                    throw error;
                }
                throw _error;
            }
            clearTimeout(timer);
            const headers = {};
            resp.headers.forEach((value, key) => {
                headers[key.toLowerCase()] = value;
            });
            const respBody = await resp.arrayBuffer();
            const body = (respBody == null) ? null : new Uint8Array(respBody);
            return {
                statusCode: resp.status,
                statusMessage: resp.statusText,
                headers, body
            };
        }
        return getUrl;
    }

    /**
     *  Fetching content from the web is environment-specific, so Ethers
     *  provides an abstraction that each environment can implement to provide
     *  this service.
     *
     *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to
     *  create a request object, register event listeners and process data
     *  and populate the [[FetchResponse]].
     *
     *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting
     *  ``Promise`` is waited on to retrieve the payload.
     *
     *  The [[FetchRequest]] is responsible for handling many common situations,
     *  such as redirects, server throttling, authentication, etc.
     *
     *  It also handles common gateways, such as IPFS and data URIs.
     *
     *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]
     */
    const MAX_ATTEMPTS = 12;
    const SLOT_INTERVAL = 250;
    // The global FetchGetUrlFunc implementation.
    let defaultGetUrlFunc = createGetUrl();
    const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    const reIpfs = new RegExp("^ipfs:/\/(ipfs/)?(.*)$", "i");
    // If locked, new Gateways cannot be added
    let locked$5 = false;
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs
    async function dataGatewayFunc(url, signal) {
        try {
            const match = url.match(reData);
            if (!match) {
                throw new Error("invalid data");
            }
            return new FetchResponse(200, "OK", {
                "content-type": (match[1] || "text/plain"),
            }, (match[2] ? decodeBase64(match[3]) : unpercent(match[3])));
        }
        catch (error) {
            return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
        }
    }
    /**
     *  Returns a [[FetchGatewayFunc]] for fetching content from a standard
     *  IPFS gateway hosted at %%baseUrl%%.
     */
    function getIpfsGatewayFunc(baseUrl) {
        async function gatewayIpfs(url, signal) {
            try {
                const match = url.match(reIpfs);
                if (!match) {
                    throw new Error("invalid link");
                }
                return new FetchRequest(`${baseUrl}${match[2]}`);
            }
            catch (error) {
                return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
            }
        }
        return gatewayIpfs;
    }
    const Gateways = {
        "data": dataGatewayFunc,
        "ipfs": getIpfsGatewayFunc("https:/\/gateway.ipfs.io/ipfs/")
    };
    const fetchSignals = new WeakMap();
    /**
     *  @_ignore
     */
    class FetchCancelSignal {
        #listeners;
        #cancelled;
        constructor(request) {
            this.#listeners = [];
            this.#cancelled = false;
            fetchSignals.set(request, () => {
                if (this.#cancelled) {
                    return;
                }
                this.#cancelled = true;
                for (const listener of this.#listeners) {
                    setTimeout(() => { listener(); }, 0);
                }
                this.#listeners = [];
            });
        }
        addListener(listener) {
            assert(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
                operation: "fetchCancelSignal.addCancelListener"
            });
            this.#listeners.push(listener);
        }
        get cancelled() { return this.#cancelled; }
        checkSignal() {
            assert(!this.cancelled, "cancelled", "CANCELLED", {});
        }
    }
    // Check the signal, throwing if it is cancelled
    function checkSignal(signal) {
        if (signal == null) {
            throw new Error("missing signal; should not happen");
        }
        signal.checkSignal();
        return signal;
    }
    /**
     *  Represents a request for a resource using a URI.
     *
     *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,
     *  and ``IPFS:``.
     *
     *  Additional schemes can be added globally using [[registerGateway]].
     *
     *  @example:
     *    req = new FetchRequest("https://www.ricmoo.com")
     *    resp = await req.send()
     *    resp.body.length
     *    //_result:
     */
    class FetchRequest {
        #allowInsecure;
        #gzip;
        #headers;
        #method;
        #timeout;
        #url;
        #body;
        #bodyType;
        #creds;
        // Hooks
        #preflight;
        #process;
        #retry;
        #signal;
        #throttle;
        #getUrlFunc;
        /**
         *  The fetch URL to request.
         */
        get url() { return this.#url; }
        set url(url) {
            this.#url = String(url);
        }
        /**
         *  The fetch body, if any, to send as the request body. //(default: null)//
         *
         *  When setting a body, the intrinsic ``Content-Type`` is automatically
         *  set and will be used if **not overridden** by setting a custom
         *  header.
         *
         *  If %%body%% is null, the body is cleared (along with the
         *  intrinsic ``Content-Type``).
         *
         *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
         *  ``text/plain``.
         *
         *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
         *  ``application/octet-stream``.
         *
         *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
         *  set to ``application/json``.
         */
        get body() {
            if (this.#body == null) {
                return null;
            }
            return new Uint8Array(this.#body);
        }
        set body(body) {
            if (body == null) {
                this.#body = undefined;
                this.#bodyType = undefined;
            }
            else if (typeof (body) === "string") {
                this.#body = toUtf8Bytes(body);
                this.#bodyType = "text/plain";
            }
            else if (body instanceof Uint8Array) {
                this.#body = body;
                this.#bodyType = "application/octet-stream";
            }
            else if (typeof (body) === "object") {
                this.#body = toUtf8Bytes(JSON.stringify(body));
                this.#bodyType = "application/json";
            }
            else {
                throw new Error("invalid body");
            }
        }
        /**
         *  Returns true if the request has a body.
         */
        hasBody() {
            return (this.#body != null);
        }
        /**
         *  The HTTP method to use when requesting the URI. If no method
         *  has been explicitly set, then ``GET`` is used if the body is
         *  null and ``POST`` otherwise.
         */
        get method() {
            if (this.#method) {
                return this.#method;
            }
            if (this.hasBody()) {
                return "POST";
            }
            return "GET";
        }
        set method(method) {
            if (method == null) {
                method = "";
            }
            this.#method = String(method).toUpperCase();
        }
        /**
         *  The headers that will be used when requesting the URI. All
         *  keys are lower-case.
         *
         *  This object is a copy, so any changes will **NOT** be reflected
         *  in the ``FetchRequest``.
         *
         *  To set a header entry, use the ``setHeader`` method.
         */
        get headers() {
            const headers = Object.assign({}, this.#headers);
            if (this.#creds) {
                headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;
            }
            if (this.allowGzip) {
                headers["accept-encoding"] = "gzip";
            }
            if (headers["content-type"] == null && this.#bodyType) {
                headers["content-type"] = this.#bodyType;
            }
            if (this.body) {
                headers["content-length"] = String(this.body.length);
            }
            return headers;
        }
        /**
         *  Get the header for %%key%%, ignoring case.
         */
        getHeader(key) {
            return this.headers[key.toLowerCase()];
        }
        /**
         *  Set the header for %%key%% to %%value%%. All values are coerced
         *  to a string.
         */
        setHeader(key, value) {
            this.#headers[String(key).toLowerCase()] = String(value);
        }
        /**
         *  Clear all headers, resetting all intrinsic headers.
         */
        clearHeaders() {
            this.#headers = {};
        }
        [Symbol.iterator]() {
            const headers = this.headers;
            const keys = Object.keys(headers);
            let index = 0;
            return {
                next: () => {
                    if (index < keys.length) {
                        const key = keys[index++];
                        return {
                            value: [key, headers[key]], done: false
                        };
                    }
                    return { value: undefined, done: true };
                }
            };
        }
        /**
         *  The value that will be sent for the ``Authorization`` header.
         *
         *  To set the credentials, use the ``setCredentials`` method.
         */
        get credentials() {
            return this.#creds || null;
        }
        /**
         *  Sets an ``Authorization`` for %%username%% with %%password%%.
         */
        setCredentials(username, password) {
            assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
            this.#creds = `${username}:${password}`;
        }
        /**
         *  Enable and request gzip-encoded responses. The response will
         *  automatically be decompressed. //(default: true)//
         */
        get allowGzip() {
            return this.#gzip;
        }
        set allowGzip(value) {
            this.#gzip = !!value;
        }
        /**
         *  Allow ``Authentication`` credentials to be sent over insecure
         *  channels. //(default: false)//
         */
        get allowInsecureAuthentication() {
            return !!this.#allowInsecure;
        }
        set allowInsecureAuthentication(value) {
            this.#allowInsecure = !!value;
        }
        /**
         *  The timeout (in milliseconds) to wait for a complete response.
         *  //(default: 5 minutes)//
         */
        get timeout() { return this.#timeout; }
        set timeout(timeout) {
            assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
            this.#timeout = timeout;
        }
        /**
         *  This function is called prior to each request, for example
         *  during a redirection or retry in case of server throttling.
         *
         *  This offers an opportunity to populate headers or update
         *  content before sending a request.
         */
        get preflightFunc() {
            return this.#preflight || null;
        }
        set preflightFunc(preflight) {
            this.#preflight = preflight;
        }
        /**
         *  This function is called after each response, offering an
         *  opportunity to provide client-level throttling or updating
         *  response data.
         *
         *  Any error thrown in this causes the ``send()`` to throw.
         *
         *  To schedule a retry attempt (assuming the maximum retry limit
         *  has not been reached), use [[response.throwThrottleError]].
         */
        get processFunc() {
            return this.#process || null;
        }
        set processFunc(process) {
            this.#process = process;
        }
        /**
         *  This function is called on each retry attempt.
         */
        get retryFunc() {
            return this.#retry || null;
        }
        set retryFunc(retry) {
            this.#retry = retry;
        }
        /**
         *  This function is called to fetch content from HTTP and
         *  HTTPS URLs and is platform specific (e.g. nodejs vs
         *  browsers).
         *
         *  This is by default the currently registered global getUrl
         *  function, which can be changed using [[registerGetUrl]].
         *  If this has been set, setting is to ``null`` will cause
         *  this FetchRequest (and any future clones) to revert back to
         *  using the currently registered global getUrl function.
         *
         *  Setting this is generally not necessary, but may be useful
         *  for developers that wish to intercept requests or to
         *  configurege a proxy or other agent.
         */
        get getUrlFunc() {
            return this.#getUrlFunc || defaultGetUrlFunc;
        }
        set getUrlFunc(value) {
            this.#getUrlFunc = value;
        }
        /**
         *  Create a new FetchRequest instance with default values.
         *
         *  Once created, each property may be set before issuing a
         *  ``.send()`` to make the request.
         */
        constructor(url) {
            this.#url = String(url);
            this.#allowInsecure = false;
            this.#gzip = true;
            this.#headers = {};
            this.#method = "";
            this.#timeout = 300000;
            this.#throttle = {
                slotInterval: SLOT_INTERVAL,
                maxAttempts: MAX_ATTEMPTS
            };
            this.#getUrlFunc = null;
        }
        toString() {
            return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : "null"}>`;
        }
        /**
         *  Update the throttle parameters used to determine maximum
         *  attempts and exponential-backoff properties.
         */
        setThrottleParams(params) {
            if (params.slotInterval != null) {
                this.#throttle.slotInterval = params.slotInterval;
            }
            if (params.maxAttempts != null) {
                this.#throttle.maxAttempts = params.maxAttempts;
            }
        }
        async #send(attempt, expires, delay, _request, _response) {
            if (attempt >= this.#throttle.maxAttempts) {
                return _response.makeServerError("exceeded maximum retry limit");
            }
            assert(getTime$2() <= expires, "timeout", "TIMEOUT", {
                operation: "request.send", reason: "timeout", request: _request
            });
            if (delay > 0) {
                await wait(delay);
            }
            let req = this.clone();
            const scheme = (req.url.split(":")[0] || "").toLowerCase();
            // Process any Gateways
            if (scheme in Gateways) {
                const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
                if (result instanceof FetchResponse) {
                    let response = result;
                    if (this.processFunc) {
                        checkSignal(_request.#signal);
                        try {
                            response = await this.processFunc(req, response);
                        }
                        catch (error) {
                            // Something went wrong during processing; throw a 5xx server error
                            if (error.throttle == null || typeof (error.stall) !== "number") {
                                response.makeServerError("error in post-processing function", error).assertOk();
                            }
                            // Ignore throttling
                        }
                    }
                    return response;
                }
                req = result;
            }
            // We have a preflight function; update the request
            if (this.preflightFunc) {
                req = await this.preflightFunc(req);
            }
            const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
            let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
            if (response.statusCode === 301 || response.statusCode === 302) {
                // Redirect
                try {
                    const location = response.headers.location || "";
                    return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
                }
                catch (error) { }
                // Things won't get any better on another attempt; abort
                return response;
            }
            else if (response.statusCode === 429) {
                // Throttle
                if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {
                    const retryAfter = response.headers["retry-after"];
                    let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
                    if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                        delay = parseInt(retryAfter);
                    }
                    return req.clone().#send(attempt + 1, expires, delay, _request, response);
                }
            }
            if (this.processFunc) {
                checkSignal(_request.#signal);
                try {
                    response = await this.processFunc(req, response);
                }
                catch (error) {
                    // Something went wrong during processing; throw a 5xx server error
                    if (error.throttle == null || typeof (error.stall) !== "number") {
                        response.makeServerError("error in post-processing function", error).assertOk();
                    }
                    // Throttle
                    let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
                    if (error.stall >= 0) {
                        delay = error.stall;
                    }
                    return req.clone().#send(attempt + 1, expires, delay, _request, response);
                }
            }
            return response;
        }
        /**
         *  Resolves to the response by sending the request.
         */
        send() {
            assert(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
            this.#signal = new FetchCancelSignal(this);
            return this.#send(0, getTime$2() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
        }
        /**
         *  Cancels the inflight response, causing a ``CANCELLED``
         *  error to be rejected from the [[send]].
         */
        cancel() {
            assert(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
            const signal = fetchSignals.get(this);
            if (!signal) {
                throw new Error("missing signal; should not happen");
            }
            signal();
        }
        /**
         *  Returns a new [[FetchRequest]] that represents the redirection
         *  to %%location%%.
         */
        redirect(location) {
            // Redirection; for now we only support absolute locations
            const current = this.url.split(":")[0].toLowerCase();
            const target = location.split(":")[0].toLowerCase();
            // Don't allow redirecting:
            // - non-GET requests
            // - downgrading the security (e.g. https => http)
            // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]
            assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
                operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
            });
            // Create a copy of this request, with a new URL
            const req = new FetchRequest(location);
            req.method = "GET";
            req.allowGzip = this.allowGzip;
            req.timeout = this.timeout;
            req.#headers = Object.assign({}, this.#headers);
            if (this.#body) {
                req.#body = new Uint8Array(this.#body);
            }
            req.#bodyType = this.#bodyType;
            // Do not forward credentials unless on the same domain; only absolute
            //req.allowInsecure = false;
            // paths are currently supported; may want a way to specify to forward?
            //setStore(req.#props, "creds", getStore(this.#pros, "creds"));
            return req;
        }
        /**
         *  Create a new copy of this request.
         */
        clone() {
            const clone = new FetchRequest(this.url);
            // Preserve "default method" (i.e. null)
            clone.#method = this.#method;
            // Preserve "default body" with type, copying the Uint8Array is present
            if (this.#body) {
                clone.#body = this.#body;
            }
            clone.#bodyType = this.#bodyType;
            // Preserve "default headers"
            clone.#headers = Object.assign({}, this.#headers);
            // Credentials is readonly, so we copy internally
            clone.#creds = this.#creds;
            if (this.allowGzip) {
                clone.allowGzip = true;
            }
            clone.timeout = this.timeout;
            if (this.allowInsecureAuthentication) {
                clone.allowInsecureAuthentication = true;
            }
            clone.#preflight = this.#preflight;
            clone.#process = this.#process;
            clone.#retry = this.#retry;
            clone.#throttle = Object.assign({}, this.#throttle);
            clone.#getUrlFunc = this.#getUrlFunc;
            return clone;
        }
        /**
         *  Locks all static configuration for gateways and FetchGetUrlFunc
         *  registration.
         */
        static lockConfig() {
            locked$5 = true;
        }
        /**
         *  Get the current Gateway function for %%scheme%%.
         */
        static getGateway(scheme) {
            return Gateways[scheme.toLowerCase()] || null;
        }
        /**
         *  Use the %%func%% when fetching URIs using %%scheme%%.
         *
         *  This method affects all requests globally.
         *
         *  If [[lockConfig]] has been called, no change is made and this
         *  throws.
         */
        static registerGateway(scheme, func) {
            scheme = scheme.toLowerCase();
            if (scheme === "http" || scheme === "https") {
                throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
            }
            if (locked$5) {
                throw new Error("gateways locked");
            }
            Gateways[scheme] = func;
        }
        /**
         *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
         *
         *  This method affects all requests globally.
         *
         *  If [[lockConfig]] has been called, no change is made and this
         *  throws.
         */
        static registerGetUrl(getUrl) {
            if (locked$5) {
                throw new Error("gateways locked");
            }
            defaultGetUrlFunc = getUrl;
        }
        /**
         *  Creates a getUrl function that fetches content from HTTP and
         *  HTTPS URLs.
         *
         *  The available %%options%% are dependent on the platform
         *  implementation of the default getUrl function.
         *
         *  This is not generally something that is needed, but is useful
         *  when trying to customize simple behaviour when fetching HTTP
         *  content.
         */
        static createGetUrlFunc(options) {
            return createGetUrl();
        }
        /**
         *  Creates a function that can "fetch" data URIs.
         *
         *  Note that this is automatically done internally to support
         *  data URIs, so it is not necessary to register it.
         *
         *  This is not generally something that is needed, but may
         *  be useful in a wrapper to perfom custom data URI functionality.
         */
        static createDataGateway() {
            return dataGatewayFunc;
        }
        /**
         *  Creates a function that will fetch IPFS (unvalidated) from
         *  a custom gateway baseUrl.
         *
         *  The default IPFS gateway used internally is
         *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
         */
        static createIpfsGatewayFunc(baseUrl) {
            return getIpfsGatewayFunc(baseUrl);
        }
    }
    /**
     *  The response for a FetchRequest.
     */
    class FetchResponse {
        #statusCode;
        #statusMessage;
        #headers;
        #body;
        #request;
        #error;
        toString() {
            return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : "null"}>`;
        }
        /**
         *  The response status code.
         */
        get statusCode() { return this.#statusCode; }
        /**
         *  The response status message.
         */
        get statusMessage() { return this.#statusMessage; }
        /**
         *  The response headers. All keys are lower-case.
         */
        get headers() { return Object.assign({}, this.#headers); }
        /**
         *  The response body, or ``null`` if there was no body.
         */
        get body() {
            return (this.#body == null) ? null : new Uint8Array(this.#body);
        }
        /**
         *  The response body as a UTF-8 encoded string, or the empty
         *  string (i.e. ``""``) if there was no body.
         *
         *  An error is thrown if the body is invalid UTF-8 data.
         */
        get bodyText() {
            try {
                return (this.#body == null) ? "" : toUtf8String(this.#body);
            }
            catch (error) {
                assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
                    operation: "bodyText", info: { response: this }
                });
            }
        }
        /**
         *  The response body, decoded as JSON.
         *
         *  An error is thrown if the body is invalid JSON-encoded data
         *  or if there was no body.
         */
        get bodyJson() {
            try {
                return JSON.parse(this.bodyText);
            }
            catch (error) {
                assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
                    operation: "bodyJson", info: { response: this }
                });
            }
        }
        [Symbol.iterator]() {
            const headers = this.headers;
            const keys = Object.keys(headers);
            let index = 0;
            return {
                next: () => {
                    if (index < keys.length) {
                        const key = keys[index++];
                        return {
                            value: [key, headers[key]], done: false
                        };
                    }
                    return { value: undefined, done: true };
                }
            };
        }
        constructor(statusCode, statusMessage, headers, body, request) {
            this.#statusCode = statusCode;
            this.#statusMessage = statusMessage;
            this.#headers = Object.keys(headers).reduce((accum, k) => {
                accum[k.toLowerCase()] = String(headers[k]);
                return accum;
            }, {});
            this.#body = ((body == null) ? null : new Uint8Array(body));
            this.#request = (request || null);
            this.#error = { message: "" };
        }
        /**
         *  Return a Response with matching headers and body, but with
         *  an error status code (i.e. 599) and %%message%% with an
         *  optional %%error%%.
         */
        makeServerError(message, error) {
            let statusMessage;
            if (!message) {
                message = `${this.statusCode} ${this.statusMessage}`;
                statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
            }
            else {
                statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
            }
            const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);
            response.#error = { message, error };
            return response;
        }
        /**
         *  If called within a [request.processFunc](FetchRequest-processFunc)
         *  call, causes the request to retry as if throttled for %%stall%%
         *  milliseconds.
         */
        throwThrottleError(message, stall) {
            if (stall == null) {
                stall = -1;
            }
            else {
                assertArgument(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
            }
            const error = new Error(message || "throttling requests");
            defineProperties(error, { stall, throttle: true });
            throw error;
        }
        /**
         *  Get the header value for %%key%%, ignoring case.
         */
        getHeader(key) {
            return this.headers[key.toLowerCase()];
        }
        /**
         *  Returns true if the response has a body.
         */
        hasBody() {
            return (this.#body != null);
        }
        /**
         *  The request made for this response.
         */
        get request() { return this.#request; }
        /**
         *  Returns true if this response was a success statusCode.
         */
        ok() {
            return (this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300);
        }
        /**
         *  Throws a ``SERVER_ERROR`` if this response is not ok.
         */
        assertOk() {
            if (this.ok()) {
                return;
            }
            let { message, error } = this.#error;
            if (message === "") {
                message = `server response ${this.statusCode} ${this.statusMessage}`;
            }
            let requestUrl = null;
            if (this.request) {
                requestUrl = this.request.url;
            }
            let responseBody = null;
            try {
                if (this.#body) {
                    responseBody = toUtf8String(this.#body);
                }
            }
            catch (e) { }
            assert(false, message, "SERVER_ERROR", {
                request: (this.request || "unknown request"), response: this, error,
                info: {
                    requestUrl, responseBody,
                    responseStatus: `${this.statusCode} ${this.statusMessage}`
                }
            });
        }
    }
    function getTime$2() { return (new Date()).getTime(); }
    function unpercent(value) {
        return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
            return String.fromCharCode(parseInt(code, 16));
        }));
    }
    function wait(delay) {
        return new Promise((resolve) => setTimeout(resolve, delay));
    }

    /**
     *  The **FixedNumber** class permits using values with decimal places,
     *  using fixed-pont math.
     *
     *  Fixed-point math is still based on integers under-the-hood, but uses an
     *  internal offset to store fractional components below, and each operation
     *  corrects for this after each operation.
     *
     *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]
     */
    const BN_N1 = BigInt(-1);
    const BN_0$8 = BigInt(0);
    const BN_1$4 = BigInt(1);
    const BN_5 = BigInt(5);
    const _guard$5 = {};
    // Constant to pull zeros from for multipliers
    let Zeros$1 = "0000";
    while (Zeros$1.length < 80) {
        Zeros$1 += Zeros$1;
    }
    // Returns a string "1" followed by decimal "0"s
    function getTens(decimals) {
        let result = Zeros$1;
        while (result.length < decimals) {
            result += result;
        }
        return BigInt("1" + result.substring(0, decimals));
    }
    function checkValue(val, format, safeOp) {
        const width = BigInt(format.width);
        if (format.signed) {
            const limit = (BN_1$4 << (width - BN_1$4));
            assert(safeOp == null || (val >= -limit && val < limit), "overflow", "NUMERIC_FAULT", {
                operation: safeOp, fault: "overflow", value: val
            });
            if (val > BN_0$8) {
                val = fromTwos(mask(val, width), width);
            }
            else {
                val = -fromTwos(mask(-val, width), width);
            }
        }
        else {
            const limit = (BN_1$4 << width);
            assert(safeOp == null || (val >= 0 && val < limit), "overflow", "NUMERIC_FAULT", {
                operation: safeOp, fault: "overflow", value: val
            });
            val = (((val % limit) + limit) % limit) & (limit - BN_1$4);
        }
        return val;
    }
    function getFormat(value) {
        if (typeof (value) === "number") {
            value = `fixed128x${value}`;
        }
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof (value) === "string") {
            // Parse the format string
            if (value === "fixed") ;
            else if (value === "ufixed") {
                signed = false;
            }
            else {
                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                assertArgument(match, "invalid fixed format", "format", value);
                signed = (match[1] !== "u");
                width = parseInt(match[2]);
                decimals = parseInt(match[3]);
            }
        }
        else if (value) {
            // Extract the values from the object
            const v = value;
            const check = (key, type, defaultValue) => {
                if (v[key] == null) {
                    return defaultValue;
                }
                assertArgument(typeof (v[key]) === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
                return v[key];
            };
            signed = check("signed", "boolean", signed);
            width = check("width", "number", width);
            decimals = check("decimals", "number", decimals);
        }
        assertArgument((width % 8) === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
        assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
        const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        return { signed, width, decimals, name };
    }
    function toString(val, decimals) {
        let negative = "";
        if (val < BN_0$8) {
            negative = "-";
            val *= BN_N1;
        }
        let str = val.toString();
        // No decimal point for whole values
        if (decimals === 0) {
            return (negative + str);
        }
        // Pad out to the whole component (including a whole digit)
        while (str.length <= decimals) {
            str = Zeros$1 + str;
        }
        // Insert the decimal point
        const index = str.length - decimals;
        str = str.substring(0, index) + "." + str.substring(index);
        // Trim the whole component (leaving at least one 0)
        while (str[0] === "0" && str[1] !== ".") {
            str = str.substring(1);
        }
        // Trim the decimal component (leaving at least one 0)
        while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
            str = str.substring(0, str.length - 1);
        }
        return (negative + str);
    }
    /**
     *  A FixedNumber represents a value over its [[FixedFormat]]
     *  arithmetic field.
     *
     *  A FixedNumber can be used to perform math, losslessly, on
     *  values which have decmial places.
     *
     *  A FixedNumber has a fixed bit-width to store values in, and stores all
     *  values internally by multiplying the value by 10 raised to the power of
     *  %%decimals%%.
     *
     *  If operations are performed that cause a value to grow too high (close to
     *  positive infinity) or too low (close to negative infinity), the value
     *  is said to //overflow//.
     *
     *  For example, an 8-bit signed value, with 0 decimals may only be within
     *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become
     *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.
     *
     *  Many operation have a normal and //unsafe// variant. The normal variant
     *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//
     *  variant will silently allow overflow, corrupting its value value.
     *
     *  If operations are performed that cause a value to become too small
     *  (close to zero), the value loses precison and is said to //underflow//.
     *
     *  For example, an value with 1 decimal place may store a number as small
     *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit
     *  into 1 decimal place, so underflow occurs which means precision is lost
     *  and the value becomes ``0``.
     *
     *  Some operations have a normal and //signalling// variant. The normal
     *  variant will silently ignore underflow, while the //signalling// variant
     *  will thow a [[NumericFaultError]] on underflow.
     */
    class FixedNumber {
        /**
         *  The specific fixed-point arithmetic field for this value.
         */
        format;
        #format;
        // The actual value (accounting for decimals)
        #val;
        // A base-10 value to multiple values by to maintain the magnitude
        #tens;
        /**
         *  This is a property so console.log shows a human-meaningful value.
         *
         *  @private
         */
        _value;
        // Use this when changing this file to get some typing info,
        // but then switch to any to mask the internal type
        //constructor(guard: any, value: bigint, format: _FixedFormat) {
        /**
         *  @private
         */
        constructor(guard, value, format) {
            assertPrivate(guard, _guard$5, "FixedNumber");
            this.#val = value;
            this.#format = format;
            const _value = toString(value, format.decimals);
            defineProperties(this, { format: format.name, _value });
            this.#tens = getTens(format.decimals);
        }
        /**
         *  If true, negative values are permitted, otherwise only
         *  positive values and zero are allowed.
         */
        get signed() { return this.#format.signed; }
        /**
         *  The number of bits available to store the value.
         */
        get width() { return this.#format.width; }
        /**
         *  The number of decimal places in the fixed-point arithment field.
         */
        get decimals() { return this.#format.decimals; }
        /**
         *  The value as an integer, based on the smallest unit the
         *  [[decimals]] allow.
         */
        get value() { return this.#val; }
        #checkFormat(other) {
            assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
        }
        #checkValue(val, safeOp) {
            /*
                    const width = BigInt(this.width);
                    if (this.signed) {
                        const limit = (BN_1 << (width - BN_1));
                        assert(safeOp == null || (val >= -limit  && val < limit), "overflow", "NUMERIC_FAULT", {
                            operation: <string>safeOp, fault: "overflow", value: val
                        });
            
                        if (val > BN_0) {
                            val = fromTwos(mask(val, width), width);
                        } else {
                            val = -fromTwos(mask(-val, width), width);
                        }
            
                    } else {
                        const masked = mask(val, width);
                        assert(safeOp == null || (val >= 0 && val === masked), "overflow", "NUMERIC_FAULT", {
                            operation: <string>safeOp, fault: "overflow", value: val
                        });
                        val = masked;
                    }
            */
            val = checkValue(val, this.#format, safeOp);
            return new FixedNumber(_guard$5, val, this.#format);
        }
        #add(o, safeOp) {
            this.#checkFormat(o);
            return this.#checkValue(this.#val + o.#val, safeOp);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% added
         *  to %%other%%, ignoring overflow.
         */
        addUnsafe(other) { return this.#add(other); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% added
         *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        add(other) { return this.#add(other, "add"); }
        #sub(o, safeOp) {
            this.#checkFormat(o);
            return this.#checkValue(this.#val - o.#val, safeOp);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
         *  from %%this%%, ignoring overflow.
         */
        subUnsafe(other) { return this.#sub(other); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
         *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        sub(other) { return this.#sub(other, "sub"); }
        #mul(o, safeOp) {
            this.#checkFormat(o);
            return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%, ignoring overflow and underflow (precision loss).
         */
        mulUnsafe(other) { return this.#mul(other); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs.
         */
        mul(other) { return this.#mul(other, "mul"); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
         *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
         *  occurs or if underflow (precision loss) occurs.
         */
        mulSignal(other) {
            this.#checkFormat(other);
            const value = this.#val * other.#val;
            assert((value % this.#tens) === BN_0$8, "precision lost during signalling mul", "NUMERIC_FAULT", {
                operation: "mulSignal", fault: "underflow", value: this
            });
            return this.#checkValue(value / this.#tens, "mulSignal");
        }
        #div(o, safeOp) {
            assert(o.#val !== BN_0$8, "division by zero", "NUMERIC_FAULT", {
                operation: "div", fault: "divide-by-zero", value: this
            });
            this.#checkFormat(o);
            return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);
        }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%, ignoring underflow (precision loss). A
         *  [[NumericFaultError]] is thrown if overflow occurs.
         */
        divUnsafe(other) { return this.#div(other); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%, ignoring underflow (precision loss). A
         *  [[NumericFaultError]] is thrown if overflow occurs.
         */
        div(other) { return this.#div(other, "div"); }
        /**
         *  Returns a new [[FixedNumber]] with the result of %%this%% divided
         *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
         *  (precision loss) occurs.
         */
        divSignal(other) {
            assert(other.#val !== BN_0$8, "division by zero", "NUMERIC_FAULT", {
                operation: "div", fault: "divide-by-zero", value: this
            });
            this.#checkFormat(other);
            const value = (this.#val * this.#tens);
            assert((value % other.#val) === BN_0$8, "precision lost during signalling div", "NUMERIC_FAULT", {
                operation: "divSignal", fault: "underflow", value: this
            });
            return this.#checkValue(value / other.#val, "divSignal");
        }
        /**
         *  Returns a comparison result between %%this%% and %%other%%.
         *
         *  This is suitable for use in sorting, where ``-1`` implies %%this%%
         *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
         *  both are equal.
         */
        cmp(other) {
            let a = this.value, b = other.value;
            // Coerce a and b to the same magnitude
            const delta = this.decimals - other.decimals;
            if (delta > 0) {
                b *= getTens(delta);
            }
            else if (delta < 0) {
                a *= getTens(-delta);
            }
            // Comnpare
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        }
        /**
         *  Returns true if %%other%% is equal to %%this%%.
         */
        eq(other) { return this.cmp(other) === 0; }
        /**
         *  Returns true if %%other%% is less than to %%this%%.
         */
        lt(other) { return this.cmp(other) < 0; }
        /**
         *  Returns true if %%other%% is less than or equal to %%this%%.
         */
        lte(other) { return this.cmp(other) <= 0; }
        /**
         *  Returns true if %%other%% is greater than to %%this%%.
         */
        gt(other) { return this.cmp(other) > 0; }
        /**
         *  Returns true if %%other%% is greater than or equal to %%this%%.
         */
        gte(other) { return this.cmp(other) >= 0; }
        /**
         *  Returns a new [[FixedNumber]] which is the largest **integer**
         *  that is less than or equal to %%this%%.
         *
         *  The decimal component of the result will always be ``0``.
         */
        floor() {
            let val = this.#val;
            if (this.#val < BN_0$8) {
                val -= this.#tens - BN_1$4;
            }
            val = (this.#val / this.#tens) * this.#tens;
            return this.#checkValue(val, "floor");
        }
        /**
         *  Returns a new [[FixedNumber]] which is the smallest **integer**
         *  that is greater than or equal to %%this%%.
         *
         *  The decimal component of the result will always be ``0``.
         */
        ceiling() {
            let val = this.#val;
            if (this.#val > BN_0$8) {
                val += this.#tens - BN_1$4;
            }
            val = (this.#val / this.#tens) * this.#tens;
            return this.#checkValue(val, "ceiling");
        }
        /**
         *  Returns a new [[FixedNumber]] with the decimal component
         *  rounded up on ties at %%decimals%% places.
         */
        round(decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // Not enough precision to not already be rounded
            if (decimals >= this.decimals) {
                return this;
            }
            const delta = this.decimals - decimals;
            const bump = BN_5 * getTens(delta - 1);
            let value = this.value + bump;
            const tens = getTens(delta);
            value = (value / tens) * tens;
            checkValue(value, this.#format, "round");
            return new FixedNumber(_guard$5, value, this.#format);
        }
        /**
         *  Returns true if %%this%% is equal to ``0``.
         */
        isZero() { return (this.#val === BN_0$8); }
        /**
         *  Returns true if %%this%% is less than ``0``.
         */
        isNegative() { return (this.#val < BN_0$8); }
        /**
         *  Returns the string representation of %%this%%.
         */
        toString() { return this._value; }
        /**
         *  Returns a float approximation.
         *
         *  Due to IEEE 754 precission (or lack thereof), this function
         *  can only return an approximation and most values will contain
         *  rounding errors.
         */
        toUnsafeFloat() { return parseFloat(this.toString()); }
        /**
         *  Return a new [[FixedNumber]] with the same value but has had
         *  its field set to %%format%%.
         *
         *  This will throw if the value cannot fit into %%format%%.
         */
        toFormat(format) {
            return FixedNumber.fromString(this.toString(), format);
        }
        /**
         *  Creates a new [[FixedNumber]] for %%value%% divided by
         *  %%decimal%% places with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
         *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
         *  or underflow (precision loss).
         */
        static fromValue(_value, _decimals, _format) {
            const decimals = (_decimals == null) ? 0 : getNumber(_decimals);
            const format = getFormat(_format);
            let value = getBigInt(_value, "value");
            const delta = decimals - format.decimals;
            if (delta > 0) {
                const tens = getTens(delta);
                assert((value % tens) === BN_0$8, "value loses precision for format", "NUMERIC_FAULT", {
                    operation: "fromValue", fault: "underflow", value: _value
                });
                value /= tens;
            }
            else if (delta < 0) {
                value *= getTens(-delta);
            }
            checkValue(value, format, "fromValue");
            return new FixedNumber(_guard$5, value, format);
        }
        /**
         *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
         *  in %%format%%, either due to overflow or underflow (precision loss).
         */
        static fromString(_value, _format) {
            const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
            assertArgument(match && (match[2].length + match[3].length) > 0, "invalid FixedNumber string value", "value", _value);
            const format = getFormat(_format);
            let whole = (match[2] || "0"), decimal = (match[3] || "");
            // Pad out the decimals
            while (decimal.length < format.decimals) {
                decimal += Zeros$1;
            }
            // Check precision is safe
            assert(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
                operation: "fromString", fault: "underflow", value: _value
            });
            // Remove extra padding
            decimal = decimal.substring(0, format.decimals);
            const value = BigInt(match[1] + whole + decimal);
            checkValue(value, format, "fromString");
            return new FixedNumber(_guard$5, value, format);
        }
        /**
         *  Creates a new [[FixedNumber]] with the big-endian representation
         *  %%value%% with %%format%%.
         *
         *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
         *  in %%format%% due to overflow.
         */
        static fromBytes(_value, _format) {
            let value = toBigInt(getBytes(_value, "value"));
            const format = getFormat(_format);
            if (format.signed) {
                value = fromTwos(value, format.width);
            }
            checkValue(value, format, "fromBytes");
            return new FixedNumber(_guard$5, value, format);
        }
    }
    //const f1 = FixedNumber.fromString("12.56", "fixed16x2");
    //const f2 = FixedNumber.fromString("0.3", "fixed16x2");
    //console.log(f1.divSignal(f2));
    //const BUMP = FixedNumber.from("0.5");

    //See: https://github.com/ethereum/wiki/wiki/RLP
    function hexlifyByte(value) {
        let result = value.toString(16);
        while (result.length < 2) {
            result = "0" + result;
        }
        return "0x" + result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            assert(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
                buffer: data, length, offset
            });
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        assert(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
            buffer: data, length: 0, offset: 1
        });
        const checkOffset = (offset) => {
            assert(offset <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
                buffer: data, length: data.length, offset
            });
        };
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            checkOffset(offset + 1 + lengthLength);
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            checkOffset(offset + 1 + lengthLength + length);
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            checkOffset(offset + 1 + length);
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            checkOffset(offset + 1 + lengthLength);
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            checkOffset(offset + 1 + lengthLength + length);
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            checkOffset(offset + 1 + length);
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlifyByte(data[offset]) };
    }
    /**
     *  Decodes %%data%% into the structured data it represents.
     */
    function decodeRlp(_data) {
        const data = getBytes(_data, "data");
        const decoded = _decode(data, 0);
        assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
        return decoded.result;
    }

    //See: https://github.com/ethereum/wiki/wiki/RLP
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        const data = Array.prototype.slice.call(getBytes(object, "object"));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    const nibbles = "0123456789abcdef";
    /**
     *  Encodes %%object%% as an RLP-encoded [[DataHexString]].
     */
    function encodeRlp(object) {
        let result = "0x";
        for (const v of _encode(object)) {
            result += nibbles[v >> 4];
            result += nibbles[v & 0xf];
        }
        return result;
    }

    /**
     *  Most interactions with Ethereum requires integer values, which use
     *  the smallest magnitude unit.
     *
     *  For example, imagine dealing with dollars and cents. Since dollars
     *  are divisible, non-integer values are possible, such as ``$10.77``.
     *  By using the smallest indivisible unit (i.e. cents), the value can
     *  be kept as the integer ``1077``.
     *
     *  When receiving decimal input from the user (as a decimal string),
     *  the value should be converted to an integer and when showing a user
     *  a value, the integer value should be converted to a decimal string.
     *
     *  This creates a clear distinction, between values to be used by code
     *  (integers) and values used for display logic to users (decimals).
     *
     *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,
     *  where each individual unit is called a //wei//.
     *
     *  @_subsection api/utils:Unit Conversion  [about-units]
     */
    const names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    /**
     *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal
     *  places. The %%unit%% may be the number of decimal places or the name of
     *  a unit (e.g. ``"gwei"`` for 9 decimal places).
     *
     */
    function formatUnits(value, unit) {
        let decimals = 18;
        if (typeof (unit) === "string") {
            const index = names.indexOf(unit);
            assertArgument(index >= 0, "invalid unit", "unit", unit);
            decimals = 3 * index;
        }
        else if (unit != null) {
            decimals = getNumber(unit, "unit");
        }
        return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
    }
    /**
     *  Converts the //decimal string// %%value%% to a BigInt, assuming
     *  %%unit%% decimal places. The %%unit%% may the number of decimal places
     *  or the name of a unit (e.g. ``"gwei"`` for 9 decimal places).
     */
    function parseUnits$1(value, unit) {
        assertArgument(typeof (value) === "string", "value must be a string", "value", value);
        let decimals = 18;
        if (typeof (unit) === "string") {
            const index = names.indexOf(unit);
            assertArgument(index >= 0, "invalid unit", "unit", unit);
            decimals = 3 * index;
        }
        else if (unit != null) {
            decimals = getNumber(unit, "unit");
        }
        return FixedNumber.fromString(value, { decimals, width: 512 }).value;
    }
    /**
     *  Converts %%value%% into a //decimal string// using 18 decimal places.
     */
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    /**
     *  Converts the //decimal string// %%ether%% to a BigInt, using 18
     *  decimal places.
     */
    function parseEther(ether) {
        return parseUnits$1(ether, 18);
    }

    /**
     *  Explain UUID and link to RFC here.
     *
     *  @_subsection: api/utils:UUID  [about-uuid]
     */
    /**
     *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.
     *
     *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
     */
    function uuidV4(randomBytes) {
        const bytes = getBytes(randomBytes, "randomBytes");
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        const value = hexlify(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }

    /**
     * @_ignore:
     */
    const WordSize = 32;
    const Padding = new Uint8Array(WordSize);
    // Properties used to immediate pass through to the underlying object
    // - `then` is used to detect if an object is a Promise for await
    const passProperties$1 = ["then"];
    const _guard$4 = {};
    const resultNames = new WeakMap();
    function getNames(result) {
        return resultNames.get(result);
    }
    function setNames(result, names) {
        resultNames.set(result, names);
    }
    function throwError(name, error) {
        const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
        wrapped.error = error;
        throw wrapped;
    }
    function toObject(names, items, deep) {
        if (names.indexOf(null) >= 0) {
            return items.map((item, index) => {
                if (item instanceof Result) {
                    return toObject(getNames(item), item, deep);
                }
                return item;
            });
        }
        return names.reduce((accum, name, index) => {
            let item = items.getValue(name);
            if (!(name in accum)) {
                if (deep && item instanceof Result) {
                    item = toObject(getNames(item), item, deep);
                }
                accum[name] = item;
            }
            return accum;
        }, {});
    }
    /**
     *  A [[Result]] is a sub-class of Array, which allows accessing any
     *  of its values either positionally by its index or, if keys are
     *  provided by its name.
     *
     *  @_docloc: api/abi
     */
    class Result extends Array {
        // No longer used; but cannot be removed as it will remove the
        // #private field from the .d.ts which may break backwards
        // compatibility
        #names;
        /**
         *  @private
         */
        constructor(...args) {
            // To properly sub-class Array so the other built-in
            // functions work, the constructor has to behave fairly
            // well. So, in the event we are created via fromItems()
            // we build the read-only Result object we want, but on
            // any other input, we use the default constructor
            // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);
            const guard = args[0];
            let items = args[1];
            let names = (args[2] || []).slice();
            let wrap = true;
            if (guard !== _guard$4) {
                items = args;
                names = [];
                wrap = false;
            }
            // Can't just pass in ...items since an array of length 1
            // is a special case in the super.
            super(items.length);
            items.forEach((item, index) => { this[index] = item; });
            // Find all unique keys
            const nameCounts = names.reduce((accum, name) => {
                if (typeof (name) === "string") {
                    accum.set(name, (accum.get(name) || 0) + 1);
                }
                return accum;
            }, (new Map()));
            // Remove any key thats not unique
            setNames(this, Object.freeze(items.map((item, index) => {
                const name = names[index];
                if (name != null && nameCounts.get(name) === 1) {
                    return name;
                }
                return null;
            })));
            // Dummy operations to prevent TypeScript from complaining
            this.#names = [];
            if (this.#names == null) {
                void (this.#names);
            }
            if (!wrap) {
                return;
            }
            // A wrapped Result is immutable
            Object.freeze(this);
            // Proxy indices and names so we can trap deferred errors
            const proxy = new Proxy(this, {
                get: (target, prop, receiver) => {
                    if (typeof (prop) === "string") {
                        // Index accessor
                        if (prop.match(/^[0-9]+$/)) {
                            const index = getNumber(prop, "%index");
                            if (index < 0 || index >= this.length) {
                                throw new RangeError("out of result range");
                            }
                            const item = target[index];
                            if (item instanceof Error) {
                                throwError(`index ${index}`, item);
                            }
                            return item;
                        }
                        // Pass important checks (like `then` for Promise) through
                        if (passProperties$1.indexOf(prop) >= 0) {
                            return Reflect.get(target, prop, receiver);
                        }
                        const value = target[prop];
                        if (value instanceof Function) {
                            // Make sure functions work with private variables
                            // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding
                            return function (...args) {
                                return value.apply((this === receiver) ? target : this, args);
                            };
                        }
                        else if (!(prop in target)) {
                            // Possible name accessor
                            return target.getValue.apply((this === receiver) ? target : this, [prop]);
                        }
                    }
                    return Reflect.get(target, prop, receiver);
                }
            });
            setNames(proxy, getNames(this));
            return proxy;
        }
        /**
         *  Returns the Result as a normal Array. If %%deep%%, any children
         *  which are Result objects are also converted to a normal Array.
         *
         *  This will throw if there are any outstanding deferred
         *  errors.
         */
        toArray(deep) {
            const result = [];
            this.forEach((item, index) => {
                if (item instanceof Error) {
                    throwError(`index ${index}`, item);
                }
                if (deep && item instanceof Result) {
                    item = item.toArray(deep);
                }
                result.push(item);
            });
            return result;
        }
        /**
         *  Returns the Result as an Object with each name-value pair. If
         *  %%deep%%, any children which are Result objects are also
         *  converted to an Object.
         *
         *  This will throw if any value is unnamed, or if there are
         *  any outstanding deferred errors.
         */
        toObject(deep) {
            const names = getNames(this);
            return names.reduce((accum, name, index) => {
                assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
                    operation: "toObject()"
                });
                return toObject(names, this, deep);
            }, {});
        }
        /**
         *  @_ignore
         */
        slice(start, end) {
            if (start == null) {
                start = 0;
            }
            if (start < 0) {
                start += this.length;
                if (start < 0) {
                    start = 0;
                }
            }
            if (end == null) {
                end = this.length;
            }
            if (end < 0) {
                end += this.length;
                if (end < 0) {
                    end = 0;
                }
            }
            if (end > this.length) {
                end = this.length;
            }
            const _names = getNames(this);
            const result = [], names = [];
            for (let i = start; i < end; i++) {
                result.push(this[i]);
                names.push(_names[i]);
            }
            return new Result(_guard$4, result, names);
        }
        /**
         *  @_ignore
         */
        filter(callback, thisArg) {
            const _names = getNames(this);
            const result = [], names = [];
            for (let i = 0; i < this.length; i++) {
                const item = this[i];
                if (item instanceof Error) {
                    throwError(`index ${i}`, item);
                }
                if (callback.call(thisArg, item, i, this)) {
                    result.push(item);
                    names.push(_names[i]);
                }
            }
            return new Result(_guard$4, result, names);
        }
        /**
         *  @_ignore
         */
        map(callback, thisArg) {
            const result = [];
            for (let i = 0; i < this.length; i++) {
                const item = this[i];
                if (item instanceof Error) {
                    throwError(`index ${i}`, item);
                }
                result.push(callback.call(thisArg, item, i, this));
            }
            return result;
        }
        /**
         *  Returns the value for %%name%%.
         *
         *  Since it is possible to have a key whose name conflicts with
         *  a method on a [[Result]] or its superclass Array, or any
         *  JavaScript keyword, this ensures all named values are still
         *  accessible by name.
         */
        getValue(name) {
            const index = getNames(this).indexOf(name);
            if (index === -1) {
                return undefined;
            }
            const value = this[index];
            if (value instanceof Error) {
                throwError(`property ${JSON.stringify(name)}`, value.error);
            }
            return value;
        }
        /**
         *  Creates a new [[Result]] for %%items%% with each entry
         *  also accessible by its corresponding name in %%keys%%.
         */
        static fromItems(items, keys) {
            return new Result(_guard$4, items, keys);
        }
    }
    /**
     *  Returns all errors found in a [[Result]].
     *
     *  Since certain errors encountered when creating a [[Result]] do
     *  not impact the ability to continue parsing data, they are
     *  deferred until they are actually accessed. Hence a faulty string
     *  in an Event that is never used does not impact the program flow.
     *
     *  However, sometimes it may be useful to access, identify or
     *  validate correctness of a [[Result]].
     *
     *  @_docloc api/abi
     */
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    function getValue$1(value) {
        let bytes = toBeArray(value);
        assert(bytes.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: WordSize, offset: bytes.length });
        if (bytes.length !== WordSize) {
            bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));
        }
        return bytes;
    }
    /**
     *  @_ignore
     */
    class Coder {
        // The coder name:
        //   - address, uint256, tuple, array, etc.
        name;
        // The fully expanded type, including composite types:
        //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
        type;
        // The localName bound in the signature, in this example it is "baz":
        //   - tuple(address foo, uint bar) baz
        localName;
        // Whether this type is dynamic:
        //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
        //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
        dynamic;
        constructor(name, type, localName, dynamic) {
            defineProperties(this, { name, type, localName, dynamic }, {
                name: "string", type: "string", localName: "string", dynamic: "boolean"
            });
        }
        _throwError(message, value) {
            assertArgument(false, message, this.localName, value);
        }
    }
    /**
     *  @_ignore
     */
    class Writer {
        // An array of WordSize lengthed objects to concatenation
        #data;
        #dataLength;
        constructor() {
            this.#data = [];
            this.#dataLength = 0;
        }
        get data() {
            return concat(this.#data);
        }
        get length() { return this.#dataLength; }
        #writeData(data) {
            this.#data.push(data);
            this.#dataLength += data.length;
            return data.length;
        }
        appendWriter(writer) {
            return this.#writeData(getBytesCopy(writer.data));
        }
        // Arrayish item; pad on the right to *nearest* WordSize
        writeBytes(value) {
            let bytes = getBytesCopy(value);
            const paddingOffset = bytes.length % WordSize;
            if (paddingOffset) {
                bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));
            }
            return this.#writeData(bytes);
        }
        // Numeric item; pad on the left *to* WordSize
        writeValue(value) {
            return this.#writeData(getValue$1(value));
        }
        // Inserts a numeric place-holder, returning a callback that can
        // be used to asjust the value later
        writeUpdatableValue() {
            const offset = this.#data.length;
            this.#data.push(Padding);
            this.#dataLength += WordSize;
            return (value) => {
                this.#data[offset] = getValue$1(value);
            };
        }
    }
    /**
     *  @_ignore
     */
    class Reader {
        // Allows incomplete unpadded data to be read; otherwise an error
        // is raised if attempting to overrun the buffer. This is required
        // to deal with an old Solidity bug, in which event data for
        // external (not public thoguh) was tightly packed.
        allowLoose;
        #data;
        #offset;
        #bytesRead;
        #parent;
        #maxInflation;
        constructor(data, allowLoose, maxInflation) {
            defineProperties(this, { allowLoose: !!allowLoose });
            this.#data = getBytesCopy(data);
            this.#bytesRead = 0;
            this.#parent = null;
            this.#maxInflation = (maxInflation != null) ? maxInflation : 1024;
            this.#offset = 0;
        }
        get data() { return hexlify(this.#data); }
        get dataLength() { return this.#data.length; }
        get consumed() { return this.#offset; }
        get bytes() { return new Uint8Array(this.#data); }
        #incrementBytesRead(count) {
            if (this.#parent) {
                return this.#parent.#incrementBytesRead(count);
            }
            this.#bytesRead += count;
            // Check for excessive inflation (see: #4537)
            assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\/github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
                buffer: getBytesCopy(this.#data), offset: this.#offset,
                length: count, info: {
                    bytesRead: this.#bytesRead,
                    dataLength: this.dataLength
                }
            });
        }
        #peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / WordSize) * WordSize;
            if (this.#offset + alignedLength > this.#data.length) {
                if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
                    alignedLength = length;
                }
                else {
                    assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
                        buffer: getBytesCopy(this.#data),
                        length: this.#data.length,
                        offset: this.#offset + alignedLength
                    });
                }
            }
            return this.#data.slice(this.#offset, this.#offset + alignedLength);
        }
        // Create a sub-reader with the same underlying data, but offset
        subReader(offset) {
            const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
            reader.#parent = this;
            return reader;
        }
        // Read bytes
        readBytes(length, loose) {
            let bytes = this.#peekBytes(0, length, !!loose);
            this.#incrementBytesRead(length);
            this.#offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        // Read a numeric values
        readValue() {
            return toBigInt(this.readBytes(WordSize));
        }
        readIndex() {
            return toNumber(this.readBytes(WordSize));
        }
    }

    function number(n) {
        if (!Number.isSafeInteger(n) || n < 0)
            throw new Error(`Wrong positive integer: ${n}`);
    }
    function bytes(b, ...lengths) {
        if (!(b instanceof Uint8Array))
            throw new Error('Expected Uint8Array');
        if (lengths.length > 0 && !lengths.includes(b.length))
            throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    function hash(hash) {
        if (typeof hash !== 'function' || typeof hash.create !== 'function')
            throw new Error('Hash should be wrapped by utils.wrapConstructor');
        number(hash.outputLen);
        number(hash.blockLen);
    }
    function exists(instance, checkFinished = true) {
        if (instance.destroyed)
            throw new Error('Hash instance has been destroyed');
        if (checkFinished && instance.finished)
            throw new Error('Hash#digest() has already been called');
    }
    function output(out, instance) {
        bytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
            throw new Error(`digestInto() expects output buffer of length at least ${min}`);
        }
    }

    const crypto$1 = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
    // node.js versions earlier than v19 don't declare it in global scope.
    // For node.js, package.json#exports field mapping rewrites import
    // from `crypto` to `cryptoNode`, which imports native module.
    // Makes the utils un-importable in browsers without a bundler.
    // Once node.js 18 is deprecated, we can just drop the import.
    const u8a$1 = (a) => a instanceof Uint8Array;
    const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    // Cast array to view
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    // The rotate right (circular right shift) operation for uint32
    const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
    // big-endian hardware is rare. Just in case someone still decides to run hashes:
    // early-throw an error because we don't support BE yet.
    const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
    if (!isLE)
        throw new Error('Non little-endian hardware is not supported');
    // There is no setImmediate in browser and setTimeout is slow.
    // call of async fn will return Promise, which will be fullfiled only on
    // next scheduler queue processing step and this is exactly what we need.
    const nextTick = async () => { };
    // Returns control to thread each 'tick' ms to avoid blocking
    async function asyncLoop(iters, tick, cb) {
        let ts = Date.now();
        for (let i = 0; i < iters; i++) {
            cb(i);
            // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
            const diff = Date.now() - ts;
            if (diff >= 0 && diff < tick)
                continue;
            await nextTick();
            ts += diff;
        }
    }
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes$1(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    /**
     * Normalizes (non-hex) string or Uint8Array to Uint8Array.
     * Warning: when Uint8Array is passed, it would NOT get copied.
     * Keep in mind for future mutable operations.
     */
    function toBytes(data) {
        if (typeof data === 'string')
            data = utf8ToBytes$1(data);
        if (!u8a$1(data))
            throw new Error(`expected Uint8Array, got ${typeof data}`);
        return data;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes$1(...arrays) {
        const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
        let pad = 0; // walk through each item, ensure they have proper type
        arrays.forEach((a) => {
            if (!u8a$1(a))
                throw new Error('Uint8Array expected');
            r.set(a, pad);
            pad += a.length;
        });
        return r;
    }
    // For runtime check if class implements interface
    class Hash {
        // Safe version that clones internal state
        clone() {
            return this._cloneInto();
        }
    }
    const toStr = {}.toString;
    function checkOpts(defaults, opts) {
        if (opts !== undefined && toStr.call(opts) !== '[object Object]')
            throw new Error('Options should be object or undefined');
        const merged = Object.assign(defaults, opts);
        return merged;
    }
    function wrapConstructor(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
    }
    /**
     * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
     */
    function randomBytes$2(bytesLength = 32) {
        if (crypto$1 && typeof crypto$1.getRandomValues === 'function') {
            return crypto$1.getRandomValues(new Uint8Array(bytesLength));
        }
        throw new Error('crypto.getRandomValues must be defined');
    }

    // HMAC (RFC 2104)
    class HMAC extends Hash {
        constructor(hash$1, _key) {
            super();
            this.finished = false;
            this.destroyed = false;
            hash(hash$1);
            const key = toBytes(_key);
            this.iHash = hash$1.create();
            if (typeof this.iHash.update !== 'function')
                throw new Error('Expected instance of class which extends utils.Hash');
            this.blockLen = this.iHash.blockLen;
            this.outputLen = this.iHash.outputLen;
            const blockLen = this.blockLen;
            const pad = new Uint8Array(blockLen);
            // blockLen can be bigger than outputLen
            pad.set(key.length > blockLen ? hash$1.create().update(key).digest() : key);
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36;
            this.iHash.update(pad);
            // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
            this.oHash = hash$1.create();
            // Undo internal XOR && apply outer XOR
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36 ^ 0x5c;
            this.oHash.update(pad);
            pad.fill(0);
        }
        update(buf) {
            exists(this);
            this.iHash.update(buf);
            return this;
        }
        digestInto(out) {
            exists(this);
            bytes(out, this.outputLen);
            this.finished = true;
            this.iHash.digestInto(out);
            this.oHash.update(out);
            this.oHash.digestInto(out);
            this.destroy();
        }
        digest() {
            const out = new Uint8Array(this.oHash.outputLen);
            this.digestInto(out);
            return out;
        }
        _cloneInto(to) {
            // Create new instance without calling constructor since key already in state and we don't know it.
            to || (to = Object.create(Object.getPrototypeOf(this), {}));
            const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
            to = to;
            to.finished = finished;
            to.destroyed = destroyed;
            to.blockLen = blockLen;
            to.outputLen = outputLen;
            to.oHash = oHash._cloneInto(to.oHash);
            to.iHash = iHash._cloneInto(to.iHash);
            return to;
        }
        destroy() {
            this.destroyed = true;
            this.oHash.destroy();
            this.iHash.destroy();
        }
    }
    /**
     * HMAC: RFC2104 message authentication code.
     * @param hash - function that would be used e.g. sha256
     * @param key - message key
     * @param message - message data
     */
    const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    hmac.create = (hash, key) => new HMAC(hash, key);

    // Common prologue and epilogue for sync/async functions
    function pbkdf2Init(hash$1, _password, _salt, _opts) {
        hash(hash$1);
        const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
        const { c, dkLen, asyncTick } = opts;
        number(c);
        number(dkLen);
        number(asyncTick);
        if (c < 1)
            throw new Error('PBKDF2: iterations (c) should be >= 1');
        const password = toBytes(_password);
        const salt = toBytes(_salt);
        // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
        const DK = new Uint8Array(dkLen);
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        const PRF = hmac.create(hash$1, password);
        const PRFSalt = PRF._cloneInto().update(salt);
        return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
        PRF.destroy();
        PRFSalt.destroy();
        if (prfW)
            prfW.destroy();
        u.fill(0);
        return DK;
    }
    /**
     * PBKDF2-HMAC: RFC 2898 key derivation function
     * @param hash - hash function that would be used e.g. sha256
     * @param password - password from which a derived key is generated
     * @param salt - cryptographic salt
     * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
     */
    function pbkdf2$1(hash, password, salt, opts) {
        const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
        let prfW; // Working copy
        const arr = new Uint8Array(4);
        const view = createView(arr);
        const u = new Uint8Array(PRF.outputLen);
        // DK = T1 + T2 + ⋯ + Tdklen/hlen
        for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
            // Ti = F(Password, Salt, c, i)
            const Ti = DK.subarray(pos, pos + PRF.outputLen);
            view.setInt32(0, ti, false);
            // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
            // U1 = PRF(Password, Salt + INT_32_BE(i))
            (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
            Ti.set(u.subarray(0, Ti.length));
            for (let ui = 1; ui < c; ui++) {
                // Uc = PRF(Password, Uc−1)
                PRF._cloneInto(prfW).update(u).digestInto(u);
                for (let i = 0; i < Ti.length; i++)
                    Ti[i] ^= u[i];
            }
        }
        return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }

    // Polyfill for Safari 14
    function setBigUint64(view, byteOffset, value, isLE) {
        if (typeof view.setBigUint64 === 'function')
            return view.setBigUint64(byteOffset, value, isLE);
        const _32n = BigInt(32);
        const _u32_max = BigInt(0xffffffff);
        const wh = Number((value >> _32n) & _u32_max);
        const wl = Number(value & _u32_max);
        const h = isLE ? 4 : 0;
        const l = isLE ? 0 : 4;
        view.setUint32(byteOffset + h, wh, isLE);
        view.setUint32(byteOffset + l, wl, isLE);
    }
    // Base SHA2 class (RFC 6234)
    class SHA2 extends Hash {
        constructor(blockLen, outputLen, padOffset, isLE) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.padOffset = padOffset;
            this.isLE = isLE;
            this.finished = false;
            this.length = 0;
            this.pos = 0;
            this.destroyed = false;
            this.buffer = new Uint8Array(blockLen);
            this.view = createView(this.buffer);
        }
        update(data) {
            exists(this);
            const { view, buffer, blockLen } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                // Fast path: we have at least one block in input, cast it to view and process
                if (take === blockLen) {
                    const dataView = createView(data);
                    for (; blockLen <= len - pos; pos += blockLen)
                        this.process(dataView, pos);
                    continue;
                }
                buffer.set(data.subarray(pos, pos + take), this.pos);
                this.pos += take;
                pos += take;
                if (this.pos === blockLen) {
                    this.process(view, 0);
                    this.pos = 0;
                }
            }
            this.length += data.length;
            this.roundClean();
            return this;
        }
        digestInto(out) {
            exists(this);
            output(out, this);
            this.finished = true;
            // Padding
            // We can avoid allocation of buffer for padding completely if it
            // was previously not allocated here. But it won't change performance.
            const { buffer, view, blockLen, isLE } = this;
            let { pos } = this;
            // append the bit '1' to the message
            buffer[pos++] = 0b10000000;
            this.buffer.subarray(pos).fill(0);
            // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
            if (this.padOffset > blockLen - pos) {
                this.process(view, 0);
                pos = 0;
            }
            // Pad until full block byte with zeros
            for (let i = pos; i < blockLen; i++)
                buffer[i] = 0;
            // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
            // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
            // So we just write lowest 64 bits of that value.
            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
            this.process(view, 0);
            const oview = createView(out);
            const len = this.outputLen;
            // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
            if (len % 4)
                throw new Error('_sha2: outputLen should be aligned to 32bit');
            const outLen = len / 4;
            const state = this.get();
            if (outLen > state.length)
                throw new Error('_sha2: outputLen bigger than state');
            for (let i = 0; i < outLen; i++)
                oview.setUint32(4 * i, state[i], isLE);
        }
        digest() {
            const { buffer, outputLen } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
        }
        _cloneInto(to) {
            to || (to = new this.constructor());
            to.set(...this.get());
            const { blockLen, buffer, length, finished, destroyed, pos } = this;
            to.length = length;
            to.pos = pos;
            to.finished = finished;
            to.destroyed = destroyed;
            if (length % blockLen)
                to.buffer.set(buffer);
            return to;
        }
    }

    // SHA2-256 need to try 2^128 hashes to execute birthday attack.
    // BTC network is doing 2^67 hashes/sec as per early 2023.
    // Choice: a ? b : c
    const Chi = (a, b, c) => (a & b) ^ (~a & c);
    // Majority function, true if any two inpust is true
    const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
    // Round constants:
    // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
    // prettier-ignore
    const SHA256_K = /* @__PURE__ */ new Uint32Array([
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]);
    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
    // prettier-ignore
    const IV = /* @__PURE__ */ new Uint32Array([
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]);
    // Temporary buffer, not used to store anything between runs
    // Named this way because it matches specification.
    const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    class SHA256 extends SHA2 {
        constructor() {
            super(64, 32, 8, false);
            // We cannot use array here since array allows indexing by variable
            // which means optimizer/compiler cannot use registers.
            this.A = IV[0] | 0;
            this.B = IV[1] | 0;
            this.C = IV[2] | 0;
            this.D = IV[3] | 0;
            this.E = IV[4] | 0;
            this.F = IV[5] | 0;
            this.G = IV[6] | 0;
            this.H = IV[7] | 0;
        }
        get() {
            const { A, B, C, D, E, F, G, H } = this;
            return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
            this.A = A | 0;
            this.B = B | 0;
            this.C = C | 0;
            this.D = D | 0;
            this.E = E | 0;
            this.F = F | 0;
            this.G = G | 0;
            this.H = H | 0;
        }
        process(view, offset) {
            // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4)
                SHA256_W[i] = view.getUint32(offset, false);
            for (let i = 16; i < 64; i++) {
                const W15 = SHA256_W[i - 15];
                const W2 = SHA256_W[i - 2];
                const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
                const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
                SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
            }
            // Compression function main loop, 64 rounds
            let { A, B, C, D, E, F, G, H } = this;
            for (let i = 0; i < 64; i++) {
                const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
                const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
                const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
                const T2 = (sigma0 + Maj(A, B, C)) | 0;
                H = G;
                G = F;
                F = E;
                E = (D + T1) | 0;
                D = C;
                C = B;
                B = A;
                A = (T1 + T2) | 0;
            }
            // Add the compressed chunk to the current hash value
            A = (A + this.A) | 0;
            B = (B + this.B) | 0;
            C = (C + this.C) | 0;
            D = (D + this.D) | 0;
            E = (E + this.E) | 0;
            F = (F + this.F) | 0;
            G = (G + this.G) | 0;
            H = (H + this.H) | 0;
            this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
            SHA256_W.fill(0);
        }
        destroy() {
            this.set(0, 0, 0, 0, 0, 0, 0, 0);
            this.buffer.fill(0);
        }
    }
    /**
     * SHA2-256 hash function
     * @param message - data that would be hashed
     */
    const sha256$1 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

    const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    const _32n = /* @__PURE__ */ BigInt(32);
    // We are not using BigUint64Array, because they are extremely slow as per 2022
    function fromBig(n, le = false) {
        if (le)
            return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
        return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split$1(lst, le = false) {
        let Ah = new Uint32Array(lst.length);
        let Al = new Uint32Array(lst.length);
        for (let i = 0; i < lst.length; i++) {
            const { h, l } = fromBig(lst[i], le);
            [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
    }
    const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
    // for Shift in [0, 32)
    const shrSH = (h, _l, s) => h >>> s;
    const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
    // Right rotate for Shift in [1, 32)
    const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
    const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
    // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
    const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
    const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
    // Right rotate for shift===32 (just swaps l&h)
    const rotr32H = (_h, l) => l;
    const rotr32L = (h, _l) => h;
    // Left rotate for Shift in [1, 32)
    const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
    const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
    // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
    const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
    const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
    // JS uses 32-bit signed integers for bitwise operations which means we cannot
    // simple take carry out of low bit sum by shift, we need to use division.
    function add(Ah, Al, Bh, Bl) {
        const l = (Al >>> 0) + (Bl >>> 0);
        return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
    }
    // Addition with more than 2 elements
    const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
    const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
    const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
    // prettier-ignore
    const u64 = {
        fromBig, split: split$1, toBig,
        shrSH, shrSL,
        rotrSH, rotrSL, rotrBH, rotrBL,
        rotr32H, rotr32L,
        rotlSH, rotlSL, rotlBH, rotlBL,
        add, add3L, add3H, add4L, add4H, add5H, add5L,
    };

    // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
    // prettier-ignore
    const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([
        '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
        '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
        '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
        '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
        '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
        '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
        '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
        '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
        '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
        '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
        '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
        '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
        '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
        '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
        '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
        '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
        '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
        '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
        '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
        '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
    ].map(n => BigInt(n))))();
    // Temporary buffer, not used to store anything between runs
    const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
    const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
    class SHA512 extends SHA2 {
        constructor() {
            super(128, 64, 16, false);
            // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
            // Also looks cleaner and easier to verify with spec.
            // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
            // h -- high 32 bits, l -- low 32 bits
            this.Ah = 0x6a09e667 | 0;
            this.Al = 0xf3bcc908 | 0;
            this.Bh = 0xbb67ae85 | 0;
            this.Bl = 0x84caa73b | 0;
            this.Ch = 0x3c6ef372 | 0;
            this.Cl = 0xfe94f82b | 0;
            this.Dh = 0xa54ff53a | 0;
            this.Dl = 0x5f1d36f1 | 0;
            this.Eh = 0x510e527f | 0;
            this.El = 0xade682d1 | 0;
            this.Fh = 0x9b05688c | 0;
            this.Fl = 0x2b3e6c1f | 0;
            this.Gh = 0x1f83d9ab | 0;
            this.Gl = 0xfb41bd6b | 0;
            this.Hh = 0x5be0cd19 | 0;
            this.Hl = 0x137e2179 | 0;
        }
        // prettier-ignore
        get() {
            const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
            return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
        }
        // prettier-ignore
        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
            this.Ah = Ah | 0;
            this.Al = Al | 0;
            this.Bh = Bh | 0;
            this.Bl = Bl | 0;
            this.Ch = Ch | 0;
            this.Cl = Cl | 0;
            this.Dh = Dh | 0;
            this.Dl = Dl | 0;
            this.Eh = Eh | 0;
            this.El = El | 0;
            this.Fh = Fh | 0;
            this.Fl = Fl | 0;
            this.Gh = Gh | 0;
            this.Gl = Gl | 0;
            this.Hh = Hh | 0;
            this.Hl = Hl | 0;
        }
        process(view, offset) {
            // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4) {
                SHA512_W_H[i] = view.getUint32(offset);
                SHA512_W_L[i] = view.getUint32((offset += 4));
            }
            for (let i = 16; i < 80; i++) {
                // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
                const W15h = SHA512_W_H[i - 15] | 0;
                const W15l = SHA512_W_L[i - 15] | 0;
                const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);
                const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);
                // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
                const W2h = SHA512_W_H[i - 2] | 0;
                const W2l = SHA512_W_L[i - 2] | 0;
                const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);
                const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);
                // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
                const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
                const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
                SHA512_W_H[i] = SUMh | 0;
                SHA512_W_L[i] = SUMl | 0;
            }
            let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
            // Compression function main loop, 80 rounds
            for (let i = 0; i < 80; i++) {
                // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
                const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);
                const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);
                //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
                const CHIh = (Eh & Fh) ^ (~Eh & Gh);
                const CHIl = (El & Fl) ^ (~El & Gl);
                // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
                // prettier-ignore
                const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
                const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
                const T1l = T1ll | 0;
                // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
                const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);
                const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);
                const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
                const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
                Hh = Gh | 0;
                Hl = Gl | 0;
                Gh = Fh | 0;
                Gl = Fl | 0;
                Fh = Eh | 0;
                Fl = El | 0;
                ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
                Dh = Ch | 0;
                Dl = Cl | 0;
                Ch = Bh | 0;
                Cl = Bl | 0;
                Bh = Ah | 0;
                Bl = Al | 0;
                const All = u64.add3L(T1l, sigma0l, MAJl);
                Ah = u64.add3H(All, T1h, sigma0h, MAJh);
                Al = All | 0;
            }
            // Add the compressed chunk to the current hash value
            ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
            ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
            ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
            ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
            ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
            ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
            ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
            ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
            this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
        }
        roundClean() {
            SHA512_W_H.fill(0);
            SHA512_W_L.fill(0);
        }
        destroy() {
            this.buffer.fill(0);
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    const sha512$1 = /* @__PURE__ */ wrapConstructor(() => new SHA512());

    /* Browser Crypto Shims */
    function getGlobal$1() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal$1();
    const crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    function createHash(algo) {
        switch (algo) {
            case "sha256": return sha256$1.create();
            case "sha512": return sha512$1.create();
        }
        assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
    }
    function createHmac(_algo, key) {
        const algo = ({ sha256: sha256$1, sha512: sha512$1 }[_algo]);
        assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
        return hmac.create(algo, key);
    }
    function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
        const algo = ({ sha256: sha256$1, sha512: sha512$1 }[_algo]);
        assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
        return pbkdf2$1(algo, password, salt, { c: iterations, dkLen: keylen });
    }
    function randomBytes$1(length) {
        assert(crypto != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
            operation: "randomBytes"
        });
        assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
        const result = new Uint8Array(length);
        crypto.getRandomValues(result);
        return result;
    }

    /**
     *  An **HMAC** enables verification that a given key was used
     *  to authenticate a payload.
     *
     *  See: [[link-wiki-hmac]]
     *
     *  @_subsection: api/crypto:HMAC  [about-hmac]
     */
    let locked$4 = false;
    const _computeHmac = function (algorithm, key, data) {
        return createHmac(algorithm, key).update(data).digest();
    };
    let __computeHmac = _computeHmac;
    /**
     *  Return the HMAC for %%data%% using the %%key%% key with the underlying
     *  %%algo%% used for compression.
     *
     *  @example:
     *    key = id("some-secret")
     *
     *    // Compute the HMAC
     *    computeHmac("sha256", key, "0x1337")
     *    //_result:
     *
     *    // To compute the HMAC of UTF-8 data, the data must be
     *    // converted to UTF-8 bytes
     *    computeHmac("sha256", key, toUtf8Bytes("Hello World"))
     *    //_result:
     *
     */
    function computeHmac(algorithm, _key, _data) {
        const key = getBytes(_key, "key");
        const data = getBytes(_data, "data");
        return hexlify(__computeHmac(algorithm, key, data));
    }
    computeHmac._ = _computeHmac;
    computeHmac.lock = function () { locked$4 = true; };
    computeHmac.register = function (func) {
        if (locked$4) {
            throw new Error("computeHmac is locked");
        }
        __computeHmac = func;
    };
    Object.freeze(computeHmac);

    // SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
    // It's called a sponge function.
    // Various per round constants calculations
    const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
    const _0n$4 = /* @__PURE__ */ BigInt(0);
    const _1n$5 = /* @__PURE__ */ BigInt(1);
    const _2n$3 = /* @__PURE__ */ BigInt(2);
    const _7n = /* @__PURE__ */ BigInt(7);
    const _256n = /* @__PURE__ */ BigInt(256);
    const _0x71n = /* @__PURE__ */ BigInt(0x71);
    for (let round = 0, R = _1n$5, x = 1, y = 0; round < 24; round++) {
        // Pi
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        // Rotational
        SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
        // Iota
        let t = _0n$4;
        for (let j = 0; j < 7; j++) {
            R = ((R << _1n$5) ^ ((R >> _7n) * _0x71n)) % _256n;
            if (R & _2n$3)
                t ^= _1n$5 << ((_1n$5 << /* @__PURE__ */ BigInt(j)) - _1n$5);
        }
        _SHA3_IOTA.push(t);
    }
    const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split$1(_SHA3_IOTA, true);
    // Left rotation (without 0, 32, 64)
    const rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));
    const rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));
    // Same as keccakf1600, but allows to skip some rounds
    function keccakP(s, rounds = 24) {
        const B = new Uint32Array(5 * 2);
        // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
        for (let round = 24 - rounds; round < 24; round++) {
            // Theta θ
            for (let x = 0; x < 10; x++)
                B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
            for (let x = 0; x < 10; x += 2) {
                const idx1 = (x + 8) % 10;
                const idx0 = (x + 2) % 10;
                const B0 = B[idx0];
                const B1 = B[idx0 + 1];
                const Th = rotlH(B0, B1, 1) ^ B[idx1];
                const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
                for (let y = 0; y < 50; y += 10) {
                    s[x + y] ^= Th;
                    s[x + y + 1] ^= Tl;
                }
            }
            // Rho (ρ) and Pi (π)
            let curH = s[2];
            let curL = s[3];
            for (let t = 0; t < 24; t++) {
                const shift = SHA3_ROTL[t];
                const Th = rotlH(curH, curL, shift);
                const Tl = rotlL(curH, curL, shift);
                const PI = SHA3_PI[t];
                curH = s[PI];
                curL = s[PI + 1];
                s[PI] = Th;
                s[PI + 1] = Tl;
            }
            // Chi (χ)
            for (let y = 0; y < 50; y += 10) {
                for (let x = 0; x < 10; x++)
                    B[x] = s[y + x];
                for (let x = 0; x < 10; x++)
                    s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
            }
            // Iota (ι)
            s[0] ^= SHA3_IOTA_H[round];
            s[1] ^= SHA3_IOTA_L[round];
        }
        B.fill(0);
    }
    class Keccak extends Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
            super();
            this.blockLen = blockLen;
            this.suffix = suffix;
            this.outputLen = outputLen;
            this.enableXOF = enableXOF;
            this.rounds = rounds;
            this.pos = 0;
            this.posOut = 0;
            this.finished = false;
            this.destroyed = false;
            // Can be passed from user as dkLen
            number(outputLen);
            // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
            if (0 >= this.blockLen || this.blockLen >= 200)
                throw new Error('Sha3 supports only keccak-f1600 function');
            this.state = new Uint8Array(200);
            this.state32 = u32(this.state);
        }
        keccak() {
            keccakP(this.state32, this.rounds);
            this.posOut = 0;
            this.pos = 0;
        }
        update(data) {
            exists(this);
            const { blockLen, state } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                for (let i = 0; i < take; i++)
                    state[this.pos++] ^= data[pos++];
                if (this.pos === blockLen)
                    this.keccak();
            }
            return this;
        }
        finish() {
            if (this.finished)
                return;
            this.finished = true;
            const { state, suffix, pos, blockLen } = this;
            // Do the padding
            state[pos] ^= suffix;
            if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
                this.keccak();
            state[blockLen - 1] ^= 0x80;
            this.keccak();
        }
        writeInto(out) {
            exists(this, false);
            bytes(out);
            this.finish();
            const bufferOut = this.state;
            const { blockLen } = this;
            for (let pos = 0, len = out.length; pos < len;) {
                if (this.posOut >= blockLen)
                    this.keccak();
                const take = Math.min(blockLen - this.posOut, len - pos);
                out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
                this.posOut += take;
                pos += take;
            }
            return out;
        }
        xofInto(out) {
            // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
            if (!this.enableXOF)
                throw new Error('XOF is not possible for this instance');
            return this.writeInto(out);
        }
        xof(bytes) {
            number(bytes);
            return this.xofInto(new Uint8Array(bytes));
        }
        digestInto(out) {
            output(out, this);
            if (this.finished)
                throw new Error('digest() was already called');
            this.writeInto(out);
            this.destroy();
            return out;
        }
        digest() {
            return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
            this.destroyed = true;
            this.state.fill(0);
        }
        _cloneInto(to) {
            const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
            to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
            to.state32.set(this.state32);
            to.pos = this.pos;
            to.posOut = this.posOut;
            to.finished = this.finished;
            to.rounds = rounds;
            // Suffix can change in cSHAKE
            to.suffix = suffix;
            to.outputLen = outputLen;
            to.enableXOF = enableXOF;
            to.destroyed = this.destroyed;
            return to;
        }
    }
    const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
    /**
     * keccak-256 hash function. Different from SHA3-256.
     * @param message - that would be hashed
     */
    const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);

    /**
     *  Cryptographic hashing functions
     *
     *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]
     */
    let locked$3 = false;
    const _keccak256 = function (data) {
        return keccak_256(data);
    };
    let __keccak256 = _keccak256;
    /**
     *  Compute the cryptographic KECCAK256 hash of %%data%%.
     *
     *  The %%data%% **must** be a data representation, to compute the
     *  hash of UTF-8 data use the [[id]] function.
     *
     *  @returns DataHexstring
     *  @example:
     *    keccak256("0x")
     *    //_result:
     *
     *    keccak256("0x1337")
     *    //_result:
     *
     *    keccak256(new Uint8Array([ 0x13, 0x37 ]))
     *    //_result:
     *
     *    // Strings are assumed to be DataHexString, otherwise it will
     *    // throw. To hash UTF-8 data, see the note above.
     *    keccak256("Hello World")
     *    //_error:
     */
    function keccak256(_data) {
        const data = getBytes(_data, "data");
        return hexlify(__keccak256(data));
    }
    keccak256._ = _keccak256;
    keccak256.lock = function () { locked$3 = true; };
    keccak256.register = function (func) {
        if (locked$3) {
            throw new TypeError("keccak256 is locked");
        }
        __keccak256 = func;
    };
    Object.freeze(keccak256);

    // https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
    // https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
    const Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    const Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
    const Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
    let idxL = [Id];
    let idxR = [Pi];
    for (let i = 0; i < 4; i++)
        for (let j of [idxL, idxR])
            j.push(j[i].map((k) => Rho[k]));
    const shifts = /* @__PURE__ */ [
        [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
        [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
        [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
        [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
        [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],
    ].map((i) => new Uint8Array(i));
    const shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    const shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    const Kl = /* @__PURE__ */ new Uint32Array([
        0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,
    ]);
    const Kr = /* @__PURE__ */ new Uint32Array([
        0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,
    ]);
    // The rotate left (circular left shift) operation for uint32
    const rotl$1 = (word, shift) => (word << shift) | (word >>> (32 - shift));
    // It's called f() in spec.
    function f(group, x, y, z) {
        if (group === 0)
            return x ^ y ^ z;
        else if (group === 1)
            return (x & y) | (~x & z);
        else if (group === 2)
            return (x | ~y) ^ z;
        else if (group === 3)
            return (x & z) | (y & ~z);
        else
            return x ^ (y | ~z);
    }
    // Temporary buffer, not used to store anything between runs
    const BUF = /* @__PURE__ */ new Uint32Array(16);
    class RIPEMD160 extends SHA2 {
        constructor() {
            super(64, 20, 8, true);
            this.h0 = 0x67452301 | 0;
            this.h1 = 0xefcdab89 | 0;
            this.h2 = 0x98badcfe | 0;
            this.h3 = 0x10325476 | 0;
            this.h4 = 0xc3d2e1f0 | 0;
        }
        get() {
            const { h0, h1, h2, h3, h4 } = this;
            return [h0, h1, h2, h3, h4];
        }
        set(h0, h1, h2, h3, h4) {
            this.h0 = h0 | 0;
            this.h1 = h1 | 0;
            this.h2 = h2 | 0;
            this.h3 = h3 | 0;
            this.h4 = h4 | 0;
        }
        process(view, offset) {
            for (let i = 0; i < 16; i++, offset += 4)
                BUF[i] = view.getUint32(offset, true);
            // prettier-ignore
            let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
            // Instead of iterating 0 to 80, we split it into 5 groups
            // And use the groups in constants, functions, etc. Much simpler
            for (let group = 0; group < 5; group++) {
                const rGroup = 4 - group;
                const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore
                const rl = idxL[group], rr = idxR[group]; // prettier-ignore
                const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore
                for (let i = 0; i < 16; i++) {
                    const tl = (rotl$1(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;
                    al = el, el = dl, dl = rotl$1(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
                }
                // 2 loops are 10% faster
                for (let i = 0; i < 16; i++) {
                    const tr = (rotl$1(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;
                    ar = er, er = dr, dr = rotl$1(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
                }
            }
            // Add the compressed chunk to the current hash value
            this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);
        }
        roundClean() {
            BUF.fill(0);
        }
        destroy() {
            this.destroyed = true;
            this.buffer.fill(0);
            this.set(0, 0, 0, 0, 0);
        }
    }
    /**
     * RIPEMD-160 - a hash function from 1990s.
     * @param message - msg that would be hashed
     */
    const ripemd160$1 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());

    let locked$2 = false;
    const _ripemd160 = function (data) {
        return ripemd160$1(data);
    };
    let __ripemd160 = _ripemd160;
    /**
     *  Compute the cryptographic RIPEMD-160 hash of %%data%%.
     *
     *  @_docloc: api/crypto:Hash Functions
     *  @returns DataHexstring
     *
     *  @example:
     *    ripemd160("0x")
     *    //_result:
     *
     *    ripemd160("0x1337")
     *    //_result:
     *
     *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))
     *    //_result:
     *
     */
    function ripemd160(_data) {
        const data = getBytes(_data, "data");
        return hexlify(__ripemd160(data));
    }
    ripemd160._ = _ripemd160;
    ripemd160.lock = function () { locked$2 = true; };
    ripemd160.register = function (func) {
        if (locked$2) {
            throw new TypeError("ripemd160 is locked");
        }
        __ripemd160 = func;
    };
    Object.freeze(ripemd160);

    /**
     *  A **Password-Based Key-Derivation Function** is designed to create
     *  a sequence of bytes suitible as a **key** from a human-rememberable
     *  password.
     *
     *  @_subsection: api/crypto:Passwords  [about-pbkdf]
     */
    let locked$1 = false;
    const _pbkdf2 = function (password, salt, iterations, keylen, algo) {
        return pbkdf2Sync(password, salt, iterations, keylen, algo);
    };
    let __pbkdf2 = _pbkdf2;
    /**
     *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using
     *  the %%salt%% and using %%iterations%% of %%algo%%.
     *
     *  This PBKDF is outdated and should not be used in new projects, but is
     *  required to decrypt older files.
     *
     *  @example:
     *    // The password must be converted to bytes, and it is generally
     *    // best practices to ensure the string has been normalized. Many
     *    // formats explicitly indicate the normalization form to use.
     *    password = "hello"
     *    passwordBytes = toUtf8Bytes(password, "NFKC")
     *
     *    salt = id("some-salt")
     *
     *    // Compute the PBKDF2
     *    pbkdf2(passwordBytes, salt, 1024, 16, "sha256")
     *    //_result:
     */
    function pbkdf2(_password, _salt, iterations, keylen, algo) {
        const password = getBytes(_password, "password");
        const salt = getBytes(_salt, "salt");
        return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
    }
    pbkdf2._ = _pbkdf2;
    pbkdf2.lock = function () { locked$1 = true; };
    pbkdf2.register = function (func) {
        if (locked$1) {
            throw new Error("pbkdf2 is locked");
        }
        __pbkdf2 = func;
    };
    Object.freeze(pbkdf2);

    /**
     *  A **Cryptographically Secure Random Value** is one that has been
     *  generated with additional care take to prevent side-channels
     *  from allowing others to detect it and prevent others from through
     *  coincidence generate the same values.
     *
     *  @_subsection: api/crypto:Random Values  [about-crypto-random]
     */
    let locked = false;
    const _randomBytes = function (length) {
        return new Uint8Array(randomBytes$1(length));
    };
    let __randomBytes = _randomBytes;
    /**
     *  Return %%length%% bytes of cryptographically secure random data.
     *
     *  @example:
     *    randomBytes(8)
     *    //_result:
     */
    function randomBytes(length) {
        return __randomBytes(length);
    }
    randomBytes._ = _randomBytes;
    randomBytes.lock = function () { locked = true; };
    randomBytes.register = function (func) {
        if (locked) {
            throw new Error("randomBytes is locked");
        }
        __randomBytes = func;
    };
    Object.freeze(randomBytes);

    // RFC 7914 Scrypt KDF
    // Left rotate for uint32
    const rotl = (a, b) => (a << b) | (a >>> (32 - b));
    // The main Scrypt loop: uses Salsa extensively.
    // Six versions of the function were tried, this is the fastest one.
    // prettier-ignore
    function XorAndSalsa(prev, pi, input, ii, out, oi) {
        // Based on https://cr.yp.to/salsa20.html
        // Xor blocks
        let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
        let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
        let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
        let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
        let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
        let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
        let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
        let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
        // Save state to temporary variables (salsa)
        let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
        // Main loop (salsa)
        for (let i = 0; i < 8; i += 2) {
            x04 ^= rotl(x00 + x12 | 0, 7);
            x08 ^= rotl(x04 + x00 | 0, 9);
            x12 ^= rotl(x08 + x04 | 0, 13);
            x00 ^= rotl(x12 + x08 | 0, 18);
            x09 ^= rotl(x05 + x01 | 0, 7);
            x13 ^= rotl(x09 + x05 | 0, 9);
            x01 ^= rotl(x13 + x09 | 0, 13);
            x05 ^= rotl(x01 + x13 | 0, 18);
            x14 ^= rotl(x10 + x06 | 0, 7);
            x02 ^= rotl(x14 + x10 | 0, 9);
            x06 ^= rotl(x02 + x14 | 0, 13);
            x10 ^= rotl(x06 + x02 | 0, 18);
            x03 ^= rotl(x15 + x11 | 0, 7);
            x07 ^= rotl(x03 + x15 | 0, 9);
            x11 ^= rotl(x07 + x03 | 0, 13);
            x15 ^= rotl(x11 + x07 | 0, 18);
            x01 ^= rotl(x00 + x03 | 0, 7);
            x02 ^= rotl(x01 + x00 | 0, 9);
            x03 ^= rotl(x02 + x01 | 0, 13);
            x00 ^= rotl(x03 + x02 | 0, 18);
            x06 ^= rotl(x05 + x04 | 0, 7);
            x07 ^= rotl(x06 + x05 | 0, 9);
            x04 ^= rotl(x07 + x06 | 0, 13);
            x05 ^= rotl(x04 + x07 | 0, 18);
            x11 ^= rotl(x10 + x09 | 0, 7);
            x08 ^= rotl(x11 + x10 | 0, 9);
            x09 ^= rotl(x08 + x11 | 0, 13);
            x10 ^= rotl(x09 + x08 | 0, 18);
            x12 ^= rotl(x15 + x14 | 0, 7);
            x13 ^= rotl(x12 + x15 | 0, 9);
            x14 ^= rotl(x13 + x12 | 0, 13);
            x15 ^= rotl(x14 + x13 | 0, 18);
        }
        // Write output (salsa)
        out[oi++] = (y00 + x00) | 0;
        out[oi++] = (y01 + x01) | 0;
        out[oi++] = (y02 + x02) | 0;
        out[oi++] = (y03 + x03) | 0;
        out[oi++] = (y04 + x04) | 0;
        out[oi++] = (y05 + x05) | 0;
        out[oi++] = (y06 + x06) | 0;
        out[oi++] = (y07 + x07) | 0;
        out[oi++] = (y08 + x08) | 0;
        out[oi++] = (y09 + x09) | 0;
        out[oi++] = (y10 + x10) | 0;
        out[oi++] = (y11 + x11) | 0;
        out[oi++] = (y12 + x12) | 0;
        out[oi++] = (y13 + x13) | 0;
        out[oi++] = (y14 + x14) | 0;
        out[oi++] = (y15 + x15) | 0;
    }
    function BlockMix(input, ii, out, oi, r) {
        // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
        let head = oi + 0;
        let tail = oi + 16 * r;
        for (let i = 0; i < 16; i++)
            out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
        for (let i = 0; i < r; i++, head += 16, ii += 16) {
            // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
            XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
            if (i > 0)
                tail += 16; // First iteration overwrites tmp value in tail
            XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
        }
    }
    // Common prologue and epilogue for sync/async functions
    function scryptInit(password, salt, _opts) {
        // Maxmem - 1GB+1KB by default
        const opts = checkOpts({
            dkLen: 32,
            asyncTick: 10,
            maxmem: 1024 ** 3 + 1024,
        }, _opts);
        const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
        number(N);
        number(r);
        number(p);
        number(dkLen);
        number(asyncTick);
        number(maxmem);
        if (onProgress !== undefined && typeof onProgress !== 'function')
            throw new Error('progressCb should be function');
        const blockSize = 128 * r;
        const blockSize32 = blockSize / 4;
        if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
            // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
            // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
            throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
        }
        if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
            throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
        }
        if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
            throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
        }
        const memUsed = blockSize * (N + p);
        if (memUsed > maxmem) {
            throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
        }
        // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
        // Since it has only one iteration there is no reason to use async variant
        const B = pbkdf2$1(sha256$1, password, salt, { c: 1, dkLen: blockSize * p });
        const B32 = u32(B);
        // Re-used between parallel iterations. Array(iterations) of B
        const V = u32(new Uint8Array(blockSize * N));
        const tmp = u32(new Uint8Array(blockSize));
        let blockMixCb = () => { };
        if (onProgress) {
            const totalBlockMix = 2 * N * p;
            // Invoke callback if progress changes from 10.01 to 10.02
            // Allows to draw smooth progress bar on up to 8K screen
            const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
            let blockMixCnt = 0;
            blockMixCb = () => {
                blockMixCnt++;
                if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
                    onProgress(blockMixCnt / totalBlockMix);
            };
        }
        return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B, V, tmp) {
        const res = pbkdf2$1(sha256$1, password, B, { c: 1, dkLen });
        B.fill(0);
        V.fill(0);
        tmp.fill(0);
        return res;
    }
    /**
     * Scrypt KDF from RFC 7914.
     * @param password - pass
     * @param salt - salt
     * @param opts - parameters
     * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
     * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
     * - `p` is parallelization factor (1 is common)
     * - `dkLen` is output key length in bytes e.g. 32.
     * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
     * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
     * - `onProgress` - callback function that would be executed for progress report
     * @returns Derived key
     */
    function scrypt$1(password, salt, opts) {
        const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
        for (let pi = 0; pi < p; pi++) {
            const Pi = blockSize32 * pi;
            for (let i = 0; i < blockSize32; i++)
                V[i] = B32[Pi + i]; // V[0] = B[i]
            for (let i = 0, pos = 0; i < N - 1; i++) {
                BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
                blockMixCb();
            }
            BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
            blockMixCb();
            for (let i = 0; i < N; i++) {
                // First u32 of the last 64-byte block (u32 is LE)
                const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
                for (let k = 0; k < blockSize32; k++)
                    tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
                BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
                blockMixCb();
            }
        }
        return scryptOutput(password, dkLen, B, V, tmp);
    }
    /**
     * Scrypt KDF from RFC 7914.
     */
    async function scryptAsync(password, salt, opts) {
        const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
        for (let pi = 0; pi < p; pi++) {
            const Pi = blockSize32 * pi;
            for (let i = 0; i < blockSize32; i++)
                V[i] = B32[Pi + i]; // V[0] = B[i]
            let pos = 0;
            await asyncLoop(N - 1, asyncTick, () => {
                BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
                blockMixCb();
            });
            BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
            blockMixCb();
            await asyncLoop(N, asyncTick, () => {
                // First u32 of the last 64-byte block (u32 is LE)
                const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
                for (let k = 0; k < blockSize32; k++)
                    tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
                BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
                blockMixCb();
            });
        }
        return scryptOutput(password, dkLen, B, V, tmp);
    }

    let lockedSync = false, lockedAsync = false;
    const _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {
        return await scryptAsync(passwd, salt, { N, r, p, dkLen, onProgress });
    };
    const _scryptSync = function (passwd, salt, N, r, p, dkLen) {
        return scrypt$1(passwd, salt, { N, r, p, dkLen });
    };
    let __scryptAsync = _scryptAsync;
    let __scryptSync = _scryptSync;
    /**
     *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of
     *  derivation to increase the resource cost to brute-force a password
     *  for a given key.
     *
     *  This means this algorithm is intentionally slow, and can be tuned to
     *  become slower. As computation and memory speed improve over time,
     *  increasing the difficulty maintains the cost of an attacker.
     *
     *  For example, if a target time of 5 seconds is used, a legitimate user
     *  which knows their password requires only 5 seconds to unlock their
     *  account. A 6 character password has 68 billion possibilities, which
     *  would require an attacker to invest over 10,000 years of CPU time. This
     *  is of course a crude example (as password generally aren't random),
     *  but demonstrates to value of imposing large costs to decryption.
     *
     *  For this reason, if building a UI which involved decrypting or
     *  encrypting datsa using scrypt, it is recommended to use a
     *  [[ProgressCallback]] (as event short periods can seem lik an eternity
     *  if the UI freezes). Including the phrase //"decrypting"// in the UI
     *  can also help, assuring the user their waiting is for a good reason.
     *
     *  @_docloc: api/crypto:Passwords
     *
     *  @example:
     *    // The password must be converted to bytes, and it is generally
     *    // best practices to ensure the string has been normalized. Many
     *    // formats explicitly indicate the normalization form to use.
     *    password = "hello"
     *    passwordBytes = toUtf8Bytes(password, "NFKC")
     *
     *    salt = id("some-salt")
     *
     *    // Compute the scrypt
     *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)
     *    //_result:
     */
    async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
        const passwd = getBytes(_passwd, "passwd");
        const salt = getBytes(_salt, "salt");
        return hexlify(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
    }
    scrypt._ = _scryptAsync;
    scrypt.lock = function () { lockedAsync = true; };
    scrypt.register = function (func) {
        if (lockedAsync) {
            throw new Error("scrypt is locked");
        }
        __scryptAsync = func;
    };
    Object.freeze(scrypt);
    /**
     *  Provides a synchronous variant of [[scrypt]].
     *
     *  This will completely lock up and freeze the UI in a browser and will
     *  prevent any event loop from progressing. For this reason, it is
     *  preferred to use the [async variant](scrypt).
     *
     *  @_docloc: api/crypto:Passwords
     *
     *  @example:
     *    // The password must be converted to bytes, and it is generally
     *    // best practices to ensure the string has been normalized. Many
     *    // formats explicitly indicate the normalization form to use.
     *    password = "hello"
     *    passwordBytes = toUtf8Bytes(password, "NFKC")
     *
     *    salt = id("some-salt")
     *
     *    // Compute the scrypt
     *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)
     *    //_result:
     */
    function scryptSync(_passwd, _salt, N, r, p, dkLen) {
        const passwd = getBytes(_passwd, "passwd");
        const salt = getBytes(_salt, "salt");
        return hexlify(__scryptSync(passwd, salt, N, r, p, dkLen));
    }
    scryptSync._ = _scryptSync;
    scryptSync.lock = function () { lockedSync = true; };
    scryptSync.register = function (func) {
        if (lockedSync) {
            throw new Error("scryptSync is locked");
        }
        __scryptSync = func;
    };
    Object.freeze(scryptSync);

    const _sha256 = function (data) {
        return createHash("sha256").update(data).digest();
    };
    const _sha512 = function (data) {
        return createHash("sha512").update(data).digest();
    };
    let __sha256 = _sha256;
    let __sha512 = _sha512;
    let locked256 = false, locked512 = false;
    /**
     *  Compute the cryptographic SHA2-256 hash of %%data%%.
     *
     *  @_docloc: api/crypto:Hash Functions
     *  @returns DataHexstring
     *
     *  @example:
     *    sha256("0x")
     *    //_result:
     *
     *    sha256("0x1337")
     *    //_result:
     *
     *    sha256(new Uint8Array([ 0x13, 0x37 ]))
     *    //_result:
     *
     */
    function sha256(_data) {
        const data = getBytes(_data, "data");
        return hexlify(__sha256(data));
    }
    sha256._ = _sha256;
    sha256.lock = function () { locked256 = true; };
    sha256.register = function (func) {
        if (locked256) {
            throw new Error("sha256 is locked");
        }
        __sha256 = func;
    };
    Object.freeze(sha256);
    /**
     *  Compute the cryptographic SHA2-512 hash of %%data%%.
     *
     *  @_docloc: api/crypto:Hash Functions
     *  @returns DataHexstring
     *
     *  @example:
     *    sha512("0x")
     *    //_result:
     *
     *    sha512("0x1337")
     *    //_result:
     *
     *    sha512(new Uint8Array([ 0x13, 0x37 ]))
     *    //_result:
     */
    function sha512(_data) {
        const data = getBytes(_data, "data");
        return hexlify(__sha512(data));
    }
    sha512._ = _sha512;
    sha512.lock = function () { locked512 = true; };
    sha512.register = function (func) {
        if (locked512) {
            throw new Error("sha512 is locked");
        }
        __sha512 = func;
    };
    Object.freeze(sha256);

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // 100 lines of code in the file are duplicated from noble-hashes (utils).
    // This is OK: `abstract` directory does not use noble-hashes.
    // User may opt-in into using different hashing library. This way, noble-hashes
    // won't be included into their bundle.
    const _0n$3 = BigInt(0);
    const _1n$4 = BigInt(1);
    const _2n$2 = BigInt(2);
    const u8a = (a) => a instanceof Uint8Array;
    const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
    /**
     * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
     */
    function bytesToHex(bytes) {
        if (!u8a(bytes))
            throw new Error('Uint8Array expected');
        // pre-caching improves the speed 6x
        let hex = '';
        for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
        }
        return hex;
    }
    function numberToHexUnpadded(num) {
        const hex = num.toString(16);
        return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        // Big Endian
        return BigInt(hex === '' ? '0' : `0x${hex}`);
    }
    /**
     * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
     */
    function hexToBytes(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        const len = hex.length;
        if (len % 2)
            throw new Error('padded hex string expected, got unpadded hex of length ' + len);
        const array = new Uint8Array(len / 2);
        for (let i = 0; i < array.length; i++) {
            const j = i * 2;
            const hexByte = hex.slice(j, j + 2);
            const byte = Number.parseInt(hexByte, 16);
            if (Number.isNaN(byte) || byte < 0)
                throw new Error('Invalid byte sequence');
            array[i] = byte;
        }
        return array;
    }
    // BE: Big Endian, LE: Little Endian
    function bytesToNumberBE(bytes) {
        return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
        if (!u8a(bytes))
            throw new Error('Uint8Array expected');
        return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
        return hexToBytes(n.toString(16).padStart(len * 2, '0'));
    }
    function numberToBytesLE(n, len) {
        return numberToBytesBE(n, len).reverse();
    }
    // Unpadded, rarely used
    function numberToVarBytesBE(n) {
        return hexToBytes(numberToHexUnpadded(n));
    }
    /**
     * Takes hex string or Uint8Array, converts to Uint8Array.
     * Validates output length.
     * Will throw error for other types.
     * @param title descriptive title for an error e.g. 'private key'
     * @param hex hex string or Uint8Array
     * @param expectedLength optional, will compare to result array's length
     * @returns
     */
    function ensureBytes(title, hex, expectedLength) {
        let res;
        if (typeof hex === 'string') {
            try {
                res = hexToBytes(hex);
            }
            catch (e) {
                throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
            }
        }
        else if (u8a(hex)) {
            // Uint8Array.from() instead of hash.slice() because node.js Buffer
            // is instance of Uint8Array, and its slice() creates **mutable** copy
            res = Uint8Array.from(hex);
        }
        else {
            throw new Error(`${title} must be hex string or Uint8Array`);
        }
        const len = res.length;
        if (typeof expectedLength === 'number' && len !== expectedLength)
            throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
        return res;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes(...arrays) {
        const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
        let pad = 0; // walk through each item, ensure they have proper type
        arrays.forEach((a) => {
            if (!u8a(a))
                throw new Error('Uint8Array expected');
            r.set(a, pad);
            pad += a.length;
        });
        return r;
    }
    function equalBytes(b1, b2) {
        // We don't care about timing attacks here
        if (b1.length !== b2.length)
            return false;
        for (let i = 0; i < b1.length; i++)
            if (b1[i] !== b2[i])
                return false;
        return true;
    }
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    // Bit operations
    /**
     * Calculates amount of bits in a bigint.
     * Same as `n.toString(2).length`
     */
    function bitLen(n) {
        let len;
        for (len = 0; n > _0n$3; n >>= _1n$4, len += 1)
            ;
        return len;
    }
    /**
     * Gets single bit at position.
     * NOTE: first bit position is 0 (same as arrays)
     * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
     */
    function bitGet(n, pos) {
        return (n >> BigInt(pos)) & _1n$4;
    }
    /**
     * Sets single bit at position.
     */
    const bitSet = (n, pos, value) => {
        return n | ((value ? _1n$4 : _0n$3) << BigInt(pos));
    };
    /**
     * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
     * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
     */
    const bitMask = (n) => (_2n$2 << BigInt(n - 1)) - _1n$4;
    // DRBG
    const u8n = (data) => new Uint8Array(data); // creates Uint8Array
    const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
    /**
     * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
     * @returns function that will call DRBG until 2nd arg returns something meaningful
     * @example
     *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
     *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
     */
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
        if (typeof hashLen !== 'number' || hashLen < 2)
            throw new Error('hashLen must be a number');
        if (typeof qByteLen !== 'number' || qByteLen < 2)
            throw new Error('qByteLen must be a number');
        if (typeof hmacFn !== 'function')
            throw new Error('hmacFn must be a function');
        // Step B, Step C: set hashLen to 8*ceil(hlen/8)
        let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
        let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
        let i = 0; // Iterations counter, will throw when over 1000
        const reset = () => {
            v.fill(1);
            k.fill(0);
            i = 0;
        };
        const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
        const reseed = (seed = u8n()) => {
            // HMAC-DRBG reseed() function. Steps D-G
            k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
            v = h(); // v = hmac(k || v)
            if (seed.length === 0)
                return;
            k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
            v = h(); // v = hmac(k || v)
        };
        const gen = () => {
            // HMAC-DRBG generate() function
            if (i++ >= 1000)
                throw new Error('drbg: tried 1000 values');
            let len = 0;
            const out = [];
            while (len < qByteLen) {
                v = h();
                const sl = v.slice();
                out.push(sl);
                len += v.length;
            }
            return concatBytes(...out);
        };
        const genUntil = (seed, pred) => {
            reset();
            reseed(seed); // Steps D-G
            let res = undefined; // Step H: grind until k is in [1..n-1]
            while (!(res = pred(gen())))
                reseed();
            reset();
            return res;
        };
        return genUntil;
    }
    // Validating curves and fields
    const validatorFns = {
        bigint: (val) => typeof val === 'bigint',
        function: (val) => typeof val === 'function',
        boolean: (val) => typeof val === 'boolean',
        string: (val) => typeof val === 'string',
        stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object) => object.Fp.isValid(val),
        hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
    };
    // type Record<K extends string | number | symbol, T> = { [P in K]: T; }
    function validateObject(object, validators, optValidators = {}) {
        const checkField = (fieldName, type, isOptional) => {
            const checkVal = validatorFns[type];
            if (typeof checkVal !== 'function')
                throw new Error(`Invalid validator "${type}", expected function`);
            const val = object[fieldName];
            if (isOptional && val === undefined)
                return;
            if (!checkVal(val, object)) {
                throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
            }
        };
        for (const [fieldName, type] of Object.entries(validators))
            checkField(fieldName, type, false);
        for (const [fieldName, type] of Object.entries(optValidators))
            checkField(fieldName, type, true);
        return object;
    }
    // validate type tests
    // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
    // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
    // // Should fail type-check
    // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
    // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
    // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
    // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

    var ut = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bitGet: bitGet,
        bitLen: bitLen,
        bitMask: bitMask,
        bitSet: bitSet,
        bytesToHex: bytesToHex,
        bytesToNumberBE: bytesToNumberBE,
        bytesToNumberLE: bytesToNumberLE,
        concatBytes: concatBytes,
        createHmacDrbg: createHmacDrbg,
        ensureBytes: ensureBytes,
        equalBytes: equalBytes,
        hexToBytes: hexToBytes,
        hexToNumber: hexToNumber,
        numberToBytesBE: numberToBytesBE,
        numberToBytesLE: numberToBytesLE,
        numberToHexUnpadded: numberToHexUnpadded,
        numberToVarBytesBE: numberToVarBytesBE,
        utf8ToBytes: utf8ToBytes,
        validateObject: validateObject
    });

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // Utilities for modular arithmetics and finite fields
    // prettier-ignore
    const _0n$2 = BigInt(0), _1n$3 = BigInt(1), _2n$1 = BigInt(2), _3n$1 = BigInt(3);
    // prettier-ignore
    const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
    // prettier-ignore
    BigInt(9); BigInt(16);
    // Calculates a modulo b
    function mod(a, b) {
        const result = a % b;
        return result >= _0n$2 ? result : b + result;
    }
    /**
     * Efficiently raise num to power and do modular division.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     * @example
     * pow(2n, 6n, 11n) // 64n % 11n == 9n
     */
    // TODO: use field version && remove
    function pow(num, power, modulo) {
        if (modulo <= _0n$2 || power < _0n$2)
            throw new Error('Expected power/modulo > 0');
        if (modulo === _1n$3)
            return _0n$2;
        let res = _1n$3;
        while (power > _0n$2) {
            if (power & _1n$3)
                res = (res * num) % modulo;
            num = (num * num) % modulo;
            power >>= _1n$3;
        }
        return res;
    }
    // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
    function pow2(x, power, modulo) {
        let res = x;
        while (power-- > _0n$2) {
            res *= res;
            res %= modulo;
        }
        return res;
    }
    // Inverses number over modulo
    function invert(number, modulo) {
        if (number === _0n$2 || modulo <= _0n$2) {
            throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
        }
        // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
        // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
        let a = mod(number, modulo);
        let b = modulo;
        // prettier-ignore
        let x = _0n$2, u = _1n$3;
        while (a !== _0n$2) {
            // JIT applies optimization if those two lines follow each other
            const q = b / a;
            const r = b % a;
            const m = x - u * q;
            // prettier-ignore
            b = a, a = r, x = u, u = m;
        }
        const gcd = b;
        if (gcd !== _1n$3)
            throw new Error('invert: does not exist');
        return mod(x, modulo);
    }
    /**
     * Tonelli-Shanks square root search algorithm.
     * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
     * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
     * Will start an infinite loop if field order P is not prime.
     * @param P field order
     * @returns function that takes field Fp (created from P) and number n
     */
    function tonelliShanks(P) {
        // Legendre constant: used to calculate Legendre symbol (a | p),
        // which denotes the value of a^((p-1)/2) (mod p).
        // (a | p) ≡ 1    if a is a square (mod p)
        // (a | p) ≡ -1   if a is not a square (mod p)
        // (a | p) ≡ 0    if a ≡ 0 (mod p)
        const legendreC = (P - _1n$3) / _2n$1;
        let Q, S, Z;
        // Step 1: By factoring out powers of 2 from p - 1,
        // find q and s such that p - 1 = q*(2^s) with q odd
        for (Q = P - _1n$3, S = 0; Q % _2n$1 === _0n$2; Q /= _2n$1, S++)
            ;
        // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
        for (Z = _2n$1; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++)
            ;
        // Fast-path
        if (S === 1) {
            const p1div4 = (P + _1n$3) / _4n;
            return function tonelliFast(Fp, n) {
                const root = Fp.pow(n, p1div4);
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Slow-path
        const Q1div2 = (Q + _1n$3) / _2n$1;
        return function tonelliSlow(Fp, n) {
            // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
            if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
                throw new Error('Cannot find square root');
            let r = S;
            // TODO: will fail at Fp2/etc
            let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
            let x = Fp.pow(n, Q1div2); // first guess at the square root
            let b = Fp.pow(n, Q); // first guess at the fudge factor
            while (!Fp.eql(b, Fp.ONE)) {
                if (Fp.eql(b, Fp.ZERO))
                    return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
                // Find m such b^(2^m)==1
                let m = 1;
                for (let t2 = Fp.sqr(b); m < r; m++) {
                    if (Fp.eql(t2, Fp.ONE))
                        break;
                    t2 = Fp.sqr(t2); // t2 *= t2
                }
                // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
                const ge = Fp.pow(g, _1n$3 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
                g = Fp.sqr(ge); // g = ge * ge
                x = Fp.mul(x, ge); // x *= ge
                b = Fp.mul(b, g); // b *= g
                r = m;
            }
            return x;
        };
    }
    function FpSqrt(P) {
        // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
        // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
        // P ≡ 3 (mod 4)
        // √n = n^((P+1)/4)
        if (P % _4n === _3n$1) {
            // Not all roots possible!
            // const ORDER =
            //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
            // const NUM = 72057594037927816n;
            const p1div4 = (P + _1n$3) / _4n;
            return function sqrt3mod4(Fp, n) {
                const root = Fp.pow(n, p1div4);
                // Throw if root**2 != n
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
        if (P % _8n === _5n) {
            const c1 = (P - _5n) / _8n;
            return function sqrt5mod8(Fp, n) {
                const n2 = Fp.mul(n, _2n$1);
                const v = Fp.pow(n2, c1);
                const nv = Fp.mul(n, v);
                const i = Fp.mul(Fp.mul(nv, _2n$1), v);
                const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Other cases: Tonelli-Shanks algorithm
        return tonelliShanks(P);
    }
    // prettier-ignore
    const FIELD_FIELDS = [
        'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
        'eql', 'add', 'sub', 'mul', 'pow', 'div',
        'addN', 'subN', 'mulN', 'sqrN'
    ];
    function validateField(field) {
        const initial = {
            ORDER: 'bigint',
            MASK: 'bigint',
            BYTES: 'isSafeInteger',
            BITS: 'isSafeInteger',
        };
        const opts = FIELD_FIELDS.reduce((map, val) => {
            map[val] = 'function';
            return map;
        }, initial);
        return validateObject(field, opts);
    }
    // Generic field functions
    /**
     * Same as `pow` but for Fp: non-constant-time.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     */
    function FpPow(f, num, power) {
        // Should have same speed as pow for bigints
        // TODO: benchmark!
        if (power < _0n$2)
            throw new Error('Expected power > 0');
        if (power === _0n$2)
            return f.ONE;
        if (power === _1n$3)
            return num;
        let p = f.ONE;
        let d = num;
        while (power > _0n$2) {
            if (power & _1n$3)
                p = f.mul(p, d);
            d = f.sqr(d);
            power >>= _1n$3;
        }
        return p;
    }
    /**
     * Efficiently invert an array of Field elements.
     * `inv(0)` will return `undefined` here: make sure to throw an error.
     */
    function FpInvertBatch(f, nums) {
        const tmp = new Array(nums.length);
        // Walk from first to last, multiply them by each other MOD p
        const lastMultiplied = nums.reduce((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = acc;
            return f.mul(acc, num);
        }, f.ONE);
        // Invert last element
        const inverted = f.inv(lastMultiplied);
        // Walk from last to first, multiply them by inverted each other MOD p
        nums.reduceRight((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = f.mul(acc, tmp[i]);
            return f.mul(acc, num);
        }, inverted);
        return tmp;
    }
    // CURVE.n lengths
    function nLength(n, nBitLength) {
        // Bit size, byte size of CURVE.n
        const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
        const nByteLength = Math.ceil(_nBitLength / 8);
        return { nBitLength: _nBitLength, nByteLength };
    }
    /**
     * Initializes a finite field over prime. **Non-primes are not supported.**
     * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
     * Major performance optimizations:
     * * a) denormalized operations like mulN instead of mul
     * * b) same object shape: never add or remove keys
     * * c) Object.freeze
     * @param ORDER prime positive bigint
     * @param bitLen how many bits the field consumes
     * @param isLE (def: false) if encoding / decoding should be in little-endian
     * @param redef optional faster redefinitions of sqrt and other methods
     */
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
        if (ORDER <= _0n$2)
            throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
        const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
        if (BYTES > 2048)
            throw new Error('Field lengths over 2048 bytes are not supported');
        const sqrtP = FpSqrt(ORDER);
        const f = Object.freeze({
            ORDER,
            BITS,
            BYTES,
            MASK: bitMask(BITS),
            ZERO: _0n$2,
            ONE: _1n$3,
            create: (num) => mod(num, ORDER),
            isValid: (num) => {
                if (typeof num !== 'bigint')
                    throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
                return _0n$2 <= num && num < ORDER; // 0 is valid element, but it's not invertible
            },
            is0: (num) => num === _0n$2,
            isOdd: (num) => (num & _1n$3) === _1n$3,
            neg: (num) => mod(-num, ORDER),
            eql: (lhs, rhs) => lhs === rhs,
            sqr: (num) => mod(num * num, ORDER),
            add: (lhs, rhs) => mod(lhs + rhs, ORDER),
            sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
            mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
            pow: (num, power) => FpPow(f, num, power),
            div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
            // Same as above, but doesn't normalize
            sqrN: (num) => num * num,
            addN: (lhs, rhs) => lhs + rhs,
            subN: (lhs, rhs) => lhs - rhs,
            mulN: (lhs, rhs) => lhs * rhs,
            inv: (num) => invert(num, ORDER),
            sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
            invertBatch: (lst) => FpInvertBatch(f, lst),
            // TODO: do we really need constant cmov?
            // We don't have const-time bigints anyway, so probably will be not very useful
            cmov: (a, b, c) => (c ? b : a),
            toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),
            fromBytes: (bytes) => {
                if (bytes.length !== BYTES)
                    throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
                return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
            },
        });
        return Object.freeze(f);
    }
    /**
     * Returns total number of bytes consumed by the field element.
     * For example, 32 bytes for usual 256-bit weierstrass curve.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of field
     */
    function getFieldBytesLength(fieldOrder) {
        if (typeof fieldOrder !== 'bigint')
            throw new Error('field order must be bigint');
        const bitLength = fieldOrder.toString(2).length;
        return Math.ceil(bitLength / 8);
    }
    /**
     * Returns minimal amount of bytes that can be safely reduced
     * by field order.
     * Should be 2^-128 for 128-bit curve such as P256.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of target hash
     */
    function getMinHashLength(fieldOrder) {
        const length = getFieldBytesLength(fieldOrder);
        return length + Math.ceil(length / 2);
    }
    /**
     * "Constant-time" private key generation utility.
     * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
     * and convert them into private scalar, with the modulo bias being negligible.
     * Needs at least 48 bytes of input for 32-byte private key.
     * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
     * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
     * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
     * @param hash hash output from SHA3 or a similar function
     * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
     * @param isLE interpret hash bytes as LE num
     * @returns valid private scalar
     */
    function mapHashToField(key, fieldOrder, isLE = false) {
        const len = key.length;
        const fieldLen = getFieldBytesLength(fieldOrder);
        const minLen = getMinHashLength(fieldOrder);
        // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
        if (len < 16 || len < minLen || len > 1024)
            throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
        const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);
        // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
        const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
        return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // Abelian group utilities
    const _0n$1 = BigInt(0);
    const _1n$2 = BigInt(1);
    // Elliptic curve multiplication of Point by scalar. Fragile.
    // Scalars should always be less than curve order: this should be checked inside of a curve itself.
    // Creates precomputation tables for fast multiplication:
    // - private scalar is split by fixed size windows of W bits
    // - every window point is collected from window's table & added to accumulator
    // - since windows are different, same point inside tables won't be accessed more than once per calc
    // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
    // - +1 window is neccessary for wNAF
    // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
    // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
    // windows to be in different memory locations
    function wNAF(c, bits) {
        const constTimeNegate = (condition, item) => {
            const neg = item.negate();
            return condition ? neg : item;
        };
        const opts = (W) => {
            const windows = Math.ceil(bits / W) + 1; // +1, because
            const windowSize = 2 ** (W - 1); // -1 because we skip zero
            return { windows, windowSize };
        };
        return {
            constTimeNegate,
            // non-const time multiplication ladder
            unsafeLadder(elm, n) {
                let p = c.ZERO;
                let d = elm;
                while (n > _0n$1) {
                    if (n & _1n$2)
                        p = p.add(d);
                    d = d.double();
                    n >>= _1n$2;
                }
                return p;
            },
            /**
             * Creates a wNAF precomputation window. Used for caching.
             * Default window size is set by `utils.precompute()` and is equal to 8.
             * Number of precomputed points depends on the curve size:
             * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
             * - 𝑊 is the window size
             * - 𝑛 is the bitlength of the curve order.
             * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
             * @returns precomputed point tables flattened to a single array
             */
            precomputeWindow(elm, W) {
                const { windows, windowSize } = opts(W);
                const points = [];
                let p = elm;
                let base = p;
                for (let window = 0; window < windows; window++) {
                    base = p;
                    points.push(base);
                    // =1, because we skip zero
                    for (let i = 1; i < windowSize; i++) {
                        base = base.add(p);
                        points.push(base);
                    }
                    p = base.double();
                }
                return points;
            },
            /**
             * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
             * @param W window size
             * @param precomputes precomputed tables
             * @param n scalar (we don't check here, but should be less than curve order)
             * @returns real and fake (for const-time) points
             */
            wNAF(W, precomputes, n) {
                // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
                // But need to carefully remove other checks before wNAF. ORDER == bits here
                const { windows, windowSize } = opts(W);
                let p = c.ZERO;
                let f = c.BASE;
                const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
                const maxNumber = 2 ** W;
                const shiftBy = BigInt(W);
                for (let window = 0; window < windows; window++) {
                    const offset = window * windowSize;
                    // Extract W bits.
                    let wbits = Number(n & mask);
                    // Shift number by W bits.
                    n >>= shiftBy;
                    // If the bits are bigger than max size, we'll split those.
                    // +224 => 256 - 32
                    if (wbits > windowSize) {
                        wbits -= maxNumber;
                        n += _1n$2;
                    }
                    // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                    // there is negate now: it is possible that negated element from low value
                    // would be the same as high element, which will create carry into next window.
                    // It's not obvious how this can fail, but still worth investigating later.
                    // Check if we're onto Zero point.
                    // Add random point inside current window to f.
                    const offset1 = offset;
                    const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                    const cond1 = window % 2 !== 0;
                    const cond2 = wbits < 0;
                    if (wbits === 0) {
                        // The most important part for const-time getPublicKey
                        f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                    }
                    else {
                        p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                    }
                }
                // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
                // Even if the variable is still unused, there are some checks which will
                // throw an exception, so compiler needs to prove they won't happen, which is hard.
                // At this point there is a way to F be infinity-point even if p is not,
                // which makes it less const-time: around 1 bigint multiply.
                return { p, f };
            },
            wNAFCached(P, precomputesMap, n, transform) {
                // @ts-ignore
                const W = P._WINDOW_SIZE || 1;
                // Calculate precomputes on a first run, reuse them after
                let comp = precomputesMap.get(P);
                if (!comp) {
                    comp = this.precomputeWindow(P, W);
                    if (W !== 1) {
                        precomputesMap.set(P, transform(comp));
                    }
                }
                return this.wNAF(W, comp, n);
            },
        };
    }
    function validateBasic(curve) {
        validateField(curve.Fp);
        validateObject(curve, {
            n: 'bigint',
            h: 'bigint',
            Gx: 'field',
            Gy: 'field',
        }, {
            nBitLength: 'isSafeInteger',
            nByteLength: 'isSafeInteger',
        });
        // Set defaults
        return Object.freeze({
            ...nLength(curve.n, curve.nBitLength),
            ...curve,
            ...{ p: curve.Fp.ORDER },
        });
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // Short Weierstrass curve. The formula is: y² = x³ + ax + b
    function validatePointOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            a: 'field',
            b: 'field',
        }, {
            allowedPrivateKeyLengths: 'array',
            wrapPrivateKey: 'boolean',
            isTorsionFree: 'function',
            clearCofactor: 'function',
            allowInfinityPoint: 'boolean',
            fromBytes: 'function',
            toBytes: 'function',
        });
        const { endo, Fp, a } = opts;
        if (endo) {
            if (!Fp.eql(a, Fp.ZERO)) {
                throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
            }
            if (typeof endo !== 'object' ||
                typeof endo.beta !== 'bigint' ||
                typeof endo.splitScalar !== 'function') {
                throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
            }
        }
        return Object.freeze({ ...opts });
    }
    // ASN.1 DER encoding utilities
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    const DER = {
        // asn.1 DER encoding utils
        Err: class DERErr extends Error {
            constructor(m = '') {
                super(m);
            }
        },
        _parseInt(data) {
            const { Err: E } = DER;
            if (data.length < 2 || data[0] !== 0x02)
                throw new E('Invalid signature integer tag');
            const len = data[1];
            const res = data.subarray(2, len + 2);
            if (!len || res.length !== len)
                throw new E('Invalid signature integer: wrong length');
            // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
            // since we always use positive integers here. It must always be empty:
            // - add zero byte if exists
            // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
            if (res[0] & 0b10000000)
                throw new E('Invalid signature integer: negative');
            if (res[0] === 0x00 && !(res[1] & 0b10000000))
                throw new E('Invalid signature integer: unnecessary leading zero');
            return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
        },
        toSig(hex) {
            // parse DER signature
            const { Err: E } = DER;
            const data = typeof hex === 'string' ? h2b(hex) : hex;
            if (!(data instanceof Uint8Array))
                throw new Error('ui8a expected');
            let l = data.length;
            if (l < 2 || data[0] != 0x30)
                throw new E('Invalid signature tag');
            if (data[1] !== l - 2)
                throw new E('Invalid signature: incorrect length');
            const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
            const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
            if (rBytesLeft.length)
                throw new E('Invalid signature: left bytes after parsing');
            return { r, s };
        },
        hexFromSig(sig) {
            // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
            const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
            const h = (num) => {
                const hex = num.toString(16);
                return hex.length & 1 ? `0${hex}` : hex;
            };
            const s = slice(h(sig.s));
            const r = slice(h(sig.r));
            const shl = s.length / 2;
            const rhl = r.length / 2;
            const sl = h(shl);
            const rl = h(rhl);
            return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
        },
    };
    // Be friendly to bad ECMAScript parsers by not using bigint literals
    // prettier-ignore
    const _0n = BigInt(0), _1n$1 = BigInt(1); BigInt(2); const _3n = BigInt(3); BigInt(4);
    function weierstrassPoints(opts) {
        const CURVE = validatePointOpts(opts);
        const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
        const toBytes = CURVE.toBytes ||
            ((_c, point, _isCompressed) => {
                const a = point.toAffine();
                return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
            });
        const fromBytes = CURVE.fromBytes ||
            ((bytes) => {
                // const head = bytes[0];
                const tail = bytes.subarray(1);
                // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            });
        /**
         * y² = x³ + ax + b: Short weierstrass curve formula
         * @returns y²
         */
        function weierstrassEquation(x) {
            const { a, b } = CURVE;
            const x2 = Fp.sqr(x); // x * x
            const x3 = Fp.mul(x2, x); // x2 * x
            return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
        }
        // Validate whether the passed curve params are valid.
        // We check if curve equation works for generator point.
        // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
        // ProjectivePoint class has not been initialized yet.
        if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
            throw new Error('bad generator point: equation left != right');
        // Valid group elements reside in range 1..n-1
        function isWithinCurveOrder(num) {
            return typeof num === 'bigint' && _0n < num && num < CURVE.n;
        }
        function assertGE(num) {
            if (!isWithinCurveOrder(num))
                throw new Error('Expected valid bigint: 0 < bigint < curve.n');
        }
        // Validates if priv key is valid and converts it to bigint.
        // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
        function normPrivateKeyToScalar(key) {
            const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
            if (lengths && typeof key !== 'bigint') {
                if (key instanceof Uint8Array)
                    key = bytesToHex(key);
                // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
                if (typeof key !== 'string' || !lengths.includes(key.length))
                    throw new Error('Invalid key');
                key = key.padStart(nByteLength * 2, '0');
            }
            let num;
            try {
                num =
                    typeof key === 'bigint'
                        ? key
                        : bytesToNumberBE(ensureBytes('private key', key, nByteLength));
            }
            catch (error) {
                throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
            }
            if (wrapPrivateKey)
                num = mod(num, n); // disabled by default, enabled for BLS
            assertGE(num); // num in range [1..N-1]
            return num;
        }
        const pointPrecomputes = new Map();
        function assertPrjPoint(other) {
            if (!(other instanceof Point))
                throw new Error('ProjectivePoint expected');
        }
        /**
         * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
         * Default Point works in 2d / affine coordinates: (x, y)
         * We're doing calculations in projective, because its operations don't require costly inversion.
         */
        class Point {
            constructor(px, py, pz) {
                this.px = px;
                this.py = py;
                this.pz = pz;
                if (px == null || !Fp.isValid(px))
                    throw new Error('x required');
                if (py == null || !Fp.isValid(py))
                    throw new Error('y required');
                if (pz == null || !Fp.isValid(pz))
                    throw new Error('z required');
            }
            // Does not validate if the point is on-curve.
            // Use fromHex instead, or call assertValidity() later.
            static fromAffine(p) {
                const { x, y } = p || {};
                if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('invalid affine point');
                if (p instanceof Point)
                    throw new Error('projective point not allowed');
                const is0 = (i) => Fp.eql(i, Fp.ZERO);
                // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
                if (is0(x) && is0(y))
                    return Point.ZERO;
                return new Point(x, y, Fp.ONE);
            }
            get x() {
                return this.toAffine().x;
            }
            get y() {
                return this.toAffine().y;
            }
            /**
             * Takes a bunch of Projective Points but executes only one
             * inversion on all of them. Inversion is very slow operation,
             * so this improves performance massively.
             * Optimization: converts a list of projective points to a list of identical points with Z=1.
             */
            static normalizeZ(points) {
                const toInv = Fp.invertBatch(points.map((p) => p.pz));
                return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
            }
            /**
             * Converts hash string or Uint8Array to Point.
             * @param hex short/long ECDSA hex
             */
            static fromHex(hex) {
                const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));
                P.assertValidity();
                return P;
            }
            // Multiplies generator point by privateKey.
            static fromPrivateKey(privateKey) {
                return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
            }
            // "Private method", don't use it directly
            _setWindowSize(windowSize) {
                this._WINDOW_SIZE = windowSize;
                pointPrecomputes.delete(this);
            }
            // A point on curve is valid if it conforms to equation.
            assertValidity() {
                if (this.is0()) {
                    // (0, 1, 0) aka ZERO is invalid in most contexts.
                    // In BLS, ZERO can be serialized, so we allow it.
                    // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                    if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
                        return;
                    throw new Error('bad point: ZERO');
                }
                // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
                const { x, y } = this.toAffine();
                // Check if x, y are valid field elements
                if (!Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('bad point: x or y not FE');
                const left = Fp.sqr(y); // y²
                const right = weierstrassEquation(x); // x³ + ax + b
                if (!Fp.eql(left, right))
                    throw new Error('bad point: equation left != right');
                if (!this.isTorsionFree())
                    throw new Error('bad point: not in prime-order subgroup');
            }
            hasEvenY() {
                const { y } = this.toAffine();
                if (Fp.isOdd)
                    return !Fp.isOdd(y);
                throw new Error("Field doesn't support isOdd");
            }
            /**
             * Compare one point to another.
             */
            equals(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
                const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
                return U1 && U2;
            }
            /**
             * Flips point to one corresponding to (x, -y) in Affine coordinates.
             */
            negate() {
                return new Point(this.px, Fp.neg(this.py), this.pz);
            }
            // Renes-Costello-Batina exception-free doubling formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 3
            // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
            double() {
                const { a, b } = CURVE;
                const b3 = Fp.mul(b, _3n);
                const { px: X1, py: Y1, pz: Z1 } = this;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                let t0 = Fp.mul(X1, X1); // step 1
                let t1 = Fp.mul(Y1, Y1);
                let t2 = Fp.mul(Z1, Z1);
                let t3 = Fp.mul(X1, Y1);
                t3 = Fp.add(t3, t3); // step 5
                Z3 = Fp.mul(X1, Z1);
                Z3 = Fp.add(Z3, Z3);
                X3 = Fp.mul(a, Z3);
                Y3 = Fp.mul(b3, t2);
                Y3 = Fp.add(X3, Y3); // step 10
                X3 = Fp.sub(t1, Y3);
                Y3 = Fp.add(t1, Y3);
                Y3 = Fp.mul(X3, Y3);
                X3 = Fp.mul(t3, X3);
                Z3 = Fp.mul(b3, Z3); // step 15
                t2 = Fp.mul(a, t2);
                t3 = Fp.sub(t0, t2);
                t3 = Fp.mul(a, t3);
                t3 = Fp.add(t3, Z3);
                Z3 = Fp.add(t0, t0); // step 20
                t0 = Fp.add(Z3, t0);
                t0 = Fp.add(t0, t2);
                t0 = Fp.mul(t0, t3);
                Y3 = Fp.add(Y3, t0);
                t2 = Fp.mul(Y1, Z1); // step 25
                t2 = Fp.add(t2, t2);
                t0 = Fp.mul(t2, t3);
                X3 = Fp.sub(X3, t0);
                Z3 = Fp.mul(t2, t1);
                Z3 = Fp.add(Z3, Z3); // step 30
                Z3 = Fp.add(Z3, Z3);
                return new Point(X3, Y3, Z3);
            }
            // Renes-Costello-Batina exception-free addition formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 1
            // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
            add(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                const a = CURVE.a;
                const b3 = Fp.mul(CURVE.b, _3n);
                let t0 = Fp.mul(X1, X2); // step 1
                let t1 = Fp.mul(Y1, Y2);
                let t2 = Fp.mul(Z1, Z2);
                let t3 = Fp.add(X1, Y1);
                let t4 = Fp.add(X2, Y2); // step 5
                t3 = Fp.mul(t3, t4);
                t4 = Fp.add(t0, t1);
                t3 = Fp.sub(t3, t4);
                t4 = Fp.add(X1, Z1);
                let t5 = Fp.add(X2, Z2); // step 10
                t4 = Fp.mul(t4, t5);
                t5 = Fp.add(t0, t2);
                t4 = Fp.sub(t4, t5);
                t5 = Fp.add(Y1, Z1);
                X3 = Fp.add(Y2, Z2); // step 15
                t5 = Fp.mul(t5, X3);
                X3 = Fp.add(t1, t2);
                t5 = Fp.sub(t5, X3);
                Z3 = Fp.mul(a, t4);
                X3 = Fp.mul(b3, t2); // step 20
                Z3 = Fp.add(X3, Z3);
                X3 = Fp.sub(t1, Z3);
                Z3 = Fp.add(t1, Z3);
                Y3 = Fp.mul(X3, Z3);
                t1 = Fp.add(t0, t0); // step 25
                t1 = Fp.add(t1, t0);
                t2 = Fp.mul(a, t2);
                t4 = Fp.mul(b3, t4);
                t1 = Fp.add(t1, t2);
                t2 = Fp.sub(t0, t2); // step 30
                t2 = Fp.mul(a, t2);
                t4 = Fp.add(t4, t2);
                t0 = Fp.mul(t1, t4);
                Y3 = Fp.add(Y3, t0);
                t0 = Fp.mul(t5, t4); // step 35
                X3 = Fp.mul(t3, X3);
                X3 = Fp.sub(X3, t0);
                t0 = Fp.mul(t3, t1);
                Z3 = Fp.mul(t5, Z3);
                Z3 = Fp.add(Z3, t0); // step 40
                return new Point(X3, Y3, Z3);
            }
            subtract(other) {
                return this.add(other.negate());
            }
            is0() {
                return this.equals(Point.ZERO);
            }
            wNAF(n) {
                return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
                    const toInv = Fp.invertBatch(comp.map((p) => p.pz));
                    return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
                });
            }
            /**
             * Non-constant-time multiplication. Uses double-and-add algorithm.
             * It's faster, but should only be used when you don't care about
             * an exposed private key e.g. sig verification, which works over *public* keys.
             */
            multiplyUnsafe(n) {
                const I = Point.ZERO;
                if (n === _0n)
                    return I;
                assertGE(n); // Will throw on 0
                if (n === _1n$1)
                    return this;
                const { endo } = CURVE;
                if (!endo)
                    return wnaf.unsafeLadder(this, n);
                // Apply endomorphism
                let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let k1p = I;
                let k2p = I;
                let d = this;
                while (k1 > _0n || k2 > _0n) {
                    if (k1 & _1n$1)
                        k1p = k1p.add(d);
                    if (k2 & _1n$1)
                        k2p = k2p.add(d);
                    d = d.double();
                    k1 >>= _1n$1;
                    k2 >>= _1n$1;
                }
                if (k1neg)
                    k1p = k1p.negate();
                if (k2neg)
                    k2p = k2p.negate();
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                return k1p.add(k2p);
            }
            /**
             * Constant time multiplication.
             * Uses wNAF method. Windowed method may be 10% faster,
             * but takes 2x longer to generate and consumes 2x memory.
             * Uses precomputes when available.
             * Uses endomorphism for Koblitz curves.
             * @param scalar by which the point would be multiplied
             * @returns New point
             */
            multiply(scalar) {
                assertGE(scalar);
                let n = scalar;
                let point, fake; // Fake point is used to const-time mult
                const { endo } = CURVE;
                if (endo) {
                    const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                    let { p: k1p, f: f1p } = this.wNAF(k1);
                    let { p: k2p, f: f2p } = this.wNAF(k2);
                    k1p = wnaf.constTimeNegate(k1neg, k1p);
                    k2p = wnaf.constTimeNegate(k2neg, k2p);
                    k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                    point = k1p.add(k2p);
                    fake = f1p.add(f2p);
                }
                else {
                    const { p, f } = this.wNAF(n);
                    point = p;
                    fake = f;
                }
                // Normalize `z` for both points, but return only real one
                return Point.normalizeZ([point, fake])[0];
            }
            /**
             * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
             * Not using Strauss-Shamir trick: precomputation tables are faster.
             * The trick could be useful if both P and Q are not G (not in our case).
             * @returns non-zero affine point
             */
            multiplyAndAddUnsafe(Q, a, b) {
                const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
                const mul = (P, a // Select faster multiply() method
                ) => (a === _0n || a === _1n$1 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
                const sum = mul(this, a).add(mul(Q, b));
                return sum.is0() ? undefined : sum;
            }
            // Converts Projective point to affine (x, y) coordinates.
            // Can accept precomputed Z^-1 - for example, from invertBatch.
            // (x, y, z) ∋ (x=x/z, y=y/z)
            toAffine(iz) {
                const { px: x, py: y, pz: z } = this;
                const is0 = this.is0();
                // If invZ was 0, we return zero point. However we still want to execute
                // all operations, so we replace invZ with a random number, 1.
                if (iz == null)
                    iz = is0 ? Fp.ONE : Fp.inv(z);
                const ax = Fp.mul(x, iz);
                const ay = Fp.mul(y, iz);
                const zz = Fp.mul(z, iz);
                if (is0)
                    return { x: Fp.ZERO, y: Fp.ZERO };
                if (!Fp.eql(zz, Fp.ONE))
                    throw new Error('invZ was invalid');
                return { x: ax, y: ay };
            }
            isTorsionFree() {
                const { h: cofactor, isTorsionFree } = CURVE;
                if (cofactor === _1n$1)
                    return true; // No subgroups, always torsion-free
                if (isTorsionFree)
                    return isTorsionFree(Point, this);
                throw new Error('isTorsionFree() has not been declared for the elliptic curve');
            }
            clearCofactor() {
                const { h: cofactor, clearCofactor } = CURVE;
                if (cofactor === _1n$1)
                    return this; // Fast-path
                if (clearCofactor)
                    return clearCofactor(Point, this);
                return this.multiplyUnsafe(CURVE.h);
            }
            toRawBytes(isCompressed = true) {
                this.assertValidity();
                return toBytes(Point, this, isCompressed);
            }
            toHex(isCompressed = true) {
                return bytesToHex(this.toRawBytes(isCompressed));
            }
        }
        Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
        Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
        const _bits = CURVE.nBitLength;
        const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
        // Validate if generator point is on curve
        return {
            CURVE,
            ProjectivePoint: Point,
            normPrivateKeyToScalar,
            weierstrassEquation,
            isWithinCurveOrder,
        };
    }
    function validateOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            hash: 'hash',
            hmac: 'function',
            randomBytes: 'function',
        }, {
            bits2int: 'function',
            bits2int_modN: 'function',
            lowS: 'boolean',
        });
        return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
        const CURVE = validateOpts(curveDef);
        const { Fp, n: CURVE_ORDER } = CURVE;
        const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
        const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
        function isValidFieldElement(num) {
            return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
        }
        function modN(a) {
            return mod(a, CURVE_ORDER);
        }
        function invN(a) {
            return invert(a, CURVE_ORDER);
        }
        const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
            ...CURVE,
            toBytes(_c, point, isCompressed) {
                const a = point.toAffine();
                const x = Fp.toBytes(a.x);
                const cat = concatBytes;
                if (isCompressed) {
                    return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
                }
                else {
                    return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
                }
            },
            fromBytes(bytes) {
                const len = bytes.length;
                const head = bytes[0];
                const tail = bytes.subarray(1);
                // this.assertValidity() is done inside of fromHex
                if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                    const x = bytesToNumberBE(tail);
                    if (!isValidFieldElement(x))
                        throw new Error('Point is not on curve');
                    const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                    let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                    const isYOdd = (y & _1n$1) === _1n$1;
                    // ECDSA
                    const isHeadOdd = (head & 1) === 1;
                    if (isHeadOdd !== isYOdd)
                        y = Fp.neg(y);
                    return { x, y };
                }
                else if (len === uncompressedLen && head === 0x04) {
                    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                    return { x, y };
                }
                else {
                    throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
                }
            },
        });
        const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
        function isBiggerThanHalfOrder(number) {
            const HALF = CURVE_ORDER >> _1n$1;
            return number > HALF;
        }
        function normalizeS(s) {
            return isBiggerThanHalfOrder(s) ? modN(-s) : s;
        }
        // slice bytes num
        const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
        /**
         * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
         */
        class Signature {
            constructor(r, s, recovery) {
                this.r = r;
                this.s = s;
                this.recovery = recovery;
                this.assertValidity();
            }
            // pair (bytes of r, bytes of s)
            static fromCompact(hex) {
                const l = CURVE.nByteLength;
                hex = ensureBytes('compactSignature', hex, l * 2);
                return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
            }
            // DER encoded ECDSA signature
            // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
            static fromDER(hex) {
                const { r, s } = DER.toSig(ensureBytes('DER', hex));
                return new Signature(r, s);
            }
            assertValidity() {
                // can use assertGE here
                if (!isWithinCurveOrder(this.r))
                    throw new Error('r must be 0 < r < CURVE.n');
                if (!isWithinCurveOrder(this.s))
                    throw new Error('s must be 0 < s < CURVE.n');
            }
            addRecoveryBit(recovery) {
                return new Signature(this.r, this.s, recovery);
            }
            recoverPublicKey(msgHash) {
                const { r, s, recovery: rec } = this;
                const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash
                if (rec == null || ![0, 1, 2, 3].includes(rec))
                    throw new Error('recovery id invalid');
                const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
                if (radj >= Fp.ORDER)
                    throw new Error('recovery id 2 or 3 invalid');
                const prefix = (rec & 1) === 0 ? '02' : '03';
                const R = Point.fromHex(prefix + numToNByteStr(radj));
                const ir = invN(radj); // r^-1
                const u1 = modN(-h * ir); // -hr^-1
                const u2 = modN(s * ir); // sr^-1
                const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
                if (!Q)
                    throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
                Q.assertValidity();
                return Q;
            }
            // Signatures should be low-s, to prevent malleability.
            hasHighS() {
                return isBiggerThanHalfOrder(this.s);
            }
            normalizeS() {
                return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
            }
            // DER-encoded
            toDERRawBytes() {
                return hexToBytes(this.toDERHex());
            }
            toDERHex() {
                return DER.hexFromSig({ r: this.r, s: this.s });
            }
            // padded bytes of r, then padded bytes of s
            toCompactRawBytes() {
                return hexToBytes(this.toCompactHex());
            }
            toCompactHex() {
                return numToNByteStr(this.r) + numToNByteStr(this.s);
            }
        }
        const utils = {
            isValidPrivateKey(privateKey) {
                try {
                    normPrivateKeyToScalar(privateKey);
                    return true;
                }
                catch (error) {
                    return false;
                }
            },
            normPrivateKeyToScalar: normPrivateKeyToScalar,
            /**
             * Produces cryptographically secure private key from random of size
             * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
             */
            randomPrivateKey: () => {
                const length = getMinHashLength(CURVE.n);
                return mapHashToField(CURVE.randomBytes(length), CURVE.n);
            },
            /**
             * Creates precompute table for an arbitrary EC point. Makes point "cached".
             * Allows to massively speed-up `point.multiply(scalar)`.
             * @returns cached point
             * @example
             * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
             * fast.multiply(privKey); // much faster ECDH now
             */
            precompute(windowSize = 8, point = Point.BASE) {
                point._setWindowSize(windowSize);
                point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
                return point;
            },
        };
        /**
         * Computes public key for a private key. Checks for validity of the private key.
         * @param privateKey private key
         * @param isCompressed whether to return compact (default), or full key
         * @returns Public key, full when isCompressed=false; short when isCompressed=true
         */
        function getPublicKey(privateKey, isCompressed = true) {
            return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
        }
        /**
         * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
         */
        function isProbPub(item) {
            const arr = item instanceof Uint8Array;
            const str = typeof item === 'string';
            const len = (arr || str) && item.length;
            if (arr)
                return len === compressedLen || len === uncompressedLen;
            if (str)
                return len === 2 * compressedLen || len === 2 * uncompressedLen;
            if (item instanceof Point)
                return true;
            return false;
        }
        /**
         * ECDH (Elliptic Curve Diffie Hellman).
         * Computes shared public key from private key and public key.
         * Checks: 1) private key validity 2) shared key is on-curve.
         * Does NOT hash the result.
         * @param privateA private key
         * @param publicB different public key
         * @param isCompressed whether to return compact (default), or full key
         * @returns shared public key
         */
        function getSharedSecret(privateA, publicB, isCompressed = true) {
            if (isProbPub(privateA))
                throw new Error('first arg must be private key');
            if (!isProbPub(publicB))
                throw new Error('second arg must be public key');
            const b = Point.fromHex(publicB); // check for being on-curve
            return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
        }
        // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
        // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
        // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
        // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
        const bits2int = CURVE.bits2int ||
            function (bytes) {
                // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
                // for some cases, since bytes.length * 8 is not actual bitLength.
                const num = bytesToNumberBE(bytes); // check for == u8 done here
                const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
                return delta > 0 ? num >> BigInt(delta) : num;
            };
        const bits2int_modN = CURVE.bits2int_modN ||
            function (bytes) {
                return modN(bits2int(bytes)); // can't use bytesToNumberBE here
            };
        // NOTE: pads output with zero as per spec
        const ORDER_MASK = bitMask(CURVE.nBitLength);
        /**
         * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
         */
        function int2octets(num) {
            if (typeof num !== 'bigint')
                throw new Error('bigint expected');
            if (!(_0n <= num && num < ORDER_MASK))
                throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
            // works with order, can have different size than numToField!
            return numberToBytesBE(num, CURVE.nByteLength);
        }
        // Steps A, D of RFC6979 3.2
        // Creates RFC6979 seed; converts msg/privKey to numbers.
        // Used only in sign, not in verify.
        // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
        // Also it can be bigger for P224 + SHA256
        function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
            if (['recovered', 'canonical'].some((k) => k in opts))
                throw new Error('sign() legacy options not supported');
            const { hash, randomBytes } = CURVE;
            let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
            if (lowS == null)
                lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
            msgHash = ensureBytes('msgHash', msgHash);
            if (prehash)
                msgHash = ensureBytes('prehashed msgHash', hash(msgHash));
            // We can't later call bits2octets, since nested bits2int is broken for curves
            // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
            // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
            const h1int = bits2int_modN(msgHash);
            const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
            const seedArgs = [int2octets(d), int2octets(h1int)];
            // extraEntropy. RFC6979 3.6: additional k' (optional).
            if (ent != null) {
                // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
                const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
                seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes
            }
            const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2
            const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
            // Converts signature params into point w r/s, checks result for validity.
            function k2sig(kBytes) {
                // RFC 6979 Section 3.2, step 3: k = bits2int(T)
                const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
                if (!isWithinCurveOrder(k))
                    return; // Important: all mod() calls here must be done over N
                const ik = invN(k); // k^-1 mod n
                const q = Point.BASE.multiply(k).toAffine(); // q = Gk
                const r = modN(q.x); // r = q.x mod n
                if (r === _0n)
                    return;
                // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
                // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
                // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
                const s = modN(ik * modN(m + r * d)); // Not using blinding here
                if (s === _0n)
                    return;
                let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$1); // recovery bit (2 or 3, when q.x > n)
                let normS = s;
                if (lowS && isBiggerThanHalfOrder(s)) {
                    normS = normalizeS(s); // if lowS was passed, ensure s is always
                    recovery ^= 1; // // in the bottom half of N
                }
                return new Signature(r, normS, recovery); // use normS, not s
            }
            return { seed, k2sig };
        }
        const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
        const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
        /**
         * Signs message hash with a private key.
         * ```
         * sign(m, d, k) where
         *   (x, y) = G × k
         *   r = x mod n
         *   s = (m + dr)/k mod n
         * ```
         * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
         * @param privKey private key
         * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
         * @returns signature with recovery param
         */
        function sign(msgHash, privKey, opts = defaultSigOpts) {
            const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
            const C = CURVE;
            const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
            return drbg(seed, k2sig); // Steps B, C, D, E, F, G
        }
        // Enable precomputes. Slows down first publicKey computation by 20ms.
        Point.BASE._setWindowSize(8);
        // utils.precompute(8, ProjectivePoint.BASE)
        /**
         * Verifies a signature against message hash and public key.
         * Rejects lowS signatures by default: to override,
         * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
         *
         * ```
         * verify(r, s, h, P) where
         *   U1 = hs^-1 mod n
         *   U2 = rs^-1 mod n
         *   R = U1⋅G - U2⋅P
         *   mod(R.x, n) == r
         * ```
         */
        function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
            const sg = signature;
            msgHash = ensureBytes('msgHash', msgHash);
            publicKey = ensureBytes('publicKey', publicKey);
            if ('strict' in opts)
                throw new Error('options.strict was renamed to lowS');
            const { lowS, prehash } = opts;
            let _sig = undefined;
            let P;
            try {
                if (typeof sg === 'string' || sg instanceof Uint8Array) {
                    // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                    // Since DER can also be 2*nByteLength bytes, we check for it first.
                    try {
                        _sig = Signature.fromDER(sg);
                    }
                    catch (derError) {
                        if (!(derError instanceof DER.Err))
                            throw derError;
                        _sig = Signature.fromCompact(sg);
                    }
                }
                else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                    const { r, s } = sg;
                    _sig = new Signature(r, s);
                }
                else {
                    throw new Error('PARSE');
                }
                P = Point.fromHex(publicKey);
            }
            catch (error) {
                if (error.message === 'PARSE')
                    throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
                return false;
            }
            if (lowS && _sig.hasHighS())
                return false;
            if (prehash)
                msgHash = CURVE.hash(msgHash);
            const { r, s } = _sig;
            const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
            const is = invN(s); // s^-1
            const u1 = modN(h * is); // u1 = hs^-1 mod n
            const u2 = modN(r * is); // u2 = rs^-1 mod n
            const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
            if (!R)
                return false;
            const v = modN(R.x);
            return v === r;
        }
        return {
            CURVE,
            getPublicKey,
            getSharedSecret,
            sign,
            verify,
            ProjectivePoint: Point,
            Signature,
            utils,
        };
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // connects noble-curves to noble-hashes
    function getHash(hash) {
        return {
            hash,
            hmac: (key, ...msgs) => hmac(hash, key, concatBytes$1(...msgs)),
            randomBytes: randomBytes$2,
        };
    }
    function createCurve(curveDef, defHash) {
        const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
        return Object.freeze({ ...create(defHash), create });
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
    const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
    const _1n = BigInt(1);
    const _2n = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n) / b;
    /**
     * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
     * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
     */
    function sqrtMod(y) {
        const P = secp256k1P;
        // prettier-ignore
        const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
        // prettier-ignore
        const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
        const b2 = (y * y * y) % P; // x^3, 11
        const b3 = (b2 * b2 * y) % P; // x^7
        const b6 = (pow2(b3, _3n, P) * b3) % P;
        const b9 = (pow2(b6, _3n, P) * b3) % P;
        const b11 = (pow2(b9, _2n, P) * b2) % P;
        const b22 = (pow2(b11, _11n, P) * b11) % P;
        const b44 = (pow2(b22, _22n, P) * b22) % P;
        const b88 = (pow2(b44, _44n, P) * b44) % P;
        const b176 = (pow2(b88, _88n, P) * b88) % P;
        const b220 = (pow2(b176, _44n, P) * b44) % P;
        const b223 = (pow2(b220, _3n, P) * b3) % P;
        const t1 = (pow2(b223, _23n, P) * b22) % P;
        const t2 = (pow2(t1, _6n, P) * b2) % P;
        const root = pow2(t2, _2n, P);
        if (!Fp.eql(Fp.sqr(root), y))
            throw new Error('Cannot find square root');
        return root;
    }
    const Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
    const secp256k1 = createCurve({
        a: BigInt(0),
        b: BigInt(7),
        Fp,
        n: secp256k1N,
        // Base point (x, y) aka generator point
        Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
        Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
        h: BigInt(1),
        lowS: true,
        /**
         * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
         * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
         * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
         * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
         */
        endo: {
            beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
            splitScalar: (k) => {
                const n = secp256k1N;
                const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
                const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
                const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
                const b2 = a1;
                const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
                const c1 = divNearest(b2 * k, n);
                const c2 = divNearest(-b1 * k, n);
                let k1 = mod(k - c1 * a1 - c2 * a2, n);
                let k2 = mod(-c1 * b1 - c2 * b2, n);
                const k1neg = k1 > POW_2_128;
                const k2neg = k2 > POW_2_128;
                if (k1neg)
                    k1 = n - k1;
                if (k2neg)
                    k2 = n - k2;
                if (k1 > POW_2_128 || k2 > POW_2_128) {
                    throw new Error('splitScalar: Endomorphism failed, k=' + k);
                }
                return { k1neg, k1, k2neg, k2 };
            },
        },
    }, sha256$1);
    // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
    // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
    BigInt(0);
    secp256k1.ProjectivePoint;

    /**
     *  A constant for the zero address.
     *
     *  (**i.e.** ``"0x0000000000000000000000000000000000000000"``)
     */
    const ZeroAddress = "0x0000000000000000000000000000000000000000";

    /**
     *  A constant for the zero hash.
     *
     *  (**i.e.** ``"0x0000000000000000000000000000000000000000000000000000000000000000"``)
     */
    const ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";

    /**
     *  A constant for the order N for the secp256k1 curve.
     *
     *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)
     */
    const N$1 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    /**
     *  A constant for the number of wei in a single ether.
     *
     *  (**i.e.** ``1000000000000000000n``)
     */
    const WeiPerEther = BigInt("1000000000000000000");
    /**
     *  A constant for the maximum value for a ``uint256``.
     *
     *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)
     */
    const MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    /**
     *  A constant for the minimum value for an ``int256``.
     *
     *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)
     */
    const MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
    /**
     *  A constant for the maximum value for an ``int256``.
     *
     *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)
     */
    const MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

    // NFKC (composed)             // (decomposed)
    /**
     *  A constant for the ether symbol (normalized using NFKC).
     *
     *  (**i.e.** ``"\\u039e"``)
     */
    const EtherSymbol = "\u039e"; // "\uD835\uDF63";
    /**
     *  A constant for the [[link-eip-191]] personal message prefix.
     *
     *  (**i.e.** ``"\\x19Ethereum Signed Message:\\n"``)
     */
    const MessagePrefix = "\x19Ethereum Signed Message:\n";

    // Constants
    const BN_0$7 = BigInt(0);
    const BN_1$3 = BigInt(1);
    const BN_2$3 = BigInt(2);
    const BN_27$1 = BigInt(27);
    const BN_28$1 = BigInt(28);
    const BN_35$1 = BigInt(35);
    const _guard$3 = {};
    function toUint256(value) {
        return zeroPadValue(toBeArray(value), 32);
    }
    /**
     *  A Signature  @TODO
     *
     *
     *  @_docloc: api/crypto:Signing
     */
    class Signature {
        #r;
        #s;
        #v;
        #networkV;
        /**
         *  The ``r`` value for a signautre.
         *
         *  This represents the ``x`` coordinate of a "reference" or
         *  challenge point, from which the ``y`` can be computed.
         */
        get r() { return this.#r; }
        set r(value) {
            assertArgument(dataLength(value) === 32, "invalid r", "value", value);
            this.#r = hexlify(value);
        }
        /**
         *  The ``s`` value for a signature.
         */
        get s() { return this.#s; }
        set s(_value) {
            assertArgument(dataLength(_value) === 32, "invalid s", "value", _value);
            const value = hexlify(_value);
            assertArgument(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
            this.#s = value;
        }
        /**
         *  The ``v`` value for a signature.
         *
         *  Since a given ``x`` value for ``r`` has two possible values for
         *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
         *  values to use.
         *
         *  It is normalized to the values ``27`` or ``28`` for legacy
         *  purposes.
         */
        get v() { return this.#v; }
        set v(value) {
            const v = getNumber(value, "value");
            assertArgument(v === 27 || v === 28, "invalid v", "v", value);
            this.#v = v;
        }
        /**
         *  The EIP-155 ``v`` for legacy transactions. For non-legacy
         *  transactions, this value is ``null``.
         */
        get networkV() { return this.#networkV; }
        /**
         *  The chain ID for EIP-155 legacy transactions. For non-legacy
         *  transactions, this value is ``null``.
         */
        get legacyChainId() {
            const v = this.networkV;
            if (v == null) {
                return null;
            }
            return Signature.getChainId(v);
        }
        /**
         *  The ``yParity`` for the signature.
         *
         *  See ``v`` for more details on how this value is used.
         */
        get yParity() {
            return (this.v === 27) ? 0 : 1;
        }
        /**
         *  The [[link-eip-2098]] compact representation of the ``yParity``
         *  and ``s`` compacted into a single ``bytes32``.
         */
        get yParityAndS() {
            // The EIP-2098 compact representation
            const yParityAndS = getBytes(this.s);
            if (this.yParity) {
                yParityAndS[0] |= 0x80;
            }
            return hexlify(yParityAndS);
        }
        /**
         *  The [[link-eip-2098]] compact representation.
         */
        get compactSerialized() {
            return concat([this.r, this.yParityAndS]);
        }
        /**
         *  The serialized representation.
         */
        get serialized() {
            return concat([this.r, this.s, (this.yParity ? "0x1c" : "0x1b")]);
        }
        /**
         *  @private
         */
        constructor(guard, r, s, v) {
            assertPrivate(guard, _guard$3, "Signature");
            this.#r = r;
            this.#s = s;
            this.#v = v;
            this.#networkV = null;
        }
        [Symbol.for('nodejs.util.inspect.custom')]() {
            return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
        }
        /**
         *  Returns a new identical [[Signature]].
         */
        clone() {
            const clone = new Signature(_guard$3, this.r, this.s, this.v);
            if (this.networkV) {
                clone.#networkV = this.networkV;
            }
            return clone;
        }
        /**
         *  Returns a representation that is compatible with ``JSON.stringify``.
         */
        toJSON() {
            const networkV = this.networkV;
            return {
                _type: "signature",
                networkV: ((networkV != null) ? networkV.toString() : null),
                r: this.r, s: this.s, v: this.v,
            };
        }
        /**
         *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
         *
         *  @example:
         *    Signature.getChainId(45)
         *    //_result:
         *
         *    Signature.getChainId(46)
         *    //_result:
         */
        static getChainId(v) {
            const bv = getBigInt(v, "v");
            // The v is not an EIP-155 v, so it is the unspecified chain ID
            if ((bv == BN_27$1) || (bv == BN_28$1)) {
                return BN_0$7;
            }
            // Bad value for an EIP-155 v
            assertArgument(bv >= BN_35$1, "invalid EIP-155 v", "v", v);
            return (bv - BN_35$1) / BN_2$3;
        }
        /**
         *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
         *
         *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
         *  property to include the chain ID.
         *
         *  @example:
         *    Signature.getChainIdV(5, 27)
         *    //_result:
         *
         *    Signature.getChainIdV(5, 28)
         *    //_result:
         *
         */
        static getChainIdV(chainId, v) {
            return (getBigInt(chainId) * BN_2$3) + BigInt(35 + v - 27);
        }
        /**
         *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
         *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
         *
         *  @example:
         *    // The values 0 and 1 imply v is actually yParity
         *    Signature.getNormalizedV(0)
         *    //_result:
         *
         *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
         *    Signature.getNormalizedV(27)
         *    //_result:
         *
         *    // Legacy EIP-155 transaction (i.e. >= 35)
         *    Signature.getNormalizedV(46)
         *    //_result:
         *
         *    // Invalid values throw
         *    Signature.getNormalizedV(5)
         *    //_error:
         */
        static getNormalizedV(v) {
            const bv = getBigInt(v);
            if (bv === BN_0$7 || bv === BN_27$1) {
                return 27;
            }
            if (bv === BN_1$3 || bv === BN_28$1) {
                return 28;
            }
            assertArgument(bv >= BN_35$1, "invalid v", "v", v);
            // Otherwise, EIP-155 v means odd is 27 and even is 28
            return (bv & BN_1$3) ? 27 : 28;
        }
        /**
         *  Creates a new [[Signature]].
         *
         *  If no %%sig%% is provided, a new [[Signature]] is created
         *  with default values.
         *
         *  If %%sig%% is a string, it is parsed.
         */
        static from(sig) {
            function assertError(check, message) {
                assertArgument(check, message, "signature", sig);
            }
            if (sig == null) {
                return new Signature(_guard$3, ZeroHash, ZeroHash, 27);
            }
            if (typeof (sig) === "string") {
                const bytes = getBytes(sig, "signature");
                if (bytes.length === 64) {
                    const r = hexlify(bytes.slice(0, 32));
                    const s = bytes.slice(32, 64);
                    const v = (s[0] & 0x80) ? 28 : 27;
                    s[0] &= 0x7f;
                    return new Signature(_guard$3, r, hexlify(s), v);
                }
                if (bytes.length === 65) {
                    const r = hexlify(bytes.slice(0, 32));
                    const s = bytes.slice(32, 64);
                    assertError((s[0] & 0x80) === 0, "non-canonical s");
                    const v = Signature.getNormalizedV(bytes[64]);
                    return new Signature(_guard$3, r, hexlify(s), v);
                }
                assertError(false, "invalid raw signature length");
            }
            if (sig instanceof Signature) {
                return sig.clone();
            }
            // Get r
            const _r = sig.r;
            assertError(_r != null, "missing r");
            const r = toUint256(_r);
            // Get s; by any means necessary (we check consistency below)
            const s = (function (s, yParityAndS) {
                if (s != null) {
                    return toUint256(s);
                }
                if (yParityAndS != null) {
                    assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
                    const bytes = getBytes(yParityAndS);
                    bytes[0] &= 0x7f;
                    return hexlify(bytes);
                }
                assertError(false, "missing s");
            })(sig.s, sig.yParityAndS);
            assertError((getBytes(s)[0] & 0x80) == 0, "non-canonical s");
            // Get v; by any means necessary (we check consistency below)
            const { networkV, v } = (function (_v, yParityAndS, yParity) {
                if (_v != null) {
                    const v = getBigInt(_v);
                    return {
                        networkV: ((v >= BN_35$1) ? v : undefined),
                        v: Signature.getNormalizedV(v)
                    };
                }
                if (yParityAndS != null) {
                    assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
                    return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28 : 27) };
                }
                if (yParity != null) {
                    switch (getNumber(yParity, "sig.yParity")) {
                        case 0: return { v: 27 };
                        case 1: return { v: 28 };
                    }
                    assertError(false, "invalid yParity");
                }
                assertError(false, "missing v");
            })(sig.v, sig.yParityAndS, sig.yParity);
            const result = new Signature(_guard$3, r, s, v);
            if (networkV) {
                result.#networkV = networkV;
            }
            // If multiple of v, yParity, yParityAndS we given, check they match
            assertError(sig.yParity == null || getNumber(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
            assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
            return result;
        }
    }

    /**
     *  Add details about signing here.
     *
     *  @_subsection: api/crypto:Signing  [about-signing]
     */
    /**
     *  A **SigningKey** provides high-level access to the elliptic curve
     *  cryptography (ECC) operations and key management.
     */
    class SigningKey {
        #privateKey;
        /**
         *  Creates a new **SigningKey** for %%privateKey%%.
         */
        constructor(privateKey) {
            assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
            this.#privateKey = hexlify(privateKey);
        }
        /**
         *  The private key.
         */
        get privateKey() { return this.#privateKey; }
        /**
         *  The uncompressed public key.
         *
         * This will always begin with the prefix ``0x04`` and be 132
         * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
         */
        get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }
        /**
         *  The compressed public key.
         *
         *  This will always begin with either the prefix ``0x02`` or ``0x03``
         *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
         *  nibbles)
         */
        get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }
        /**
         *  Return the signature of the signed %%digest%%.
         */
        sign(digest) {
            assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
            const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {
                lowS: true
            });
            return Signature.from({
                r: toBeHex(sig.r, 32),
                s: toBeHex(sig.s, 32),
                v: (sig.recovery ? 0x1c : 0x1b)
            });
        }
        /**
         *  Returns the [[link-wiki-ecdh]] shared secret between this
         *  private key and the %%other%% key.
         *
         *  The %%other%% key may be any type of key, a raw public key,
         *  a compressed/uncompressed pubic key or aprivate key.
         *
         *  Best practice is usually to use a cryptographic hash on the
         *  returned value before using it as a symetric secret.
         *
         *  @example:
         *    sign1 = new SigningKey(id("some-secret-1"))
         *    sign2 = new SigningKey(id("some-secret-2"))
         *
         *    // Notice that privA.computeSharedSecret(pubB)...
         *    sign1.computeSharedSecret(sign2.publicKey)
         *    //_result:
         *
         *    // ...is equal to privB.computeSharedSecret(pubA).
         *    sign2.computeSharedSecret(sign1.publicKey)
         *    //_result:
         */
        computeSharedSecret(other) {
            const pubKey = SigningKey.computePublicKey(other);
            return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));
        }
        /**
         *  Compute the public key for %%key%%, optionally %%compressed%%.
         *
         *  The %%key%% may be any type of key, a raw public key, a
         *  compressed/uncompressed public key or private key.
         *
         *  @example:
         *    sign = new SigningKey(id("some-secret"));
         *
         *    // Compute the uncompressed public key for a private key
         *    SigningKey.computePublicKey(sign.privateKey)
         *    //_result:
         *
         *    // Compute the compressed public key for a private key
         *    SigningKey.computePublicKey(sign.privateKey, true)
         *    //_result:
         *
         *    // Compute the uncompressed public key
         *    SigningKey.computePublicKey(sign.publicKey, false);
         *    //_result:
         *
         *    // Compute the Compressed a public key
         *    SigningKey.computePublicKey(sign.publicKey, true);
         *    //_result:
         */
        static computePublicKey(key, compressed) {
            let bytes = getBytes(key, "key");
            // private key
            if (bytes.length === 32) {
                const pubKey = secp256k1.getPublicKey(bytes, !!compressed);
                return hexlify(pubKey);
            }
            // raw public key; use uncompressed key with 0x04 prefix
            if (bytes.length === 64) {
                const pub = new Uint8Array(65);
                pub[0] = 0x04;
                pub.set(bytes, 1);
                bytes = pub;
            }
            const point = secp256k1.ProjectivePoint.fromHex(bytes);
            return hexlify(point.toRawBytes(compressed));
        }
        /**
         *  Returns the public key for the private key which produced the
         *  %%signature%% for the given %%digest%%.
         *
         *  @example:
         *    key = new SigningKey(id("some-secret"))
         *    digest = id("hello world")
         *    sig = key.sign(digest)
         *
         *    // Notice the signer public key...
         *    key.publicKey
         *    //_result:
         *
         *    // ...is equal to the recovered public key
         *    SigningKey.recoverPublicKey(digest, sig)
         *    //_result:
         *
         */
        static recoverPublicKey(digest, signature) {
            assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
            const sig = Signature.from(signature);
            let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));
            secpSig = secpSig.addRecoveryBit(sig.yParity);
            const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));
            assertArgument(pubKey != null, "invalid signautre for digest", "signature", signature);
            return "0x" + pubKey.toHex(false);
        }
        /**
         *  Returns the point resulting from adding the ellipic curve points
         *  %%p0%% and %%p1%%.
         *
         *  This is not a common function most developers should require, but
         *  can be useful for certain privacy-specific techniques.
         *
         *  For example, it is used by [[HDNodeWallet]] to compute child
         *  addresses from parent public keys and chain codes.
         */
        static addPoints(p0, p1, compressed) {
            const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));
            const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));
            return "0x" + pub0.add(pub1).toHex(!!compressed);
        }
    }

    /**
     *  A fundamental building block of Ethereum is the underlying
     *  cryptographic primitives.
     *
     *  @_section: api/crypto:Cryptographic Functions   [about-crypto]
     */
    /**
     *  Once called, prevents any future change to the underlying cryptographic
     *  primitives using the ``.register`` feature for hooks.
     */
    function lock() {
        computeHmac.lock();
        keccak256.lock();
        pbkdf2.lock();
        randomBytes.lock();
        ripemd160.lock();
        scrypt.lock();
        scryptSync.lock();
        sha256.lock();
        sha512.lock();
        randomBytes.lock();
    }

    const BN_0$6 = BigInt(0);
    const BN_36 = BigInt(36);
    function getChecksumAddress(address) {
        //    if (!isHexString(address, 20)) {
        //        logger.throwArgumentError("invalid address", "address", address);
        //    }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = getBytes(keccak256(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    // i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));
    const safeDigits = 15;
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    const Base36 = (function () {
        const result = {};
        for (let i = 0; i < 36; i++) {
            const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
            result[key] = BigInt(i);
        }
        return result;
    })();
    function fromBase36(value) {
        value = value.toLowerCase();
        let result = BN_0$6;
        for (let i = 0; i < value.length; i++) {
            result = result * BN_36 + Base36[value[i]];
        }
        return result;
    }
    /**
     *  Returns a normalized and checksumed address for %%address%%.
     *  This accepts non-checksum addresses, checksum addresses and
     *  [[getIcapAddress]] formats.
     *
     *  The checksum in Ethereum uses the capitalization (upper-case
     *  vs lower-case) of the characters within an address to encode
     *  its checksum, which offers, on average, a checksum of 15-bits.
     *
     *  If %%address%% contains both upper-case and lower-case, it is
     *  assumed to already be a checksum address and its checksum is
     *  validated, and if the address fails its expected checksum an
     *  error is thrown.
     *
     *  If you wish the checksum of %%address%% to be ignore, it should
     *  be converted to lower-case (i.e. ``.toLowercase()``) before
     *  being passed in. This should be a very rare situation though,
     *  that you wish to bypass the safegaurds in place to protect
     *  against an address that has been incorrectly copied from another
     *  source.
     *
     *  @example:
     *    // Adds the checksum (via upper-casing specific letters)
     *    getAddress("0x8ba1f109551bd432803012645ac136ddd64dba72")
     *    //_result:
     *
     *    // Converts ICAP address and adds checksum
     *    getAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
     *    //_result:
     *
     *    // Throws an error if an address contains mixed case,
     *    // but the checksum fails
     *    getAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
     *    //_error:
     */
    function getAddress(address) {
        assertArgument(typeof (address) === "string", "invalid address", "address", address);
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (!address.startsWith("0x")) {
                address = "0x" + address;
            }
            const result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
            return result;
        }
        // Maybe ICAP? (we only support direct mode)
        if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
            let result = fromBase36(address.substring(4)).toString(16);
            while (result.length < 40) {
                result = "0" + result;
            }
            return getChecksumAddress("0x" + result);
        }
        assertArgument(false, "invalid address", "address", address);
    }
    /**
     *  The [ICAP Address format](link-icap) format is an early checksum
     *  format which attempts to be compatible with the banking
     *  industry [IBAN format](link-wiki-iban) for bank accounts.
     *
     *  It is no longer common or a recommended format.
     *
     *  @example:
     *    getIcapAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
     *    //_result:
     *
     *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
     *    //_result:
     *
     *    // Throws an error if the ICAP checksum is wrong
     *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37");
     *    //_error:
     */
    function getIcapAddress(address) {
        //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
        let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }

    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    /**
     *  Returns the address that would result from a ``CREATE`` for %%tx%%.
     *
     *  This can be used to compute the address a contract will be
     *  deployed to by an EOA when sending a deployment transaction (i.e.
     *  when the ``to`` address is ``null``).
     *
     *  This can also be used to compute the address a contract will be
     *  deployed to by a contract, by using the contract's address as the
     *  ``to`` and the contract's nonce.
     *
     *  @example
     *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
     *    nonce = 5;
     *
     *    getCreateAddress({ from, nonce });
     *    //_result:
     */
    function getCreateAddress(tx) {
        const from = getAddress(tx.from);
        const nonce = getBigInt(tx.nonce, "tx.nonce");
        let nonceHex = nonce.toString(16);
        if (nonceHex === "0") {
            nonceHex = "0x";
        }
        else if (nonceHex.length % 2) {
            nonceHex = "0x0" + nonceHex;
        }
        else {
            nonceHex = "0x" + nonceHex;
        }
        return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
    }
    /**
     *  Returns the address that would result from a ``CREATE2`` operation
     *  with the given %%from%%, %%salt%% and %%initCodeHash%%.
     *
     *  To compute the %%initCodeHash%% from a contract's init code, use
     *  the [[keccak256]] function.
     *
     *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].
     *
     *  @example
     *    // The address of the contract
     *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
     *
     *    // The salt
     *    salt = id("HelloWorld")
     *
     *    // The hash of the initCode
     *    initCode = "0x6394198df16000526103ff60206004601c335afa6040516060f3";
     *    initCodeHash = keccak256(initCode)
     *
     *    getCreate2Address(from, salt, initCodeHash)
     *    //_result:
     */
    function getCreate2Address(_from, _salt, _initCodeHash) {
        const from = getAddress(_from);
        const salt = getBytes(_salt, "salt");
        const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
        assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
        assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
        return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
    }

    /**
     *  Returns true if %%value%% is an object which implements the
     *  [[Addressable]] interface.
     *
     *  @example:
     *    // Wallets and AbstractSigner sub-classes
     *    isAddressable(Wallet.createRandom())
     *    //_result:
     *
     *    // Contracts
     *    contract = new Contract("dai.tokens.ethers.eth", [ ], provider)
     *    isAddressable(contract)
     *    //_result:
     */
    function isAddressable(value) {
        return (value && typeof (value.getAddress) === "function");
    }
    /**
     *  Returns true if %%value%% is a valid address.
     *
     *  @example:
     *    // Valid address
     *    isAddress("0x8ba1f109551bD432803012645Ac136ddd64DBA72")
     *    //_result:
     *
     *    // Valid ICAP address
     *    isAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36")
     *    //_result:
     *
     *    // Invalid checksum
     *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBa72")
     *    //_result:
     *
     *    // Invalid ICAP checksum
     *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
     *    //_result:
     *
     *    // Not an address (an ENS name requires a provided and an
     *    // asynchronous API to access)
     *    isAddress("ricmoo.eth")
     *    //_result:
     */
    function isAddress(value) {
        try {
            getAddress(value);
            return true;
        }
        catch (error) { }
        return false;
    }
    async function checkAddress(target, promise) {
        const result = await promise;
        if (result == null || result === "0x0000000000000000000000000000000000000000") {
            assert(typeof (target) !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
            assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
        }
        return getAddress(result);
    }
    /**
     *  Resolves to an address for the %%target%%, which may be any
     *  supported address type, an [[Addressable]] or a Promise which
     *  resolves to an address.
     *
     *  If an ENS name is provided, but that name has not been correctly
     *  configured a [[UnconfiguredNameError]] is thrown.
     *
     *  @example:
     *    addr = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
     *
     *    // Addresses are return synchronously
     *    resolveAddress(addr, provider)
     *    //_result:
     *
     *    // Address promises are resolved asynchronously
     *    resolveAddress(Promise.resolve(addr))
     *    //_result:
     *
     *    // ENS names are resolved asynchronously
     *    resolveAddress("dai.tokens.ethers.eth", provider)
     *    //_result:
     *
     *    // Addressable objects are resolved asynchronously
     *    contract = new Contract(addr, [ ])
     *    resolveAddress(contract, provider)
     *    //_result:
     *
     *    // Unconfigured ENS names reject
     *    resolveAddress("nothing-here.ricmoo.eth", provider)
     *    //_error:
     *
     *    // ENS names require a NameResolver object passed in
     *    // (notice the provider was omitted)
     *    resolveAddress("nothing-here.ricmoo.eth")
     *    //_error:
     */
    function resolveAddress(target, resolver) {
        if (typeof (target) === "string") {
            if (target.match(/^0x[0-9a-f]{40}$/i)) {
                return getAddress(target);
            }
            assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
            return checkAddress(target, resolver.resolveName(target));
        }
        else if (isAddressable(target)) {
            return checkAddress(target, target.getAddress());
        }
        else if (target && typeof (target.then) === "function") {
            return checkAddress(target, target);
        }
        assertArgument(false, "unsupported addressable value", "target", target);
    }

    /**
     *  A Typed object allows a value to have its type explicitly
     *  specified.
     *
     *  For example, in Solidity, the value ``45`` could represent a
     *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent
     *  a ``bytes2`` or ``bytes``.
     *
     *  Since JavaScript has no meaningful way to explicitly inform any
     *  APIs which what the type is, this allows transparent interoperation
     *  with Soldity.
     *
     *  @_subsection: api/abi:Typed Values
     */
    const _gaurd = {};
    function n(value, width) {
        let signed = false;
        if (width < 0) {
            signed = true;
            width *= -1;
        }
        // @TODO: Check range is valid for value
        return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
    }
    function b(value, size) {
        // @TODO: Check range is valid for value
        return new Typed(_gaurd, `bytes${(size) ? size : ""}`, value, { size });
    }
    const _typedSymbol = Symbol.for("_ethers_typed");
    /**
     *  The **Typed** class to wrap values providing explicit type information.
     */
    class Typed {
        /**
         *  The type, as a Solidity-compatible type.
         */
        type;
        /**
         *  The actual value.
         */
        value;
        #options;
        /**
         *  @_ignore:
         */
        _typedSymbol;
        /**
         *  @_ignore:
         */
        constructor(gaurd, type, value, options) {
            if (options == null) {
                options = null;
            }
            assertPrivate(_gaurd, gaurd, "Typed");
            defineProperties(this, { _typedSymbol, type, value });
            this.#options = options;
            // Check the value is valid
            this.format();
        }
        /**
         *  Format the type as a Human-Readable type.
         */
        format() {
            if (this.type === "array") {
                throw new Error("");
            }
            else if (this.type === "dynamicArray") {
                throw new Error("");
            }
            else if (this.type === "tuple") {
                return `tuple(${this.value.map((v) => v.format()).join(",")})`;
            }
            return this.type;
        }
        /**
         *  The default value returned by this type.
         */
        defaultValue() {
            return 0;
        }
        /**
         *  The minimum value for numeric types.
         */
        minValue() {
            return 0;
        }
        /**
         *  The maximum value for numeric types.
         */
        maxValue() {
            return 0;
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
         */
        isBigInt() {
            return !!(this.type.match(/^u?int[0-9]+$/));
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
         */
        isData() {
            return this.type.startsWith("bytes");
        }
        /**
         *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
         */
        isString() {
            return (this.type === "string");
        }
        /**
         *  Returns the tuple name, if this is a tuple. Throws otherwise.
         */
        get tupleName() {
            if (this.type !== "tuple") {
                throw TypeError("not a tuple");
            }
            return this.#options;
        }
        // Returns the length of this type as an array
        // - `null` indicates the length is unforced, it could be dynamic
        // - `-1` indicates the length is dynamic
        // - any other value indicates it is a static array and is its length
        /**
         *  Returns the length of the array type or ``-1`` if it is dynamic.
         *
         *  Throws if the type is not an array.
         */
        get arrayLength() {
            if (this.type !== "array") {
                throw TypeError("not an array");
            }
            if (this.#options === true) {
                return -1;
            }
            if (this.#options === false) {
                return (this.value).length;
            }
            return null;
        }
        /**
         *  Returns a new **Typed** of %%type%% with the %%value%%.
         */
        static from(type, value) {
            return new Typed(_gaurd, type, value);
        }
        /**
         *  Return a new ``uint8`` type for %%v%%.
         */
        static uint8(v) { return n(v, 8); }
        /**
         *  Return a new ``uint16`` type for %%v%%.
         */
        static uint16(v) { return n(v, 16); }
        /**
         *  Return a new ``uint24`` type for %%v%%.
         */
        static uint24(v) { return n(v, 24); }
        /**
         *  Return a new ``uint32`` type for %%v%%.
         */
        static uint32(v) { return n(v, 32); }
        /**
         *  Return a new ``uint40`` type for %%v%%.
         */
        static uint40(v) { return n(v, 40); }
        /**
         *  Return a new ``uint48`` type for %%v%%.
         */
        static uint48(v) { return n(v, 48); }
        /**
         *  Return a new ``uint56`` type for %%v%%.
         */
        static uint56(v) { return n(v, 56); }
        /**
         *  Return a new ``uint64`` type for %%v%%.
         */
        static uint64(v) { return n(v, 64); }
        /**
         *  Return a new ``uint72`` type for %%v%%.
         */
        static uint72(v) { return n(v, 72); }
        /**
         *  Return a new ``uint80`` type for %%v%%.
         */
        static uint80(v) { return n(v, 80); }
        /**
         *  Return a new ``uint88`` type for %%v%%.
         */
        static uint88(v) { return n(v, 88); }
        /**
         *  Return a new ``uint96`` type for %%v%%.
         */
        static uint96(v) { return n(v, 96); }
        /**
         *  Return a new ``uint104`` type for %%v%%.
         */
        static uint104(v) { return n(v, 104); }
        /**
         *  Return a new ``uint112`` type for %%v%%.
         */
        static uint112(v) { return n(v, 112); }
        /**
         *  Return a new ``uint120`` type for %%v%%.
         */
        static uint120(v) { return n(v, 120); }
        /**
         *  Return a new ``uint128`` type for %%v%%.
         */
        static uint128(v) { return n(v, 128); }
        /**
         *  Return a new ``uint136`` type for %%v%%.
         */
        static uint136(v) { return n(v, 136); }
        /**
         *  Return a new ``uint144`` type for %%v%%.
         */
        static uint144(v) { return n(v, 144); }
        /**
         *  Return a new ``uint152`` type for %%v%%.
         */
        static uint152(v) { return n(v, 152); }
        /**
         *  Return a new ``uint160`` type for %%v%%.
         */
        static uint160(v) { return n(v, 160); }
        /**
         *  Return a new ``uint168`` type for %%v%%.
         */
        static uint168(v) { return n(v, 168); }
        /**
         *  Return a new ``uint176`` type for %%v%%.
         */
        static uint176(v) { return n(v, 176); }
        /**
         *  Return a new ``uint184`` type for %%v%%.
         */
        static uint184(v) { return n(v, 184); }
        /**
         *  Return a new ``uint192`` type for %%v%%.
         */
        static uint192(v) { return n(v, 192); }
        /**
         *  Return a new ``uint200`` type for %%v%%.
         */
        static uint200(v) { return n(v, 200); }
        /**
         *  Return a new ``uint208`` type for %%v%%.
         */
        static uint208(v) { return n(v, 208); }
        /**
         *  Return a new ``uint216`` type for %%v%%.
         */
        static uint216(v) { return n(v, 216); }
        /**
         *  Return a new ``uint224`` type for %%v%%.
         */
        static uint224(v) { return n(v, 224); }
        /**
         *  Return a new ``uint232`` type for %%v%%.
         */
        static uint232(v) { return n(v, 232); }
        /**
         *  Return a new ``uint240`` type for %%v%%.
         */
        static uint240(v) { return n(v, 240); }
        /**
         *  Return a new ``uint248`` type for %%v%%.
         */
        static uint248(v) { return n(v, 248); }
        /**
         *  Return a new ``uint256`` type for %%v%%.
         */
        static uint256(v) { return n(v, 256); }
        /**
         *  Return a new ``uint256`` type for %%v%%.
         */
        static uint(v) { return n(v, 256); }
        /**
         *  Return a new ``int8`` type for %%v%%.
         */
        static int8(v) { return n(v, -8); }
        /**
         *  Return a new ``int16`` type for %%v%%.
         */
        static int16(v) { return n(v, -16); }
        /**
         *  Return a new ``int24`` type for %%v%%.
         */
        static int24(v) { return n(v, -24); }
        /**
         *  Return a new ``int32`` type for %%v%%.
         */
        static int32(v) { return n(v, -32); }
        /**
         *  Return a new ``int40`` type for %%v%%.
         */
        static int40(v) { return n(v, -40); }
        /**
         *  Return a new ``int48`` type for %%v%%.
         */
        static int48(v) { return n(v, -48); }
        /**
         *  Return a new ``int56`` type for %%v%%.
         */
        static int56(v) { return n(v, -56); }
        /**
         *  Return a new ``int64`` type for %%v%%.
         */
        static int64(v) { return n(v, -64); }
        /**
         *  Return a new ``int72`` type for %%v%%.
         */
        static int72(v) { return n(v, -72); }
        /**
         *  Return a new ``int80`` type for %%v%%.
         */
        static int80(v) { return n(v, -80); }
        /**
         *  Return a new ``int88`` type for %%v%%.
         */
        static int88(v) { return n(v, -88); }
        /**
         *  Return a new ``int96`` type for %%v%%.
         */
        static int96(v) { return n(v, -96); }
        /**
         *  Return a new ``int104`` type for %%v%%.
         */
        static int104(v) { return n(v, -104); }
        /**
         *  Return a new ``int112`` type for %%v%%.
         */
        static int112(v) { return n(v, -112); }
        /**
         *  Return a new ``int120`` type for %%v%%.
         */
        static int120(v) { return n(v, -120); }
        /**
         *  Return a new ``int128`` type for %%v%%.
         */
        static int128(v) { return n(v, -128); }
        /**
         *  Return a new ``int136`` type for %%v%%.
         */
        static int136(v) { return n(v, -136); }
        /**
         *  Return a new ``int144`` type for %%v%%.
         */
        static int144(v) { return n(v, -144); }
        /**
         *  Return a new ``int52`` type for %%v%%.
         */
        static int152(v) { return n(v, -152); }
        /**
         *  Return a new ``int160`` type for %%v%%.
         */
        static int160(v) { return n(v, -160); }
        /**
         *  Return a new ``int168`` type for %%v%%.
         */
        static int168(v) { return n(v, -168); }
        /**
         *  Return a new ``int176`` type for %%v%%.
         */
        static int176(v) { return n(v, -176); }
        /**
         *  Return a new ``int184`` type for %%v%%.
         */
        static int184(v) { return n(v, -184); }
        /**
         *  Return a new ``int92`` type for %%v%%.
         */
        static int192(v) { return n(v, -192); }
        /**
         *  Return a new ``int200`` type for %%v%%.
         */
        static int200(v) { return n(v, -200); }
        /**
         *  Return a new ``int208`` type for %%v%%.
         */
        static int208(v) { return n(v, -208); }
        /**
         *  Return a new ``int216`` type for %%v%%.
         */
        static int216(v) { return n(v, -216); }
        /**
         *  Return a new ``int224`` type for %%v%%.
         */
        static int224(v) { return n(v, -224); }
        /**
         *  Return a new ``int232`` type for %%v%%.
         */
        static int232(v) { return n(v, -232); }
        /**
         *  Return a new ``int240`` type for %%v%%.
         */
        static int240(v) { return n(v, -240); }
        /**
         *  Return a new ``int248`` type for %%v%%.
         */
        static int248(v) { return n(v, -248); }
        /**
         *  Return a new ``int256`` type for %%v%%.
         */
        static int256(v) { return n(v, -256); }
        /**
         *  Return a new ``int256`` type for %%v%%.
         */
        static int(v) { return n(v, -256); }
        /**
         *  Return a new ``bytes1`` type for %%v%%.
         */
        static bytes1(v) { return b(v, 1); }
        /**
         *  Return a new ``bytes2`` type for %%v%%.
         */
        static bytes2(v) { return b(v, 2); }
        /**
         *  Return a new ``bytes3`` type for %%v%%.
         */
        static bytes3(v) { return b(v, 3); }
        /**
         *  Return a new ``bytes4`` type for %%v%%.
         */
        static bytes4(v) { return b(v, 4); }
        /**
         *  Return a new ``bytes5`` type for %%v%%.
         */
        static bytes5(v) { return b(v, 5); }
        /**
         *  Return a new ``bytes6`` type for %%v%%.
         */
        static bytes6(v) { return b(v, 6); }
        /**
         *  Return a new ``bytes7`` type for %%v%%.
         */
        static bytes7(v) { return b(v, 7); }
        /**
         *  Return a new ``bytes8`` type for %%v%%.
         */
        static bytes8(v) { return b(v, 8); }
        /**
         *  Return a new ``bytes9`` type for %%v%%.
         */
        static bytes9(v) { return b(v, 9); }
        /**
         *  Return a new ``bytes10`` type for %%v%%.
         */
        static bytes10(v) { return b(v, 10); }
        /**
         *  Return a new ``bytes11`` type for %%v%%.
         */
        static bytes11(v) { return b(v, 11); }
        /**
         *  Return a new ``bytes12`` type for %%v%%.
         */
        static bytes12(v) { return b(v, 12); }
        /**
         *  Return a new ``bytes13`` type for %%v%%.
         */
        static bytes13(v) { return b(v, 13); }
        /**
         *  Return a new ``bytes14`` type for %%v%%.
         */
        static bytes14(v) { return b(v, 14); }
        /**
         *  Return a new ``bytes15`` type for %%v%%.
         */
        static bytes15(v) { return b(v, 15); }
        /**
         *  Return a new ``bytes16`` type for %%v%%.
         */
        static bytes16(v) { return b(v, 16); }
        /**
         *  Return a new ``bytes17`` type for %%v%%.
         */
        static bytes17(v) { return b(v, 17); }
        /**
         *  Return a new ``bytes18`` type for %%v%%.
         */
        static bytes18(v) { return b(v, 18); }
        /**
         *  Return a new ``bytes19`` type for %%v%%.
         */
        static bytes19(v) { return b(v, 19); }
        /**
         *  Return a new ``bytes20`` type for %%v%%.
         */
        static bytes20(v) { return b(v, 20); }
        /**
         *  Return a new ``bytes21`` type for %%v%%.
         */
        static bytes21(v) { return b(v, 21); }
        /**
         *  Return a new ``bytes22`` type for %%v%%.
         */
        static bytes22(v) { return b(v, 22); }
        /**
         *  Return a new ``bytes23`` type for %%v%%.
         */
        static bytes23(v) { return b(v, 23); }
        /**
         *  Return a new ``bytes24`` type for %%v%%.
         */
        static bytes24(v) { return b(v, 24); }
        /**
         *  Return a new ``bytes25`` type for %%v%%.
         */
        static bytes25(v) { return b(v, 25); }
        /**
         *  Return a new ``bytes26`` type for %%v%%.
         */
        static bytes26(v) { return b(v, 26); }
        /**
         *  Return a new ``bytes27`` type for %%v%%.
         */
        static bytes27(v) { return b(v, 27); }
        /**
         *  Return a new ``bytes28`` type for %%v%%.
         */
        static bytes28(v) { return b(v, 28); }
        /**
         *  Return a new ``bytes29`` type for %%v%%.
         */
        static bytes29(v) { return b(v, 29); }
        /**
         *  Return a new ``bytes30`` type for %%v%%.
         */
        static bytes30(v) { return b(v, 30); }
        /**
         *  Return a new ``bytes31`` type for %%v%%.
         */
        static bytes31(v) { return b(v, 31); }
        /**
         *  Return a new ``bytes32`` type for %%v%%.
         */
        static bytes32(v) { return b(v, 32); }
        /**
         *  Return a new ``address`` type for %%v%%.
         */
        static address(v) { return new Typed(_gaurd, "address", v); }
        /**
         *  Return a new ``bool`` type for %%v%%.
         */
        static bool(v) { return new Typed(_gaurd, "bool", !!v); }
        /**
         *  Return a new ``bytes`` type for %%v%%.
         */
        static bytes(v) { return new Typed(_gaurd, "bytes", v); }
        /**
         *  Return a new ``string`` type for %%v%%.
         */
        static string(v) { return new Typed(_gaurd, "string", v); }
        /**
         *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
         */
        static array(v, dynamic) {
            throw new Error("not implemented yet");
        }
        /**
         *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
         */
        static tuple(v, name) {
            throw new Error("not implemented yet");
        }
        /**
         *  Return a new ``uint8`` type for %%v%%.
         */
        static overrides(v) {
            return new Typed(_gaurd, "overrides", Object.assign({}, v));
        }
        /**
         *  Returns true only if %%value%% is a [[Typed]] instance.
         */
        static isTyped(value) {
            return (value
                && typeof (value) === "object"
                && "_typedSymbol" in value
                && value._typedSymbol === _typedSymbol);
        }
        /**
         *  If the value is a [[Typed]] instance, validates the underlying value
         *  and returns it, otherwise returns value directly.
         *
         *  This is useful for functions that with to accept either a [[Typed]]
         *  object or values.
         */
        static dereference(value, type) {
            if (Typed.isTyped(value)) {
                if (value.type !== type) {
                    throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
                }
                return value.value;
            }
            return value;
        }
    }

    /**
     *  @_ignore
     */
    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        defaultValue() {
            return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, _value) {
            let value = Typed.dereference(_value, "string");
            try {
                value = getAddress(value);
            }
            catch (error) {
                return this._throwError(error.message, _value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(toBeHex(reader.readValue(), 20));
        }
    }

    /**
     *  Clones the functionality of an existing Coder, but without a localName
     *
     *  @_ignore
     */
    class AnonymousCoder extends Coder {
        coder;
        constructor(coder) {
            super(coder.name, coder.type, "_", coder.dynamic);
            this.coder = coder;
        }
        defaultValue() {
            return this.coder.defaultValue();
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    /**
     *  @_ignore
     */
    function pack(writer, coders, values) {
        let arrayValues = [];
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
                const name = coder.localName;
                assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
                assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
                unique[name] = true;
                return values[name];
            });
        }
        else {
            assertArgument(false, "invalid tuple value", "tuple", values);
        }
        assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
        let staticWriter = new Writer();
        let dynamicWriter = new Writer();
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    /**
     *  @_ignore
     */
    function unpack(reader, coders) {
        let values = [];
        let keys = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readIndex();
                let offsetReader = baseReader.subReader(offset);
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (isError(error, "BUFFER_OVERRUN")) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (isError(error, "BUFFER_OVERRUN")) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value == undefined) {
                throw new Error("investigate");
            }
            values.push(value);
            keys.push(coder.localName || null);
        });
        return Result.fromItems(values, keys);
    }
    /**
     *  @_ignore
     */
    class ArrayCoder extends Coder {
        coder;
        length;
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            defineProperties(this, { coder, length });
        }
        defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        }
        encode(writer, _value) {
            const value = Typed.dereference(_value, "array");
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            assertArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readIndex();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return unpack(reader, coders);
        }
    }

    /**
     *  @_ignore
     */
    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        defaultValue() {
            return false;
        }
        encode(writer, _value) {
            const value = Typed.dereference(_value, "bool");
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return !!reader.readValue();
        }
    }

    /**
     *  @_ignore
     */
    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        defaultValue() {
            return "0x";
        }
        encode(writer, value) {
            value = getBytesCopy(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readIndex(), true);
        }
    }
    /**
     *  @_ignore
     */
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return hexlify(super.decode(reader));
        }
    }

    /**
     *  @_ignore
     */
    class FixedBytesCoder extends Coder {
        size;
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            defineProperties(this, { size }, { size: "number" });
        }
        defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        }
        encode(writer, _value) {
            let data = getBytesCopy(Typed.dereference(_value, this.type));
            if (data.length !== this.size) {
                this._throwError("incorrect data length", _value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return hexlify(reader.readBytes(this.size));
        }
    }

    const Empty = new Uint8Array([]);
    /**
     *  @_ignore
     */
    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        defaultValue() {
            return null;
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes(Empty);
        }
        decode(reader) {
            reader.readBytes(0);
            return null;
        }
    }

    const BN_0$5 = BigInt(0);
    const BN_1$2 = BigInt(1);
    const BN_MAX_UINT256$1 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    /**
     *  @_ignore
     */
    class NumberCoder extends Coder {
        size;
        signed;
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            defineProperties(this, { size, signed }, { size: "number", signed: "boolean" });
        }
        defaultValue() {
            return 0;
        }
        encode(writer, _value) {
            let value = getBigInt(Typed.dereference(_value, this.type));
            // Check bounds are safe for encoding
            let maxUintValue = mask(BN_MAX_UINT256$1, WordSize * 8);
            if (this.signed) {
                let bounds = mask(maxUintValue, (this.size * 8) - 1);
                if (value > bounds || value < -(bounds + BN_1$2)) {
                    this._throwError("value out-of-bounds", _value);
                }
                value = toTwos(value, 8 * WordSize);
            }
            else if (value < BN_0$5 || value > mask(maxUintValue, this.size * 8)) {
                this._throwError("value out-of-bounds", _value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            let value = mask(reader.readValue(), this.size * 8);
            if (this.signed) {
                value = fromTwos(value, this.size * 8);
            }
            return value;
        }
    }

    /**
     *  @_ignore
     */
    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        defaultValue() {
            return "";
        }
        encode(writer, _value) {
            return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, "string")));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    /**
     *  @_ignore
     */
    class TupleCoder extends Coder {
        coders;
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            defineProperties(this, { coders: Object.freeze(coders.slice()) });
        }
        defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
                const name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
                let name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        }
        encode(writer, _value) {
            const value = Typed.dereference(_value, "tuple");
            return pack(writer, this.coders, value);
        }
        decode(reader) {
            return unpack(reader, this.coders);
        }
    }

    /**
     *  A simple hashing function which operates on UTF-8 strings to
     *  compute an 32-byte identifier.
     *
     *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes
     *  the [[keccak256]].
     *
     *  @example:
     *    id("hello world")
     *    //_result:
     */
    function id(value) {
        return keccak256(toUtf8Bytes(value));
    }

    // created 2023-09-25T01:01:55.148Z
    // compressed base64-encoded blob for include-ens data
    // source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
    // see: https://github.com/adraffy/ens-normalize.js#security
    // SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32
    var COMPRESSED$1 = '';
    const FENCED = new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]);
    const NSM_MAX = 4;

    function decode_arithmetic(bytes) {
    	let pos = 0;
    	function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
    	
    	// decode the frequency table
    	let symbol_count = u16();
    	let total = 1;
    	let acc = [0, 1]; // first symbol has frequency 1
    	for (let i = 1; i < symbol_count; i++) {
    		acc.push(total += u16());
    	}

    	// skip the sized-payload that the last 3 symbols index into
    	let skip = u16();
    	let pos_payload = pos;
    	pos += skip;

    	let read_width = 0;
    	let read_buffer = 0; 
    	function read_bit() {
    		if (read_width == 0) {
    			// this will read beyond end of buffer
    			// but (undefined|0) => zero pad
    			read_buffer = (read_buffer << 8) | bytes[pos++];
    			read_width = 8;
    		}
    		return (read_buffer >> --read_width) & 1;
    	}

    	const N = 31;
    	const FULL = 2**N;
    	const HALF = FULL >>> 1;
    	const QRTR = HALF >> 1;
    	const MASK = FULL - 1;

    	// fill register
    	let register = 0;
    	for (let i = 0; i < N; i++) register = (register << 1) | read_bit();

    	let symbols = [];
    	let low = 0;
    	let range = FULL; // treat like a float
    	while (true) {
    		let value = Math.floor((((register - low + 1) * total) - 1) / range);
    		let start = 0;
    		let end = symbol_count;
    		while (end - start > 1) { // binary search
    			let mid = (start + end) >>> 1;
    			if (value < acc[mid]) {
    				end = mid;
    			} else {
    				start = mid;
    			}
    		}
    		if (start == 0) break; // first symbol is end mark
    		symbols.push(start);
    		let a = low + Math.floor(range * acc[start]   / total);
    		let b = low + Math.floor(range * acc[start+1] / total) - 1;
    		while (((a ^ b) & HALF) == 0) {
    			register = (register << 1) & MASK | read_bit();
    			a = (a << 1) & MASK;
    			b = (b << 1) & MASK | 1;
    		}
    		while (a & ~b & QRTR) {
    			register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
    			a = (a << 1) ^ HALF;
    			b = ((b ^ HALF) << 1) | HALF | 1;
    		}
    		low = a;
    		range = 1 + b - a;
    	}
    	let offset = symbol_count - 4;
    	return symbols.map(x => { // index into payload
    		switch (x - offset) {
    			case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
    			case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
    			case 1: return offset + bytes[pos_payload++];
    			default: return x - 1;
    		}
    	});
    }	

    // returns an iterator which returns the next symbol
    function read_payload(v) {
    	let pos = 0;
    	return () => v[pos++];
    }
    function read_compressed_payload(s) {
    	return read_payload(decode_arithmetic(unsafe_atob(s)));
    }

    // unsafe in the sense:
    // expected well-formed Base64 w/o padding 
    // 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4
    function unsafe_atob(s) {
    	let lookup = [];
    	[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
    	let n = s.length;
    	let ret = new Uint8Array((6 * n) >> 3);
    	for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
    		carry = (carry << 6) | lookup[s.charCodeAt(i)];
    		width += 6;
    		if (width >= 8) {
    			ret[pos++] = (carry >> (width -= 8));
    		}
    	}
    	return ret;
    }

    // eg. [0,1,2,3...] => [0,-1,1,-2,...]
    function signed(i) { 
    	return (i & 1) ? (~i >> 1) : (i >> 1);
    }

    function read_deltas(n, next) {
    	let v = Array(n);
    	for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
    	return v;
    }

    // [123][5] => [0 3] [1 1] [0 0]
    function read_sorted(next, prev = 0) {
    	let ret = [];
    	while (true) {
    		let x = next();
    		let n = next();
    		if (!n) break;
    		prev += x;
    		for (let i = 0; i < n; i++) {
    			ret.push(prev + i);
    		}
    		prev += n + 1;
    	}
    	return ret;
    }

    function read_sorted_arrays(next) {
    	return read_array_while(() => { 
    		let v = read_sorted(next);
    		if (v.length) return v;
    	});
    }

    // returns map of x => ys
    function read_mapped(next) {
    	let ret = [];
    	while (true) {
    		let w = next();
    		if (w == 0) break;
    		ret.push(read_linear_table(w, next));
    	}
    	while (true) {
    		let w = next() - 1;
    		if (w < 0) break;
    		ret.push(read_replacement_table(w, next));
    	}
    	return ret.flat();
    }

    // read until next is falsy
    // return array of read values
    function read_array_while(next) {
    	let v = [];
    	while (true) {
    		let x = next(v.length);
    		if (!x) break;
    		v.push(x);
    	}
    	return v;
    }

    // read w columns of length n
    // return as n rows of length w
    function read_transposed(n, w, next) {
    	let m = Array(n).fill().map(() => []);
    	for (let i = 0; i < w; i++) {
    		read_deltas(n, next).forEach((x, j) => m[j].push(x));
    	}
    	return m;
    }
     
    // returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]
    // where dx/dy = steps, n = run size, w = length of y
    function read_linear_table(w, next) {
    	let dx = 1 + next();
    	let dy = next();
    	let vN = read_array_while(next);
    	let m = read_transposed(vN.length, 1+w, next);
    	return m.flatMap((v, i) => {
    		let [x, ...ys] = v;
    		return Array(vN[i]).fill().map((_, j) => {
    			let j_dy = j * dy;
    			return [x + j * dx, ys.map(y => y + j_dy)];
    		});
    	});
    }

    // return [[x, ys...], ...]
    // where w = length of y
    function read_replacement_table(w, next) { 
    	let n = 1 + next();
    	let m = read_transposed(n, 1+w, next);
    	return m.map(v => [v[0], v.slice(1)]);
    }


    function read_trie(next) {
    	let ret = [];
    	let sorted = read_sorted(next); 
    	expand(decode([]), []);
    	return ret; // not sorted
    	function decode(Q) { // characters that lead into this node
    		let S = next(); // state: valid, save, check
    		let B = read_array_while(() => { // buckets leading to new nodes
    			let cps = read_sorted(next).map(i => sorted[i]);
    			if (cps.length) return decode(cps);
    		});
    		return {S, B, Q};
    	}
    	function expand({S, B}, cps, saved) {
    		if (S & 4 && saved === cps[cps.length-1]) return;
    		if (S & 2) saved = cps[cps.length-1];
    		if (S & 1) ret.push(cps); 
    		for (let br of B) {
    			for (let cp of br.Q) {
    				expand(br, [...cps, cp], saved);
    			}
    		}
    	}
    }

    function hex_cp(cp) {
    	return cp.toString(16).toUpperCase().padStart(2, '0');
    }

    function quote_cp(cp) {
    	return `{${hex_cp(cp)}}`; // raffy convention: like "\u{X}" w/o the "\u"
    }

    /*
    export function explode_cp(s) {
    	return [...s].map(c => c.codePointAt(0));
    }
    */
    function explode_cp(s) { // this is about 2x faster
    	let cps = [];
    	for (let pos = 0, len = s.length; pos < len; ) {
    		let cp = s.codePointAt(pos);
    		pos += cp < 0x10000 ? 1 : 2;
    		cps.push(cp);
    	}
    	return cps;
    }

    function str_from_cps(cps) {
    	const chunk = 4096;
    	let len = cps.length;
    	if (len < chunk) return String.fromCodePoint(...cps);
    	let buf = [];
    	for (let i = 0; i < len; ) {
    		buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
    	}
    	return buf.join('');
    }

    function compare_arrays(a, b) {
    	let n = a.length;
    	let c = n - b.length;
    	for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
    	return c;
    }

    // created 2023-09-25T01:01:55.148Z
    // compressed base64-encoded blob for include-nf data
    // source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
    // see: https://github.com/adraffy/ens-normalize.js#security
    // SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e
    var COMPRESSED = 'AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g';

    // https://unicode.org/reports/tr15/
    // for reference implementation
    // see: /derive/nf.js


    // algorithmic hangul
    // https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)
    const S0 = 0xAC00;
    const L0 = 0x1100;
    const V0 = 0x1161;
    const T0 = 0x11A7;
    const L_COUNT = 19;
    const V_COUNT = 21;
    const T_COUNT = 28;
    const N_COUNT = V_COUNT * T_COUNT;
    const S_COUNT = L_COUNT * N_COUNT;
    const S1 = S0 + S_COUNT;
    const L1 = L0 + L_COUNT;
    const V1 = V0 + V_COUNT;
    const T1$1 = T0 + T_COUNT;

    function unpack_cc(packed) {
    	return (packed >> 24) & 0xFF;
    }
    function unpack_cp(packed) {
    	return packed & 0xFFFFFF;
    }

    let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;

    function init$1() {
    	//console.time('nf');
    	let r = read_compressed_payload(COMPRESSED);
    	SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted
    	EXCLUSIONS = new Set(read_sorted(r));
    	DECOMP = new Map();
    	RECOMP = new Map();
    	for (let [cp, cps] of read_mapped(r)) {
    		if (!EXCLUSIONS.has(cp) && cps.length == 2) {
    			let [a, b] = cps;
    			let bucket = RECOMP.get(a);
    			if (!bucket) {
    				bucket = new Map();
    				RECOMP.set(a, bucket);
    			}
    			bucket.set(b, cp);
    		}
    		DECOMP.set(cp, cps.reverse()); // stored reversed
    	}
    	//console.timeEnd('nf');
    	// 20230905: 11ms
    }

    function is_hangul(cp) {
    	return cp >= S0 && cp < S1;
    }

    function compose_pair(a, b) {
    	if (a >= L0 && a < L1 && b >= V0 && b < V1) {
    		return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
    	} else if (is_hangul(a) && b > T0 && b < T1$1 && (a - S0) % T_COUNT == 0) {
    		return a + (b - T0);
    	} else {
    		let recomp = RECOMP.get(a);
    		if (recomp) {
    			recomp = recomp.get(b);
    			if (recomp) {
    				return recomp;
    			}
    		}
    		return -1;
    	}
    }

    function decomposed(cps) {
    	if (!SHIFTED_RANK) init$1();
    	let ret = [];
    	let buf = [];
    	let check_order = false;
    	function add(cp) {
    		let cc = SHIFTED_RANK.get(cp);
    		if (cc) {
    			check_order = true;
    			cp |= cc;
    		}
    		ret.push(cp);
    	}
    	for (let cp of cps) {
    		while (true) {
    			if (cp < 0x80) {
    				ret.push(cp);
    			} else if (is_hangul(cp)) {
    				let s_index = cp - S0;
    				let l_index = s_index / N_COUNT | 0;
    				let v_index = (s_index % N_COUNT) / T_COUNT | 0;
    				let t_index = s_index % T_COUNT;
    				add(L0 + l_index);
    				add(V0 + v_index);
    				if (t_index > 0) add(T0 + t_index);
    			} else {
    				let mapped = DECOMP.get(cp);
    				if (mapped) {
    					buf.push(...mapped);
    				} else {
    					add(cp);
    				}
    			}
    			if (!buf.length) break;
    			cp = buf.pop();
    		}
    	}
    	if (check_order && ret.length > 1) {
    		let prev_cc = unpack_cc(ret[0]);
    		for (let i = 1; i < ret.length; i++) {
    			let cc = unpack_cc(ret[i]);
    			if (cc == 0 || prev_cc <= cc) {
    				prev_cc = cc;
    				continue;
    			}
    			let j = i-1;
    			while (true) {
    				let tmp = ret[j+1];
    				ret[j+1] = ret[j];
    				ret[j] = tmp;
    				if (!j) break;
    				prev_cc = unpack_cc(ret[--j]);
    				if (prev_cc <= cc) break;
    			}
    			prev_cc = unpack_cc(ret[i]);
    		}
    	}
    	return ret;
    }

    function composed_from_decomposed(v) {
    	let ret = [];
    	let stack = [];
    	let prev_cp = -1;
    	let prev_cc = 0;
    	for (let packed of v) {
    		let cc = unpack_cc(packed);
    		let cp = unpack_cp(packed);
    		if (prev_cp == -1) {
    			if (cc == 0) {
    				prev_cp = cp;
    			} else {
    				ret.push(cp);
    			}
    		} else if (prev_cc > 0 && prev_cc >= cc) {
    			if (cc == 0) {
    				ret.push(prev_cp, ...stack);
    				stack.length = 0;
    				prev_cp = cp;
    			} else {
    				stack.push(cp);
    			}
    			prev_cc = cc;
    		} else {
    			let composed = compose_pair(prev_cp, cp);
    			if (composed >= 0) {
    				prev_cp = composed;
    			} else if (prev_cc == 0 && cc == 0) {
    				ret.push(prev_cp);
    				prev_cp = cp;
    			} else {
    				stack.push(cp);
    				prev_cc = cc;
    			}
    		}
    	}
    	if (prev_cp >= 0) {
    		ret.push(prev_cp, ...stack);	
    	}
    	return ret;
    }

    // note: cps can be iterable
    function nfd(cps) {
    	return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
    	return composed_from_decomposed(decomposed(cps));
    }

    const HYPHEN = 0x2D;
    const STOP_CH = '.';
    const FE0F = 0xFE0F;
    const UNIQUE_PH = 1;

    // 20230913: replace [...v] with Array_from(v) to avoid large spreads
    const Array_from = x => Array.from(x); // Array.from.bind(Array);

    function group_has_cp(g, cp) {
    	// 20230913: keep primary and secondary distinct instead of creating valid union
    	return g.P.has(cp) || g.Q.has(cp);
    }

    class Emoji extends Array {
    	get is_emoji() { return true; } // free tagging system
    }

    let MAPPED, IGNORED, CM, NSM, ESCAPE, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;

    function init() {
    	if (MAPPED) return;
    	
    	let r = read_compressed_payload(COMPRESSED$1);
    	const read_sorted_array = () => read_sorted(r);
    	const read_sorted_set = () => new Set(read_sorted_array());
    	const set_add_many = (set, v) => v.forEach(x => set.add(x));

    	MAPPED = new Map(read_mapped(r)); 
    	IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints

    	/*
    	// direct include from payload is smaller than the decompression code
    	const FENCED = new Map(read_array_while(() => {
    		let cp = r();
    		if (cp) return [cp, read_str(r())];
    	}));
    	*/
    	// 20230217: we still need all CM for proper error formatting
    	// but norm only needs NSM subset that are potentially-valid
    	CM = read_sorted_array();
    	NSM = new Set(read_sorted_array().map(i => CM[i]));
    	CM = new Set(CM);
    	
    	ESCAPE = read_sorted_set(); // characters that should not be printed
    	read_sorted_set(); // only needed to illustrate ens_tokenize() transformations

    	let chunks = read_sorted_arrays(r);
    	let unrestricted = r();
    	//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));
    	const read_chunked = () => {
    		// 20230921: build set in parts, 2x faster
    		let set = new Set();
    		read_sorted_array().forEach(i => set_add_many(set, chunks[i]));
    		set_add_many(set, read_sorted_array());
    		return set; 
    	};
    	GROUPS = read_array_while(i => {
    		// minifier property mangling seems unsafe
    		// so these are manually renamed to single chars
    		let N = read_array_while(r).map(x => x+0x60);
    		if (N.length) {
    			let R = i >= unrestricted; // unrestricted then restricted
    			N[0] -= 32; // capitalize
    			N = str_from_cps(N);
    			if (R) N=`Restricted[${N}]`;
    			let P = read_chunked(); // primary
    			let Q = read_chunked(); // secondary
    			let M = !r(); // not-whitelisted, check for NSM
    			// *** this code currently isn't needed ***
    			/*
    			let V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid
    			let M = r()-1; // number of combining mark
    			if (M < 0) { // whitelisted
    				M = new Map(read_array_while(() => {
    					let i = r();
    					if (i) return [V[i-1], read_array_while(() => {
    						let v = read_array_while(r);
    						if (v.length) return v.map(x => x-1);
    					})];
    				}));
    			}*/
    			return {N, P, Q, M, R};
    		}
    	});

    	// decode compressed wholes
    	WHOLE_VALID = read_sorted_set();
    	WHOLE_MAP = new Map();
    	let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted
    	wholes.forEach((cp, i) => {
    		let d = r(); 
    		let w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};
    		w.V.push(cp); // add to member set
    		if (!WHOLE_VALID.has(cp)) {
    			WHOLE_MAP.set(cp, w);  // register with whole map
    		}
    	});

    	// compute confusable-extent complements
    	// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set
    	for (let {V, M} of new Set(WHOLE_MAP.values())) {
    		// connect all groups that have each whole character
    		let recs = [];
    		for (let cp of V) {
    			let gs = GROUPS.filter(g => group_has_cp(g, cp));
    			let rec = recs.find(({G}) => gs.some(g => G.has(g)));
    			if (!rec) {
    				rec = {G: new Set(), V: []};
    				recs.push(rec);
    			}
    			rec.V.push(cp);
    			set_add_many(rec.G, gs);
    		}
    		// per character cache groups which are not a member of the extent
    		let union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole
    		for (let {G, V} of recs) {
    			let complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent
    			for (let cp of V) {
    				M.set(cp, complement); // this is the same reference
    			}
    		}
    	}

    	// compute valid set
    	// 20230924: VALID was union but can be re-used
    	VALID = new Set(); // exists in 1+ groups
    	let multi = new Set(); // exists in 2+ groups
    	const add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
    	for (let g of GROUPS) {
    		for (let cp of g.P) add_to_union(cp);
    		for (let cp of g.Q) add_to_union(cp);
    	}
    	// dual purpose WHOLE_MAP: return placeholder if unique non-confusable
    	for (let cp of VALID) {
    		if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
    			WHOLE_MAP.set(cp, UNIQUE_PH);
    		}
    	}
    	// add all decomposed parts
    	// see derive: "Valid is Closed (via Brute-force)"
    	set_add_many(VALID, nfd(VALID));
    	
    	// decode emoji
    	// 20230719: emoji are now fully-expanded to avoid quirk logic 
    	EMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);
    	EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)
    	for (let cps of EMOJI_LIST) {
    		// 20230719: change to *slightly* stricter algorithm which disallows 
    		// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)
    		// example: beautified [A B] (eg. flag emoji) 
    		//  before: allow: [A FE0F B], error: [A FE0F FE0F B] 
    		//   after: error: both
    		// note: this code now matches ENSNormalize.{cs,java} logic
    		let prev = [EMOJI_ROOT];
    		for (let cp of cps) {
    			let next = prev.map(node => {
    				let child = node.get(cp);
    				if (!child) {
    					// should this be object? 
    					// (most have 1-2 items, few have many)
    					// 20230719: no, v8 default map is 4?
    					child = new Map();
    					node.set(cp, child);
    				}
    				return child;
    			});
    			if (cp === FE0F) {
    				prev.push(...next); // less than 20 elements
    			} else {
    				prev = next;
    			}
    		}
    		for (let x of prev) {
    			x.V = cps;
    		}
    	}
    }

    // if escaped: {HEX}
    //       else: "x" {HEX}
    function quoted_cp(cp) {
    	return (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }

    // 20230211: some messages can be mixed-directional and result in spillover
    // use 200E after a quoted string to force the remainder of a string from 
    // acquring the direction of the quote
    // https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions
    function bidi_qq(s) {
    	return `"${s}"\u200E`; // strong LTR
    }

    function check_label_extension(cps) {
    	if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
    		throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`); // this can only be ascii so cant be bidi
    	}
    }
    function check_leading_underscore(cps) {
    	const UNDERSCORE = 0x5F;
    	for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
    		if (cps[--i] !== UNDERSCORE) {
    			throw new Error('underscore allowed only at start');
    		}
    	}
    }
    // check that a fenced cp is not leading, trailing, or touching another fenced cp
    function check_fenced(cps) {
    	let cp = cps[0];
    	let prev = FENCED.get(cp);
    	if (prev) throw error_placement(`leading ${prev}`);
    	let n = cps.length;
    	let last = -1; // prevents trailing from throwing
    	for (let i = 1; i < n; i++) {
    		cp = cps[i];
    		let match = FENCED.get(cp);
    		if (match) {
    			// since cps[0] isn't fenced, cps[1] cannot throw
    			if (last == i) throw error_placement(`${prev} + ${match}`);
    			last = i + 1;
    			prev = match;
    		}
    	}
    	if (last == n) throw error_placement(`trailing ${prev}`);
    }

    // create a safe to print string 
    // invisibles are escaped
    // leading cm uses placeholder
    // if cps exceed max, middle truncate with ellipsis
    // quoter(cp) => string, eg. 3000 => "{3000}"
    // note: in html, you'd call this function then replace [<>&] with entities
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
    	//if (Number.isInteger(cps)) cps = [cps];
    	//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);
    	let buf = [];
    	if (is_combining_mark(cps[0])) buf.push('◌');
    	if (cps.length > max) {
    		max >>= 1;
    		cps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];
    	}
    	let prev = 0;
    	let n = cps.length;
    	for (let i = 0; i < n; i++) {
    		let cp = cps[i];
    		if (should_escape(cp)) {
    			buf.push(str_from_cps(cps.slice(prev, i)));
    			buf.push(quoter(cp));
    			prev = i + 1;
    		}
    	}
    	buf.push(str_from_cps(cps.slice(prev, n)));
    	return buf.join('');
    }

    // note: set(s) cannot be exposed because they can be modified
    // note: Object.freeze() doesn't work
    function is_combining_mark(cp) {
    	init();
    	return CM.has(cp);
    }
    function should_escape(cp) {
    	init();
    	return ESCAPE.has(cp);
    }

    function ens_normalize(name) {
    	return flatten(split(name, nfc, filter_fe0f));
    }

    function split(name, nf, ef) {
    	if (!name) return []; // 20230719: empty name allowance
    	init();
    	let offset = 0;
    	// https://unicode.org/reports/tr46/#Validity_Criteria
    	// 4.) "The label must not contain a U+002E ( . ) FULL STOP."
    	return name.split(STOP_CH).map(label => {
    		let input = explode_cp(label);
    		let info = {
    			input,
    			offset, // codepoint, not substring!
    		};
    		offset += input.length + 1; // + stop
    		try {
    			// 1.) "The label must be in Unicode Normalization Form NFC"
    			let tokens = info.tokens = tokens_from_str(input, nf, ef);
    			let token_count = tokens.length;
    			let type;
    			if (!token_count) { // the label was effectively empty (could of had ignored characters)
    				//norm = [];
    				//type = 'None'; // use this instead of next match, "ASCII"
    				// 20230120: change to strict
    				// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59
    				throw new Error(`empty label`);
    			} 
    			let norm = info.output = tokens.flat();
    			check_leading_underscore(norm);
    			let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);
    			if (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii
    				// 20230123: matches matches WHATWG, see note 3.3
    				check_label_extension(norm); // only needed for ascii
    				// cant have fenced
    				// cant have cm
    				// cant have wholes
    				// see derive: "Fastpath ASCII"
    				type = 'ASCII';
    			} else {
    				let chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together
    				if (!chars.length) { // theres no text, just emoji
    					type = 'Emoji';
    				} else {
    					// 5.) "The label must not begin with a combining mark, that is: General_Category=Mark."
    					if (CM.has(norm[0])) throw error_placement('leading combining mark');
    					for (let i = 1; i < token_count; i++) { // we've already checked the first token
    						let cps = tokens[i];
    						if (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...
    							// bidi_qq() not needed since emoji is LTR and cps is a CM
    							throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}"`); 
    						}
    					}
    					check_fenced(norm);
    					let unique = Array_from(new Set(chars));
    					let [g] = determine_group(unique); // take the first match
    					// see derive: "Matching Groups have Same CM Style"
    					// alternative: could form a hybrid type: Latin/Japanese/...	
    					check_group(g, chars); // need text in order
    					check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)
    					type = g.N;
    					// 20230121: consider exposing restricted flag
    					// it's simpler to just check for 'Restricted'
    					// or even better: type.endsWith(']')
    					//if (g.R) info.restricted = true;
    				}
    			}
    			info.type = type;
    		} catch (err) {
    			info.error = err; // use full error object
    		}
    		return info;
    	});
    }

    function check_whole(group, unique) {
    	let maker;
    	let shared = [];
    	for (let cp of unique) {
    		let whole = WHOLE_MAP.get(cp);
    		if (whole === UNIQUE_PH) return; // unique, non-confusable
    		if (whole) {
    			let set = whole.M.get(cp); // groups which have a character that look-like this character
    			maker = maker ? maker.filter(g => set.has(g)) : Array_from(set);
    			if (!maker.length) return; // confusable intersection is empty
    		} else {
    			shared.push(cp); 
    		}
    	}
    	if (maker) {
    		// we have 1+ confusable
    		// check if any of the remaining groups
    		// contain the shared characters too
    		for (let g of maker) {
    			if (shared.every(cp => group_has_cp(g, cp))) {
    				throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
    			}
    		}
    	}
    }

    // assumption: unique.size > 0
    // returns list of matching groups
    function determine_group(unique) {
    	let groups = GROUPS;
    	for (let cp of unique) {
    		// note: we need to dodge CM that are whitelisted
    		// but that code isn't currently necessary
    		let gs = groups.filter(g => group_has_cp(g, cp));
    		if (!gs.length) {
    			if (!GROUPS.some(g => group_has_cp(g, cp))) { 
    				// the character was composed of valid parts
    				// but it's NFC form is invalid
    				// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}
    				// note: this doesn't have to be a composition
    				// 20230720: change to full check
    				throw error_disallowed(cp); // this should be rare
    			} else {
    				// there is no group that contains all these characters
    				// throw using the highest priority group that matched
    				// https://www.unicode.org/reports/tr39/#mixed_script_confusables
    				throw error_group_member(groups[0], cp);
    			}
    		}
    		groups = gs;
    		if (gs.length == 1) break; // there is only one group left
    	}
    	// there are at least 1 group(s) with all of these characters
    	return groups;
    }

    // throw on first error
    function flatten(split) {
    	return split.map(({input, error, output}) => {
    		if (error) {
    			// don't print label again if just a single label
    			let msg = error.message;
    			// bidi_qq() only necessary if msg is digits
    			throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); 
    		}
    		return str_from_cps(output);
    	}).join(STOP_CH);
    }

    function error_disallowed(cp) {
    	// TODO: add cp to error?
    	return new Error(`disallowed character: ${quoted_cp(cp)}`); 
    }
    function error_group_member(g, cp) {
    	let quoted = quoted_cp(cp);
    	let gg = GROUPS.find(g => g.P.has(cp)); // only check primary
    	if (gg) {
    		quoted = `${gg.N} ${quoted}`;
    	}
    	return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
    	return new Error(`illegal placement: ${where}`);
    }

    // assumption: cps.length > 0
    // assumption: cps[0] isn't a CM
    // assumption: the previous character isn't an emoji
    function check_group(g, cps) {
    	for (let cp of cps) {
    		if (!group_has_cp(g, cp)) {
    			// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. "e{300}{300}"
    			// at the moment, it's unnecessary to introduce an extra error type
    			// until there exists a whitelisted multi-character
    			//   eg. if (M < 0 && is_combining_mark(cp)) { ... }
    			// there are 3 cases:
    			//   1. illegal cm for wrong group => mixture error
    			//   2. illegal cm for same group => cm error
    			//       requires set of whitelist cm per group: 
    			//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))
    			//   3. wrong group => mixture error
    			throw error_group_member(g, cp);
    		}
    	}
    	//if (M >= 0) { // we have a known fixed cm count
    	if (g.M) { // we need to check for NSM
    		let decomposed = nfd(cps);
    		for (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption
    			// 20230210: bugfix: using cps instead of decomposed h/t Carbon225
    			/*
    			if (CM.has(decomposed[i])) {
    				let j = i + 1;
    				while (j < e && CM.has(decomposed[j])) j++;
    				if (j - i > M) {
    					throw new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);
    				}
    				i = j;
    			}
    			*/
    			// 20230217: switch to NSM counting
    			// https://www.unicode.org/reports/tr39/#Optional_Detection
    			if (NSM.has(decomposed[i])) {
    				let j = i + 1;
    				for (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {
    					// a. Forbid sequences of the same nonspacing mark.
    					for (let k = i; k < j; k++) { // O(n^2) but n < 100
    						if (decomposed[k] == cp) {
    							throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
    						}
    					}
    				}
    				// parse to end so we have full nsm count
    				// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).
    				if (j - i > NSM_MAX) {
    					// note: this slice starts with a base char or spacing-mark cm
    					throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);
    				}
    				i = j;
    			}
    		}
    	}
    	// *** this code currently isn't needed ***
    	/*
    	let cm_whitelist = M instanceof Map;
    	for (let i = 0, e = cps.length; i < e; ) {
    		let cp = cps[i++];
    		let seqs = cm_whitelist && M.get(cp);
    		if (seqs) { 
    			// list of codepoints that can follow
    			// if this exists, this will always be 1+
    			let j = i;
    			while (j < e && CM.has(cps[j])) j++;
    			let cms = cps.slice(i, j);
    			let match = seqs.find(seq => !compare_arrays(seq, cms));
    			if (!match) throw new Error(`disallowed combining mark sequence: "${safe_str_from_cps([cp, ...cms])}"`);
    			i = j;
    		} else if (!V.has(cp)) {
    			// https://www.unicode.org/reports/tr39/#mixed_script_confusables
    			let quoted = quoted_cp(cp);
    			for (let cp of cps) {
    				let u = UNIQUE.get(cp);
    				if (u && u !== g) {
    					// if both scripts are restricted this error is confusing
    					// because we don't differentiate RestrictedA from RestrictedB 
    					if (!u.R) quoted = `${quoted} is ${u.N}`;
    					break;
    				}
    			}
    			throw new Error(`disallowed ${g.N} character: ${quoted}`);
    			//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);
    			//throw new Error(`${g.N} does not allow: ${quoted}`);
    		}
    	}
    	if (!cm_whitelist) {
    		let decomposed = nfd(cps);
    		for (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading
    			if (CM.has(decomposed[i])) {
    				let j = i + 1;
    				while (j < e && CM.has(decomposed[j])) j++;
    				if (j - i > M) {
    					throw new Error(`too many combining marks: "${str_from_cps(decomposed.slice(i-1, j))}" (${j-i}/${M})`);
    				}
    				i = j;
    			}
    		}
    	}
    	*/
    }

    // given a list of codepoints
    // returns a list of lists, where emoji are a fully-qualified (as Array subclass)
    // eg. explode_cp("abc💩d") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]
    // 20230818: rename for 'process' name collision h/t Javarome
    // https://github.com/adraffy/ens-normalize.js/issues/23
    function tokens_from_str(input, nf, ef) {
    	let ret = [];
    	let chars = [];
    	input = input.slice().reverse(); // flip so we can pop
    	while (input.length) {
    		let emoji = consume_emoji_reversed(input);
    		if (emoji) {
    			if (chars.length) {
    				ret.push(nf(chars));
    				chars = [];
    			}
    			ret.push(ef(emoji));
    		} else {
    			let cp = input.pop();
    			if (VALID.has(cp)) {
    				chars.push(cp);
    			} else {
    				let cps = MAPPED.get(cp);
    				if (cps) {
    					chars.push(...cps); // less than 10 elements
    				} else if (!IGNORED.has(cp)) {
    					// 20230912: unicode 15.1 changed the order of processing such that
    					// disallowed parts are only rejected after NFC
    					// https://unicode.org/reports/tr46/#Validity_Criteria
    					// this doesn't impact normalization as of today
    					// technically, this error can be removed as the group logic will apply similar logic
    					// however the error type might be less clear
    					throw error_disallowed(cp);
    				}
    			}
    		}
    	}
    	if (chars.length) {
    		ret.push(nf(chars));
    	}
    	return ret;
    }

    function filter_fe0f(cps) {
    	return cps.filter(cp => cp != FE0F);
    }

    // given array of codepoints
    // returns the longest valid emoji sequence (or undefined if no match)
    // *MUTATES* the supplied array
    // disallows interleaved ignored characters
    // fills (optional) eaten array with matched codepoints
    function consume_emoji_reversed(cps, eaten) {
    	let node = EMOJI_ROOT;
    	let emoji;
    	let pos = cps.length;
    	while (pos) {
    		node = node.get(cps[--pos]);
    		if (!node) break;
    		let {V} = node;
    		if (V) { // this is a valid emoji (so far)
    			emoji = V;
    			cps.length = pos; // truncate
    		}
    	}
    	return emoji;
    }

    const Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
        assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
        return comp;
    }
    function ensNameSplit(name) {
        const bytes = toUtf8Bytes(ensNormalize(name));
        const comps = [];
        if (name.length === 0) {
            return comps;
        }
        let last = 0;
        for (let i = 0; i < bytes.length; i++) {
            const d = bytes[i];
            // A separator (i.e. "."); copy this component
            if (d === 0x2e) {
                comps.push(checkComponent(bytes.slice(last, i)));
                last = i + 1;
            }
        }
        // There was a stray separator at the end of the name
        assertArgument(last < bytes.length, "invalid ENS name; empty component", "name", name);
        comps.push(checkComponent(bytes.slice(last)));
        return comps;
    }
    /**
     *  Returns the ENS %%name%% normalized.
     */
    function ensNormalize(name) {
        try {
            if (name.length === 0) {
                throw new Error("empty label");
            }
            return ens_normalize(name);
        }
        catch (error) {
            assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
        }
    }
    /**
     *  Returns ``true`` if %%name%% is a valid ENS name.
     */
    function isValidName(name) {
        try {
            return (ensNameSplit(name).length !== 0);
        }
        catch (error) { }
        return false;
    }
    /**
     *  Returns the [[link-namehash]] for %%name%%.
     */
    function namehash(name) {
        assertArgument(typeof (name) === "string", "invalid ENS name; not a string", "name", name);
        assertArgument(name.length, `invalid ENS name (empty label)`, "name", name);
        let result = Zeros;
        const comps = ensNameSplit(name);
        while (comps.length) {
            result = keccak256(concat([result, keccak256((comps.pop()))]));
        }
        return hexlify(result);
    }
    /**
     *  Returns the DNS encoded %%name%%.
     *
     *  This is used for various parts of ENS name resolution, such
     *  as the wildcard resolution.
     */
    function dnsEncode(name, _maxLength) {
        const length = (_maxLength != null) ? _maxLength : 63;
        assertArgument(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
        return hexlify(concat(ensNameSplit(name).map((comp) => {
            assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
            const bytes = new Uint8Array(comp.length + 1);
            bytes.set(comp, 1);
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }

    function accessSetify(addr, storageKeys) {
        return {
            address: getAddress(addr),
            storageKeys: storageKeys.map((storageKey, index) => {
                assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
                return storageKey.toLowerCase();
            })
        };
    }
    /**
     *  Returns a [[AccessList]] from any ethers-supported access-list structure.
     */
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map((set, index) => {
                if (Array.isArray(set)) {
                    assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
                    return accessSetify(set[0], set[1]);
                }
                assertArgument(set != null && typeof (set) === "object", "invalid address-slot set", "value", value);
                return accessSetify(set.address, set.storageKeys);
            });
        }
        assertArgument(value != null && typeof (value) === "object", "invalid access list", "value", value);
        const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => (a.address.localeCompare(b.address)));
        return result;
    }

    /**
     *  Returns the address for the %%key%%.
     *
     *  The key may be any standard form of public key or a private key.
     */
    function computeAddress(key) {
        let pubkey;
        if (typeof (key) === "string") {
            pubkey = SigningKey.computePublicKey(key, false);
        }
        else {
            pubkey = key.publicKey;
        }
        return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
    }
    /**
     *  Returns the recovered address for the private key that was
     *  used to sign %%digest%% that resulted in %%signature%%.
     */
    function recoverAddress(digest, signature) {
        return computeAddress(SigningKey.recoverPublicKey(digest, signature));
    }

    const BN_0$4 = BigInt(0);
    const BN_2$2 = BigInt(2);
    const BN_27 = BigInt(27);
    const BN_28 = BigInt(28);
    const BN_35 = BigInt(35);
    const BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    const BLOB_SIZE = 4096 * 32;
    function getVersionedHash(version, hash) {
        let versioned = version.toString(16);
        while (versioned.length < 2) {
            versioned = "0" + versioned;
        }
        versioned += sha256(hash).substring(4);
        return "0x" + versioned;
    }
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleAccessList(value, param) {
        try {
            return accessListify(value);
        }
        catch (error) {
            assertArgument(false, error.message, param, value);
        }
    }
    function handleNumber(_value, param) {
        if (_value === "0x") {
            return 0;
        }
        return getNumber(_value, param);
    }
    function handleUint(_value, param) {
        if (_value === "0x") {
            return BN_0$4;
        }
        const value = getBigInt(_value, param);
        assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
        return value;
    }
    function formatNumber(_value, name) {
        const value = getBigInt(_value, "value");
        const result = toBeArray(value);
        assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
        return result;
    }
    function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
    }
    function formatHashes(value, param) {
        assertArgument(Array.isArray(value), `invalid ${param}`, "value", value);
        for (let i = 0; i < value.length; i++) {
            assertArgument(isHexString(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
        }
        return value;
    }
    function _parseLegacy(data) {
        const fields = decodeRlp(data);
        assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
        const tx = {
            type: 0,
            nonce: handleNumber(fields[0], "nonce"),
            gasPrice: handleUint(fields[1], "gasPrice"),
            gasLimit: handleUint(fields[2], "gasLimit"),
            to: handleAddress(fields[3]),
            value: handleUint(fields[4], "value"),
            data: hexlify(fields[5]),
            chainId: BN_0$4
        };
        // Legacy unsigned transaction
        if (fields.length === 6) {
            return tx;
        }
        const v = handleUint(fields[6], "v");
        const r = handleUint(fields[7], "r");
        const s = handleUint(fields[8], "s");
        if (r === BN_0$4 && s === BN_0$4) {
            // EIP-155 unsigned transaction
            tx.chainId = v;
        }
        else {
            // Compute the EIP-155 chain ID (or 0 for legacy)
            let chainId = (v - BN_35) / BN_2$2;
            if (chainId < BN_0$4) {
                chainId = BN_0$4;
            }
            tx.chainId = chainId;
            // Signed Legacy Transaction
            assertArgument(chainId !== BN_0$4 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
            tx.signature = Signature.from({
                r: zeroPadValue(fields[7], 32),
                s: zeroPadValue(fields[8], 32),
                v
            });
            //tx.hash = keccak256(data);
        }
        return tx;
    }
    function _serializeLegacy(tx, sig) {
        const fields = [
            formatNumber(tx.nonce, "nonce"),
            formatNumber(tx.gasPrice || 0, "gasPrice"),
            formatNumber(tx.gasLimit, "gasLimit"),
            (tx.to || "0x"),
            formatNumber(tx.value, "value"),
            tx.data,
        ];
        let chainId = BN_0$4;
        if (tx.chainId != BN_0$4) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = getBigInt(tx.chainId, "tx.chainId");
            // We have a chainId in the tx and an EIP-155 v in the signature,
            // make sure they agree with each other
            assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
        }
        else if (tx.signature) {
            // No explicit chainId, but EIP-155 have a derived implicit chainId
            const legacy = tx.signature.legacyChainId;
            if (legacy != null) {
                chainId = legacy;
            }
        }
        // Requesting an unsigned transaction
        if (!sig) {
            // We have an EIP-155 transaction (chainId was specified and non-zero)
            if (chainId !== BN_0$4) {
                fields.push(toBeArray(chainId));
                fields.push("0x");
                fields.push("0x");
            }
            return encodeRlp(fields);
        }
        // @TODO: We should probably check that tx.signature, chainId, and sig
        //        match but that logic could break existing code, so schedule
        //        this for the next major bump.
        // Compute the EIP-155 v
        let v = BigInt(27 + sig.yParity);
        if (chainId !== BN_0$4) {
            v = Signature.getChainIdV(chainId, sig.v);
        }
        else if (BigInt(sig.v) !== v) {
            assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
        }
        // Add the signature
        fields.push(toBeArray(v));
        fields.push(toBeArray(sig.r));
        fields.push(toBeArray(sig.s));
        return encodeRlp(fields);
    }
    function _parseEipSignature(tx, fields) {
        let yParity;
        try {
            yParity = handleNumber(fields[0], "yParity");
            if (yParity !== 0 && yParity !== 1) {
                throw new Error("bad yParity");
            }
        }
        catch (error) {
            assertArgument(false, "invalid yParity", "yParity", fields[0]);
        }
        const r = zeroPadValue(fields[1], 32);
        const s = zeroPadValue(fields[2], 32);
        const signature = Signature.from({ r, s, yParity });
        tx.signature = signature;
    }
    function _parseEip1559(data) {
        const fields = decodeRlp(getBytes(data).slice(1));
        assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
        const tx = {
            type: 2,
            chainId: handleUint(fields[0], "chainId"),
            nonce: handleNumber(fields[1], "nonce"),
            maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
            maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
            gasPrice: null,
            gasLimit: handleUint(fields[4], "gasLimit"),
            to: handleAddress(fields[5]),
            value: handleUint(fields[6], "value"),
            data: hexlify(fields[7]),
            accessList: handleAccessList(fields[8], "accessList"),
        };
        // Unsigned EIP-1559 Transaction
        if (fields.length === 9) {
            return tx;
        }
        //tx.hash = keccak256(data);
        _parseEipSignature(tx, fields.slice(9));
        return tx;
    }
    function _serializeEip1559(tx, sig) {
        const fields = [
            formatNumber(tx.chainId, "chainId"),
            formatNumber(tx.nonce, "nonce"),
            formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(tx.gasLimit, "gasLimit"),
            (tx.to || "0x"),
            formatNumber(tx.value, "value"),
            tx.data,
            formatAccessList(tx.accessList || [])
        ];
        if (sig) {
            fields.push(formatNumber(sig.yParity, "yParity"));
            fields.push(toBeArray(sig.r));
            fields.push(toBeArray(sig.s));
        }
        return concat(["0x02", encodeRlp(fields)]);
    }
    function _parseEip2930(data) {
        const fields = decodeRlp(getBytes(data).slice(1));
        assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
        const tx = {
            type: 1,
            chainId: handleUint(fields[0], "chainId"),
            nonce: handleNumber(fields[1], "nonce"),
            gasPrice: handleUint(fields[2], "gasPrice"),
            gasLimit: handleUint(fields[3], "gasLimit"),
            to: handleAddress(fields[4]),
            value: handleUint(fields[5], "value"),
            data: hexlify(fields[6]),
            accessList: handleAccessList(fields[7], "accessList")
        };
        // Unsigned EIP-2930 Transaction
        if (fields.length === 8) {
            return tx;
        }
        //tx.hash = keccak256(data);
        _parseEipSignature(tx, fields.slice(8));
        return tx;
    }
    function _serializeEip2930(tx, sig) {
        const fields = [
            formatNumber(tx.chainId, "chainId"),
            formatNumber(tx.nonce, "nonce"),
            formatNumber(tx.gasPrice || 0, "gasPrice"),
            formatNumber(tx.gasLimit, "gasLimit"),
            (tx.to || "0x"),
            formatNumber(tx.value, "value"),
            tx.data,
            formatAccessList(tx.accessList || [])
        ];
        if (sig) {
            fields.push(formatNumber(sig.yParity, "recoveryParam"));
            fields.push(toBeArray(sig.r));
            fields.push(toBeArray(sig.s));
        }
        return concat(["0x01", encodeRlp(fields)]);
    }
    function _parseEip4844(data) {
        let fields = decodeRlp(getBytes(data).slice(1));
        let typeName = "3";
        let blobs = null;
        // Parse the network format
        if (fields.length === 4 && Array.isArray(fields[0])) {
            typeName = "3 (network format)";
            const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
            assertArgument(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
            assertArgument(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
            assertArgument(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
            assertArgument(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
            assertArgument(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
            blobs = [];
            for (let i = 0; i < fields[1].length; i++) {
                blobs.push({
                    data: fBlobs[i],
                    commitment: fCommits[i],
                    proof: fProofs[i],
                });
            }
            fields = fields[0];
        }
        assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", hexlify(data));
        const tx = {
            type: 3,
            chainId: handleUint(fields[0], "chainId"),
            nonce: handleNumber(fields[1], "nonce"),
            maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
            maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
            gasPrice: null,
            gasLimit: handleUint(fields[4], "gasLimit"),
            to: handleAddress(fields[5]),
            value: handleUint(fields[6], "value"),
            data: hexlify(fields[7]),
            accessList: handleAccessList(fields[8], "accessList"),
            maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
            blobVersionedHashes: fields[10]
        };
        if (blobs) {
            tx.blobs = blobs;
        }
        assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
        assertArgument(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
        for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
            assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
        }
        // Unsigned EIP-4844 Transaction
        if (fields.length === 11) {
            return tx;
        }
        // @TODO: Do we need to do this? This is only called internally
        // and used to verify hashes; it might save time to not do this
        //tx.hash = keccak256(concat([ "0x03", encodeRlp(fields) ]));
        _parseEipSignature(tx, fields.slice(11));
        return tx;
    }
    function _serializeEip4844(tx, sig, blobs) {
        const fields = [
            formatNumber(tx.chainId, "chainId"),
            formatNumber(tx.nonce, "nonce"),
            formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(tx.gasLimit, "gasLimit"),
            (tx.to || ZeroAddress),
            formatNumber(tx.value, "value"),
            tx.data,
            formatAccessList(tx.accessList || []),
            formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
            formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
        ];
        if (sig) {
            fields.push(formatNumber(sig.yParity, "yParity"));
            fields.push(toBeArray(sig.r));
            fields.push(toBeArray(sig.s));
            // We have blobs; return the network wrapped format
            if (blobs) {
                return concat([
                    "0x03",
                    encodeRlp([
                        fields,
                        blobs.map((b) => b.data),
                        blobs.map((b) => b.commitment),
                        blobs.map((b) => b.proof),
                    ])
                ]);
            }
        }
        return concat(["0x03", encodeRlp(fields)]);
    }
    /**
     *  A **Transaction** describes an operation to be executed on
     *  Ethereum by an Externally Owned Account (EOA). It includes
     *  who (the [[to]] address), what (the [[data]]) and how much (the
     *  [[value]] in ether) the operation should entail.
     *
     *  @example:
     *    tx = new Transaction()
     *    //_result:
     *
     *    tx.data = "0x1234";
     *    //_result:
     */
    class Transaction {
        #type;
        #to;
        #data;
        #nonce;
        #gasLimit;
        #gasPrice;
        #maxPriorityFeePerGas;
        #maxFeePerGas;
        #value;
        #chainId;
        #sig;
        #accessList;
        #maxFeePerBlobGas;
        #blobVersionedHashes;
        #kzg;
        #blobs;
        /**
         *  The transaction type.
         *
         *  If null, the type will be automatically inferred based on
         *  explicit properties.
         */
        get type() { return this.#type; }
        set type(value) {
            switch (value) {
                case null:
                    this.#type = null;
                    break;
                case 0:
                case "legacy":
                    this.#type = 0;
                    break;
                case 1:
                case "berlin":
                case "eip-2930":
                    this.#type = 1;
                    break;
                case 2:
                case "london":
                case "eip-1559":
                    this.#type = 2;
                    break;
                case 3:
                case "cancun":
                case "eip-4844":
                    this.#type = 3;
                    break;
                default:
                    assertArgument(false, "unsupported transaction type", "type", value);
            }
        }
        /**
         *  The name of the transaction type.
         */
        get typeName() {
            switch (this.type) {
                case 0: return "legacy";
                case 1: return "eip-2930";
                case 2: return "eip-1559";
                case 3: return "eip-4844";
            }
            return null;
        }
        /**
         *  The ``to`` address for the transaction or ``null`` if the
         *  transaction is an ``init`` transaction.
         */
        get to() {
            const value = this.#to;
            if (value == null && this.type === 3) {
                return ZeroAddress;
            }
            return value;
        }
        set to(value) {
            this.#to = (value == null) ? null : getAddress(value);
        }
        /**
         *  The transaction nonce.
         */
        get nonce() { return this.#nonce; }
        set nonce(value) { this.#nonce = getNumber(value, "value"); }
        /**
         *  The gas limit.
         */
        get gasLimit() { return this.#gasLimit; }
        set gasLimit(value) { this.#gasLimit = getBigInt(value); }
        /**
         *  The gas price.
         *
         *  On legacy networks this defines the fee that will be paid. On
         *  EIP-1559 networks, this should be ``null``.
         */
        get gasPrice() {
            const value = this.#gasPrice;
            if (value == null && (this.type === 0 || this.type === 1)) {
                return BN_0$4;
            }
            return value;
        }
        set gasPrice(value) {
            this.#gasPrice = (value == null) ? null : getBigInt(value, "gasPrice");
        }
        /**
         *  The maximum priority fee per unit of gas to pay. On legacy
         *  networks this should be ``null``.
         */
        get maxPriorityFeePerGas() {
            const value = this.#maxPriorityFeePerGas;
            if (value == null) {
                if (this.type === 2 || this.type === 3) {
                    return BN_0$4;
                }
                return null;
            }
            return value;
        }
        set maxPriorityFeePerGas(value) {
            this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, "maxPriorityFeePerGas");
        }
        /**
         *  The maximum total fee per unit of gas to pay. On legacy
         *  networks this should be ``null``.
         */
        get maxFeePerGas() {
            const value = this.#maxFeePerGas;
            if (value == null) {
                if (this.type === 2 || this.type === 3) {
                    return BN_0$4;
                }
                return null;
            }
            return value;
        }
        set maxFeePerGas(value) {
            this.#maxFeePerGas = (value == null) ? null : getBigInt(value, "maxFeePerGas");
        }
        /**
         *  The transaction data. For ``init`` transactions this is the
         *  deployment code.
         */
        get data() { return this.#data; }
        set data(value) { this.#data = hexlify(value); }
        /**
         *  The amount of ether (in wei) to send in this transactions.
         */
        get value() { return this.#value; }
        set value(value) {
            this.#value = getBigInt(value, "value");
        }
        /**
         *  The chain ID this transaction is valid on.
         */
        get chainId() { return this.#chainId; }
        set chainId(value) { this.#chainId = getBigInt(value); }
        /**
         *  If signed, the signature for this transaction.
         */
        get signature() { return this.#sig || null; }
        set signature(value) {
            this.#sig = (value == null) ? null : Signature.from(value);
        }
        /**
         *  The access list.
         *
         *  An access list permits discounted (but pre-paid) access to
         *  bytecode and state variable access within contract execution.
         */
        get accessList() {
            const value = this.#accessList || null;
            if (value == null) {
                if (this.type === 1 || this.type === 2 || this.type === 3) {
                    // @TODO: in v7, this should assign the value or become
                    // a live object itself, otherwise mutation is inconsistent
                    return [];
                }
                return null;
            }
            return value;
        }
        set accessList(value) {
            this.#accessList = (value == null) ? null : accessListify(value);
        }
        /**
         *  The max fee per blob gas for Cancun transactions.
         */
        get maxFeePerBlobGas() {
            const value = this.#maxFeePerBlobGas;
            if (value == null && this.type === 3) {
                return BN_0$4;
            }
            return value;
        }
        set maxFeePerBlobGas(value) {
            this.#maxFeePerBlobGas = (value == null) ? null : getBigInt(value, "maxFeePerBlobGas");
        }
        /**
         *  The BLOb versioned hashes for Cancun transactions.
         */
        get blobVersionedHashes() {
            // @TODO: Mutation is inconsistent; if unset, the returned value
            // cannot mutate the object, if set it can
            let value = this.#blobVersionedHashes;
            if (value == null && this.type === 3) {
                return [];
            }
            return value;
        }
        set blobVersionedHashes(value) {
            if (value != null) {
                assertArgument(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
                value = value.slice();
                for (let i = 0; i < value.length; i++) {
                    assertArgument(isHexString(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
                }
            }
            this.#blobVersionedHashes = value;
        }
        /**
         *  The BLObs for the Transaction, if any.
         *
         *  If ``blobs`` is non-``null``, then the [[seriailized]]
         *  will return the network formatted sidecar, otherwise it
         *  will return the standard [[link-eip-2718]] payload. The
         *  [[unsignedSerialized]] is unaffected regardless.
         *
         *  When setting ``blobs``, either fully valid [[Blob]] objects
         *  may be specified (i.e. correctly padded, with correct
         *  committments and proofs) or a raw [[BytesLike]] may
         *  be provided.
         *
         *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
         *  be already set. The blob will be correctly padded and the
         *  [[KzgLibrary]] will be used to compute the committment and
         *  proof for the blob.
         *
         *  A BLOb is a sequence of field elements, each of which must
         *  be within the BLS field modulo, so some additional processing
         *  may be required to encode arbitrary data to ensure each 32 byte
         *  field is within the valid range.
         *
         *  Setting this automatically populates [[blobVersionedHashes]],
         *  overwriting any existing values. Setting this to ``null``
         *  does **not** remove the [[blobVersionedHashes]], leaving them
         *  present.
         */
        get blobs() {
            if (this.#blobs == null) {
                return null;
            }
            return this.#blobs.map((b) => Object.assign({}, b));
        }
        set blobs(_blobs) {
            if (_blobs == null) {
                this.#blobs = null;
                return;
            }
            const blobs = [];
            const versionedHashes = [];
            for (let i = 0; i < _blobs.length; i++) {
                const blob = _blobs[i];
                if (isBytesLike(blob)) {
                    assert(this.#kzg, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
                        operation: "set blobs()"
                    });
                    let data = getBytes(blob);
                    assertArgument(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
                    // Pad blob if necessary
                    if (data.length !== BLOB_SIZE) {
                        const padded = new Uint8Array(BLOB_SIZE);
                        padded.set(data);
                        data = padded;
                    }
                    const commit = this.#kzg.blobToKzgCommitment(data);
                    const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));
                    blobs.push({
                        data: hexlify(data),
                        commitment: hexlify(commit),
                        proof
                    });
                    versionedHashes.push(getVersionedHash(1, commit));
                }
                else {
                    const commit = hexlify(blob.commitment);
                    blobs.push({
                        data: hexlify(blob.data),
                        commitment: commit,
                        proof: hexlify(blob.proof)
                    });
                    versionedHashes.push(getVersionedHash(1, commit));
                }
            }
            this.#blobs = blobs;
            this.#blobVersionedHashes = versionedHashes;
        }
        get kzg() { return this.#kzg; }
        set kzg(kzg) {
            this.#kzg = kzg;
        }
        /**
         *  Creates a new Transaction with default values.
         */
        constructor() {
            this.#type = null;
            this.#to = null;
            this.#nonce = 0;
            this.#gasLimit = BN_0$4;
            this.#gasPrice = null;
            this.#maxPriorityFeePerGas = null;
            this.#maxFeePerGas = null;
            this.#data = "0x";
            this.#value = BN_0$4;
            this.#chainId = BN_0$4;
            this.#sig = null;
            this.#accessList = null;
            this.#maxFeePerBlobGas = null;
            this.#blobVersionedHashes = null;
            this.#blobs = null;
            this.#kzg = null;
        }
        /**
         *  The transaction hash, if signed. Otherwise, ``null``.
         */
        get hash() {
            if (this.signature == null) {
                return null;
            }
            return keccak256(this.#getSerialized(true, false));
        }
        /**
         *  The pre-image hash of this transaction.
         *
         *  This is the digest that a [[Signer]] must sign to authorize
         *  this transaction.
         */
        get unsignedHash() {
            return keccak256(this.unsignedSerialized);
        }
        /**
         *  The sending address, if signed. Otherwise, ``null``.
         */
        get from() {
            if (this.signature == null) {
                return null;
            }
            return recoverAddress(this.unsignedHash, this.signature);
        }
        /**
         *  The public key of the sender, if signed. Otherwise, ``null``.
         */
        get fromPublicKey() {
            if (this.signature == null) {
                return null;
            }
            return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
        }
        /**
         *  Returns true if signed.
         *
         *  This provides a Type Guard that properties requiring a signed
         *  transaction are non-null.
         */
        isSigned() {
            return this.signature != null;
        }
        #getSerialized(signed, sidecar) {
            assert(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
            const sig = signed ? this.signature : null;
            switch (this.inferType()) {
                case 0:
                    return _serializeLegacy(this, sig);
                case 1:
                    return _serializeEip2930(this, sig);
                case 2:
                    return _serializeEip1559(this, sig);
                case 3:
                    return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
            }
            assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
        }
        /**
         *  The serialized transaction.
         *
         *  This throws if the transaction is unsigned. For the pre-image,
         *  use [[unsignedSerialized]].
         */
        get serialized() {
            return this.#getSerialized(true, true);
        }
        /**
         *  The transaction pre-image.
         *
         *  The hash of this is the digest which needs to be signed to
         *  authorize this transaction.
         */
        get unsignedSerialized() {
            return this.#getSerialized(false, false);
        }
        /**
         *  Return the most "likely" type; currently the highest
         *  supported transaction type.
         */
        inferType() {
            const types = this.inferTypes();
            // Prefer London (EIP-1559) over Cancun (BLOb)
            if (types.indexOf(2) >= 0) {
                return 2;
            }
            // Return the highest inferred type
            return (types.pop());
        }
        /**
         *  Validates the explicit properties and returns a list of compatible
         *  transaction types.
         */
        inferTypes() {
            // Checks that there are no conflicting properties set
            const hasGasPrice = this.gasPrice != null;
            const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);
            const hasAccessList = (this.accessList != null);
            const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);
            //if (hasGasPrice && hasFee) {
            //    throw new Error("transaction cannot have gasPrice and maxFeePerGas");
            //}
            if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
                assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
            }
            //if (this.type === 2 && hasGasPrice) {
            //    throw new Error("eip-1559 transaction cannot have gasPrice");
            //}
            assert(!hasFee || (this.type !== 0 && this.type !== 1), "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
            assert(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
            const types = [];
            // Explicit type
            if (this.type != null) {
                types.push(this.type);
            }
            else {
                if (hasFee) {
                    types.push(2);
                }
                else if (hasGasPrice) {
                    types.push(1);
                    if (!hasAccessList) {
                        types.push(0);
                    }
                }
                else if (hasAccessList) {
                    types.push(1);
                    types.push(2);
                }
                else if (hasBlob && this.to) {
                    types.push(3);
                }
                else {
                    types.push(0);
                    types.push(1);
                    types.push(2);
                    types.push(3);
                }
            }
            types.sort();
            return types;
        }
        /**
         *  Returns true if this transaction is a legacy transaction (i.e.
         *  ``type === 0``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isLegacy() {
            return (this.type === 0);
        }
        /**
         *  Returns true if this transaction is berlin hardform transaction (i.e.
         *  ``type === 1``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isBerlin() {
            return (this.type === 1);
        }
        /**
         *  Returns true if this transaction is london hardform transaction (i.e.
         *  ``type === 2``).
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isLondon() {
            return (this.type === 2);
        }
        /**
         *  Returns true if this transaction is an [[link-eip-4844]] BLOB
         *  transaction.
         *
         *  This provides a Type Guard that the related properties are
         *  non-null.
         */
        isCancun() {
            return (this.type === 3);
        }
        /**
         *  Create a copy of this transaciton.
         */
        clone() {
            return Transaction.from(this);
        }
        /**
         *  Return a JSON-friendly object.
         */
        toJSON() {
            const s = (v) => {
                if (v == null) {
                    return null;
                }
                return v.toString();
            };
            return {
                type: this.type,
                to: this.to,
                //            from: this.from,
                data: this.data,
                nonce: this.nonce,
                gasLimit: s(this.gasLimit),
                gasPrice: s(this.gasPrice),
                maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
                maxFeePerGas: s(this.maxFeePerGas),
                value: s(this.value),
                chainId: s(this.chainId),
                sig: this.signature ? this.signature.toJSON() : null,
                accessList: this.accessList
            };
        }
        /**
         *  Create a **Transaction** from a serialized transaction or a
         *  Transaction-like object.
         */
        static from(tx) {
            if (tx == null) {
                return new Transaction();
            }
            if (typeof (tx) === "string") {
                const payload = getBytes(tx);
                if (payload[0] >= 0x7f) { // @TODO: > vs >= ??
                    return Transaction.from(_parseLegacy(payload));
                }
                switch (payload[0]) {
                    case 1: return Transaction.from(_parseEip2930(payload));
                    case 2: return Transaction.from(_parseEip1559(payload));
                    case 3: return Transaction.from(_parseEip4844(payload));
                }
                assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
            }
            const result = new Transaction();
            if (tx.type != null) {
                result.type = tx.type;
            }
            if (tx.to != null) {
                result.to = tx.to;
            }
            if (tx.nonce != null) {
                result.nonce = tx.nonce;
            }
            if (tx.gasLimit != null) {
                result.gasLimit = tx.gasLimit;
            }
            if (tx.gasPrice != null) {
                result.gasPrice = tx.gasPrice;
            }
            if (tx.maxPriorityFeePerGas != null) {
                result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
            }
            if (tx.maxFeePerGas != null) {
                result.maxFeePerGas = tx.maxFeePerGas;
            }
            if (tx.maxFeePerBlobGas != null) {
                result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
            }
            if (tx.data != null) {
                result.data = tx.data;
            }
            if (tx.value != null) {
                result.value = tx.value;
            }
            if (tx.chainId != null) {
                result.chainId = tx.chainId;
            }
            if (tx.signature != null) {
                result.signature = Signature.from(tx.signature);
            }
            if (tx.accessList != null) {
                result.accessList = tx.accessList;
            }
            // This will get overwritten by blobs, if present
            if (tx.blobVersionedHashes != null) {
                result.blobVersionedHashes = tx.blobVersionedHashes;
            }
            // Make sure we assign the kzg before assigning blobs, which
            // require the library in the event raw blob data is provided.
            if (tx.kzg != null) {
                result.kzg = tx.kzg;
            }
            if (tx.blobs != null) {
                result.blobs = tx.blobs;
            }
            if (tx.hash != null) {
                assertArgument(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
                assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
            }
            if (tx.from != null) {
                assertArgument(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
                assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
            }
            return result;
        }
    }

    /**
     *  Computes the [[link-eip-191]] personal-sign message digest to sign.
     *
     *  This prefixes the message with [[MessagePrefix]] and the decimal length
     *  of %%message%% and computes the [[keccak256]] digest.
     *
     *  If %%message%% is a string, it is converted to its UTF-8 bytes
     *  first. To compute the digest of a [[DataHexString]], it must be converted
     *  to [bytes](getBytes).
     *
     *  @example:
     *    hashMessage("Hello World")
     *    //_result:
     *
     *    // Hashes the SIX (6) string characters, i.e.
     *    // [ "0", "x", "4", "2", "4", "3" ]
     *    hashMessage("0x4243")
     *    //_result:
     *
     *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...
     *    hashMessage(getBytes("0x4243"))
     *    //_result:
     *
     *    // ...which is equal to using data
     *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))
     *    //_result:
     *
     */
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
        }
        return keccak256(concat([
            toUtf8Bytes(MessagePrefix),
            toUtf8Bytes(String(message.length)),
            message
        ]));
    }
    /**
     *  Return the address of the private key that produced
     *  the signature %%sig%% during signing for %%message%%.
     */
    function verifyMessage(message, sig) {
        const digest = hashMessage(message);
        return recoverAddress(digest, sig);
    }

    const regexBytes = new RegExp("^bytes([0-9]+)$");
    const regexNumber = new RegExp("^(u?int)([0-9]*)$");
    const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return getBytes(zeroPadValue(value, 32));
                }
                return getBytes(getAddress(value));
            case "string":
                return toUtf8Bytes(value);
            case "bytes":
                return getBytes(value);
            case "bool":
                value = (!!value ? "0x01" : "0x00");
                if (isArray) {
                    return getBytes(zeroPadValue(value, 32));
                }
                return getBytes(value);
        }
        let match = type.match(regexNumber);
        if (match) {
            let signed = (match[1] === "int");
            let size = parseInt(match[2] || "256");
            assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, "invalid number type", "type", type);
            if (isArray) {
                size = 256;
            }
            if (signed) {
                value = toTwos(value, size);
            }
            return getBytes(zeroPadValue(toBeArray(value), size / 8));
        }
        match = type.match(regexBytes);
        if (match) {
            const size = parseInt(match[1]);
            assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
            assertArgument(dataLength(value) === size, `invalid value for ${type}`, "value", value);
            if (isArray) {
                return getBytes(zeroPadBytes(value, 32));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            const baseType = match[1];
            const count = parseInt(match[2] || String(value.length));
            assertArgument(count === value.length, `invalid array length for ${type}`, "value", value);
            const result = [];
            value.forEach(function (value) {
                result.push(_pack(baseType, value, true));
            });
            return getBytes(concat(result));
        }
        assertArgument(false, "invalid type", "type", type);
    }
    // @TODO: Array Enum
    /**
     *   Computes the [[link-solc-packed]] representation of %%values%%
     *   respectively to their %%types%%.
     *
     *   @example:
     *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
     *       solidityPacked([ "address", "uint" ], [ addr, 45 ]);
     *       //_result:
     */
    function solidityPacked(types, values) {
        assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
        const tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return hexlify(concat(tight));
    }
    /**
     *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%
     *   respectively to their %%types%%.
     *
     *   @example:
     *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
     *       solidityPackedKeccak256([ "address", "uint" ], [ addr, 45 ]);
     *       //_result:
     */
    function solidityPackedKeccak256(types, values) {
        return keccak256(solidityPacked(types, values));
    }
    /**
     *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%
     *   respectively to their %%types%%.
     *
     *   @example:
     *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
     *       solidityPackedSha256([ "address", "uint" ], [ addr, 45 ]);
     *       //_result:
     */
    function solidityPackedSha256(types, values) {
        return sha256(solidityPacked(types, values));
    }

    //import { TypedDataDomain, TypedDataField } from "@ethersproject/providerabstract-signer";
    const padding = new Uint8Array(32);
    padding.fill(0);
    const BN__1 = BigInt(-1);
    const BN_0$3 = BigInt(0);
    const BN_1$1 = BigInt(1);
    const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        const bytes = getBytes(value);
        const padOffset = bytes.length % 32;
        if (padOffset) {
            return concat([bytes, padding.slice(padOffset)]);
        }
        return hexlify(bytes);
    }
    const hexTrue = toBeHex(BN_1$1, 32);
    const hexFalse = toBeHex(BN_0$3, 32);
    const domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    const domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            assertArgument(typeof (value) === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            return value;
        };
    }
    const domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (_value) {
            const value = getBigInt(_value, "domain.chainId");
            assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value);
            if (Number.isSafeInteger(value)) {
                return Number(value);
            }
            return toQuantity(value);
        },
        verifyingContract: function (value) {
            try {
                return getAddress(value).toLowerCase();
            }
            catch (error) { }
            assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function (value) {
            const bytes = getBytes(value, "domain.salt");
            assertArgument(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
            return hexlify(bytes);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            const match = type.match(/^(u?)int(\d+)$/);
            if (match) {
                const signed = (match[1] === "");
                const width = parseInt(match[2]);
                assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
                const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);
                const boundsLower = signed ? ((boundsUpper + BN_1$1) * BN__1) : BN_0$3;
                return function (_value) {
                    const value = getBigInt(_value, "value");
                    assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
                    return toBeHex(signed ? toTwos(value, 256) : value, 32);
                };
            }
        }
        // bytesXX
        {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
                const width = parseInt(match[1]);
                assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
                return function (value) {
                    const bytes = getBytes(value);
                    assertArgument(bytes.length === width, `invalid length for ${type}`, "value", value);
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return zeroPadValue(getAddress(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return keccak256(value);
            };
            case "string": return function (value) {
                return id(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
    }
    // foo[][3] => { base: "foo", index: "[][3]", array: {
    //     base: "foo", prefix: "foo[]", count: 3 } }
    function splitArray(type) {
        const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
        if (match) {
            return {
                base: match[1],
                index: (match[2] + match[4]),
                array: {
                    base: match[1],
                    prefix: (match[1] + match[2]),
                    count: (match[5] ? parseInt(match[5]) : -1),
                }
            };
        }
        return { base: type };
    }
    /**
     *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads
     *  for signed typed data.
     *
     *  This is useful for those that wish to compute various components of a
     *  typed data hash, primary types, or sub-components, but generally the
     *  higher level [[Signer-signTypedData]] is more useful.
     */
    class TypedDataEncoder {
        /**
         *  The primary type for the structured [[types]].
         *
         *  This is derived automatically from the [[types]], since no
         *  recursion is possible, once the DAG for the types is consturcted
         *  internally, the primary type must be the only remaining type with
         *  no parent nodes.
         */
        primaryType;
        #types;
        /**
         *  The types.
         */
        get types() {
            return JSON.parse(this.#types);
        }
        #fullTypes;
        #encoderCache;
        /**
         *  Create a new **TypedDataEncoder** for %%types%%.
         *
         *  This performs all necessary checking that types are valid and
         *  do not violate the [[link-eip-712]] structural constraints as
         *  well as computes the [[primaryType]].
         */
        constructor(_types) {
            this.#fullTypes = new Map();
            this.#encoderCache = new Map();
            // Link struct types to their direct child structs
            const links = new Map();
            // Link structs to structs which contain them as a child
            const parents = new Map();
            // Link all subtypes within a given struct
            const subtypes = new Map();
            const types = {};
            Object.keys(_types).forEach((type) => {
                types[type] = _types[type].map(({ name, type }) => {
                    // Normalize the base type (unless name conflict)
                    let { base, index } = splitArray(type);
                    if (base === "int" && !_types["int"]) {
                        base = "int256";
                    }
                    if (base === "uint" && !_types["uint"]) {
                        base = "uint256";
                    }
                    return { name, type: (base + (index || "")) };
                });
                links.set(type, new Set());
                parents.set(type, []);
                subtypes.set(type, new Set());
            });
            this.#types = JSON.stringify(types);
            for (const name in types) {
                const uniqueNames = new Set();
                for (const field of types[name]) {
                    // Check each field has a unique name
                    assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
                    uniqueNames.add(field.name);
                    // Get the base type (drop any array specifiers)
                    const baseType = splitArray(field.type).base;
                    assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
                    // Is this a base encoding type?
                    const encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        continue;
                    }
                    assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
                    // Add linkage
                    parents.get(baseType).push(name);
                    links.get(name).add(baseType);
                }
            }
            // Deduce the primary type
            const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));
            assertArgument(primaryTypes.length !== 0, "missing primary type", "types", _types);
            assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", _types);
            defineProperties(this, { primaryType: primaryTypes[0] });
            // Check for circular type references
            function checkCircular(type, found) {
                assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
                found.add(type);
                for (const child of links.get(type)) {
                    if (!parents.has(child)) {
                        continue;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    for (const subtype of found) {
                        subtypes.get(subtype).add(child);
                    }
                }
                found.delete(type);
            }
            checkCircular(this.primaryType, new Set());
            // Compute each fully describe type
            for (const [name, set] of subtypes) {
                const st = Array.from(set);
                st.sort();
                this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
            }
        }
        /**
         *  Returnthe encoder for the specific %%type%%.
         */
        getEncoder(type) {
            let encoder = this.#encoderCache.get(type);
            if (!encoder) {
                encoder = this.#getEncoder(type);
                this.#encoderCache.set(type, encoder);
            }
            return encoder;
        }
        #getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            const array = splitArray(type).array;
            if (array) {
                const subtype = array.prefix;
                const subEncoder = this.getEncoder(subtype);
                return (value) => {
                    assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
                    let result = value.map(subEncoder);
                    if (this.#fullTypes.has(subtype)) {
                        result = result.map(keccak256);
                    }
                    return keccak256(concat(result));
                };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                const encodedType = id(this.#fullTypes.get(type));
                return (value) => {
                    const values = fields.map(({ name, type }) => {
                        const result = this.getEncoder(type)(value[name]);
                        if (this.#fullTypes.has(type)) {
                            return keccak256(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType);
                    return concat(values);
                };
            }
            assertArgument(false, `unknown type: ${type}`, "type", type);
        }
        /**
         *  Return the full type for %%name%%.
         */
        encodeType(name) {
            const result = this.#fullTypes.get(name);
            assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
            return result;
        }
        /**
         *  Return the encoded %%value%% for the %%type%%.
         */
        encodeData(type, value) {
            return this.getEncoder(type)(value);
        }
        /**
         *  Returns the hash of %%value%% for the type of %%name%%.
         */
        hashStruct(name, value) {
            return keccak256(this.encodeData(name, value));
        }
        /**
         *  Return the fulled encoded %%value%% for the [[types]].
         */
        encode(value) {
            return this.encodeData(this.primaryType, value);
        }
        /**
         *  Return the hash of the fully encoded %%value%% for the [[types]].
         */
        hash(value) {
            return this.hashStruct(this.primaryType, value);
        }
        /**
         *  @_ignore:
         */
        _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            const array = splitArray(type).array;
            if (array) {
                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
                return value.map((v) => this._visit(array.prefix, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                return fields.reduce((accum, { name, type }) => {
                    accum[name] = this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            assertArgument(false, `unknown type: ${type}`, "type", type);
        }
        /**
         *  Call %%calback%% for each value in %%value%%, passing the type and
         *  component within %%value%%.
         *
         *  This is useful for replacing addresses or other transformation that
         *  may be desired on each component, based on its type.
         */
        visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
        }
        /**
         *  Create a new **TypedDataEncoder** for %%types%%.
         */
        static from(types) {
            return new TypedDataEncoder(types);
        }
        /**
         *  Return the primary type for %%types%%.
         */
        static getPrimaryType(types) {
            return TypedDataEncoder.from(types).primaryType;
        }
        /**
         *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
         */
        static hashStruct(name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        }
        /**
         *  Return the domain hash for %%domain%%.
         */
        static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
                if (domain[name] == null) {
                    continue;
                }
                const type = domainFieldTypes[name];
                assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        /**
         *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
         */
        static encode(domain, types, value) {
            return concat([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        }
        /**
         *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
         */
        static hash(domain, types, value) {
            return keccak256(TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        /**
         * Resolves to the value from resolving all addresses in %%value%% for
         * %%types%% and the %%domain%%.
         */
        static async resolveNames(domain, types, value, resolveName) {
            // Make a copy to isolate it from the object passed in
            domain = Object.assign({}, domain);
            // Allow passing null to ignore value
            for (const key in domain) {
                if (domain[key] == null) {
                    delete domain[key];
                }
            }
            // Look up all ENS names
            const ensCache = {};
            // Do we need to look up the domain's verifyingContract?
            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                ensCache[domain.verifyingContract] = "0x";
            }
            // We are going to use the encoder to visit all the base values
            const encoder = TypedDataEncoder.from(types);
            // Get a list of all the addresses
            encoder.visit(value, (type, value) => {
                if (type === "address" && !isHexString(value, 20)) {
                    ensCache[value] = "0x";
                }
                return value;
            });
            // Lookup each name
            for (const name in ensCache) {
                ensCache[name] = await resolveName(name);
            }
            // Replace the domain verifyingContract if needed
            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                domain.verifyingContract = ensCache[domain.verifyingContract];
            }
            // Replace all ENS names with their address
            value = encoder.visit(value, (type, value) => {
                if (type === "address" && ensCache[value]) {
                    return ensCache[value];
                }
                return value;
            });
            return { domain, value };
        }
        /**
         *  Returns the JSON-encoded payload expected by nodes which implement
         *  the JSON-RPC [[link-eip-712]] method.
         */
        static getPayload(domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
                const value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = TypedDataEncoder.from(types);
            // Get the normalized types
            types = encoder.types;
            const typesWithDomain = Object.assign({}, types);
            assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
            typesWithDomain.EIP712Domain = domainTypes;
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, (type, value) => {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return hexlify(getBytes(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return getBigInt(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            assertArgument(typeof (value) === "string", "invalid string", "value", value);
                            return value;
                    }
                    assertArgument(false, "unsupported type", "type", type);
                })
            };
        }
    }
    /**
     *  Compute the address used to sign the typed data for the %%signature%%.
     */
    function verifyTypedData(domain, types, value, signature) {
        return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
    }

    /**
     *  A fragment is a single item from an ABI, which may represent any of:
     *
     *  - [Functions](FunctionFragment)
     *  - [Events](EventFragment)
     *  - [Constructors](ConstructorFragment)
     *  - Custom [Errors](ErrorFragment)
     *  - [Fallback or Receive](FallbackFragment) functions
     *
     *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]
     */
    // [ "a", "b" ] => { "a": 1, "b": 1 }
    function setify(items) {
        const result = new Set();
        items.forEach((k) => result.add(k));
        return Object.freeze(result);
    }
    const _kwVisibDeploy = "external public payable override";
    const KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
    // Visibility Keywords
    const _kwVisib = "constant external internal payable private public pure view override";
    const KwVisib = setify(_kwVisib.split(" "));
    const _kwTypes = "constructor error event fallback function receive struct";
    const KwTypes = setify(_kwTypes.split(" "));
    const _kwModifiers = "calldata memory storage payable indexed";
    const KwModifiers = setify(_kwModifiers.split(" "));
    const _kwOther = "tuple returns";
    // All Keywords
    const _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
    const Keywords = setify(_keywords.split(" "));
    // Single character tokens
    const SimpleTokens = {
        "(": "OPEN_PAREN", ")": "CLOSE_PAREN",
        "[": "OPEN_BRACKET", "]": "CLOSE_BRACKET",
        ",": "COMMA", "@": "AT"
    };
    // Parser regexes to consume the next token
    const regexWhitespacePrefix = new RegExp("^(\\s*)");
    const regexNumberPrefix = new RegExp("^([0-9]+)");
    const regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
    // Parser regexs to check validity
    const regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
    const regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
    class TokenString {
        #offset;
        #tokens;
        get offset() { return this.#offset; }
        get length() { return this.#tokens.length - this.#offset; }
        constructor(tokens) {
            this.#offset = 0;
            this.#tokens = tokens.slice();
        }
        clone() { return new TokenString(this.#tokens); }
        reset() { this.#offset = 0; }
        #subTokenString(from = 0, to = 0) {
            return new TokenString(this.#tokens.slice(from, to).map((t) => {
                return Object.freeze(Object.assign({}, t, {
                    match: (t.match - from),
                    linkBack: (t.linkBack - from),
                    linkNext: (t.linkNext - from),
                }));
            }));
        }
        // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
        popKeyword(allowed) {
            const top = this.peek();
            if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
                throw new Error(`expected keyword ${top.text}`);
            }
            return this.pop().text;
        }
        // Pops and returns the value of the next token if it is `type`; throws if out of tokens
        popType(type) {
            if (this.peek().type !== type) {
                const top = this.peek();
                throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
            }
            return this.pop().text;
        }
        // Pops and returns a "(" TOKENS ")"
        popParen() {
            const top = this.peek();
            if (top.type !== "OPEN_PAREN") {
                throw new Error("bad start");
            }
            const result = this.#subTokenString(this.#offset + 1, top.match + 1);
            this.#offset = top.match + 1;
            return result;
        }
        // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
        popParams() {
            const top = this.peek();
            if (top.type !== "OPEN_PAREN") {
                throw new Error("bad start");
            }
            const result = [];
            while (this.#offset < top.match - 1) {
                const link = this.peek().linkNext;
                result.push(this.#subTokenString(this.#offset + 1, link));
                this.#offset = link;
            }
            this.#offset = top.match + 1;
            return result;
        }
        // Returns the top Token, throwing if out of tokens
        peek() {
            if (this.#offset >= this.#tokens.length) {
                throw new Error("out-of-bounds");
            }
            return this.#tokens[this.#offset];
        }
        // Returns the next value, if it is a keyword in `allowed`
        peekKeyword(allowed) {
            const top = this.peekType("KEYWORD");
            return (top != null && allowed.has(top)) ? top : null;
        }
        // Returns the value of the next token if it is `type`
        peekType(type) {
            if (this.length === 0) {
                return null;
            }
            const top = this.peek();
            return (top.type === type) ? top.text : null;
        }
        // Returns the next token; throws if out of tokens
        pop() {
            const result = this.peek();
            this.#offset++;
            return result;
        }
        toString() {
            const tokens = [];
            for (let i = this.#offset; i < this.#tokens.length; i++) {
                const token = this.#tokens[i];
                tokens.push(`${token.type}:${token.text}`);
            }
            return `<TokenString ${tokens.join(" ")}>`;
        }
    }
    function lex(text) {
        const tokens = [];
        const throwError = (message) => {
            const token = (offset < text.length) ? JSON.stringify(text[offset]) : "$EOI";
            throw new Error(`invalid token ${token} at ${offset}: ${message}`);
        };
        let brackets = [];
        let commas = [];
        let offset = 0;
        while (offset < text.length) {
            // Strip off any leading whitespace
            let cur = text.substring(offset);
            let match = cur.match(regexWhitespacePrefix);
            if (match) {
                offset += match[1].length;
                cur = text.substring(offset);
            }
            const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
            tokens.push(token);
            let type = (SimpleTokens[cur[0]] || "");
            if (type) {
                token.type = type;
                token.text = cur[0];
                offset++;
                if (type === "OPEN_PAREN") {
                    brackets.push(tokens.length - 1);
                    commas.push(tokens.length - 1);
                }
                else if (type == "CLOSE_PAREN") {
                    if (brackets.length === 0) {
                        throwError("no matching open bracket");
                    }
                    token.match = brackets.pop();
                    (tokens[token.match]).match = tokens.length - 1;
                    token.depth--;
                    token.linkBack = commas.pop();
                    (tokens[token.linkBack]).linkNext = tokens.length - 1;
                }
                else if (type === "COMMA") {
                    token.linkBack = commas.pop();
                    (tokens[token.linkBack]).linkNext = tokens.length - 1;
                    commas.push(tokens.length - 1);
                }
                else if (type === "OPEN_BRACKET") {
                    token.type = "BRACKET";
                }
                else if (type === "CLOSE_BRACKET") {
                    // Remove the CLOSE_BRACKET
                    let suffix = tokens.pop().text;
                    if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
                        const value = tokens.pop().text;
                        suffix = value + suffix;
                        (tokens[tokens.length - 1]).value = getNumber(value);
                    }
                    if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
                        throw new Error("missing opening bracket");
                    }
                    (tokens[tokens.length - 1]).text += suffix;
                }
                continue;
            }
            match = cur.match(regexIdPrefix);
            if (match) {
                token.text = match[1];
                offset += token.text.length;
                if (Keywords.has(token.text)) {
                    token.type = "KEYWORD";
                    continue;
                }
                if (token.text.match(regexType)) {
                    token.type = "TYPE";
                    continue;
                }
                token.type = "ID";
                continue;
            }
            match = cur.match(regexNumberPrefix);
            if (match) {
                token.text = match[1];
                token.type = "NUMBER";
                offset += token.text.length;
                continue;
            }
            throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
        }
        return new TokenString(tokens.map((t) => Object.freeze(t)));
    }
    // Check only one of `allowed` is in `set`
    function allowSingle(set, allowed) {
        let included = [];
        for (const key in allowed.keys()) {
            if (set.has(key)) {
                included.push(key);
            }
        }
        if (included.length > 1) {
            throw new Error(`conflicting types: ${included.join(", ")}`);
        }
    }
    // Functions to process a Solidity Signature TokenString from left-to-right for...
    // ...the name with an optional type, returning the name
    function consumeName(type, tokens) {
        if (tokens.peekKeyword(KwTypes)) {
            const keyword = tokens.pop().text;
            if (keyword !== type) {
                throw new Error(`expected ${type}, got ${keyword}`);
            }
        }
        return tokens.popType("ID");
    }
    // ...all keywords matching allowed, returning the keywords
    function consumeKeywords(tokens, allowed) {
        const keywords = new Set();
        while (true) {
            const keyword = tokens.peekType("KEYWORD");
            if (keyword == null || (allowed && !allowed.has(keyword))) {
                break;
            }
            tokens.pop();
            if (keywords.has(keyword)) {
                throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
            }
            keywords.add(keyword);
        }
        return Object.freeze(keywords);
    }
    // ...all visibility keywords, returning the coalesced mutability
    function consumeMutability(tokens) {
        let modifiers = consumeKeywords(tokens, KwVisib);
        // Detect conflicting modifiers
        allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
        allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
        // Process mutability states
        if (modifiers.has("view")) {
            return "view";
        }
        if (modifiers.has("pure")) {
            return "pure";
        }
        if (modifiers.has("payable")) {
            return "payable";
        }
        if (modifiers.has("nonpayable")) {
            return "nonpayable";
        }
        // Process legacy `constant` last
        if (modifiers.has("constant")) {
            return "view";
        }
        return "nonpayable";
    }
    // ...a parameter list, returning the ParamType list
    function consumeParams(tokens, allowIndexed) {
        return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
    }
    // ...a gas limit, returning a BigNumber or null if none
    function consumeGas(tokens) {
        if (tokens.peekType("AT")) {
            tokens.pop();
            if (tokens.peekType("NUMBER")) {
                return getBigInt(tokens.pop().text);
            }
            throw new Error("invalid gas");
        }
        return null;
    }
    function consumeEoi(tokens) {
        if (tokens.length) {
            throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
        }
    }
    const regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
    function verifyBasicType(type) {
        const match = type.match(regexType);
        assertArgument(match, "invalid type", "type", type);
        if (type === "uint") {
            return "uint256";
        }
        if (type === "int") {
            return "int256";
        }
        if (match[2]) {
            // bytesXX
            const length = parseInt(match[2]);
            assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
        }
        else if (match[3]) {
            // intXX or uintXX
            const size = parseInt(match[3]);
            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, "invalid numeric width", "type", type);
        }
        return type;
    }
    // Make the Fragment constructors effectively private
    const _guard$2 = {};
    const internal$1 = Symbol.for("_ethers_internal");
    const ParamTypeInternal = "_ParamTypeInternal";
    const ErrorFragmentInternal = "_ErrorInternal";
    const EventFragmentInternal = "_EventInternal";
    const ConstructorFragmentInternal = "_ConstructorInternal";
    const FallbackFragmentInternal = "_FallbackInternal";
    const FunctionFragmentInternal = "_FunctionInternal";
    const StructFragmentInternal = "_StructInternal";
    /**
     *  Each input and output of a [[Fragment]] is an Array of **ParamType**.
     */
    class ParamType {
        /**
         *  The local name of the parameter (or ``""`` if unbound)
         */
        name;
        /**
         *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
         *  ``"uint256[3][]"``)
         */
        type;
        /**
         *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
         */
        baseType;
        /**
         *  True if the parameters is indexed.
         *
         *  For non-indexable types this is ``null``.
         */
        indexed;
        /**
         *  The components for the tuple.
         *
         *  For non-tuple types this is ``null``.
         */
        components;
        /**
         *  The array length, or ``-1`` for dynamic-lengthed arrays.
         *
         *  For non-array types this is ``null``.
         */
        arrayLength;
        /**
         *  The type of each child in the array.
         *
         *  For non-array types this is ``null``.
         */
        arrayChildren;
        /**
         *  @private
         */
        constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
            assertPrivate(guard, _guard$2, "ParamType");
            Object.defineProperty(this, internal$1, { value: ParamTypeInternal });
            if (components) {
                components = Object.freeze(components.slice());
            }
            if (baseType === "array") {
                if (arrayLength == null || arrayChildren == null) {
                    throw new Error("");
                }
            }
            else if (arrayLength != null || arrayChildren != null) {
                throw new Error("");
            }
            if (baseType === "tuple") {
                if (components == null) {
                    throw new Error("");
                }
            }
            else if (components != null) {
                throw new Error("");
            }
            defineProperties(this, {
                name, type, baseType, indexed, components, arrayLength, arrayChildren
            });
        }
        /**
         *  Return a string representation of this type.
         *
         *  For example,
         *
         *  ``sighash" => "(uint256,address)"``
         *
         *  ``"minimal" => "tuple(uint256,address) indexed"``
         *
         *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
         */
        format(format) {
            if (format == null) {
                format = "sighash";
            }
            if (format === "json") {
                const name = this.name || "";
                if (this.isArray()) {
                    const result = JSON.parse(this.arrayChildren.format("json"));
                    result.name = name;
                    result.type += `[${(this.arrayLength < 0 ? "" : String(this.arrayLength))}]`;
                    return JSON.stringify(result);
                }
                const result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.isTuple()) {
                    result.components = this.components.map((c) => JSON.parse(c.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.isArray()) {
                result += this.arrayChildren.format(format);
                result += `[${(this.arrayLength < 0 ? "" : String(this.arrayLength))}]`;
            }
            else {
                if (this.isTuple()) {
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === "full") ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== "sighash") {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === "full" && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        /**
         *  Returns true if %%this%% is an Array type.
         *
         *  This provides a type gaurd ensuring that [[arrayChildren]]
         *  and [[arrayLength]] are non-null.
         */
        isArray() {
            return (this.baseType === "array");
        }
        /**
         *  Returns true if %%this%% is a Tuple type.
         *
         *  This provides a type gaurd ensuring that [[components]]
         *  is non-null.
         */
        isTuple() {
            return (this.baseType === "tuple");
        }
        /**
         *  Returns true if %%this%% is an Indexable type.
         *
         *  This provides a type gaurd ensuring that [[indexed]]
         *  is non-null.
         */
        isIndexable() {
            return (this.indexed != null);
        }
        /**
         *  Walks the **ParamType** with %%value%%, calling %%process%%
         *  on each type, destructing the %%value%% recursively.
         */
        walk(value, process) {
            if (this.isArray()) {
                if (!Array.isArray(value)) {
                    throw new Error("invalid array value");
                }
                if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
                    throw new Error("array is wrong length");
                }
                const _this = this;
                return value.map((v) => (_this.arrayChildren.walk(v, process)));
            }
            if (this.isTuple()) {
                if (!Array.isArray(value)) {
                    throw new Error("invalid tuple value");
                }
                if (value.length !== this.components.length) {
                    throw new Error("array is wrong length");
                }
                const _this = this;
                return value.map((v, i) => (_this.components[i].walk(v, process)));
            }
            return process(this.type, value);
        }
        #walkAsync(promises, value, process, setValue) {
            if (this.isArray()) {
                if (!Array.isArray(value)) {
                    throw new Error("invalid array value");
                }
                if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
                    throw new Error("array is wrong length");
                }
                const childType = this.arrayChildren;
                const result = value.slice();
                result.forEach((value, index) => {
                    childType.#walkAsync(promises, value, process, (value) => {
                        result[index] = value;
                    });
                });
                setValue(result);
                return;
            }
            if (this.isTuple()) {
                const components = this.components;
                // Convert the object into an array
                let result;
                if (Array.isArray(value)) {
                    result = value.slice();
                }
                else {
                    if (value == null || typeof (value) !== "object") {
                        throw new Error("invalid tuple value");
                    }
                    result = components.map((param) => {
                        if (!param.name) {
                            throw new Error("cannot use object value with unnamed components");
                        }
                        if (!(param.name in value)) {
                            throw new Error(`missing value for component ${param.name}`);
                        }
                        return value[param.name];
                    });
                }
                if (result.length !== this.components.length) {
                    throw new Error("array is wrong length");
                }
                result.forEach((value, index) => {
                    components[index].#walkAsync(promises, value, process, (value) => {
                        result[index] = value;
                    });
                });
                setValue(result);
                return;
            }
            const result = process(this.type, value);
            if (result.then) {
                promises.push((async function () { setValue(await result); })());
            }
            else {
                setValue(result);
            }
        }
        /**
         *  Walks the **ParamType** with %%value%%, asynchronously calling
         *  %%process%% on each type, destructing the %%value%% recursively.
         *
         *  This can be used to resolve ENS names by walking and resolving each
         *  ``"address"`` type.
         */
        async walkAsync(value, process) {
            const promises = [];
            const result = [value];
            this.#walkAsync(promises, value, process, (value) => {
                result[0] = value;
            });
            if (promises.length) {
                await Promise.all(promises);
            }
            return result[0];
        }
        /**
         *  Creates a new **ParamType** for %%obj%%.
         *
         *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
         *  otherwise the ``indexed`` keyword will throw an error.
         */
        static from(obj, allowIndexed) {
            if (ParamType.isParamType(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                try {
                    return ParamType.from(lex(obj), allowIndexed);
                }
                catch (error) {
                    assertArgument(false, "invalid param type", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                let type = "", baseType = "";
                let comps = null;
                if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
                    // Tuple
                    baseType = "tuple";
                    comps = obj.popParams().map((t) => ParamType.from(t));
                    type = `tuple(${comps.map((c) => c.format()).join(",")})`;
                }
                else {
                    // Normal
                    type = verifyBasicType(obj.popType("TYPE"));
                    baseType = type;
                }
                // Check for Array
                let arrayChildren = null;
                let arrayLength = null;
                while (obj.length && obj.peekType("BRACKET")) {
                    const bracket = obj.pop(); //arrays[i];
                    arrayChildren = new ParamType(_guard$2, "", type, baseType, null, comps, arrayLength, arrayChildren);
                    arrayLength = bracket.value;
                    type += bracket.text;
                    baseType = "array";
                    comps = null;
                }
                let indexed = null;
                const keywords = consumeKeywords(obj, KwModifiers);
                if (keywords.has("indexed")) {
                    if (!allowIndexed) {
                        throw new Error("");
                    }
                    indexed = true;
                }
                const name = (obj.peekType("ID") ? obj.pop().text : "");
                if (obj.length) {
                    throw new Error("leftover tokens");
                }
                return new ParamType(_guard$2, name, type, baseType, indexed, comps, arrayLength, arrayChildren);
            }
            const name = obj.name;
            assertArgument(!name || (typeof (name) === "string" && name.match(regexId)), "invalid name", "obj.name", name);
            let indexed = obj.indexed;
            if (indexed != null) {
                assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
                indexed = !!indexed;
            }
            let type = obj.type;
            let arrayMatch = type.match(regexArrayType);
            if (arrayMatch) {
                const arrayLength = parseInt(arrayMatch[2] || "-1");
                const arrayChildren = ParamType.from({
                    type: arrayMatch[1],
                    components: obj.components
                });
                return new ParamType(_guard$2, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
            }
            if (type === "tuple" || type.startsWith("tuple(" /* fix: ) */) || type.startsWith("(" /* fix: ) */)) {
                const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;
                const tuple = new ParamType(_guard$2, name || "", type, "tuple", indexed, comps, null, null);
                // @TODO: use lexer to validate and normalize type
                return tuple;
            }
            type = verifyBasicType(obj.type);
            return new ParamType(_guard$2, name || "", type, type, indexed, null, null, null);
        }
        /**
         *  Returns true if %%value%% is a **ParamType**.
         */
        static isParamType(value) {
            return (value && value[internal$1] === ParamTypeInternal);
        }
    }
    /**
     *  An abstract class to represent An individual fragment from a parse ABI.
     */
    class Fragment {
        /**
         *  The type of the fragment.
         */
        type;
        /**
         *  The inputs for the fragment.
         */
        inputs;
        /**
         *  @private
         */
        constructor(guard, type, inputs) {
            assertPrivate(guard, _guard$2, "Fragment");
            inputs = Object.freeze(inputs.slice());
            defineProperties(this, { type, inputs });
        }
        /**
         *  Creates a new **Fragment** for %%obj%%, wich can be any supported
         *  ABI frgament type.
         */
        static from(obj) {
            if (typeof (obj) === "string") {
                // Try parsing JSON...
                try {
                    Fragment.from(JSON.parse(obj));
                }
                catch (e) { }
                // ...otherwise, use the human-readable lexer
                return Fragment.from(lex(obj));
            }
            if (obj instanceof TokenString) {
                // Human-readable ABI (already lexed)
                const type = obj.peekKeyword(KwTypes);
                switch (type) {
                    case "constructor": return ConstructorFragment.from(obj);
                    case "error": return ErrorFragment.from(obj);
                    case "event": return EventFragment.from(obj);
                    case "fallback":
                    case "receive":
                        return FallbackFragment.from(obj);
                    case "function": return FunctionFragment.from(obj);
                    case "struct": return StructFragment.from(obj);
                }
            }
            else if (typeof (obj) === "object") {
                // JSON ABI
                switch (obj.type) {
                    case "constructor": return ConstructorFragment.from(obj);
                    case "error": return ErrorFragment.from(obj);
                    case "event": return EventFragment.from(obj);
                    case "fallback":
                    case "receive":
                        return FallbackFragment.from(obj);
                    case "function": return FunctionFragment.from(obj);
                    case "struct": return StructFragment.from(obj);
                }
                assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
                    operation: "Fragment.from"
                });
            }
            assertArgument(false, "unsupported frgament object", "obj", obj);
        }
        /**
         *  Returns true if %%value%% is a [[ConstructorFragment]].
         */
        static isConstructor(value) {
            return ConstructorFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is an [[ErrorFragment]].
         */
        static isError(value) {
            return ErrorFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is an [[EventFragment]].
         */
        static isEvent(value) {
            return EventFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is a [[FunctionFragment]].
         */
        static isFunction(value) {
            return FunctionFragment.isFragment(value);
        }
        /**
         *  Returns true if %%value%% is a [[StructFragment]].
         */
        static isStruct(value) {
            return StructFragment.isFragment(value);
        }
    }
    /**
     *  An abstract class to represent An individual fragment
     *  which has a name from a parse ABI.
     */
    class NamedFragment extends Fragment {
        /**
         *  The name of the fragment.
         */
        name;
        /**
         *  @private
         */
        constructor(guard, type, name, inputs) {
            super(guard, type, inputs);
            assertArgument(typeof (name) === "string" && name.match(regexId), "invalid identifier", "name", name);
            inputs = Object.freeze(inputs.slice());
            defineProperties(this, { name });
        }
    }
    function joinParams(format, params) {
        return "(" + params.map((p) => p.format(format)).join((format === "full") ? ", " : ",") + ")";
    }
    /**
     *  A Fragment which represents a //Custom Error//.
     */
    class ErrorFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, inputs) {
            super(guard, "error", name, inputs);
            Object.defineProperty(this, internal$1, { value: ErrorFragmentInternal });
        }
        /**
         *  The Custom Error selector.
         */
        get selector() {
            return id(this.format("sighash")).substring(0, 10);
        }
        /**
         *  Returns a string representation of this fragment as %%format%%.
         */
        format(format) {
            if (format == null) {
                format = "sighash";
            }
            if (format === "json") {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                });
            }
            const result = [];
            if (format !== "sighash") {
                result.push("error");
            }
            result.push(this.name + joinParams(format, this.inputs));
            return result.join(" ");
        }
        /**
         *  Returns a new **ErrorFragment** for %%obj%%.
         */
        static from(obj) {
            if (ErrorFragment.isFragment(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                return ErrorFragment.from(lex(obj));
            }
            else if (obj instanceof TokenString) {
                const name = consumeName("error", obj);
                const inputs = consumeParams(obj);
                consumeEoi(obj);
                return new ErrorFragment(_guard$2, name, inputs);
            }
            return new ErrorFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is an
         *  **ErrorFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === ErrorFragmentInternal);
        }
    }
    /**
     *  A Fragment which represents an Event.
     */
    class EventFragment extends NamedFragment {
        /**
         *  Whether this event is anonymous.
         */
        anonymous;
        /**
         *  @private
         */
        constructor(guard, name, inputs, anonymous) {
            super(guard, "event", name, inputs);
            Object.defineProperty(this, internal$1, { value: EventFragmentInternal });
            defineProperties(this, { anonymous });
        }
        /**
         *  The Event topic hash.
         */
        get topicHash() {
            return id(this.format("sighash"));
        }
        /**
         *  Returns a string representation of this event as %%format%%.
         */
        format(format) {
            if (format == null) {
                format = "sighash";
            }
            if (format === "json") {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
                });
            }
            const result = [];
            if (format !== "sighash") {
                result.push("event");
            }
            result.push(this.name + joinParams(format, this.inputs));
            if (format !== "sighash" && this.anonymous) {
                result.push("anonymous");
            }
            return result.join(" ");
        }
        /**
         *  Return the topic hash for an event with %%name%% and %%params%%.
         */
        static getTopicHash(name, params) {
            params = (params || []).map((p) => ParamType.from(p));
            const fragment = new EventFragment(_guard$2, name, params, false);
            return fragment.topicHash;
        }
        /**
         *  Returns a new **EventFragment** for %%obj%%.
         */
        static from(obj) {
            if (EventFragment.isFragment(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                try {
                    return EventFragment.from(lex(obj));
                }
                catch (error) {
                    assertArgument(false, "invalid event fragment", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                const name = consumeName("event", obj);
                const inputs = consumeParams(obj, true);
                const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
                consumeEoi(obj);
                return new EventFragment(_guard$2, name, inputs, anonymous);
            }
            return new EventFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is an
         *  **EventFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === EventFragmentInternal);
        }
    }
    /**
     *  A Fragment which represents a constructor.
     */
    class ConstructorFragment extends Fragment {
        /**
         *  Whether the constructor can receive an endowment.
         */
        payable;
        /**
         *  The recommended gas limit for deployment or ``null``.
         */
        gas;
        /**
         *  @private
         */
        constructor(guard, type, inputs, payable, gas) {
            super(guard, type, inputs);
            Object.defineProperty(this, internal$1, { value: ConstructorFragmentInternal });
            defineProperties(this, { payable, gas });
        }
        /**
         *  Returns a string representation of this constructor as %%format%%.
         */
        format(format) {
            assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
            if (format === "json") {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: (this.payable ? "payable" : "undefined"),
                    payable: this.payable,
                    gas: ((this.gas != null) ? this.gas : undefined),
                    inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
                });
            }
            const result = [`constructor${joinParams(format, this.inputs)}`];
            if (this.payable) {
                result.push("payable");
            }
            if (this.gas != null) {
                result.push(`@${this.gas.toString()}`);
            }
            return result.join(" ");
        }
        /**
         *  Returns a new **ConstructorFragment** for %%obj%%.
         */
        static from(obj) {
            if (ConstructorFragment.isFragment(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                try {
                    return ConstructorFragment.from(lex(obj));
                }
                catch (error) {
                    assertArgument(false, "invalid constuctor fragment", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                consumeKeywords(obj, setify(["constructor"]));
                const inputs = consumeParams(obj);
                const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
                const gas = consumeGas(obj);
                consumeEoi(obj);
                return new ConstructorFragment(_guard$2, "constructor", inputs, payable, gas);
            }
            return new ConstructorFragment(_guard$2, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **ConstructorFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === ConstructorFragmentInternal);
        }
    }
    /**
     *  A Fragment which represents a method.
     */
    class FallbackFragment extends Fragment {
        /**
         *  If the function can be sent value during invocation.
         */
        payable;
        constructor(guard, inputs, payable) {
            super(guard, "fallback", inputs);
            Object.defineProperty(this, internal$1, { value: FallbackFragmentInternal });
            defineProperties(this, { payable });
        }
        /**
         *  Returns a string representation of this fallback as %%format%%.
         */
        format(format) {
            const type = ((this.inputs.length === 0) ? "receive" : "fallback");
            if (format === "json") {
                const stateMutability = (this.payable ? "payable" : "nonpayable");
                return JSON.stringify({ type, stateMutability });
            }
            return `${type}()${this.payable ? " payable" : ""}`;
        }
        /**
         *  Returns a new **FallbackFragment** for %%obj%%.
         */
        static from(obj) {
            if (FallbackFragment.isFragment(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                try {
                    return FallbackFragment.from(lex(obj));
                }
                catch (error) {
                    assertArgument(false, "invalid fallback fragment", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                const errorObj = obj.toString();
                const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
                assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
                const type = obj.popKeyword(setify(["fallback", "receive"]));
                // receive()
                if (type === "receive") {
                    const inputs = consumeParams(obj);
                    assertArgument(inputs.length === 0, `receive cannot have arguments`, "obj.inputs", inputs);
                    consumeKeywords(obj, setify(["payable"]));
                    consumeEoi(obj);
                    return new FallbackFragment(_guard$2, [], true);
                }
                // fallback() [payable]
                // fallback(bytes) [payable] returns (bytes)
                let inputs = consumeParams(obj);
                if (inputs.length) {
                    assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
                }
                else {
                    inputs = [ParamType.from("bytes")];
                }
                const mutability = consumeMutability(obj);
                assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
                if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
                    const outputs = consumeParams(obj);
                    assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
                }
                consumeEoi(obj);
                return new FallbackFragment(_guard$2, inputs, mutability === "payable");
            }
            if (obj.type === "receive") {
                return new FallbackFragment(_guard$2, [], true);
            }
            if (obj.type === "fallback") {
                const inputs = [ParamType.from("bytes")];
                const payable = (obj.stateMutability === "payable");
                return new FallbackFragment(_guard$2, inputs, payable);
            }
            assertArgument(false, "invalid fallback description", "obj", obj);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **FallbackFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === FallbackFragmentInternal);
        }
    }
    /**
     *  A Fragment which represents a method.
     */
    class FunctionFragment extends NamedFragment {
        /**
         *  If the function is constant (e.g. ``pure`` or ``view`` functions).
         */
        constant;
        /**
         *  The returned types for the result of calling this function.
         */
        outputs;
        /**
         *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
         *  or ``pure``)
         */
        stateMutability;
        /**
         *  If the function can be sent value during invocation.
         */
        payable;
        /**
         *  The recommended gas limit to send when calling this function.
         */
        gas;
        /**
         *  @private
         */
        constructor(guard, name, stateMutability, inputs, outputs, gas) {
            super(guard, "function", name, inputs);
            Object.defineProperty(this, internal$1, { value: FunctionFragmentInternal });
            outputs = Object.freeze(outputs.slice());
            const constant = (stateMutability === "view" || stateMutability === "pure");
            const payable = (stateMutability === "payable");
            defineProperties(this, { constant, gas, outputs, payable, stateMutability });
        }
        /**
         *  The Function selector.
         */
        get selector() {
            return id(this.format("sighash")).substring(0, 10);
        }
        /**
         *  Returns a string representation of this function as %%format%%.
         */
        format(format) {
            if (format == null) {
                format = "sighash";
            }
            if (format === "json") {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: ((this.gas != null) ? this.gas : undefined),
                    inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
                    outputs: this.outputs.map((o) => JSON.parse(o.format(format))),
                });
            }
            const result = [];
            if (format !== "sighash") {
                result.push("function");
            }
            result.push(this.name + joinParams(format, this.inputs));
            if (format !== "sighash") {
                if (this.stateMutability !== "nonpayable") {
                    result.push(this.stateMutability);
                }
                if (this.outputs && this.outputs.length) {
                    result.push("returns");
                    result.push(joinParams(format, this.outputs));
                }
                if (this.gas != null) {
                    result.push(`@${this.gas.toString()}`);
                }
            }
            return result.join(" ");
        }
        /**
         *  Return the selector for a function with %%name%% and %%params%%.
         */
        static getSelector(name, params) {
            params = (params || []).map((p) => ParamType.from(p));
            const fragment = new FunctionFragment(_guard$2, name, "view", params, [], null);
            return fragment.selector;
        }
        /**
         *  Returns a new **FunctionFragment** for %%obj%%.
         */
        static from(obj) {
            if (FunctionFragment.isFragment(obj)) {
                return obj;
            }
            if (typeof (obj) === "string") {
                try {
                    return FunctionFragment.from(lex(obj));
                }
                catch (error) {
                    assertArgument(false, "invalid function fragment", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                const name = consumeName("function", obj);
                const inputs = consumeParams(obj);
                const mutability = consumeMutability(obj);
                let outputs = [];
                if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
                    outputs = consumeParams(obj);
                }
                const gas = consumeGas(obj);
                consumeEoi(obj);
                return new FunctionFragment(_guard$2, name, mutability, inputs, outputs, gas);
            }
            let stateMutability = obj.stateMutability;
            // Use legacy Solidity ABI logic if stateMutability is missing
            if (stateMutability == null) {
                stateMutability = "payable";
                if (typeof (obj.constant) === "boolean") {
                    stateMutability = "view";
                    if (!obj.constant) {
                        stateMutability = "payable";
                        if (typeof (obj.payable) === "boolean" && !obj.payable) {
                            stateMutability = "nonpayable";
                        }
                    }
                }
                else if (typeof (obj.payable) === "boolean" && !obj.payable) {
                    stateMutability = "nonpayable";
                }
            }
            // @TODO: verifyState for stateMutability (e.g. throw if
            //        payable: false but stateMutability is "nonpayable")
            return new FunctionFragment(_guard$2, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);
        }
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **FunctionFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === FunctionFragmentInternal);
        }
    }
    /**
     *  A Fragment which represents a structure.
     */
    class StructFragment extends NamedFragment {
        /**
         *  @private
         */
        constructor(guard, name, inputs) {
            super(guard, "struct", name, inputs);
            Object.defineProperty(this, internal$1, { value: StructFragmentInternal });
        }
        /**
         *  Returns a string representation of this struct as %%format%%.
         */
        format() {
            throw new Error("@TODO");
        }
        /**
         *  Returns a new **StructFragment** for %%obj%%.
         */
        static from(obj) {
            if (typeof (obj) === "string") {
                try {
                    return StructFragment.from(lex(obj));
                }
                catch (error) {
                    assertArgument(false, "invalid struct fragment", "obj", obj);
                }
            }
            else if (obj instanceof TokenString) {
                const name = consumeName("struct", obj);
                const inputs = consumeParams(obj);
                consumeEoi(obj);
                return new StructFragment(_guard$2, name, inputs);
            }
            return new StructFragment(_guard$2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
        }
        // @TODO: fix this return type
        /**
         *  Returns ``true`` and provides a type guard if %%value%% is a
         *  **StructFragment**.
         */
        static isFragment(value) {
            return (value && value[internal$1] === StructFragmentInternal);
        }
    }

    /**
     *  When sending values to or receiving values from a [[Contract]], the
     *  data is generally encoded using the [ABI standard](link-solc-abi).
     *
     *  The AbiCoder provides a utility to encode values to ABI data and
     *  decode values from ABI data.
     *
     *  Most of the time, developers should favour the [[Contract]] class,
     *  which further abstracts a lot of the finer details of ABI data.
     *
     *  @_section api/abi/abi-coder:ABI Encoding
     */
    // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
    // https://docs.soliditylang.org/en/v0.8.17/control-structures.html
    const PanicReasons$1 = new Map();
    PanicReasons$1.set(0x00, "GENERIC_PANIC");
    PanicReasons$1.set(0x01, "ASSERT_FALSE");
    PanicReasons$1.set(0x11, "OVERFLOW");
    PanicReasons$1.set(0x12, "DIVIDE_BY_ZERO");
    PanicReasons$1.set(0x21, "ENUM_RANGE_ERROR");
    PanicReasons$1.set(0x22, "BAD_STORAGE_DATA");
    PanicReasons$1.set(0x31, "STACK_UNDERFLOW");
    PanicReasons$1.set(0x32, "ARRAY_RANGE_ERROR");
    PanicReasons$1.set(0x41, "OUT_OF_MEMORY");
    PanicReasons$1.set(0x51, "UNINITIALIZED_FUNCTION_CALL");
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    let defaultCoder = null;
    let defaultMaxInflation = 1024;
    function getBuiltinCallException(action, tx, data, abiCoder) {
        let message = "missing revert data";
        let reason = null;
        const invocation = null;
        let revert = null;
        if (data) {
            message = "execution reverted";
            const bytes = getBytes(data);
            data = hexlify(data);
            if (bytes.length === 0) {
                message += " (no data present; likely require(false) occurred";
                reason = "require(false)";
            }
            else if (bytes.length % 32 !== 4) {
                message += " (could not decode reason; invalid data length)";
            }
            else if (hexlify(bytes.slice(0, 4)) === "0x08c379a0") {
                // Error(string)
                try {
                    reason = abiCoder.decode(["string"], bytes.slice(4))[0];
                    revert = {
                        signature: "Error(string)",
                        name: "Error",
                        args: [reason]
                    };
                    message += `: ${JSON.stringify(reason)}`;
                }
                catch (error) {
                    message += " (could not decode reason; invalid string data)";
                }
            }
            else if (hexlify(bytes.slice(0, 4)) === "0x4e487b71") {
                // Panic(uint256)
                try {
                    const code = Number(abiCoder.decode(["uint256"], bytes.slice(4))[0]);
                    revert = {
                        signature: "Panic(uint256)",
                        name: "Panic",
                        args: [code]
                    };
                    reason = `Panic due to ${PanicReasons$1.get(code) || "UNKNOWN"}(${code})`;
                    message += `: ${reason}`;
                }
                catch (error) {
                    message += " (could not decode panic code)";
                }
            }
            else {
                message += " (unknown custom error)";
            }
        }
        const transaction = {
            to: (tx.to ? getAddress(tx.to) : null),
            data: (tx.data || "0x")
        };
        if (tx.from) {
            transaction.from = getAddress(tx.from);
        }
        return makeError(message, "CALL_EXCEPTION", {
            action, data, reason, transaction, invocation, revert
        });
    }
    /**
     *  The **AbiCoder** is a low-level class responsible for encoding JavaScript
     *  values into binary data and decoding binary data into JavaScript values.
     */
    class AbiCoder {
        #getCoder(param) {
            if (param.isArray()) {
                return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
            }
            if (param.isTuple()) {
                return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
            }
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, "invalid " + match[1] + " bit length", "param", param);
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
                return new FixedBytesCoder(size, param.name);
            }
            assertArgument(false, "invalid type", "type", param.type);
        }
        /**
         *  Get the default values for the given %%types%%.
         *
         *  For example, a ``uint`` is by default ``0`` and ``bool``
         *  is by default ``false``.
         */
        getDefaultValue(types) {
            const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.defaultValue();
        }
        /**
         *  Encode the %%values%% as the %%types%% into ABI data.
         *
         *  @returns DataHexstring
         */
        encode(types, values) {
            assertArgumentCount(values.length, types.length, "types/values length mismatch");
            const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = new Writer();
            coder.encode(writer, values);
            return writer.data;
        }
        /**
         *  Decode the ABI %%data%% as the %%types%% into values.
         *
         *  If %%loose%% decoding is enabled, then strict padding is
         *  not enforced. Some older versions of Solidity incorrectly
         *  padded event data emitted from ``external`` functions.
         */
        decode(types, data, loose) {
            const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(new Reader(data, loose, defaultMaxInflation));
        }
        static _setDefaultMaxInflation(value) {
            assertArgument(typeof (value) === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
            defaultMaxInflation = value;
        }
        /**
         *  Returns the shared singleton instance of a default [[AbiCoder]].
         *
         *  On the first call, the instance is created internally.
         */
        static defaultAbiCoder() {
            if (defaultCoder == null) {
                defaultCoder = new AbiCoder();
            }
            return defaultCoder;
        }
        /**
         *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
         *  result %%data%% for the [[CallExceptionAction]] %%action%% against
         *  the Transaction %%tx%%.
         */
        static getBuiltinCallException(action, tx, data) {
            return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
        }
    }

    /**
     *  About bytes32 strings...
     *
     *  @_docloc: api/utils:Bytes32 Strings
     */
    /**
     *  Encodes %%text%% as a Bytes32 string.
     */
    function encodeBytes32String(text) {
        // Get the bytes
        const bytes = toUtf8Bytes(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return zeroPadBytes(bytes, 32);
    }
    /**
     *  Encodes the Bytes32-encoded %%bytes%% into a string.
     */
    function decodeBytes32String(_bytes) {
        const data = getBytes(_bytes, "bytes");
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        let length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return toUtf8String(data.slice(0, length));
    }

    /**
     *  The Interface class is a low-level class that accepts an
     *  ABI and provides all the necessary functionality to encode
     *  and decode paramaters to and results from methods, events
     *  and errors.
     *
     *  It also provides several convenience methods to automatically
     *  search and find matching transactions and events to parse them.
     *
     *  @_subsection api/abi:Interfaces  [interfaces]
     */
    /**
     *  When using the [[Interface-parseLog]] to automatically match a Log to its event
     *  for parsing, a **LogDescription** is returned.
     */
    class LogDescription {
        /**
         *  The matching fragment for the ``topic0``.
         */
        fragment;
        /**
         *  The name of the Event.
         */
        name;
        /**
         *  The full Event signature.
         */
        signature;
        /**
         *  The topic hash for the Event.
         */
        topic;
        /**
         *  The arguments passed into the Event with ``emit``.
         */
        args;
        /**
         *  @_ignore:
         */
        constructor(fragment, topic, args) {
            const name = fragment.name, signature = fragment.format();
            defineProperties(this, {
                fragment, name, signature, topic, args
            });
        }
    }
    /**
     *  When using the [[Interface-parseTransaction]] to automatically match
     *  a transaction data to its function for parsing,
     *  a **TransactionDescription** is returned.
     */
    class TransactionDescription {
        /**
         *  The matching fragment from the transaction ``data``.
         */
        fragment;
        /**
         *  The name of the Function from the transaction ``data``.
         */
        name;
        /**
         *  The arguments passed to the Function from the transaction ``data``.
         */
        args;
        /**
         *  The full Function signature from the transaction ``data``.
         */
        signature;
        /**
         *  The selector for the Function from the transaction ``data``.
         */
        selector;
        /**
         *  The ``value`` (in wei) from the transaction.
         */
        value;
        /**
         *  @_ignore:
         */
        constructor(fragment, selector, args, value) {
            const name = fragment.name, signature = fragment.format();
            defineProperties(this, {
                fragment, name, args, signature, selector, value
            });
        }
    }
    /**
     *  When using the [[Interface-parseError]] to automatically match an
     *  error for a call result for parsing, an **ErrorDescription** is returned.
     */
    class ErrorDescription {
        /**
         *  The matching fragment.
         */
        fragment;
        /**
         *  The name of the Error.
         */
        name;
        /**
         *  The arguments passed to the Error with ``revert``.
         */
        args;
        /**
         *  The full Error signature.
         */
        signature;
        /**
         *  The selector for the Error.
         */
        selector;
        /**
         *  @_ignore:
         */
        constructor(fragment, selector, args) {
            const name = fragment.name, signature = fragment.format();
            defineProperties(this, {
                fragment, name, args, signature, selector
            });
        }
    }
    /**
     *  An **Indexed** is used as a value when a value that does not
     *  fit within a topic (i.e. not a fixed-length, 32-byte type). It
     *  is the ``keccak256`` of the value, and used for types such as
     *  arrays, tuples, bytes and strings.
     */
    class Indexed {
        /**
         *  The ``keccak256`` of the value logged.
         */
        hash;
        /**
         *  @_ignore:
         */
        _isIndexed;
        /**
         *  Returns ``true`` if %%value%% is an **Indexed**.
         *
         *  This provides a Type Guard for property access.
         */
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
        /**
         *  @_ignore:
         */
        constructor(hash) {
            defineProperties(this, { hash, _isIndexed: true });
        }
    }
    // https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require
    const PanicReasons = {
        "0": "generic panic",
        "1": "assert(false)",
        "17": "arithmetic overflow",
        "18": "division or modulo by zero",
        "33": "enum overflow",
        "34": "invalid encoded storage byte array accessed",
        "49": "out-of-bounds array access; popping on an empty array",
        "50": "out-of-bounds access of an array or bytesN",
        "65": "out of memory",
        "81": "uninitialized function",
    };
    const BuiltinErrors = {
        "0x08c379a0": {
            signature: "Error(string)",
            name: "Error",
            inputs: ["string"],
            reason: (message) => {
                return `reverted with reason string ${JSON.stringify(message)}`;
            }
        },
        "0x4e487b71": {
            signature: "Panic(uint256)",
            name: "Panic",
            inputs: ["uint256"],
            reason: (code) => {
                let reason = "unknown panic code";
                if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {
                    reason = PanicReasons[code.toString()];
                }
                return `reverted with panic code 0x${code.toString(16)} (${reason})`;
            }
        }
    };
    /**
     *  An Interface abstracts many of the low-level details for
     *  encoding and decoding the data on the blockchain.
     *
     *  An ABI provides information on how to encode data to send to
     *  a Contract, how to decode the results and events and how to
     *  interpret revert errors.
     *
     *  The ABI can be specified by [any supported format](InterfaceAbi).
     */
    class Interface {
        /**
         *  All the Contract ABI members (i.e. methods, events, errors, etc).
         */
        fragments;
        /**
         *  The Contract constructor.
         */
        deploy;
        /**
         *  The Fallback method, if any.
         */
        fallback;
        /**
         *  If receiving ether is supported.
         */
        receive;
        #errors;
        #events;
        #functions;
        //    #structs: Map<string, StructFragment>;
        #abiCoder;
        /**
         *  Create a new Interface for the %%fragments%%.
         */
        constructor(fragments) {
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            this.#functions = new Map();
            this.#errors = new Map();
            this.#events = new Map();
            //        this.#structs = new Map();
            const frags = [];
            for (const a of abi) {
                try {
                    frags.push(Fragment.from(a));
                }
                catch (error) {
                    console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
                }
            }
            defineProperties(this, {
                fragments: Object.freeze(frags)
            });
            let fallback = null;
            let receive = false;
            this.#abiCoder = this.getAbiCoder();
            // Add all fragments by their signature
            this.fragments.forEach((fragment, index) => {
                let bucket;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            console.log("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        defineProperties(this, { deploy: fragment });
                        return;
                    case "fallback":
                        if (fragment.inputs.length === 0) {
                            receive = true;
                        }
                        else {
                            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                            fallback = fragment;
                            receive = fallback.payable;
                        }
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = this.#functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = this.#events;
                        break;
                    case "error":
                        bucket = this.#errors;
                        break;
                    default:
                        return;
                }
                // Two identical entries; ignore it
                const signature = fragment.format();
                if (bucket.has(signature)) {
                    return;
                }
                bucket.set(signature, fragment);
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineProperties(this, {
                    deploy: ConstructorFragment.from("constructor()")
                });
            }
            defineProperties(this, { fallback, receive });
        }
        /**
         *  Returns the entire Human-Readable ABI, as an array of
         *  signatures, optionally as %%minimal%% strings, which
         *  removes parameter names and unneceesary spaces.
         */
        format(minimal) {
            const format = (minimal ? "minimal" : "full");
            const abi = this.fragments.map((f) => f.format(format));
            return abi;
        }
        /**
         *  Return the JSON-encoded ABI. This is the format Solidiy
         *  returns.
         */
        formatJson() {
            const abi = this.fragments.map((f) => f.format("json"));
            // We need to re-bundle the JSON fragments a bit
            return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        /**
         *  The ABI coder that will be used to encode and decode binary
         *  data.
         */
        getAbiCoder() {
            return AbiCoder.defaultAbiCoder();
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        #getFunction(key, values, forceUnique) {
            // Selector
            if (isHexString(key)) {
                const selector = key.toLowerCase();
                for (const fragment of this.#functions.values()) {
                    if (selector === fragment.selector) {
                        return fragment;
                    }
                }
                return null;
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (key.indexOf("(") === -1) {
                const matching = [];
                for (const [name, fragment] of this.#functions) {
                    if (name.split("(" /* fix:) */)[0] === key) {
                        matching.push(fragment);
                    }
                }
                if (values) {
                    const lastValue = (values.length > 0) ? values[values.length - 1] : null;
                    let valueLength = values.length;
                    let allowOptions = true;
                    if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
                        allowOptions = false;
                        valueLength--;
                    }
                    // Remove all matches that don't have a compatible length. The args
                    // may contain an overrides, so the match may have n or n - 1 parameters
                    for (let i = matching.length - 1; i >= 0; i--) {
                        const inputs = matching[i].inputs.length;
                        if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
                            matching.splice(i, 1);
                        }
                    }
                    // Remove all matches that don't match the Typed signature
                    for (let i = matching.length - 1; i >= 0; i--) {
                        const inputs = matching[i].inputs;
                        for (let j = 0; j < values.length; j++) {
                            // Not a typed value
                            if (!Typed.isTyped(values[j])) {
                                continue;
                            }
                            // We are past the inputs
                            if (j >= inputs.length) {
                                if (values[j].type === "overrides") {
                                    continue;
                                }
                                matching.splice(i, 1);
                                break;
                            }
                            // Make sure the value type matches the input type
                            if (values[j].type !== inputs[j].baseType) {
                                matching.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                // We found a single matching signature with an overrides, but the
                // last value is something that cannot possibly be an options
                if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
                    const lastArg = values[values.length - 1];
                    if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== "object") {
                        matching.splice(0, 1);
                    }
                }
                if (matching.length === 0) {
                    return null;
                }
                if (matching.length > 1 && forceUnique) {
                    const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
                    assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
                }
                return matching[0];
            }
            // Normalize the signature and lookup the function
            const result = this.#functions.get(FunctionFragment.from(key).format());
            if (result) {
                return result;
            }
            return null;
        }
        /**
         *  Get the function name for %%key%%, which may be a function selector,
         *  function name or function signature that belongs to the ABI.
         */
        getFunctionName(key) {
            const fragment = this.#getFunction(key, null, false);
            assertArgument(fragment, "no matching function", "key", key);
            return fragment.name;
        }
        /**
         *  Returns true if %%key%% (a function selector, function name or
         *  function signature) is present in the ABI.
         *
         *  In the case of a function name, the name may be ambiguous, so
         *  accessing the [[FunctionFragment]] may require refinement.
         */
        hasFunction(key) {
            return !!this.#getFunction(key, null, false);
        }
        /**
         *  Get the [[FunctionFragment]] for %%key%%, which may be a function
         *  selector, function name or function signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple functions match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single function in
         *  the ABI, this will throw.
         */
        getFunction(key, values) {
            return this.#getFunction(key, values || null, true);
        }
        /**
         *  Iterate over all functions, calling %%callback%%, sorted by their name.
         */
        forEachFunction(callback) {
            const names = Array.from(this.#functions.keys());
            names.sort((a, b) => a.localeCompare(b));
            for (let i = 0; i < names.length; i++) {
                const name = names[i];
                callback((this.#functions.get(name)), i);
            }
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        #getEvent(key, values, forceUnique) {
            // EventTopic
            if (isHexString(key)) {
                const eventTopic = key.toLowerCase();
                for (const fragment of this.#events.values()) {
                    if (eventTopic === fragment.topicHash) {
                        return fragment;
                    }
                }
                return null;
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (key.indexOf("(") === -1) {
                const matching = [];
                for (const [name, fragment] of this.#events) {
                    if (name.split("(" /* fix:) */)[0] === key) {
                        matching.push(fragment);
                    }
                }
                if (values) {
                    // Remove all matches that don't have a compatible length.
                    for (let i = matching.length - 1; i >= 0; i--) {
                        if (matching[i].inputs.length < values.length) {
                            matching.splice(i, 1);
                        }
                    }
                    // Remove all matches that don't match the Typed signature
                    for (let i = matching.length - 1; i >= 0; i--) {
                        const inputs = matching[i].inputs;
                        for (let j = 0; j < values.length; j++) {
                            // Not a typed value
                            if (!Typed.isTyped(values[j])) {
                                continue;
                            }
                            // Make sure the value type matches the input type
                            if (values[j].type !== inputs[j].baseType) {
                                matching.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                if (matching.length === 0) {
                    return null;
                }
                if (matching.length > 1 && forceUnique) {
                    const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
                    assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
                }
                return matching[0];
            }
            // Normalize the signature and lookup the function
            const result = this.#events.get(EventFragment.from(key).format());
            if (result) {
                return result;
            }
            return null;
        }
        /**
         *  Get the event name for %%key%%, which may be a topic hash,
         *  event name or event signature that belongs to the ABI.
         */
        getEventName(key) {
            const fragment = this.#getEvent(key, null, false);
            assertArgument(fragment, "no matching event", "key", key);
            return fragment.name;
        }
        /**
         *  Returns true if %%key%% (an event topic hash, event name or
         *  event signature) is present in the ABI.
         *
         *  In the case of an event name, the name may be ambiguous, so
         *  accessing the [[EventFragment]] may require refinement.
         */
        hasEvent(key) {
            return !!this.#getEvent(key, null, false);
        }
        /**
         *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
         *  event name or event signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple events match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single event in
         *  the ABI, this will throw.
         */
        getEvent(key, values) {
            return this.#getEvent(key, values || null, true);
        }
        /**
         *  Iterate over all events, calling %%callback%%, sorted by their name.
         */
        forEachEvent(callback) {
            const names = Array.from(this.#events.keys());
            names.sort((a, b) => a.localeCompare(b));
            for (let i = 0; i < names.length; i++) {
                const name = names[i];
                callback((this.#events.get(name)), i);
            }
        }
        /**
         *  Get the [[ErrorFragment]] for %%key%%, which may be an error
         *  selector, error name or error signature that belongs to the ABI.
         *
         *  If %%values%% is provided, it will use the Typed API to handle
         *  ambiguous cases where multiple errors match by name.
         *
         *  If the %%key%% and %%values%% do not refine to a single error in
         *  the ABI, this will throw.
         */
        getError(key, values) {
            if (isHexString(key)) {
                const selector = key.toLowerCase();
                if (BuiltinErrors[selector]) {
                    return ErrorFragment.from(BuiltinErrors[selector].signature);
                }
                for (const fragment of this.#errors.values()) {
                    if (selector === fragment.selector) {
                        return fragment;
                    }
                }
                return null;
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (key.indexOf("(") === -1) {
                const matching = [];
                for (const [name, fragment] of this.#errors) {
                    if (name.split("(" /* fix:) */)[0] === key) {
                        matching.push(fragment);
                    }
                }
                if (matching.length === 0) {
                    if (key === "Error") {
                        return ErrorFragment.from("error Error(string)");
                    }
                    if (key === "Panic") {
                        return ErrorFragment.from("error Panic(uint256)");
                    }
                    return null;
                }
                else if (matching.length > 1) {
                    const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
                    assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
                }
                return matching[0];
            }
            // Normalize the signature and lookup the function
            key = ErrorFragment.from(key).format();
            if (key === "Error(string)") {
                return ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic(uint256)") {
                return ErrorFragment.from("error Panic(uint256)");
            }
            const result = this.#errors.get(key);
            if (result) {
                return result;
            }
            return null;
        }
        /**
         *  Iterate over all errors, calling %%callback%%, sorted by their name.
         */
        forEachError(callback) {
            const names = Array.from(this.#errors.keys());
            names.sort((a, b) => a.localeCompare(b));
            for (let i = 0; i < names.length; i++) {
                const name = names[i];
                callback((this.#errors.get(name)), i);
            }
        }
        // Get the 4-byte selector used by Solidity to identify a function
        /*
    getSelector(fragment: ErrorFragment | FunctionFragment): string {
        if (typeof(fragment) === "string") {
            const matches: Array<Fragment> = [ ];

            try { matches.push(this.getFunction(fragment)); } catch (error) { }
            try { matches.push(this.getError(<string>fragment)); } catch (_) { }

            if (matches.length === 0) {
                logger.throwArgumentError("unknown fragment", "key", fragment);
            } else if (matches.length > 1) {
                logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
            }

            fragment = matches[0];
        }

        return dataSlice(id(fragment.format()), 0, 4);
    }
        */
        // Get the 32-byte topic hash used by Solidity to identify an event
        /*
        getEventTopic(fragment: EventFragment): string {
            //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
            return id(fragment.format());
        }
        */
        _decodeParams(params, data) {
            return this.#abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this.#abiCoder.encode(params, values);
        }
        /**
         *  Encodes a ``tx.data`` object for deploying the Contract with
         *  the %%values%% as the constructor arguments.
         */
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        /**
         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
         *  specified error (see [[getError]] for valid values for
         *  %%key%%).
         *
         *  Most developers should prefer the [[parseCallResult]] method instead,
         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
         *  corresponding error.
         */
        decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
                const f = this.getError(fragment);
                assertArgument(f, "unknown error", "fragment", fragment);
                fragment = f;
            }
            assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
            return this._decodeParams(fragment.inputs, dataSlice(data, 4));
        }
        /**
         *  Encodes the transaction revert data for a call result that
         *  reverted from the the Contract with the sepcified %%error%%
         *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
         *
         *  This is generally not used by most developers, unless trying to mock
         *  a result from a Contract.
         */
        encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
                const f = this.getError(fragment);
                assertArgument(f, "unknown error", "fragment", fragment);
                fragment = f;
            }
            return concat([
                fragment.selector,
                this._encodeParams(fragment.inputs, values || [])
            ]);
        }
        /**
         *  Decodes the %%data%% from a transaction ``tx.data`` for
         *  the function specified (see [[getFunction]] for valid values
         *  for %%fragment%%).
         *
         *  Most developers should prefer the [[parseTransaction]] method
         *  instead, which will automatically detect the fragment.
         */
        decodeFunctionData(fragment, data) {
            if (typeof (fragment) === "string") {
                const f = this.getFunction(fragment);
                assertArgument(f, "unknown function", "fragment", fragment);
                fragment = f;
            }
            assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
            return this._decodeParams(fragment.inputs, dataSlice(data, 4));
        }
        /**
         *  Encodes the ``tx.data`` for a transaction that calls the function
         *  specified (see [[getFunction]] for valid values for %%fragment%%) with
         *  the %%values%%.
         */
        encodeFunctionData(fragment, values) {
            if (typeof (fragment) === "string") {
                const f = this.getFunction(fragment);
                assertArgument(f, "unknown function", "fragment", fragment);
                fragment = f;
            }
            return concat([
                fragment.selector,
                this._encodeParams(fragment.inputs, values || [])
            ]);
        }
        /**
         *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
         *  specified function (see [[getFunction]] for valid values for
         *  %%key%%).
         *
         *  Most developers should prefer the [[parseCallResult]] method instead,
         *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
         *  corresponding error.
         */
        decodeFunctionResult(fragment, data) {
            if (typeof (fragment) === "string") {
                const f = this.getFunction(fragment);
                assertArgument(f, "unknown function", "fragment", fragment);
                fragment = f;
            }
            let message = "invalid length for result data";
            const bytes = getBytesCopy(data);
            if ((bytes.length % 32) === 0) {
                try {
                    return this.#abiCoder.decode(fragment.outputs, bytes);
                }
                catch (error) {
                    message = "could not decode result data";
                }
            }
            // Call returned data with no error, but the data is junk
            assert(false, message, "BAD_DATA", {
                value: hexlify(bytes),
                info: { method: fragment.name, signature: fragment.format() }
            });
        }
        makeError(_data, tx) {
            const data = getBytes(_data, "data");
            const error = AbiCoder.getBuiltinCallException("call", tx, data);
            // Not a built-in error; try finding a custom error
            const customPrefix = "execution reverted (unknown custom error)";
            if (error.message.startsWith(customPrefix)) {
                const selector = hexlify(data.slice(0, 4));
                const ef = this.getError(selector);
                if (ef) {
                    try {
                        const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
                        error.revert = {
                            name: ef.name, signature: ef.format(), args
                        };
                        error.reason = error.revert.signature;
                        error.message = `execution reverted: ${error.reason}`;
                    }
                    catch (e) {
                        error.message = `execution reverted (coult not decode custom error)`;
                    }
                }
            }
            // Add the invocation, if available
            const parsed = this.parseTransaction(tx);
            if (parsed) {
                error.invocation = {
                    method: parsed.name,
                    signature: parsed.signature,
                    args: parsed.args
                };
            }
            return error;
        }
        /**
         *  Encodes the result data (e.g. from an ``eth_call``) for the
         *  specified function (see [[getFunction]] for valid values
         *  for %%fragment%%) with %%values%%.
         *
         *  This is generally not used by most developers, unless trying to mock
         *  a result from a Contract.
         */
        encodeFunctionResult(fragment, values) {
            if (typeof (fragment) === "string") {
                const f = this.getFunction(fragment);
                assertArgument(f, "unknown function", "fragment", fragment);
                fragment = f;
            }
            return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));
        }
        /*
            spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
                const promises: Array<Promise<>> = [ ];
                const process = function(type: ParamType, value: any): any {
                    if (type.baseType === "array") {
                        return descend(type.child
                    }
                    if (type. === "address") {
                    }
                };
        
                const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                    if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                    
                };
        
                const result: Array<any> = [ ];
                values.forEach((value, index) => {
                    if (value == null) {
                        topics.push(null);
                    } else if (param.baseType === "array" || param.baseType === "tuple") {
                        logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                    } else if (Array.isArray(value)) {
                        topics.push(value.map((value) => encodeTopic(param, value)));
                    } else {
                        topics.push(encodeTopic(param, value));
                    }
                });
            }
        */
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(fragment, values) {
            if (typeof (fragment) === "string") {
                const f = this.getEvent(fragment);
                assertArgument(f, "unknown event", "eventFragment", fragment);
                fragment = f;
            }
            assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
            const topics = [];
            if (!fragment.anonymous) {
                topics.push(fragment.topicHash);
            }
            // @TODO: Use the coders for this; to properly support tuples, etc.
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256(hexlify(value));
                }
                if (param.type === "bool" && typeof (value) === "boolean") {
                    value = (value ? "0x01" : "0x00");
                }
                else if (param.type.match(/^u?int/)) {
                    value = toBeHex(value); // @TODO: Should this toTwos??
                }
                else if (param.type.match(/^bytes/)) {
                    value = zeroPadBytes(value, 32);
                }
                else if (param.type === "address") {
                    // Check addresses are valid
                    this.#abiCoder.encode(["address"], [value]);
                }
                return zeroPadValue(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                const param = fragment.inputs[index];
                if (!param.indexed) {
                    assertArgument(value == null, "cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    assertArgument(false, "filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(fragment, values) {
            if (typeof (fragment) === "string") {
                const f = this.getEvent(fragment);
                assertArgument(f, "unknown event", "eventFragment", fragment);
                fragment = f;
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!fragment.anonymous) {
                topics.push(fragment.topicHash);
            }
            assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
            fragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this.#abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this.#abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(fragment, data, topics) {
            if (typeof (fragment) === "string") {
                const f = this.getEvent(fragment);
                assertArgument(f, "unknown event", "eventFragment", fragment);
                fragment = f;
            }
            if (topics != null && !fragment.anonymous) {
                const eventTopic = fragment.topicHash;
                assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
                topics = topics.slice(1);
            }
            const indexed = [];
            const nonIndexed = [];
            const dynamic = [];
            fragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)) : null;
            const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
            //const result: (Array<any> & { [ key: string ]: any }) = [ ];
            const values = [];
            const keys = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            fragment.inputs.forEach((param, index) => {
                let value = null;
                if (param.indexed) {
                    if (resultIndexed == null) {
                        value = new Indexed(null);
                    }
                    else if (dynamic[index]) {
                        value = new Indexed(resultIndexed[indexedIndex++]);
                    }
                    else {
                        try {
                            value = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            value = error;
                        }
                    }
                }
                else {
                    try {
                        value = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        value = error;
                    }
                }
                values.push(value);
                keys.push(param.name || null);
            });
            return Result.fromItems(values, keys);
        }
        /**
         *  Parses a transaction, finding the matching function and extracts
         *  the parameter values along with other useful function details.
         *
         *  If the matching function cannot be found, return null.
         */
        parseTransaction(tx) {
            const data = getBytes(tx.data, "tx.data");
            const value = getBigInt((tx.value != null) ? tx.value : 0, "tx.value");
            const fragment = this.getFunction(hexlify(data.slice(0, 4)));
            if (!fragment) {
                return null;
            }
            const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
            return new TransactionDescription(fragment, fragment.selector, args, value);
        }
        parseCallResult(data) {
            throw new Error("@TODO");
        }
        /**
         *  Parses a receipt log, finding the matching event and extracts
         *  the parameter values along with other useful event details.
         *
         *  If the matching event cannot be found, returns null.
         */
        parseLog(log) {
            const fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
        }
        /**
         *  Parses a revert data, finding the matching error and extracts
         *  the parameter values along with other useful error details.
         *
         *  If the matching error cannot be found, returns null.
         */
        parseError(data) {
            const hexData = hexlify(data);
            const fragment = this.getError(dataSlice(hexData, 0, 4));
            if (!fragment) {
                return null;
            }
            const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));
            return new ErrorDescription(fragment, fragment.selector, args);
        }
        /**
         *  Creates a new [[Interface]] from the ABI %%value%%.
         *
         *  The %%value%% may be provided as an existing [[Interface]] object,
         *  a JSON-encoded ABI or any Human-Readable ABI format.
         */
        static from(value) {
            // Already an Interface, which is immutable
            if (value instanceof Interface) {
                return value;
            }
            // JSON
            if (typeof (value) === "string") {
                return new Interface(JSON.parse(value));
            }
            // An Interface; possibly from another v6 instance
            if (typeof (value.formatJson) === "function") {
                return new Interface(value.formatJson());
            }
            // A legacy Interface; from an older version
            if (typeof (value.format) === "function") {
                return new Interface(value.format("json"));
            }
            // Array of fragments
            return new Interface(value);
        }
    }

    //import { resolveAddress } from "@ethersproject/address";
    const BN_0$2 = BigInt(0);
    // -----------------------
    function getValue(value) {
        if (value == null) {
            return null;
        }
        return value;
    }
    function toJson(value) {
        if (value == null) {
            return null;
        }
        return value.toString();
    }
    // @TODO? <T extends FeeData = { }> implements Required<T>
    /**
     *  A **FeeData** wraps all the fee-related values associated with
     *  the network.
     */
    class FeeData {
        /**
         *  The gas price for legacy networks.
         */
        gasPrice;
        /**
         *  The maximum fee to pay per gas.
         *
         *  The base fee per gas is defined by the network and based on
         *  congestion, increasing the cost during times of heavy load
         *  and lowering when less busy.
         *
         *  The actual fee per gas will be the base fee for the block
         *  and the priority fee, up to the max fee per gas.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        maxFeePerGas;
        /**
         *  The additional amout to pay per gas to encourage a validator
         *  to include the transaction.
         *
         *  The purpose of this is to compensate the validator for the
         *  adjusted risk for including a given transaction.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        maxPriorityFeePerGas;
        /**
         *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
         *  %%maxPriorityFeePerGas%%.
         */
        constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
            defineProperties(this, {
                gasPrice: getValue(gasPrice),
                maxFeePerGas: getValue(maxFeePerGas),
                maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
            });
        }
        /**
         *  Returns a JSON-friendly value.
         */
        toJSON() {
            const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
            return {
                _type: "FeeData",
                gasPrice: toJson(gasPrice),
                maxFeePerGas: toJson(maxFeePerGas),
                maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),
            };
        }
    }
    /**
     *  Returns a copy of %%req%% with all properties coerced to their strict
     *  types.
     */
    function copyRequest(req) {
        const result = {};
        // These could be addresses, ENS names or Addressables
        if (req.to) {
            result.to = req.to;
        }
        if (req.from) {
            result.from = req.from;
        }
        if (req.data) {
            result.data = hexlify(req.data);
        }
        const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
        for (const key of bigIntKeys) {
            if (!(key in req) || req[key] == null) {
                continue;
            }
            result[key] = getBigInt(req[key], `request.${key}`);
        }
        const numberKeys = "type,nonce".split(/,/);
        for (const key of numberKeys) {
            if (!(key in req) || req[key] == null) {
                continue;
            }
            result[key] = getNumber(req[key], `request.${key}`);
        }
        if (req.accessList) {
            result.accessList = accessListify(req.accessList);
        }
        if ("blockTag" in req) {
            result.blockTag = req.blockTag;
        }
        if ("enableCcipRead" in req) {
            result.enableCcipRead = !!req.enableCcipRead;
        }
        if ("customData" in req) {
            result.customData = req.customData;
        }
        if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
            result.blobVersionedHashes = req.blobVersionedHashes.slice();
        }
        if ("kzg" in req) {
            result.kzg = req.kzg;
        }
        if ("blobs" in req && req.blobs) {
            result.blobs = req.blobs.map((b) => {
                if (isBytesLike(b)) {
                    return hexlify(b);
                }
                return Object.assign({}, b);
            });
        }
        return result;
    }
    /**
     *  A **Block** represents the data associated with a full block on
     *  Ethereum.
     */
    class Block {
        /**
         *  The provider connected to the block used to fetch additional details
         *  if necessary.
         */
        provider;
        /**
         *  The block number, sometimes called the block height. This is a
         *  sequential number that is one higher than the parent block.
         */
        number;
        /**
         *  The block hash.
         *
         *  This hash includes all properties, so can be safely used to identify
         *  an exact set of block properties.
         */
        hash;
        /**
         *  The timestamp for this block, which is the number of seconds since
         *  epoch that this block was included.
         */
        timestamp;
        /**
         *  The block hash of the parent block.
         */
        parentHash;
        /**
         *  The hash tree root of the parent beacon block for the given
         *  execution block. See [[link-eip-4788]].
         */
        parentBeaconBlockRoot;
        /**
         *  The nonce.
         *
         *  On legacy networks, this is the random number inserted which
         *  permitted the difficulty target to be reached.
         */
        nonce;
        /**
         *  The difficulty target.
         *
         *  On legacy networks, this is the proof-of-work target required
         *  for a block to meet the protocol rules to be included.
         *
         *  On modern networks, this is a random number arrived at using
         *  randao.  @TODO: Find links?
         */
        difficulty;
        /**
         *  The total gas limit for this block.
         */
        gasLimit;
        /**
         *  The total gas used in this block.
         */
        gasUsed;
        /**
         *  The root hash for the global state after applying changes
         *  in this block.
         */
        stateRoot;
        /**
         *  The hash of the transaction receipts trie.
         */
        receiptsRoot;
        /**
         *  The total amount of blob gas consumed by the transactions
         *  within the block. See [[link-eip-4844]].
         */
        blobGasUsed;
        /**
         *  The running total of blob gas consumed in excess of the
         *  target, prior to the block. See [[link-eip-4844]].
         */
        excessBlobGas;
        /**
         *  The miner coinbase address, wihch receives any subsidies for
         *  including this block.
         */
        miner;
        /**
         *  The latest RANDAO mix of the post beacon state of
         *  the previous block.
         */
        prevRandao;
        /**
         *  Any extra data the validator wished to include.
         */
        extraData;
        /**
         *  The base fee per gas that all transactions in this block were
         *  charged.
         *
         *  This adjusts after each block, depending on how congested the network
         *  is.
         */
        baseFeePerGas;
        #transactions;
        /**
         *  Create a new **Block** object.
         *
         *  This should generally not be necessary as the unless implementing a
         *  low-level library.
         */
        constructor(block, provider) {
            this.#transactions = block.transactions.map((tx) => {
                if (typeof (tx) !== "string") {
                    return new TransactionResponse(tx, provider);
                }
                return tx;
            });
            defineProperties(this, {
                provider,
                hash: getValue(block.hash),
                number: block.number,
                timestamp: block.timestamp,
                parentHash: block.parentHash,
                parentBeaconBlockRoot: block.parentBeaconBlockRoot,
                nonce: block.nonce,
                difficulty: block.difficulty,
                gasLimit: block.gasLimit,
                gasUsed: block.gasUsed,
                blobGasUsed: block.blobGasUsed,
                excessBlobGas: block.excessBlobGas,
                miner: block.miner,
                prevRandao: getValue(block.prevRandao),
                extraData: block.extraData,
                baseFeePerGas: getValue(block.baseFeePerGas),
                stateRoot: block.stateRoot,
                receiptsRoot: block.receiptsRoot,
            });
        }
        /**
         *  Returns the list of transaction hashes, in the order
         *  they were executed within the block.
         */
        get transactions() {
            return this.#transactions.map((tx) => {
                if (typeof (tx) === "string") {
                    return tx;
                }
                return tx.hash;
            });
        }
        /**
         *  Returns the complete transactions, in the order they
         *  were executed within the block.
         *
         *  This is only available for blocks which prefetched
         *  transactions, by passing ``true`` to %%prefetchTxs%%
         *  into [[Provider-getBlock]].
         */
        get prefetchedTransactions() {
            const txs = this.#transactions.slice();
            // Doesn't matter...
            if (txs.length === 0) {
                return [];
            }
            // Make sure we prefetched the transactions
            assert(typeof (txs[0]) === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
                operation: "transactionResponses()"
            });
            return txs;
        }
        /**
         *  Returns a JSON-friendly value.
         */
        toJSON() {
            const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
            return {
                _type: "Block",
                baseFeePerGas: toJson(baseFeePerGas),
                difficulty: toJson(difficulty),
                extraData,
                gasLimit: toJson(gasLimit),
                gasUsed: toJson(gasUsed),
                blobGasUsed: toJson(this.blobGasUsed),
                excessBlobGas: toJson(this.excessBlobGas),
                hash, miner, prevRandao, nonce, number, parentHash, timestamp,
                parentBeaconBlockRoot, stateRoot, receiptsRoot,
                transactions,
            };
        }
        [Symbol.iterator]() {
            let index = 0;
            const txs = this.transactions;
            return {
                next: () => {
                    if (index < this.length) {
                        return {
                            value: txs[index++], done: false
                        };
                    }
                    return { value: undefined, done: true };
                }
            };
        }
        /**
         *  The number of transactions in this block.
         */
        get length() { return this.#transactions.length; }
        /**
         *  The [[link-js-date]] this block was included at.
         */
        get date() {
            if (this.timestamp == null) {
                return null;
            }
            return new Date(this.timestamp * 1000);
        }
        /**
         *  Get the transaction at %%indexe%% within this block.
         */
        async getTransaction(indexOrHash) {
            // Find the internal value by its index or hash
            let tx = undefined;
            if (typeof (indexOrHash) === "number") {
                tx = this.#transactions[indexOrHash];
            }
            else {
                const hash = indexOrHash.toLowerCase();
                for (const v of this.#transactions) {
                    if (typeof (v) === "string") {
                        if (v !== hash) {
                            continue;
                        }
                        tx = v;
                        break;
                    }
                    else {
                        if (v.hash !== hash) {
                            continue;
                        }
                        tx = v;
                        break;
                    }
                }
            }
            if (tx == null) {
                throw new Error("no such tx");
            }
            if (typeof (tx) === "string") {
                return (await this.provider.getTransaction(tx));
            }
            else {
                return tx;
            }
        }
        /**
         *  If a **Block** was fetched with a request to include the transactions
         *  this will allow synchronous access to those transactions.
         *
         *  If the transactions were not prefetched, this will throw.
         */
        getPrefetchedTransaction(indexOrHash) {
            const txs = this.prefetchedTransactions;
            if (typeof (indexOrHash) === "number") {
                return txs[indexOrHash];
            }
            indexOrHash = indexOrHash.toLowerCase();
            for (const tx of txs) {
                if (tx.hash === indexOrHash) {
                    return tx;
                }
            }
            assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
        }
        /**
         *  Returns true if this block been mined. This provides a type guard
         *  for all properties on a [[MinedBlock]].
         */
        isMined() { return !!this.hash; }
        /**
         *  Returns true if this block is an [[link-eip-2930]] block.
         */
        isLondon() {
            return !!this.baseFeePerGas;
        }
        /**
         *  @_ignore:
         */
        orphanedEvent() {
            if (!this.isMined()) {
                throw new Error("");
            }
            return createOrphanedBlockFilter(this);
        }
    }
    //////////////////////
    // Log
    /**
     *  A **Log** in Ethereum represents an event that has been included in a
     *  transaction using the ``LOG*`` opcodes, which are most commonly used by
     *  Solidity's emit for announcing events.
     */
    class Log {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        provider;
        /**
         *  The transaction hash of the transaction this log occurred in. Use the
         *  [[Log-getTransaction]] to get the [[TransactionResponse]].
         */
        transactionHash;
        /**
         *  The block hash of the block this log occurred in. Use the
         *  [[Log-getBlock]] to get the [[Block]].
         */
        blockHash;
        /**
         *  The block number of the block this log occurred in. It is preferred
         *  to use the [[Block-hash]] when fetching the related [[Block]],
         *  since in the case of an orphaned block, the block at that height may
         *  have changed.
         */
        blockNumber;
        /**
         *  If the **Log** represents a block that was removed due to an orphaned
         *  block, this will be true.
         *
         *  This can only happen within an orphan event listener.
         */
        removed;
        /**
         *  The address of the contract that emitted this log.
         */
        address;
        /**
         *  The data included in this log when it was emitted.
         */
        data;
        /**
         *  The indexed topics included in this log when it was emitted.
         *
         *  All topics are included in the bloom filters, so they can be
         *  efficiently filtered using the [[Provider-getLogs]] method.
         */
        topics;
        /**
         *  The index within the block this log occurred at. This is generally
         *  not useful to developers, but can be used with the various roots
         *  to proof inclusion within a block.
         */
        index;
        /**
         *  The index within the transaction of this log.
         */
        transactionIndex;
        /**
         *  @_ignore:
         */
        constructor(log, provider) {
            this.provider = provider;
            const topics = Object.freeze(log.topics.slice());
            defineProperties(this, {
                transactionHash: log.transactionHash,
                blockHash: log.blockHash,
                blockNumber: log.blockNumber,
                removed: log.removed,
                address: log.address,
                data: log.data,
                topics,
                index: log.index,
                transactionIndex: log.transactionIndex,
            });
        }
        /**
         *  Returns a JSON-compatible object.
         */
        toJSON() {
            const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
            return {
                _type: "log",
                address, blockHash, blockNumber, data, index,
                removed, topics, transactionHash, transactionIndex
            };
        }
        /**
         *  Returns the block that this log occurred in.
         */
        async getBlock() {
            const block = await this.provider.getBlock(this.blockHash);
            assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
            return block;
        }
        /**
         *  Returns the transaction that this log occurred in.
         */
        async getTransaction() {
            const tx = await this.provider.getTransaction(this.transactionHash);
            assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
            return tx;
        }
        /**
         *  Returns the transaction receipt fot the transaction that this
         *  log occurred in.
         */
        async getTransactionReceipt() {
            const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
            assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
            return receipt;
        }
        /**
         *  @_ignore:
         */
        removedEvent() {
            return createRemovedLogFilter(this);
        }
    }
    //////////////////////
    // Transaction Receipt
    /*
    export interface LegacyTransactionReceipt {
        byzantium: false;
        status: null;
        root: string;
    }

    export interface ByzantiumTransactionReceipt {
        byzantium: true;
        status: number;
        root: null;
    }
    */
    /**
     *  A **TransactionReceipt** includes additional information about a
     *  transaction that is only available after it has been mined.
     */
    class TransactionReceipt {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        provider;
        /**
         *  The address the transaction was sent to.
         */
        to;
        /**
         *  The sender of the transaction.
         */
        from;
        /**
         *  The address of the contract if the transaction was directly
         *  responsible for deploying one.
         *
         *  This is non-null **only** if the ``to`` is empty and the ``data``
         *  was successfully executed as initcode.
         */
        contractAddress;
        /**
         *  The transaction hash.
         */
        hash;
        /**
         *  The index of this transaction within the block transactions.
         */
        index;
        /**
         *  The block hash of the [[Block]] this transaction was included in.
         */
        blockHash;
        /**
         *  The block number of the [[Block]] this transaction was included in.
         */
        blockNumber;
        /**
         *  The bloom filter bytes that represent all logs that occurred within
         *  this transaction. This is generally not useful for most developers,
         *  but can be used to validate the included logs.
         */
        logsBloom;
        /**
         *  The actual amount of gas used by this transaction.
         *
         *  When creating a transaction, the amount of gas that will be used can
         *  only be approximated, but the sender must pay the gas fee for the
         *  entire gas limit. After the transaction, the difference is refunded.
         */
        gasUsed;
        /**
         *  The gas used for BLObs. See [[link-eip-4844]].
         */
        blobGasUsed;
        /**
         *  The amount of gas used by all transactions within the block for this
         *  and all transactions with a lower ``index``.
         *
         *  This is generally not useful for developers but can be used to
         *  validate certain aspects of execution.
         */
        cumulativeGasUsed;
        /**
         *  The actual gas price used during execution.
         *
         *  Due to the complexity of [[link-eip-1559]] this value can only
         *  be caluclated after the transaction has been mined, snce the base
         *  fee is protocol-enforced.
         */
        gasPrice;
        /**
         *  The price paid per BLOB in gas. See [[link-eip-4844]].
         */
        blobGasPrice;
        /**
         *  The [[link-eip-2718]] transaction type.
         */
        type;
        //readonly byzantium!: boolean;
        /**
         *  The status of this transaction, indicating success (i.e. ``1``) or
         *  a revert (i.e. ``0``).
         *
         *  This is available in post-byzantium blocks, but some backends may
         *  backfill this value.
         */
        status;
        /**
         *  The root hash of this transaction.
         *
         *  This is no present and was only included in pre-byzantium blocks, but
         *  could be used to validate certain parts of the receipt.
         */
        root;
        #logs;
        /**
         *  @_ignore:
         */
        constructor(tx, provider) {
            this.#logs = Object.freeze(tx.logs.map((log) => {
                return new Log(log, provider);
            }));
            let gasPrice = BN_0$2;
            if (tx.effectiveGasPrice != null) {
                gasPrice = tx.effectiveGasPrice;
            }
            else if (tx.gasPrice != null) {
                gasPrice = tx.gasPrice;
            }
            defineProperties(this, {
                provider,
                to: tx.to,
                from: tx.from,
                contractAddress: tx.contractAddress,
                hash: tx.hash,
                index: tx.index,
                blockHash: tx.blockHash,
                blockNumber: tx.blockNumber,
                logsBloom: tx.logsBloom,
                gasUsed: tx.gasUsed,
                cumulativeGasUsed: tx.cumulativeGasUsed,
                blobGasUsed: tx.blobGasUsed,
                gasPrice,
                blobGasPrice: tx.blobGasPrice,
                type: tx.type,
                //byzantium: tx.byzantium,
                status: tx.status,
                root: tx.root
            });
        }
        /**
         *  The logs for this transaction.
         */
        get logs() { return this.#logs; }
        /**
         *  Returns a JSON-compatible representation.
         */
        toJSON() {
            const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, 
            status, root } = this;
            return {
                _type: "TransactionReceipt",
                blockHash, blockNumber,
                //byzantium, 
                contractAddress,
                cumulativeGasUsed: toJson(this.cumulativeGasUsed),
                from,
                gasPrice: toJson(this.gasPrice),
                blobGasUsed: toJson(this.blobGasUsed),
                blobGasPrice: toJson(this.blobGasPrice),
                gasUsed: toJson(this.gasUsed),
                hash, index, logs, logsBloom, root, status, to
            };
        }
        /**
         *  @_ignore:
         */
        get length() { return this.logs.length; }
        [Symbol.iterator]() {
            let index = 0;
            return {
                next: () => {
                    if (index < this.length) {
                        return { value: this.logs[index++], done: false };
                    }
                    return { value: undefined, done: true };
                }
            };
        }
        /**
         *  The total fee for this transaction, in wei.
         */
        get fee() {
            return this.gasUsed * this.gasPrice;
        }
        /**
         *  Resolves to the block this transaction occurred in.
         */
        async getBlock() {
            const block = await this.provider.getBlock(this.blockHash);
            if (block == null) {
                throw new Error("TODO");
            }
            return block;
        }
        /**
         *  Resolves to the transaction this transaction occurred in.
         */
        async getTransaction() {
            const tx = await this.provider.getTransaction(this.hash);
            if (tx == null) {
                throw new Error("TODO");
            }
            return tx;
        }
        /**
         *  Resolves to the return value of the execution of this transaction.
         *
         *  Support for this feature is limited, as it requires an archive node
         *  with the ``debug_`` or ``trace_`` API enabled.
         */
        async getResult() {
            return (await this.provider.getTransactionResult(this.hash));
        }
        /**
         *  Resolves to the number of confirmations this transaction has.
         */
        async confirmations() {
            return (await this.provider.getBlockNumber()) - this.blockNumber + 1;
        }
        /**
         *  @_ignore:
         */
        removedEvent() {
            return createRemovedTransactionFilter(this);
        }
        /**
         *  @_ignore:
         */
        reorderedEvent(other) {
            assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
            return createReorderedTransactionFilter(this, other);
        }
    }
    /**
     *  A **TransactionResponse** includes all properties about a transaction
     *  that was sent to the network, which may or may not be included in a
     *  block.
     *
     *  The [[TransactionResponse-isMined]] can be used to check if the
     *  transaction has been mined as well as type guard that the otherwise
     *  possibly ``null`` properties are defined.
     */
    class TransactionResponse {
        /**
         *  The provider this is connected to, which will influence how its
         *  methods will resolve its async inspection methods.
         */
        provider;
        /**
         *  The block number of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        blockNumber;
        /**
         *  The blockHash of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        blockHash;
        /**
         *  The index within the block that this transaction resides at.
         */
        index;
        /**
         *  The transaction hash.
         */
        hash;
        /**
         *  The [[link-eip-2718]] transaction envelope type. This is
         *  ``0`` for legacy transactions types.
         */
        type;
        /**
         *  The receiver of this transaction.
         *
         *  If ``null``, then the transaction is an initcode transaction.
         *  This means the result of executing the [[data]] will be deployed
         *  as a new contract on chain (assuming it does not revert) and the
         *  address may be computed using [[getCreateAddress]].
         */
        to;
        /**
         *  The sender of this transaction. It is implicitly computed
         *  from the transaction pre-image hash (as the digest) and the
         *  [[signature]] using ecrecover.
         */
        from;
        /**
         *  The nonce, which is used to prevent replay attacks and offer
         *  a method to ensure transactions from a given sender are explicitly
         *  ordered.
         *
         *  When sending a transaction, this must be equal to the number of
         *  transactions ever sent by [[from]].
         */
        nonce;
        /**
         *  The maximum units of gas this transaction can consume. If execution
         *  exceeds this, the entries transaction is reverted and the sender
         *  is charged for the full amount, despite not state changes being made.
         */
        gasLimit;
        /**
         *  The gas price can have various values, depending on the network.
         *
         *  In modern networks, for transactions that are included this is
         *  the //effective gas price// (the fee per gas that was actually
         *  charged), while for transactions that have not been included yet
         *  is the [[maxFeePerGas]].
         *
         *  For legacy transactions, or transactions on legacy networks, this
         *  is the fee that will be charged per unit of gas the transaction
         *  consumes.
         */
        gasPrice;
        /**
         *  The maximum priority fee (per unit of gas) to allow a
         *  validator to charge the sender. This is inclusive of the
         *  [[maxFeeFeePerGas]].
         */
        maxPriorityFeePerGas;
        /**
         *  The maximum fee (per unit of gas) to allow this transaction
         *  to charge the sender.
         */
        maxFeePerGas;
        /**
         *  The [[link-eip-4844]] max fee per BLOb gas.
         */
        maxFeePerBlobGas;
        /**
         *  The data.
         */
        data;
        /**
         *  The value, in wei. Use [[formatEther]] to format this value
         *  as ether.
         */
        value;
        /**
         *  The chain ID.
         */
        chainId;
        /**
         *  The signature.
         */
        signature;
        /**
         *  The [[link-eip-2930]] access list for transaction types that
         *  support it, otherwise ``null``.
         */
        accessList;
        /**
         *  The [[link-eip-4844]] BLOb versioned hashes.
         */
        blobVersionedHashes;
        #startBlock;
        /**
         *  @_ignore:
         */
        constructor(tx, provider) {
            this.provider = provider;
            this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;
            this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;
            this.hash = tx.hash;
            this.index = tx.index;
            this.type = tx.type;
            this.from = tx.from;
            this.to = tx.to || null;
            this.gasLimit = tx.gasLimit;
            this.nonce = tx.nonce;
            this.data = tx.data;
            this.value = tx.value;
            this.gasPrice = tx.gasPrice;
            this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;
            this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;
            this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas : null;
            this.chainId = tx.chainId;
            this.signature = tx.signature;
            this.accessList = (tx.accessList != null) ? tx.accessList : null;
            this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes : null;
            this.#startBlock = -1;
        }
        /**
         *  Returns a JSON-compatible representation of this transaction.
         */
        toJSON() {
            const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
            return {
                _type: "TransactionResponse",
                accessList, blockNumber, blockHash,
                blobVersionedHashes,
                chainId: toJson(this.chainId),
                data, from,
                gasLimit: toJson(this.gasLimit),
                gasPrice: toJson(this.gasPrice),
                hash,
                maxFeePerGas: toJson(this.maxFeePerGas),
                maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
                maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
                nonce, signature, to, index, type,
                value: toJson(this.value),
            };
        }
        /**
         *  Resolves to the Block that this transaction was included in.
         *
         *  This will return null if the transaction has not been included yet.
         */
        async getBlock() {
            let blockNumber = this.blockNumber;
            if (blockNumber == null) {
                const tx = await this.getTransaction();
                if (tx) {
                    blockNumber = tx.blockNumber;
                }
            }
            if (blockNumber == null) {
                return null;
            }
            const block = this.provider.getBlock(blockNumber);
            if (block == null) {
                throw new Error("TODO");
            }
            return block;
        }
        /**
         *  Resolves to this transaction being re-requested from the
         *  provider. This can be used if you have an unmined transaction
         *  and wish to get an up-to-date populated instance.
         */
        async getTransaction() {
            return this.provider.getTransaction(this.hash);
        }
        /**
         *  Resolve to the number of confirmations this transaction has.
         */
        async confirmations() {
            if (this.blockNumber == null) {
                const { tx, blockNumber } = await resolveProperties({
                    tx: this.getTransaction(),
                    blockNumber: this.provider.getBlockNumber()
                });
                // Not mined yet...
                if (tx == null || tx.blockNumber == null) {
                    return 0;
                }
                return blockNumber - tx.blockNumber + 1;
            }
            const blockNumber = await this.provider.getBlockNumber();
            return blockNumber - this.blockNumber + 1;
        }
        /**
         *  Resolves once this transaction has been mined and has
         *  %%confirms%% blocks including it (default: ``1``) with an
         *  optional %%timeout%%.
         *
         *  This can resolve to ``null`` only if %%confirms%% is ``0``
         *  and the transaction has not been mined, otherwise this will
         *  wait until enough confirmations have completed.
         */
        async wait(_confirms, _timeout) {
            const confirms = (_confirms == null) ? 1 : _confirms;
            const timeout = (_timeout == null) ? 0 : _timeout;
            let startBlock = this.#startBlock;
            let nextScan = -1;
            let stopScanning = (startBlock === -1) ? true : false;
            const checkReplacement = async () => {
                // Get the current transaction count for this sender
                if (stopScanning) {
                    return null;
                }
                const { blockNumber, nonce } = await resolveProperties({
                    blockNumber: this.provider.getBlockNumber(),
                    nonce: this.provider.getTransactionCount(this.from)
                });
                // No transaction or our nonce has not been mined yet; but we
                // can start scanning later when we do start
                if (nonce < this.nonce) {
                    startBlock = blockNumber;
                    return;
                }
                // We were mined; no replacement
                if (stopScanning) {
                    return null;
                }
                const mined = await this.getTransaction();
                if (mined && mined.blockNumber != null) {
                    return;
                }
                // We were replaced; start scanning for that transaction
                // Starting to scan; look back a few extra blocks for safety
                if (nextScan === -1) {
                    nextScan = startBlock - 3;
                    if (nextScan < this.#startBlock) {
                        nextScan = this.#startBlock;
                    }
                }
                while (nextScan <= blockNumber) {
                    // Get the next block to scan
                    if (stopScanning) {
                        return null;
                    }
                    const block = await this.provider.getBlock(nextScan, true);
                    // This should not happen; but we'll try again shortly
                    if (block == null) {
                        return;
                    }
                    // We were mined; no replacement
                    for (const hash of block) {
                        if (hash === this.hash) {
                            return;
                        }
                    }
                    // Search for the transaction that replaced us
                    for (let i = 0; i < block.length; i++) {
                        const tx = await block.getTransaction(i);
                        if (tx.from === this.from && tx.nonce === this.nonce) {
                            // Get the receipt
                            if (stopScanning) {
                                return null;
                            }
                            const receipt = await this.provider.getTransactionReceipt(tx.hash);
                            // This should not happen; but we'll try again shortly
                            if (receipt == null) {
                                return;
                            }
                            // We will retry this on the next block (this case could be optimized)
                            if ((blockNumber - receipt.blockNumber + 1) < confirms) {
                                return;
                            }
                            // The reason we were replaced
                            let reason = "replaced";
                            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                                reason = "repriced";
                            }
                            else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0$2) {
                                reason = "cancelled";
                            }
                            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                                cancelled: (reason === "replaced" || reason === "cancelled"),
                                reason,
                                replacement: tx.replaceableTransaction(startBlock),
                                hash: tx.hash,
                                receipt
                            });
                        }
                    }
                    nextScan++;
                }
                return;
            };
            const checkReceipt = (receipt) => {
                if (receipt == null || receipt.status !== 0) {
                    return receipt;
                }
                assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
                    action: "sendTransaction",
                    data: null, reason: null, invocation: null, revert: null,
                    transaction: {
                        to: receipt.to,
                        from: receipt.from,
                        data: "" // @TODO: in v7, split out sendTransaction properties
                    }, receipt
                });
            };
            const receipt = await this.provider.getTransactionReceipt(this.hash);
            if (confirms === 0) {
                return checkReceipt(receipt);
            }
            if (receipt) {
                if ((await receipt.confirmations()) >= confirms) {
                    return checkReceipt(receipt);
                }
            }
            else {
                // Check for a replacement; throws if a replacement was found
                await checkReplacement();
                // Allow null only when the confirms is 0
                if (confirms === 0) {
                    return null;
                }
            }
            const waiter = new Promise((resolve, reject) => {
                // List of things to cancel when we have a result (one way or the other)
                const cancellers = [];
                const cancel = () => { cancellers.forEach((c) => c()); };
                // On cancel, stop scanning for replacements
                cancellers.push(() => { stopScanning = true; });
                // Set up any timeout requested
                if (timeout > 0) {
                    const timer = setTimeout(() => {
                        cancel();
                        reject(makeError("wait for transaction timeout", "TIMEOUT"));
                    }, timeout);
                    cancellers.push(() => { clearTimeout(timer); });
                }
                const txListener = async (receipt) => {
                    // Done; return it!
                    if ((await receipt.confirmations()) >= confirms) {
                        cancel();
                        try {
                            resolve(checkReceipt(receipt));
                        }
                        catch (error) {
                            reject(error);
                        }
                    }
                };
                cancellers.push(() => { this.provider.off(this.hash, txListener); });
                this.provider.on(this.hash, txListener);
                // We support replacement detection; start checking
                if (startBlock >= 0) {
                    const replaceListener = async () => {
                        try {
                            // Check for a replacement; this throws only if one is found
                            await checkReplacement();
                        }
                        catch (error) {
                            // We were replaced (with enough confirms); re-throw the error
                            if (isError(error, "TRANSACTION_REPLACED")) {
                                cancel();
                                reject(error);
                                return;
                            }
                        }
                        // Rescheudle a check on the next block
                        if (!stopScanning) {
                            this.provider.once("block", replaceListener);
                        }
                    };
                    cancellers.push(() => { this.provider.off("block", replaceListener); });
                    this.provider.once("block", replaceListener);
                }
            });
            return await waiter;
        }
        /**
         *  Returns ``true`` if this transaction has been included.
         *
         *  This is effective only as of the time the TransactionResponse
         *  was instantiated. To get up-to-date information, use
         *  [[getTransaction]].
         *
         *  This provides a Type Guard that this transaction will have
         *  non-null property values for properties that are null for
         *  unmined transactions.
         */
        isMined() {
            return (this.blockHash != null);
        }
        /**
         *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
         *  transaction.
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isLegacy() {
            return (this.type === 0);
        }
        /**
         *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
         *  transaction. See [[link-eip-2070]].
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isBerlin() {
            return (this.type === 1);
        }
        /**
         *  Returns true if the transaction is a London (i.e. ``type == 2``)
         *  transaction. See [[link-eip-1559]].
         *
         *  This provides a Type Guard that this transaction will have
         *  the ``null``-ness for hardfork-specific properties set correctly.
         */
        isLondon() {
            return (this.type === 2);
        }
        /**
         *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
         *  transaction. See [[link-eip-4844]].
         */
        isCancun() {
            return (this.type === 3);
        }
        /**
         *  Returns a filter which can be used to listen for orphan events
         *  that evict this transaction.
         */
        removedEvent() {
            assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
            return createRemovedTransactionFilter(this);
        }
        /**
         *  Returns a filter which can be used to listen for orphan events
         *  that re-order this event against %%other%%.
         */
        reorderedEvent(other) {
            assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
            assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
            return createReorderedTransactionFilter(this, other);
        }
        /**
         *  Returns a new TransactionResponse instance which has the ability to
         *  detect (and throw an error) if the transaction is replaced, which
         *  will begin scanning at %%startBlock%%.
         *
         *  This should generally not be used by developers and is intended
         *  primarily for internal use. Setting an incorrect %%startBlock%% can
         *  have devastating performance consequences if used incorrectly.
         */
        replaceableTransaction(startBlock) {
            assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
            const tx = new TransactionResponse(this, this.provider);
            tx.#startBlock = startBlock;
            return tx;
        }
    }
    function createOrphanedBlockFilter(block) {
        return { orphan: "drop-block", hash: block.hash, number: block.number };
    }
    function createReorderedTransactionFilter(tx, other) {
        return { orphan: "reorder-transaction", tx, other };
    }
    function createRemovedTransactionFilter(tx) {
        return { orphan: "drop-transaction", tx };
    }
    function createRemovedLogFilter(log) {
        return { orphan: "drop-log", log: {
                transactionHash: log.transactionHash,
                blockHash: log.blockHash,
                blockNumber: log.blockNumber,
                address: log.address,
                data: log.data,
                topics: Object.freeze(log.topics.slice()),
                index: log.index
            } };
    }

    // import from provider.ts instead of index.ts to prevent circular dep
    // from EtherscanProvider
    /**
     *  An **EventLog** contains additional properties parsed from the [[Log]].
     */
    class EventLog extends Log {
        /**
         *  The Contract Interface.
         */
        interface;
        /**
         *  The matching event.
         */
        fragment;
        /**
         *  The parsed arguments passed to the event by ``emit``.
         */
        args;
        /**
         * @_ignore:
         */
        constructor(log, iface, fragment) {
            super(log, log.provider);
            const args = iface.decodeEventLog(fragment, log.data, log.topics);
            defineProperties(this, { args, fragment, interface: iface });
        }
        /**
         *  The name of the event.
         */
        get eventName() { return this.fragment.name; }
        /**
         *  The signature of the event.
         */
        get eventSignature() { return this.fragment.format(); }
    }
    /**
     *  An **EventLog** contains additional properties parsed from the [[Log]].
     */
    class UndecodedEventLog extends Log {
        /**
         *  The error encounted when trying to decode the log.
         */
        error;
        /**
         * @_ignore:
         */
        constructor(log, error) {
            super(log, log.provider);
            defineProperties(this, { error });
        }
    }
    /**
     *  A **ContractTransactionReceipt** includes the parsed logs from a
     *  [[TransactionReceipt]].
     */
    class ContractTransactionReceipt extends TransactionReceipt {
        #iface;
        /**
         *  @_ignore:
         */
        constructor(iface, provider, tx) {
            super(tx, provider);
            this.#iface = iface;
        }
        /**
         *  The parsed logs for any [[Log]] which has a matching event in the
         *  Contract ABI.
         */
        get logs() {
            return super.logs.map((log) => {
                const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
                if (fragment) {
                    try {
                        return new EventLog(log, this.#iface, fragment);
                    }
                    catch (error) {
                        return new UndecodedEventLog(log, error);
                    }
                }
                return log;
            });
        }
    }
    /**
     *  A **ContractTransactionResponse** will return a
     *  [[ContractTransactionReceipt]] when waited on.
     */
    class ContractTransactionResponse extends TransactionResponse {
        #iface;
        /**
         *  @_ignore:
         */
        constructor(iface, provider, tx) {
            super(tx, provider);
            this.#iface = iface;
        }
        /**
         *  Resolves once this transaction has been mined and has
         *  %%confirms%% blocks including it (default: ``1``) with an
         *  optional %%timeout%%.
         *
         *  This can resolve to ``null`` only if %%confirms%% is ``0``
         *  and the transaction has not been mined, otherwise this will
         *  wait until enough confirmations have completed.
         */
        async wait(confirms, timeout) {
            const receipt = await super.wait(confirms, timeout);
            if (receipt == null) {
                return null;
            }
            return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
        }
    }
    /**
     *  A **ContractUnknownEventPayload** is included as the last parameter to
     *  Contract Events when the event does not match any events in the ABI.
     */
    class ContractUnknownEventPayload extends EventPayload {
        /**
         *  The log with no matching events.
         */
        log;
        /**
         *  @_event:
         */
        constructor(contract, listener, filter, log) {
            super(contract, listener, filter);
            defineProperties(this, { log });
        }
        /**
         *  Resolves to the block the event occured in.
         */
        async getBlock() {
            return await this.log.getBlock();
        }
        /**
         *  Resolves to the transaction the event occured in.
         */
        async getTransaction() {
            return await this.log.getTransaction();
        }
        /**
         *  Resolves to the transaction receipt the event occured in.
         */
        async getTransactionReceipt() {
            return await this.log.getTransactionReceipt();
        }
    }
    /**
     *  A **ContractEventPayload** is included as the last parameter to
     *  Contract Events when the event is known.
     */
    class ContractEventPayload extends ContractUnknownEventPayload {
        /**
         *  @_ignore:
         */
        constructor(contract, listener, filter, fragment, _log) {
            super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
            const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
            defineProperties(this, { args, fragment });
        }
        /**
         *  The event name.
         */
        get eventName() {
            return this.fragment.name;
        }
        /**
         *  The event signature.
         */
        get eventSignature() {
            return this.fragment.format();
        }
    }

    const BN_0$1 = BigInt(0);
    function canCall(value) {
        return (value && typeof (value.call) === "function");
    }
    function canEstimate(value) {
        return (value && typeof (value.estimateGas) === "function");
    }
    function canResolve(value) {
        return (value && typeof (value.resolveName) === "function");
    }
    function canSend(value) {
        return (value && typeof (value.sendTransaction) === "function");
    }
    function getResolver(value) {
        if (value != null) {
            if (canResolve(value)) {
                return value;
            }
            if (value.provider) {
                return value.provider;
            }
        }
        return undefined;
    }
    class PreparedTopicFilter {
        #filter;
        fragment;
        constructor(contract, fragment, args) {
            defineProperties(this, { fragment });
            if (fragment.inputs.length < args.length) {
                throw new Error("too many arguments");
            }
            // Recursively descend into args and resolve any addresses
            const runner = getRunner(contract.runner, "resolveName");
            const resolver = canResolve(runner) ? runner : null;
            this.#filter = (async function () {
                const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
                    const arg = args[index];
                    if (arg == null) {
                        return null;
                    }
                    return param.walkAsync(args[index], (type, value) => {
                        if (type === "address") {
                            if (Array.isArray(value)) {
                                return Promise.all(value.map((v) => resolveAddress(v, resolver)));
                            }
                            return resolveAddress(value, resolver);
                        }
                        return value;
                    });
                }));
                return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
            })();
        }
        getTopicFilter() {
            return this.#filter;
        }
    }
    // A = Arguments passed in as a tuple
    // R = The result type of the call (i.e. if only one return type,
    //     the qualified type, otherwise Result)
    // D = The type the default call will return (i.e. R for view/pure,
    //     TransactionResponse otherwise)
    //export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {
    function getRunner(value, feature) {
        if (value == null) {
            return null;
        }
        if (typeof (value[feature]) === "function") {
            return value;
        }
        if (value.provider && typeof (value.provider[feature]) === "function") {
            return value.provider;
        }
        return null;
    }
    function getProvider(value) {
        if (value == null) {
            return null;
        }
        return value.provider || null;
    }
    /**
     *  @_ignore:
     */
    async function copyOverrides(arg, allowed) {
        // Make sure the overrides passed in are a valid overrides object
        const _overrides = Typed.dereference(arg, "overrides");
        assertArgument(typeof (_overrides) === "object", "invalid overrides parameter", "overrides", arg);
        // Create a shallow copy (we'll deep-ify anything needed during normalizing)
        const overrides = copyRequest(_overrides);
        assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
        assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
        // Resolve any from
        if (overrides.from) {
            overrides.from = overrides.from;
        }
        return overrides;
    }
    /**
     *  @_ignore:
     */
    async function resolveArgs(_runner, inputs, args) {
        // Recursively descend into args and resolve any addresses
        const runner = getRunner(_runner, "resolveName");
        const resolver = canResolve(runner) ? runner : null;
        return await Promise.all(inputs.map((param, index) => {
            return param.walkAsync(args[index], (type, value) => {
                value = Typed.dereference(value, type);
                if (type === "address") {
                    return resolveAddress(value, resolver);
                }
                return value;
            });
        }));
    }
    function buildWrappedFallback(contract) {
        const populateTransaction = async function (overrides) {
            // If an overrides was passed in, copy it and normalize the values
            const tx = (await copyOverrides(overrides, ["data"]));
            tx.to = await contract.getAddress();
            if (tx.from) {
                tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
            }
            const iface = contract.interface;
            const noValue = (getBigInt((tx.value || BN_0$1), "overrides.value") === BN_0$1);
            const noData = ((tx.data || "0x") === "0x");
            if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
                assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
            }
            assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
            // Only allow payable contracts to set non-zero value
            const payable = iface.receive || (iface.fallback && iface.fallback.payable);
            assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
            // Only allow fallback contracts to set non-empty data
            assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
            return tx;
        };
        const staticCall = async function (overrides) {
            const runner = getRunner(contract.runner, "call");
            assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
            const tx = await populateTransaction(overrides);
            try {
                return await runner.call(tx);
            }
            catch (error) {
                if (isCallException(error) && error.data) {
                    throw contract.interface.makeError(error.data, tx);
                }
                throw error;
            }
        };
        const send = async function (overrides) {
            const runner = contract.runner;
            assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
            const tx = await runner.sendTransaction(await populateTransaction(overrides));
            const provider = getProvider(contract.runner);
            // @TODO: the provider can be null; make a custom dummy provider that will throw a
            // meaningful error
            return new ContractTransactionResponse(contract.interface, provider, tx);
        };
        const estimateGas = async function (overrides) {
            const runner = getRunner(contract.runner, "estimateGas");
            assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
            return await runner.estimateGas(await populateTransaction(overrides));
        };
        const method = async (overrides) => {
            return await send(overrides);
        };
        defineProperties(method, {
            _contract: contract,
            estimateGas,
            populateTransaction,
            send, staticCall
        });
        return method;
    }
    function buildWrappedMethod(contract, key) {
        const getFragment = function (...args) {
            const fragment = contract.interface.getFunction(key, args);
            assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                operation: "fragment",
                info: { key, args }
            });
            return fragment;
        };
        const populateTransaction = async function (...args) {
            const fragment = getFragment(...args);
            // If an overrides was passed in, copy it and normalize the values
            let overrides = {};
            if (fragment.inputs.length + 1 === args.length) {
                overrides = await copyOverrides(args.pop());
                if (overrides.from) {
                    overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
                }
            }
            if (fragment.inputs.length !== args.length) {
                throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
            }
            const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
            return Object.assign({}, overrides, await resolveProperties({
                to: contract.getAddress(),
                data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
            }));
        };
        const staticCall = async function (...args) {
            const result = await staticCallResult(...args);
            if (result.length === 1) {
                return result[0];
            }
            return result;
        };
        const send = async function (...args) {
            const runner = contract.runner;
            assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
            const tx = await runner.sendTransaction(await populateTransaction(...args));
            const provider = getProvider(contract.runner);
            // @TODO: the provider can be null; make a custom dummy provider that will throw a
            // meaningful error
            return new ContractTransactionResponse(contract.interface, provider, tx);
        };
        const estimateGas = async function (...args) {
            const runner = getRunner(contract.runner, "estimateGas");
            assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
            return await runner.estimateGas(await populateTransaction(...args));
        };
        const staticCallResult = async function (...args) {
            const runner = getRunner(contract.runner, "call");
            assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
            const tx = await populateTransaction(...args);
            let result = "0x";
            try {
                result = await runner.call(tx);
            }
            catch (error) {
                if (isCallException(error) && error.data) {
                    throw contract.interface.makeError(error.data, tx);
                }
                throw error;
            }
            const fragment = getFragment(...args);
            return contract.interface.decodeFunctionResult(fragment, result);
        };
        const method = async (...args) => {
            const fragment = getFragment(...args);
            if (fragment.constant) {
                return await staticCall(...args);
            }
            return await send(...args);
        };
        defineProperties(method, {
            name: contract.interface.getFunctionName(key),
            _contract: contract, _key: key,
            getFragment,
            estimateGas,
            populateTransaction,
            send, staticCall, staticCallResult,
        });
        // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
        Object.defineProperty(method, "fragment", {
            configurable: false,
            enumerable: true,
            get: () => {
                const fragment = contract.interface.getFunction(key);
                assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                    operation: "fragment",
                    info: { key }
                });
                return fragment;
            }
        });
        return method;
    }
    function buildWrappedEvent(contract, key) {
        const getFragment = function (...args) {
            const fragment = contract.interface.getEvent(key, args);
            assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                operation: "fragment",
                info: { key, args }
            });
            return fragment;
        };
        const method = function (...args) {
            return new PreparedTopicFilter(contract, getFragment(...args), args);
        };
        defineProperties(method, {
            name: contract.interface.getEventName(key),
            _contract: contract, _key: key,
            getFragment
        });
        // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
        Object.defineProperty(method, "fragment", {
            configurable: false,
            enumerable: true,
            get: () => {
                const fragment = contract.interface.getEvent(key);
                assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                    operation: "fragment",
                    info: { key }
                });
                return fragment;
            }
        });
        return method;
    }
    // The combination of TypeScrype, Private Fields and Proxies makes
    // the world go boom; so we hide variables with some trickery keeping
    // a symbol attached to each BaseContract which its sub-class (even
    // via a Proxy) can reach and use to look up its internal values.
    const internal = Symbol.for("_ethersInternal_contract");
    const internalValues = new WeakMap();
    function setInternal(contract, values) {
        internalValues.set(contract[internal], values);
    }
    function getInternal(contract) {
        return internalValues.get(contract[internal]);
    }
    function isDeferred(value) {
        return (value && typeof (value) === "object" && ("getTopicFilter" in value) &&
            (typeof (value.getTopicFilter) === "function") && value.fragment);
    }
    async function getSubInfo(contract, event) {
        let topics;
        let fragment = null;
        // Convert named events to topicHash and get the fragment for
        // events which need deconstructing.
        if (Array.isArray(event)) {
            const topicHashify = function (name) {
                if (isHexString(name, 32)) {
                    return name;
                }
                const fragment = contract.interface.getEvent(name);
                assertArgument(fragment, "unknown fragment", "name", name);
                return fragment.topicHash;
            };
            // Array of Topics and Names; e.g. `[ "0x1234...89ab", "Transfer(address)" ]`
            topics = event.map((e) => {
                if (e == null) {
                    return null;
                }
                if (Array.isArray(e)) {
                    return e.map(topicHashify);
                }
                return topicHashify(e);
            });
        }
        else if (event === "*") {
            topics = [null];
        }
        else if (typeof (event) === "string") {
            if (isHexString(event, 32)) {
                // Topic Hash
                topics = [event];
            }
            else {
                // Name or Signature; e.g. `"Transfer", `"Transfer(address)"`
                fragment = contract.interface.getEvent(event);
                assertArgument(fragment, "unknown fragment", "event", event);
                topics = [fragment.topicHash];
            }
        }
        else if (isDeferred(event)) {
            // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`
            topics = await event.getTopicFilter();
        }
        else if ("fragment" in event) {
            // ContractEvent; e.g. `contract.filter.Transfer`
            fragment = event.fragment;
            topics = [fragment.topicHash];
        }
        else {
            assertArgument(false, "unknown event name", "event", event);
        }
        // Normalize topics and sort TopicSets
        topics = topics.map((t) => {
            if (t == null) {
                return null;
            }
            if (Array.isArray(t)) {
                const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());
                if (items.length === 1) {
                    return items[0];
                }
                items.sort();
                return items;
            }
            return t.toLowerCase();
        });
        const tag = topics.map((t) => {
            if (t == null) {
                return "null";
            }
            if (Array.isArray(t)) {
                return t.join("|");
            }
            return t;
        }).join("&");
        return { fragment, tag, topics };
    }
    async function hasSub(contract, event) {
        const { subs } = getInternal(contract);
        return subs.get((await getSubInfo(contract, event)).tag) || null;
    }
    async function getSub(contract, operation, event) {
        // Make sure our runner can actually subscribe to events
        const provider = getProvider(contract.runner);
        assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
        const { fragment, tag, topics } = await getSubInfo(contract, event);
        const { addr, subs } = getInternal(contract);
        let sub = subs.get(tag);
        if (!sub) {
            const address = (addr ? addr : contract);
            const filter = { address, topics };
            const listener = (log) => {
                let foundFragment = fragment;
                if (foundFragment == null) {
                    try {
                        foundFragment = contract.interface.getEvent(log.topics[0]);
                    }
                    catch (error) { }
                }
                // If fragment is null, we do not deconstruct the args to emit
                if (foundFragment) {
                    const _foundFragment = foundFragment;
                    const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
                    emit(contract, event, args, (listener) => {
                        return new ContractEventPayload(contract, listener, event, _foundFragment, log);
                    });
                }
                else {
                    emit(contract, event, [], (listener) => {
                        return new ContractUnknownEventPayload(contract, listener, event, log);
                    });
                }
            };
            let starting = [];
            const start = () => {
                if (starting.length) {
                    return;
                }
                starting.push(provider.on(filter, listener));
            };
            const stop = async () => {
                if (starting.length == 0) {
                    return;
                }
                let started = starting;
                starting = [];
                await Promise.all(started);
                provider.off(filter, listener);
            };
            sub = { tag, listeners: [], start, stop };
            subs.set(tag, sub);
        }
        return sub;
    }
    // We use this to ensure one emit resolves before firing the next to
    // ensure correct ordering (note this cannot throw and just adds the
    // notice to the event queu using setTimeout).
    let lastEmit = Promise.resolve();
    async function _emit(contract, event, args, payloadFunc) {
        await lastEmit;
        const sub = await hasSub(contract, event);
        if (!sub) {
            return false;
        }
        const count = sub.listeners.length;
        sub.listeners = sub.listeners.filter(({ listener, once }) => {
            const passArgs = Array.from(args);
            if (payloadFunc) {
                passArgs.push(payloadFunc(once ? null : listener));
            }
            try {
                listener.call(contract, ...passArgs);
            }
            catch (error) { }
            return !once;
        });
        if (sub.listeners.length === 0) {
            sub.stop();
            getInternal(contract).subs.delete(sub.tag);
        }
        return (count > 0);
    }
    async function emit(contract, event, args, payloadFunc) {
        try {
            await lastEmit;
        }
        catch (error) { }
        const resultPromise = _emit(contract, event, args, payloadFunc);
        lastEmit = resultPromise;
        return await resultPromise;
    }
    const passProperties = ["then"];
    class BaseContract {
        /**
         *  The target to connect to.
         *
         *  This can be an address, ENS name or any [[Addressable]], such as
         *  another contract. To get the resovled address, use the ``getAddress``
         *  method.
         */
        target;
        /**
         *  The contract Interface.
         */
        interface;
        /**
         *  The connected runner. This is generally a [[Provider]] or a
         *  [[Signer]], which dictates what operations are supported.
         *
         *  For example, a **Contract** connected to a [[Provider]] may
         *  only execute read-only operations.
         */
        runner;
        /**
         *  All the Events available on this contract.
         */
        filters;
        /**
         *  @_ignore:
         */
        [internal];
        /**
         *  The fallback or receive function if any.
         */
        fallback;
        /**
         *  Creates a new contract connected to %%target%% with the %%abi%% and
         *  optionally connected to a %%runner%% to perform operations on behalf
         *  of.
         */
        constructor(target, abi, runner, _deployTx) {
            assertArgument(typeof (target) === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
            if (runner == null) {
                runner = null;
            }
            const iface = Interface.from(abi);
            defineProperties(this, { target, runner, interface: iface });
            Object.defineProperty(this, internal, { value: {} });
            let addrPromise;
            let addr = null;
            let deployTx = null;
            if (_deployTx) {
                const provider = getProvider(runner);
                // @TODO: the provider can be null; make a custom dummy provider that will throw a
                // meaningful error
                deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
            }
            let subs = new Map();
            // Resolve the target as the address
            if (typeof (target) === "string") {
                if (isHexString(target)) {
                    addr = target;
                    addrPromise = Promise.resolve(target);
                }
                else {
                    const resolver = getRunner(runner, "resolveName");
                    if (!canResolve(resolver)) {
                        throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                            operation: "resolveName"
                        });
                    }
                    addrPromise = resolver.resolveName(target).then((addr) => {
                        if (addr == null) {
                            throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                                value: target
                            });
                        }
                        getInternal(this).addr = addr;
                        return addr;
                    });
                }
            }
            else {
                addrPromise = target.getAddress().then((addr) => {
                    if (addr == null) {
                        throw new Error("TODO");
                    }
                    getInternal(this).addr = addr;
                    return addr;
                });
            }
            // Set our private values
            setInternal(this, { addrPromise, addr, deployTx, subs });
            // Add the event filters
            const filters = new Proxy({}, {
                get: (target, prop, receiver) => {
                    // Pass important checks (like `then` for Promise) through
                    if (typeof (prop) === "symbol" || passProperties.indexOf(prop) >= 0) {
                        return Reflect.get(target, prop, receiver);
                    }
                    try {
                        return this.getEvent(prop);
                    }
                    catch (error) {
                        if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                            throw error;
                        }
                    }
                    return undefined;
                },
                has: (target, prop) => {
                    // Pass important checks (like `then` for Promise) through
                    if (passProperties.indexOf(prop) >= 0) {
                        return Reflect.has(target, prop);
                    }
                    return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));
                }
            });
            defineProperties(this, { filters });
            defineProperties(this, {
                fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)) : null)
            });
            // Return a Proxy that will respond to functions
            return new Proxy(this, {
                get: (target, prop, receiver) => {
                    if (typeof (prop) === "symbol" || prop in target || passProperties.indexOf(prop) >= 0) {
                        return Reflect.get(target, prop, receiver);
                    }
                    // Undefined properties should return undefined
                    try {
                        return target.getFunction(prop);
                    }
                    catch (error) {
                        if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                            throw error;
                        }
                    }
                    return undefined;
                },
                has: (target, prop) => {
                    if (typeof (prop) === "symbol" || prop in target || passProperties.indexOf(prop) >= 0) {
                        return Reflect.has(target, prop);
                    }
                    return target.interface.hasFunction(prop);
                }
            });
        }
        /**
         *  Return a new Contract instance with the same target and ABI, but
         *  a different %%runner%%.
         */
        connect(runner) {
            return new BaseContract(this.target, this.interface, runner);
        }
        /**
         *  Return a new Contract instance with the same ABI and runner, but
         *  a different %%target%%.
         */
        attach(target) {
            return new BaseContract(target, this.interface, this.runner);
        }
        /**
         *  Return the resolved address of this Contract.
         */
        async getAddress() { return await getInternal(this).addrPromise; }
        /**
         *  Return the deployed bytecode or null if no bytecode is found.
         */
        async getDeployedCode() {
            const provider = getProvider(this.runner);
            assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
            const code = await provider.getCode(await this.getAddress());
            if (code === "0x") {
                return null;
            }
            return code;
        }
        /**
         *  Resolve to this Contract once the bytecode has been deployed, or
         *  resolve immediately if already deployed.
         */
        async waitForDeployment() {
            // We have the deployement transaction; just use that (throws if deployement fails)
            const deployTx = this.deploymentTransaction();
            if (deployTx) {
                await deployTx.wait();
                return this;
            }
            // Check for code
            const code = await this.getDeployedCode();
            if (code != null) {
                return this;
            }
            // Make sure we can subscribe to a provider event
            const provider = getProvider(this.runner);
            assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
            return new Promise((resolve, reject) => {
                const checkCode = async () => {
                    try {
                        const code = await this.getDeployedCode();
                        if (code != null) {
                            return resolve(this);
                        }
                        provider.once("block", checkCode);
                    }
                    catch (error) {
                        reject(error);
                    }
                };
                checkCode();
            });
        }
        /**
         *  Return the transaction used to deploy this contract.
         *
         *  This is only available if this instance was returned from a
         *  [[ContractFactory]].
         */
        deploymentTransaction() {
            return getInternal(this).deployTx;
        }
        /**
         *  Return the function for a given name. This is useful when a contract
         *  method name conflicts with a JavaScript name such as ``prototype`` or
         *  when using a Contract programatically.
         */
        getFunction(key) {
            if (typeof (key) !== "string") {
                key = key.format();
            }
            const func = buildWrappedMethod(this, key);
            return func;
        }
        /**
         *  Return the event for a given name. This is useful when a contract
         *  event name conflicts with a JavaScript name such as ``prototype`` or
         *  when using a Contract programatically.
         */
        getEvent(key) {
            if (typeof (key) !== "string") {
                key = key.format();
            }
            return buildWrappedEvent(this, key);
        }
        /**
         *  @_ignore:
         */
        async queryTransaction(hash) {
            throw new Error("@TODO");
        }
        /*
        // @TODO: this is a non-backwards compatible change, but will be added
        //        in v7 and in a potential SmartContract class in an upcoming
        //        v6 release
        async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
            const provider = getProvider(this.runner);
            assert(provider, "contract runner does not have a provider",
                "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });

            const receipt = await provider.getTransactionReceipt(hash);
            if (receipt == null) { return null; }

            return new ContractTransactionReceipt(this.interface, provider, receipt);
        }
        */
        /**
         *  Provide historic access to event data for %%event%% in the range
         *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
         *  inclusive.
         */
        async queryFilter(event, fromBlock, toBlock) {
            if (fromBlock == null) {
                fromBlock = 0;
            }
            if (toBlock == null) {
                toBlock = "latest";
            }
            const { addr, addrPromise } = getInternal(this);
            const address = (addr ? addr : (await addrPromise));
            const { fragment, topics } = await getSubInfo(this, event);
            const filter = { address, topics, fromBlock, toBlock };
            const provider = getProvider(this.runner);
            assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
            return (await provider.getLogs(filter)).map((log) => {
                let foundFragment = fragment;
                if (foundFragment == null) {
                    try {
                        foundFragment = this.interface.getEvent(log.topics[0]);
                    }
                    catch (error) { }
                }
                if (foundFragment) {
                    try {
                        return new EventLog(log, this.interface, foundFragment);
                    }
                    catch (error) {
                        return new UndecodedEventLog(log, error);
                    }
                }
                return new Log(log, provider);
            });
        }
        /**
         *  Add an event %%listener%% for the %%event%%.
         */
        async on(event, listener) {
            const sub = await getSub(this, "on", event);
            sub.listeners.push({ listener, once: false });
            sub.start();
            return this;
        }
        /**
         *  Add an event %%listener%% for the %%event%%, but remove the listener
         *  after it is fired once.
         */
        async once(event, listener) {
            const sub = await getSub(this, "once", event);
            sub.listeners.push({ listener, once: true });
            sub.start();
            return this;
        }
        /**
         *  Emit an %%event%% calling all listeners with %%args%%.
         *
         *  Resolves to ``true`` if any listeners were called.
         */
        async emit(event, ...args) {
            return await emit(this, event, args, null);
        }
        /**
         *  Resolves to the number of listeners of %%event%% or the total number
         *  of listeners if unspecified.
         */
        async listenerCount(event) {
            if (event) {
                const sub = await hasSub(this, event);
                if (!sub) {
                    return 0;
                }
                return sub.listeners.length;
            }
            const { subs } = getInternal(this);
            let total = 0;
            for (const { listeners } of subs.values()) {
                total += listeners.length;
            }
            return total;
        }
        /**
         *  Resolves to the listeners subscribed to %%event%% or all listeners
         *  if unspecified.
         */
        async listeners(event) {
            if (event) {
                const sub = await hasSub(this, event);
                if (!sub) {
                    return [];
                }
                return sub.listeners.map(({ listener }) => listener);
            }
            const { subs } = getInternal(this);
            let result = [];
            for (const { listeners } of subs.values()) {
                result = result.concat(listeners.map(({ listener }) => listener));
            }
            return result;
        }
        /**
         *  Remove the %%listener%% from the listeners for %%event%% or remove
         *  all listeners if unspecified.
         */
        async off(event, listener) {
            const sub = await hasSub(this, event);
            if (!sub) {
                return this;
            }
            if (listener) {
                const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);
                if (index >= 0) {
                    sub.listeners.splice(index, 1);
                }
            }
            if (listener == null || sub.listeners.length === 0) {
                sub.stop();
                getInternal(this).subs.delete(sub.tag);
            }
            return this;
        }
        /**
         *  Remove all the listeners for %%event%% or remove all listeners if
         *  unspecified.
         */
        async removeAllListeners(event) {
            if (event) {
                const sub = await hasSub(this, event);
                if (!sub) {
                    return this;
                }
                sub.stop();
                getInternal(this).subs.delete(sub.tag);
            }
            else {
                const { subs } = getInternal(this);
                for (const { tag, stop } of subs.values()) {
                    stop();
                    subs.delete(tag);
                }
            }
            return this;
        }
        /**
         *  Alias for [on].
         */
        async addListener(event, listener) {
            return await this.on(event, listener);
        }
        /**
         *  Alias for [off].
         */
        async removeListener(event, listener) {
            return await this.off(event, listener);
        }
        /**
         *  Create a new Class for the %%abi%%.
         */
        static buildClass(abi) {
            class CustomContract extends BaseContract {
                constructor(address, runner = null) {
                    super(address, abi, runner);
                }
            }
            return CustomContract;
        }
        ;
        /**
         *  Create a new BaseContract with a specified Interface.
         */
        static from(target, abi, runner) {
            if (runner == null) {
                runner = null;
            }
            const contract = new this(target, abi, runner);
            return contract;
        }
    }
    function _ContractBase() {
        return BaseContract;
    }
    /**
     *  A [[BaseContract]] with no type guards on its methods or events.
     */
    class Contract extends _ContractBase() {
    }

    // A = Arguments to the constructor
    // I = Interface of deployed contracts
    /**
     *  A **ContractFactory** is used to deploy a Contract to the blockchain.
     */
    class ContractFactory {
        /**
         *  The Contract Interface.
         */
        interface;
        /**
         *  The Contract deployment bytecode. Often called the initcode.
         */
        bytecode;
        /**
         *  The ContractRunner to deploy the Contract as.
         */
        runner;
        /**
         *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
         *  optionally connected to %%runner%%.
         *
         *  The %%bytecode%% may be the ``bytecode`` property within the
         *  standard Solidity JSON output.
         */
        constructor(abi, bytecode, runner) {
            const iface = Interface.from(abi);
            // Dereference Solidity bytecode objects and allow a missing `0x`-prefix
            if (bytecode instanceof Uint8Array) {
                bytecode = hexlify(getBytes(bytecode));
            }
            else {
                if (typeof (bytecode) === "object") {
                    bytecode = bytecode.object;
                }
                if (!bytecode.startsWith("0x")) {
                    bytecode = "0x" + bytecode;
                }
                bytecode = hexlify(getBytes(bytecode));
            }
            defineProperties(this, {
                bytecode, interface: iface, runner: (runner || null)
            });
        }
        attach(target) {
            return new BaseContract(target, this.interface, this.runner);
        }
        /**
         *  Resolves to the transaction to deploy the contract, passing %%args%%
         *  into the constructor.
         */
        async getDeployTransaction(...args) {
            let overrides = {};
            const fragment = this.interface.deploy;
            if (fragment.inputs.length + 1 === args.length) {
                overrides = await copyOverrides(args.pop());
            }
            if (fragment.inputs.length !== args.length) {
                throw new Error("incorrect number of arguments to constructor");
            }
            const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);
            const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
            return Object.assign({}, overrides, { data });
        }
        /**
         *  Resolves to the Contract deployed by passing %%args%% into the
         *  constructor.
         *
         *  This will resolve to the Contract before it has been deployed to the
         *  network, so the [[BaseContract-waitForDeployment]] should be used before
         *  sending any transactions to it.
         */
        async deploy(...args) {
            const tx = await this.getDeployTransaction(...args);
            assert(this.runner && typeof (this.runner.sendTransaction) === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
                operation: "sendTransaction"
            });
            const sentTx = await this.runner.sendTransaction(tx);
            const address = getCreateAddress(sentTx);
            return new BaseContract(address, this.interface, this.runner, sentTx);
        }
        /**
         *  Return a new **ContractFactory** with the same ABI and bytecode,
         *  but connected to %%runner%%.
         */
        connect(runner) {
            return new ContractFactory(this.interface, this.bytecode, runner);
        }
        /**
         *  Create a new **ContractFactory** from the standard Solidity JSON output.
         */
        static fromSolidity(output, runner) {
            assertArgument(output != null, "bad compiler output", "output", output);
            if (typeof (output) === "string") {
                output = JSON.parse(output);
            }
            const abi = output.abi;
            let bytecode = "";
            if (output.bytecode) {
                bytecode = output.bytecode;
            }
            else if (output.evm && output.evm.bytecode) {
                bytecode = output.evm.bytecode;
            }
            return new this(abi, bytecode, runner);
        }
    }

    /**
     *  ENS is a service which allows easy-to-remember names to map to
     *  network addresses.
     *
     *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]
     */
    // @TODO: This should use the fetch-data:ipfs gateway
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            assertArgument(false, "unsupported IPFS format", "link", link);
        }
        return `https:/\/gateway.ipfs.io/ipfs/${link}`;
    }
    /**
     *  A provider plugin super-class for processing multicoin address types.
     */
    class MulticoinProviderPlugin {
        /**
         *  The name.
         */
        name;
        /**
         *  Creates a new **MulticoinProviderPluing** for %%name%%.
         */
        constructor(name) {
            defineProperties(this, { name });
        }
        connect(proivder) {
            return this;
        }
        /**
         *  Returns ``true`` if %%coinType%% is supported by this plugin.
         */
        supportsCoinType(coinType) {
            return false;
        }
        /**
         *  Resolves to the encoded %%address%% for %%coinType%%.
         */
        async encodeAddress(coinType, address) {
            throw new Error("unsupported coin");
        }
        /**
         *  Resolves to the decoded %%data%% for %%coinType%%.
         */
        async decodeAddress(coinType, data) {
            throw new Error("unsupported coin");
        }
    }
    const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    const matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    /**
     *  A connected object to a resolved ENS name resolver, which can be
     *  used to query additional details.
     */
    class EnsResolver {
        /**
         *  The connected provider.
         */
        provider;
        /**
         *  The address of the resolver.
         */
        address;
        /**
         *  The name this resolver was resolved against.
         */
        name;
        // For EIP-2544 names, the ancestor that provided the resolver
        #supports2544;
        #resolver;
        constructor(provider, address, name) {
            defineProperties(this, { provider, address, name });
            this.#supports2544 = null;
            this.#resolver = new Contract(address, [
                "function supportsInterface(bytes4) view returns (bool)",
                "function resolve(bytes, bytes) view returns (bytes)",
                "function addr(bytes32) view returns (address)",
                "function addr(bytes32, uint) view returns (bytes)",
                "function text(bytes32, string) view returns (string)",
                "function contenthash(bytes32) view returns (bytes)",
            ], provider);
        }
        /**
         *  Resolves to true if the resolver supports wildcard resolution.
         */
        async supportsWildcard() {
            if (this.#supports2544 == null) {
                this.#supports2544 = (async () => {
                    try {
                        return await this.#resolver.supportsInterface("0x9061b923");
                    }
                    catch (error) {
                        // Wildcard resolvers must understand supportsInterface
                        // and return true.
                        if (isError(error, "CALL_EXCEPTION")) {
                            return false;
                        }
                        // Let future attempts try again...
                        this.#supports2544 = null;
                        throw error;
                    }
                })();
            }
            return await this.#supports2544;
        }
        async #fetch(funcName, params) {
            params = (params || []).slice();
            const iface = this.#resolver.interface;
            // The first parameters is always the nodehash
            params.unshift(namehash(this.name));
            let fragment = null;
            if (await this.supportsWildcard()) {
                fragment = iface.getFunction(funcName);
                assert(fragment, "missing fragment", "UNKNOWN_ERROR", {
                    info: { funcName }
                });
                params = [
                    dnsEncode(this.name, 255),
                    iface.encodeFunctionData(fragment, params)
                ];
                funcName = "resolve(bytes,bytes)";
            }
            params.push({
                enableCcipRead: true
            });
            try {
                const result = await this.#resolver[funcName](...params);
                if (fragment) {
                    return iface.decodeFunctionResult(fragment, result)[0];
                }
                return result;
            }
            catch (error) {
                if (!isError(error, "CALL_EXCEPTION")) {
                    throw error;
                }
            }
            return null;
        }
        /**
         *  Resolves to the address for %%coinType%% or null if the
         *  provided %%coinType%% has not been configured.
         */
        async getAddress(coinType) {
            if (coinType == null) {
                coinType = 60;
            }
            if (coinType === 60) {
                try {
                    const result = await this.#fetch("addr(bytes32)");
                    // No address
                    if (result == null || result === ZeroAddress) {
                        return null;
                    }
                    return result;
                }
                catch (error) {
                    if (isError(error, "CALL_EXCEPTION")) {
                        return null;
                    }
                    throw error;
                }
            }
            // Try decoding its EVM canonical chain as an EVM chain address first
            if (coinType >= 0 && coinType < 0x80000000) {
                let ethCoinType = coinType + 0x80000000;
                const data = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
                if (isHexString(data, 20)) {
                    return getAddress(data);
                }
            }
            let coinPlugin = null;
            for (const plugin of this.provider.plugins) {
                if (!(plugin instanceof MulticoinProviderPlugin)) {
                    continue;
                }
                if (plugin.supportsCoinType(coinType)) {
                    coinPlugin = plugin;
                    break;
                }
            }
            if (coinPlugin == null) {
                return null;
            }
            // keccak256("addr(bytes32,uint256")
            const data = await this.#fetch("addr(bytes32,uint)", [coinType]);
            // No address
            if (data == null || data === "0x") {
                return null;
            }
            // Compute the address
            const address = await coinPlugin.decodeAddress(coinType, data);
            if (address != null) {
                return address;
            }
            assert(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
                operation: `getAddress(${coinType})`,
                info: { coinType, data }
            });
        }
        /**
         *  Resolves to the EIP-634 text record for %%key%%, or ``null``
         *  if unconfigured.
         */
        async getText(key) {
            const data = await this.#fetch("text(bytes32,string)", [key]);
            if (data == null || data === "0x") {
                return null;
            }
            return data;
        }
        /**
         *  Rsolves to the content-hash or ``null`` if unconfigured.
         */
        async getContentHash() {
            // keccak256("contenthash()")
            const data = await this.#fetch("contenthash(bytes32)");
            // No contenthash
            if (data == null || data === "0x") {
                return null;
            }
            // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)
            const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
            if (ipfs) {
                const scheme = (ipfs[1] === "e3010170") ? "ipfs" : "ipns";
                const length = parseInt(ipfs[4], 16);
                if (ipfs[5].length === length * 2) {
                    return `${scheme}:/\/${encodeBase58("0x" + ipfs[2])}`;
                }
            }
            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
            const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
            if (swarm && swarm[1].length === 64) {
                return `bzz:/\/${swarm[1]}`;
            }
            assert(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
                operation: "getContentHash()",
                info: { data }
            });
        }
        /**
         *  Resolves to the avatar url or ``null`` if the avatar is either
         *  unconfigured or incorrectly configured (e.g. references an NFT
         *  not owned by the address).
         *
         *  If diagnosing issues with configurations, the [[_getAvatar]]
         *  method may be useful.
         */
        async getAvatar() {
            const avatar = await this._getAvatar();
            return avatar.url;
        }
        /**
         *  When resolving an avatar, there are many steps involved, such
         *  fetching metadata and possibly validating ownership of an
         *  NFT.
         *
         *  This method can be used to examine each step and the value it
         *  was working from.
         */
        async _getAvatar() {
            const linkage = [{ type: "name", value: this.name }];
            try {
                // test data for ricmoo.eth
                //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                const avatar = await this.getText("avatar");
                if (avatar == null) {
                    linkage.push({ type: "!avatar", value: "" });
                    return { url: null, linkage };
                }
                linkage.push({ type: "avatar", value: avatar });
                for (let i = 0; i < matchers.length; i++) {
                    const match = avatar.match(matchers[i]);
                    if (match == null) {
                        continue;
                    }
                    const scheme = match[1].toLowerCase();
                    switch (scheme) {
                        case "https":
                        case "data":
                            linkage.push({ type: "url", value: avatar });
                            return { linkage, url: avatar };
                        case "ipfs": {
                            const url = getIpfsLink(avatar);
                            linkage.push({ type: "ipfs", value: avatar });
                            linkage.push({ type: "url", value: url });
                            return { linkage, url };
                        }
                        case "erc721":
                        case "erc1155": {
                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                            const selector = (scheme === "erc721") ? "tokenURI(uint256)" : "uri(uint256)";
                            linkage.push({ type: scheme, value: avatar });
                            // The owner of this name
                            const owner = await this.getAddress();
                            if (owner == null) {
                                linkage.push({ type: "!owner", value: "" });
                                return { url: null, linkage };
                            }
                            const comps = (match[2] || "").split("/");
                            if (comps.length !== 2) {
                                linkage.push({ type: `!${scheme}caip`, value: (match[2] || "") });
                                return { url: null, linkage };
                            }
                            const tokenId = comps[1];
                            const contract = new Contract(comps[0], [
                                // ERC-721
                                "function tokenURI(uint) view returns (string)",
                                "function ownerOf(uint) view returns (address)",
                                // ERC-1155
                                "function uri(uint) view returns (string)",
                                "function balanceOf(address, uint256) view returns (uint)"
                            ], this.provider);
                            // Check that this account owns the token
                            if (scheme === "erc721") {
                                const tokenOwner = await contract.ownerOf(tokenId);
                                if (owner !== tokenOwner) {
                                    linkage.push({ type: "!owner", value: tokenOwner });
                                    return { url: null, linkage };
                                }
                                linkage.push({ type: "owner", value: tokenOwner });
                            }
                            else if (scheme === "erc1155") {
                                const balance = await contract.balanceOf(owner, tokenId);
                                if (!balance) {
                                    linkage.push({ type: "!balance", value: "0" });
                                    return { url: null, linkage };
                                }
                                linkage.push({ type: "balance", value: balance.toString() });
                            }
                            // Call the token contract for the metadata URL
                            let metadataUrl = await contract[selector](tokenId);
                            if (metadataUrl == null || metadataUrl === "0x") {
                                linkage.push({ type: "!metadata-url", value: "" });
                                return { url: null, linkage };
                            }
                            linkage.push({ type: "metadata-url-base", value: metadataUrl });
                            // ERC-1155 allows a generic {id} in the URL
                            if (scheme === "erc1155") {
                                metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
                                linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                            }
                            // Transform IPFS metadata links
                            if (metadataUrl.match(/^ipfs:/i)) {
                                metadataUrl = getIpfsLink(metadataUrl);
                            }
                            linkage.push({ type: "metadata-url", value: metadataUrl });
                            // Get the token metadata
                            let metadata = {};
                            const response = await (new FetchRequest(metadataUrl)).send();
                            response.assertOk();
                            try {
                                metadata = response.bodyJson;
                            }
                            catch (error) {
                                try {
                                    linkage.push({ type: "!metadata", value: response.bodyText });
                                }
                                catch (error) {
                                    const bytes = response.body;
                                    if (bytes) {
                                        linkage.push({ type: "!metadata", value: hexlify(bytes) });
                                    }
                                    return { url: null, linkage };
                                }
                                return { url: null, linkage };
                            }
                            if (!metadata) {
                                linkage.push({ type: "!metadata", value: "" });
                                return { url: null, linkage };
                            }
                            linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                            // Pull the image URL out
                            let imageUrl = metadata.image;
                            if (typeof (imageUrl) !== "string") {
                                linkage.push({ type: "!imageUrl", value: "" });
                                return { url: null, linkage };
                            }
                            if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                // Allow
                            }
                            else {
                                // Transform IPFS link to gateway
                                const ipfs = imageUrl.match(matcherIpfs);
                                if (ipfs == null) {
                                    linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                                    return { url: null, linkage };
                                }
                                linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                                imageUrl = getIpfsLink(imageUrl);
                            }
                            linkage.push({ type: "url", value: imageUrl });
                            return { linkage, url: imageUrl };
                        }
                    }
                }
            }
            catch (error) { }
            return { linkage, url: null };
        }
        static async getEnsAddress(provider) {
            const network = await provider.getNetwork();
            const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
            // No ENS...
            assert(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
                operation: "getEnsAddress", info: { network }
            });
            return ensPlugin.address;
        }
        static async #getResolver(provider, name) {
            const ensAddr = await EnsResolver.getEnsAddress(provider);
            try {
                const contract = new Contract(ensAddr, [
                    "function resolver(bytes32) view returns (address)"
                ], provider);
                const addr = await contract.resolver(namehash(name), {
                    enableCcipRead: true
                });
                if (addr === ZeroAddress) {
                    return null;
                }
                return addr;
            }
            catch (error) {
                // ENS registry cannot throw errors on resolver(bytes32),
                // so probably a link error
                throw error;
            }
            return null;
        }
        /**
         *  Resolve to the ENS resolver for %%name%% using %%provider%% or
         *  ``null`` if unconfigured.
         */
        static async fromName(provider, name) {
            let currentName = name;
            while (true) {
                if (currentName === "" || currentName === ".") {
                    return null;
                }
                // Optimization since the eth node cannot change and does
                // not have a wildcard resolver
                if (name !== "eth" && currentName === "eth") {
                    return null;
                }
                // Check the current node for a resolver
                const addr = await EnsResolver.#getResolver(provider, currentName);
                // Found a resolver!
                if (addr != null) {
                    const resolver = new EnsResolver(provider, addr, name);
                    // Legacy resolver found, using EIP-2544 so it isn't safe to use
                    if (currentName !== name && !(await resolver.supportsWildcard())) {
                        return null;
                    }
                    return resolver;
                }
                // Get the parent node
                currentName = currentName.split(".").slice(1).join(".");
            }
        }
    }

    /**
     *  @_ignore
     */
    const BN_0 = BigInt(0);
    function allowNull(format, nullValue) {
        return (function (value) {
            if (value == null) {
                return nullValue;
            }
            return format(value);
        });
    }
    function arrayOf(format, allowNull) {
        return ((array) => {
            if (allowNull && array == null) {
                return null;
            }
            if (!Array.isArray(array)) {
                throw new Error("not an array");
            }
            return array.map((i) => format(i));
        });
    }
    // Requires an object which matches a fleet of other formatters
    // Any FormatFunc may return `undefined` to have the value omitted
    // from the result object. Calls preserve `this`.
    function object(format, altNames) {
        return ((value) => {
            const result = {};
            for (const key in format) {
                let srcKey = key;
                if (altNames && key in altNames && !(srcKey in value)) {
                    for (const altKey of altNames[key]) {
                        if (altKey in value) {
                            srcKey = altKey;
                            break;
                        }
                    }
                }
                try {
                    const nv = format[key](value[srcKey]);
                    if (nv !== undefined) {
                        result[key] = nv;
                    }
                }
                catch (error) {
                    const message = (error instanceof Error) ? error.message : "not-an-error";
                    assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
                }
            }
            return result;
        });
    }
    function formatBoolean(value) {
        switch (value) {
            case true:
            case "true":
                return true;
            case false:
            case "false":
                return false;
        }
        assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
    }
    function formatData(value) {
        assertArgument(isHexString(value, true), "invalid data", "value", value);
        return value;
    }
    function formatHash(value) {
        assertArgument(isHexString(value, 32), "invalid hash", "value", value);
        return value;
    }
    const _formatLog = object({
        address: getAddress,
        blockHash: formatHash,
        blockNumber: getNumber,
        data: formatData,
        index: getNumber,
        removed: allowNull(formatBoolean, false),
        topics: arrayOf(formatHash),
        transactionHash: formatHash,
        transactionIndex: getNumber,
    }, {
        index: ["logIndex"]
    });
    function formatLog(value) {
        return _formatLog(value);
    }
    const _formatBlock = object({
        hash: allowNull(formatHash),
        parentHash: formatHash,
        parentBeaconBlockRoot: allowNull(formatHash, null),
        number: getNumber,
        timestamp: getNumber,
        nonce: allowNull(formatData),
        difficulty: getBigInt,
        gasLimit: getBigInt,
        gasUsed: getBigInt,
        stateRoot: allowNull(formatHash, null),
        receiptsRoot: allowNull(formatHash, null),
        blobGasUsed: allowNull(getBigInt, null),
        excessBlobGas: allowNull(getBigInt, null),
        miner: allowNull(getAddress),
        prevRandao: allowNull(formatHash, null),
        extraData: formatData,
        baseFeePerGas: allowNull(getBigInt)
    }, {
        prevRandao: ["mixHash"]
    });
    function formatBlock(value) {
        const result = _formatBlock(value);
        result.transactions = value.transactions.map((tx) => {
            if (typeof (tx) === "string") {
                return tx;
            }
            return formatTransactionResponse(tx);
        });
        return result;
    }
    const _formatReceiptLog = object({
        transactionIndex: getNumber,
        blockNumber: getNumber,
        transactionHash: formatHash,
        address: getAddress,
        topics: arrayOf(formatHash),
        data: formatData,
        index: getNumber,
        blockHash: formatHash,
    }, {
        index: ["logIndex"]
    });
    function formatReceiptLog(value) {
        return _formatReceiptLog(value);
    }
    const _formatTransactionReceipt = object({
        to: allowNull(getAddress, null),
        from: allowNull(getAddress, null),
        contractAddress: allowNull(getAddress, null),
        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
        index: getNumber,
        root: allowNull(hexlify),
        gasUsed: getBigInt,
        blobGasUsed: allowNull(getBigInt, null),
        logsBloom: allowNull(formatData),
        blockHash: formatHash,
        hash: formatHash,
        logs: arrayOf(formatReceiptLog),
        blockNumber: getNumber,
        //confirmations: allowNull(getNumber, null),
        cumulativeGasUsed: getBigInt,
        effectiveGasPrice: allowNull(getBigInt),
        blobGasPrice: allowNull(getBigInt, null),
        status: allowNull(getNumber),
        type: allowNull(getNumber, 0)
    }, {
        effectiveGasPrice: ["gasPrice"],
        hash: ["transactionHash"],
        index: ["transactionIndex"],
    });
    function formatTransactionReceipt(value) {
        return _formatTransactionReceipt(value);
    }
    function formatTransactionResponse(value) {
        // Some clients (TestRPC) do strange things like return 0x0 for the
        // 0 address; correct this to be a real address
        if (value.to && getBigInt(value.to) === BN_0) {
            value.to = "0x0000000000000000000000000000000000000000";
        }
        const result = object({
            hash: formatHash,
            // Some nodes do not return this, usually test nodes (like Ganache)
            index: allowNull(getNumber, undefined),
            type: (value) => {
                if (value === "0x" || value == null) {
                    return 0;
                }
                return getNumber(value);
            },
            accessList: allowNull(accessListify, null),
            blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
            blockHash: allowNull(formatHash, null),
            blockNumber: allowNull(getNumber, null),
            transactionIndex: allowNull(getNumber, null),
            from: getAddress,
            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
            gasPrice: allowNull(getBigInt),
            maxPriorityFeePerGas: allowNull(getBigInt),
            maxFeePerGas: allowNull(getBigInt),
            maxFeePerBlobGas: allowNull(getBigInt, null),
            gasLimit: getBigInt,
            to: allowNull(getAddress, null),
            value: getBigInt,
            nonce: getNumber,
            data: formatData,
            creates: allowNull(getAddress, null),
            chainId: allowNull(getBigInt, null)
        }, {
            data: ["input"],
            gasLimit: ["gas"],
            index: ["transactionIndex"]
        })(value);
        // If to and creates are empty, populate the creates from the value
        if (result.to == null && result.creates == null) {
            result.creates = getCreateAddress(result);
        }
        // @TODO: Check fee data
        // Add an access list to supported transaction types
        if ((value.type === 1 || value.type === 2) && value.accessList == null) {
            result.accessList = [];
        }
        // Compute the signature
        if (value.signature) {
            result.signature = Signature.from(value.signature);
        }
        else {
            result.signature = Signature.from(value);
        }
        // Some backends omit ChainId on legacy transactions, but we can compute it
        if (result.chainId == null) {
            const chainId = result.signature.legacyChainId;
            if (chainId != null) {
                result.chainId = chainId;
            }
        }
        // @TODO: check chainID
        /*
        if (value.chainId != null) {
            let chainId = value.chainId;

            if (isHexString(chainId)) {
                chainId = BigNumber.from(chainId).toNumber();
            }

            result.chainId = chainId;

        } else {
            let chainId = value.networkId;

            // geth-etc returns chainId
            if (chainId == null && result.v == null) {
                chainId = value.chainId;
            }

            if (isHexString(chainId)) {
                chainId = BigNumber.from(chainId).toNumber();
            }

            if (typeof(chainId) !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) { chainId = 0; }
                chainId = parseInt(chainId);
            }

            if (typeof(chainId) !== "number") { chainId = 0; }

            result.chainId = chainId;
        }
        */
        // 0x0000... should actually be null
        if (result.blockHash && getBigInt(result.blockHash) === BN_0) {
            result.blockHash = null;
        }
        return result;
    }

    const EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    /**
     *  A **NetworkPlugin** provides additional functionality on a [[Network]].
     */
    class NetworkPlugin {
        /**
         *  The name of the plugin.
         *
         *  It is recommended to use reverse-domain-notation, which permits
         *  unique names with a known authority as well as hierarchal entries.
         */
        name;
        /**
         *  Creates a new **NetworkPlugin**.
         */
        constructor(name) {
            defineProperties(this, { name });
        }
        /**
         *  Creates a copy of this plugin.
         */
        clone() {
            return new NetworkPlugin(this.name);
        }
    }
    /**
     *  A **GasCostPlugin** allows a network to provide alternative values when
     *  computing the intrinsic gas required for a transaction.
     */
    class GasCostPlugin extends NetworkPlugin {
        /**
         *  The block number to treat these values as valid from.
         *
         *  This allows a hardfork to have updated values included as well as
         *  mulutiple hardforks to be supported.
         */
        effectiveBlock;
        /**
         *  The transactions base fee.
         */
        txBase;
        /**
         *  The fee for creating a new account.
         */
        txCreate;
        /**
         *  The fee per zero-byte in the data.
         */
        txDataZero;
        /**
         *  The fee per non-zero-byte in the data.
         */
        txDataNonzero;
        /**
         *  The fee per storage key in the [[link-eip-2930]] access list.
         */
        txAccessListStorageKey;
        /**
         *  The fee per address in the [[link-eip-2930]] access list.
         */
        txAccessListAddress;
        /**
         *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
         *  latest block or another GasCostPlugin supercedes that block number,
         *  with the associated %%costs%%.
         */
        constructor(effectiveBlock, costs) {
            if (effectiveBlock == null) {
                effectiveBlock = 0;
            }
            super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);
            const props = { effectiveBlock };
            function set(name, nullish) {
                let value = (costs || {})[name];
                if (value == null) {
                    value = nullish;
                }
                assertArgument(typeof (value) === "number", `invalud value for ${name}`, "costs", costs);
                props[name] = value;
            }
            set("txBase", 21000);
            set("txCreate", 32000);
            set("txDataZero", 4);
            set("txDataNonzero", 16);
            set("txAccessListStorageKey", 1900);
            set("txAccessListAddress", 2400);
            defineProperties(this, props);
        }
        clone() {
            return new GasCostPlugin(this.effectiveBlock, this);
        }
    }
    /**
     *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry
     *  Contract address and the target network to use when using that
     *  contract.
     *
     *  Various testnets have their own instance of the contract to use, but
     *  in general, the mainnet instance supports multi-chain addresses and
     *  should be used.
     */
    class EnsPlugin extends NetworkPlugin {
        /**
         *  The ENS Registrty Contract address.
         */
        address;
        /**
         *  The chain ID that the ENS contract lives on.
         */
        targetNetwork;
        /**
         *  Creates a new **EnsPlugin** connected to %%address%% on the
         *  %%targetNetwork%%. The default ENS address and mainnet is used
         *  if unspecified.
         */
        constructor(address, targetNetwork) {
            super("org.ethers.plugins.network.Ens");
            defineProperties(this, {
                address: (address || EnsAddress),
                targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)
            });
        }
        clone() {
            return new EnsPlugin(this.address, this.targetNetwork);
        }
    }
    /**
     *  A **FeeDataNetworkPlugin** allows a network to provide and alternate
     *  means to specify its fee data.
     *
     *  For example, a network which does not support [[link-eip-1559]] may
     *  choose to use a Gas Station site to approximate the gas price.
     */
    class FeeDataNetworkPlugin extends NetworkPlugin {
        #feeDataFunc;
        /**
         *  The fee data function provided to the constructor.
         */
        get feeDataFunc() {
            return this.#feeDataFunc;
        }
        /**
         *  Creates a new **FeeDataNetworkPlugin**.
         */
        constructor(feeDataFunc) {
            super("org.ethers.plugins.network.FeeData");
            this.#feeDataFunc = feeDataFunc;
        }
        /**
         *  Resolves to the fee data.
         */
        async getFeeData(provider) {
            return await this.#feeDataFunc(provider);
        }
        clone() {
            return new FeeDataNetworkPlugin(this.#feeDataFunc);
        }
    }
    class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {
        #url;
        #processFunc;
        /**
         *  The URL to initialize the FetchRequest with in %%processFunc%%.
         */
        get url() { return this.#url; }
        /**
         *  The callback to use when computing the FeeData.
         */
        get processFunc() { return this.#processFunc; }
        /**
         *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
         *  be used when computing the fee data for the network.
         */
        constructor(url, processFunc) {
            super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
            this.#url = url;
            this.#processFunc = processFunc;
        }
        // We are immutable, so we can serve as our own clone
        clone() { return this; }
    }
    /*
    export class CustomBlockNetworkPlugin extends NetworkPlugin {
        readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;
        readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;

        constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {
            super("org.ethers.network-plugins.custom-block");
            this.#blockFunc = blockFunc;
            this.#blockWithTxsFunc = blockWithTxsFunc;
        }

        async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {
            return await this.#blockFunc(provider, block);
        }

        async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {
            return await this.#blockWithTxsFunc(provider, block);
        }

        clone(): CustomBlockNetworkPlugin {
            return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);
        }
    }
    */

    /**
     *  A **Network** encapsulates the various properties required to
     *  interact with a specific chain.
     *
     *  @_subsection: api/providers:Networks  [networks]
     */
    /* * * *
    // Networks which operation against an L2 can use this plugin to
    // specify how to access L1, for the purpose of resolving ENS,
    // for example.
    export class LayerOneConnectionPlugin extends NetworkPlugin {
        readonly provider!: Provider;
    // @TODO: Rename to ChainAccess and allow for connecting to any chain
        constructor(provider: Provider) {
            super("org.ethers.plugins.layer-one-connection");
            defineProperties<LayerOneConnectionPlugin>(this, { provider });
        }

        clone(): LayerOneConnectionPlugin {
            return new LayerOneConnectionPlugin(this.provider);
        }
    }
    */
    const Networks = new Map();
    /**
     *  A **Network** provides access to a chain's properties and allows
     *  for plug-ins to extend functionality.
     */
    class Network {
        #name;
        #chainId;
        #plugins;
        /**
         *  Creates a new **Network** for %%name%% and %%chainId%%.
         */
        constructor(name, chainId) {
            this.#name = name;
            this.#chainId = getBigInt(chainId);
            this.#plugins = new Map();
        }
        /**
         *  Returns a JSON-compatible representation of a Network.
         */
        toJSON() {
            return { name: this.name, chainId: String(this.chainId) };
        }
        /**
         *  The network common name.
         *
         *  This is the canonical name, as networks migh have multiple
         *  names.
         */
        get name() { return this.#name; }
        set name(value) { this.#name = value; }
        /**
         *  The network chain ID.
         */
        get chainId() { return this.#chainId; }
        set chainId(value) { this.#chainId = getBigInt(value, "chainId"); }
        /**
         *  Returns true if %%other%% matches this network. Any chain ID
         *  must match, and if no chain ID is present, the name must match.
         *
         *  This method does not currently check for additional properties,
         *  such as ENS address or plug-in compatibility.
         */
        matches(other) {
            if (other == null) {
                return false;
            }
            if (typeof (other) === "string") {
                try {
                    return (this.chainId === getBigInt(other));
                }
                catch (error) { }
                return (this.name === other);
            }
            if (typeof (other) === "number" || typeof (other) === "bigint") {
                try {
                    return (this.chainId === getBigInt(other));
                }
                catch (error) { }
                return false;
            }
            if (typeof (other) === "object") {
                if (other.chainId != null) {
                    try {
                        return (this.chainId === getBigInt(other.chainId));
                    }
                    catch (error) { }
                    return false;
                }
                if (other.name != null) {
                    return (this.name === other.name);
                }
                return false;
            }
            return false;
        }
        /**
         *  Returns the list of plugins currently attached to this Network.
         */
        get plugins() {
            return Array.from(this.#plugins.values());
        }
        /**
         *  Attach a new %%plugin%% to this Network. The network name
         *  must be unique, excluding any fragment.
         */
        attachPlugin(plugin) {
            if (this.#plugins.get(plugin.name)) {
                throw new Error(`cannot replace existing plugin: ${plugin.name} `);
            }
            this.#plugins.set(plugin.name, plugin.clone());
            return this;
        }
        /**
         *  Return the plugin, if any, matching %%name%% exactly. Plugins
         *  with fragments will not be returned unless %%name%% includes
         *  a fragment.
         */
        getPlugin(name) {
            return (this.#plugins.get(name)) || null;
        }
        /**
         *  Gets a list of all plugins that match %%name%%, with otr without
         *  a fragment.
         */
        getPlugins(basename) {
            return (this.plugins.filter((p) => (p.name.split("#")[0] === basename)));
        }
        /**
         *  Create a copy of this Network.
         */
        clone() {
            const clone = new Network(this.name, this.chainId);
            this.plugins.forEach((plugin) => {
                clone.attachPlugin(plugin.clone());
            });
            return clone;
        }
        /**
         *  Compute the intrinsic gas required for a transaction.
         *
         *  A GasCostPlugin can be attached to override the default
         *  values.
         */
        computeIntrinsicGas(tx) {
            const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || (new GasCostPlugin());
            let gas = costs.txBase;
            if (tx.to == null) {
                gas += costs.txCreate;
            }
            if (tx.data) {
                for (let i = 2; i < tx.data.length; i += 2) {
                    if (tx.data.substring(i, i + 2) === "00") {
                        gas += costs.txDataZero;
                    }
                    else {
                        gas += costs.txDataNonzero;
                    }
                }
            }
            if (tx.accessList) {
                const accessList = accessListify(tx.accessList);
                for (const addr in accessList) {
                    gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
                }
            }
            return gas;
        }
        /**
         *  Returns a new Network for the %%network%% name or chainId.
         */
        static from(network) {
            injectCommonNetworks();
            // Default network
            if (network == null) {
                return Network.from("mainnet");
            }
            // Canonical name or chain ID
            if (typeof (network) === "number") {
                network = BigInt(network);
            }
            if (typeof (network) === "string" || typeof (network) === "bigint") {
                const networkFunc = Networks.get(network);
                if (networkFunc) {
                    return networkFunc();
                }
                if (typeof (network) === "bigint") {
                    return new Network("unknown", network);
                }
                assertArgument(false, "unknown network", "network", network);
            }
            // Clonable with network-like abilities
            if (typeof (network.clone) === "function") {
                const clone = network.clone();
                //if (typeof(network.name) !== "string" || typeof(network.chainId) !== "number") {
                //}
                return clone;
            }
            // Networkish
            if (typeof (network) === "object") {
                assertArgument(typeof (network.name) === "string" && typeof (network.chainId) === "number", "invalid network object name or chainId", "network", network);
                const custom = new Network((network.name), (network.chainId));
                if (network.ensAddress || network.ensNetwork != null) {
                    custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
                }
                //if ((<any>network).layerOneConnection) {
                //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));
                //}
                return custom;
            }
            assertArgument(false, "invalid network", "network", network);
        }
        /**
         *  Register %%nameOrChainId%% with a function which returns
         *  an instance of a Network representing that chain.
         */
        static register(nameOrChainId, networkFunc) {
            if (typeof (nameOrChainId) === "number") {
                nameOrChainId = BigInt(nameOrChainId);
            }
            const existing = Networks.get(nameOrChainId);
            if (existing) {
                assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
            }
            Networks.set(nameOrChainId, networkFunc);
        }
    }
    // We don't want to bring in formatUnits because it is backed by
    // FixedNumber and we want to keep Networks tiny. The values
    // included by the Gas Stations are also IEEE 754 with lots of
    // rounding issues and exceed the strict checks formatUnits has.
    function parseUnits(_value, decimals) {
        const value = String(_value);
        if (!value.match(/^[0-9.]+$/)) {
            throw new Error(`invalid gwei value: ${_value}`);
        }
        // Break into [ whole, fraction ]
        const comps = value.split(".");
        if (comps.length === 1) {
            comps.push("");
        }
        // More than 1 decimal point or too many fractional positions
        if (comps.length !== 2) {
            throw new Error(`invalid gwei value: ${_value}`);
        }
        // Pad the fraction to 9 decimalplaces
        while (comps[1].length < decimals) {
            comps[1] += "0";
        }
        // Too many decimals and some non-zero ending, take the ceiling
        if (comps[1].length > 9) {
            let frac = BigInt(comps[1].substring(0, 9));
            if (!comps[1].substring(9).match(/^0+$/)) {
                frac++;
            }
            comps[1] = frac.toString();
        }
        return BigInt(comps[0] + comps[1]);
    }
    // Used by Polygon to use a gas station for fee data
    function getGasStationPlugin(url) {
        return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
            // Prevent Cloudflare from blocking our request in node.js
            request.setHeader("User-Agent", "ethers");
            let response;
            try {
                const [_response, _feeData] = await Promise.all([
                    request.send(), fetchFeeData()
                ]);
                response = _response;
                const payload = response.bodyJson.standard;
                const feeData = {
                    gasPrice: _feeData.gasPrice,
                    maxFeePerGas: parseUnits(payload.maxFee, 9),
                    maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),
                };
                return feeData;
            }
            catch (error) {
                assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
            }
        });
    }
    // See: https://chainlist.org
    let injected = false;
    function injectCommonNetworks() {
        if (injected) {
            return;
        }
        injected = true;
        /// Register popular Ethereum networks
        function registerEth(name, chainId, options) {
            const func = function () {
                const network = new Network(name, chainId);
                // We use 0 to disable ENS
                if (options.ensNetwork != null) {
                    network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
                }
                network.attachPlugin(new GasCostPlugin());
                (options.plugins || []).forEach((plugin) => {
                    network.attachPlugin(plugin);
                });
                return network;
            };
            // Register the network by name and chain ID
            Network.register(name, func);
            Network.register(chainId, func);
            if (options.altNames) {
                options.altNames.forEach((name) => {
                    Network.register(name, func);
                });
            }
        }
        registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
        registerEth("ropsten", 3, { ensNetwork: 3 });
        registerEth("rinkeby", 4, { ensNetwork: 4 });
        registerEth("goerli", 5, { ensNetwork: 5 });
        registerEth("kovan", 42, { ensNetwork: 42 });
        registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
        registerEth("holesky", 17000, { ensNetwork: 17000 });
        registerEth("classic", 61, {});
        registerEth("classicKotti", 6, {});
        registerEth("arbitrum", 42161, {
            ensNetwork: 1,
        });
        registerEth("arbitrum-goerli", 421613, {});
        registerEth("arbitrum-sepolia", 421614, {});
        registerEth("base", 8453, { ensNetwork: 1 });
        registerEth("base-goerli", 84531, {});
        registerEth("base-sepolia", 84532, {});
        registerEth("bnb", 56, { ensNetwork: 1 });
        registerEth("bnbt", 97, {});
        registerEth("linea", 59144, { ensNetwork: 1 });
        registerEth("linea-goerli", 59140, {});
        registerEth("linea-sepolia", 59141, {});
        registerEth("matic", 137, {
            ensNetwork: 1,
            plugins: [
                getGasStationPlugin("https:/\/gasstation.polygon.technology/v2")
            ]
        });
        registerEth("matic-amoy", 80002, {});
        registerEth("matic-mumbai", 80001, {
            altNames: ["maticMumbai", "maticmum"],
            plugins: [
                getGasStationPlugin("https:/\/gasstation-testnet.polygon.technology/v2")
            ]
        });
        registerEth("optimism", 10, {
            ensNetwork: 1,
            plugins: []
        });
        registerEth("optimism-goerli", 420, {});
        registerEth("optimism-sepolia", 11155420, {});
        registerEth("xdai", 100, { ensNetwork: 1 });
    }

    function copy$2(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    // @TODO: refactor this
    /**
     *  A **PollingBlockSubscriber** polls at a regular interval for a change
     *  in the block number.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class PollingBlockSubscriber {
        #provider;
        #poller;
        #interval;
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        #blockNumber;
        /**
         *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
         */
        constructor(provider) {
            this.#provider = provider;
            this.#poller = null;
            this.#interval = 4000;
            this.#blockNumber = -2;
        }
        /**
         *  The polling interval.
         */
        get pollingInterval() { return this.#interval; }
        set pollingInterval(value) { this.#interval = value; }
        async #poll() {
            try {
                const blockNumber = await this.#provider.getBlockNumber();
                // Bootstrap poll to setup our initial block number
                if (this.#blockNumber === -2) {
                    this.#blockNumber = blockNumber;
                    return;
                }
                // @TODO: Put a cap on the maximum number of events per loop?
                if (blockNumber !== this.#blockNumber) {
                    for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {
                        // We have been stopped
                        if (this.#poller == null) {
                            return;
                        }
                        await this.#provider.emit("block", b);
                    }
                    this.#blockNumber = blockNumber;
                }
            }
            catch (error) {
                // @TODO: Minor bump, add an "error" event to let subscribers
                //        know things went awry.
                //console.log(error);
            }
            // We have been stopped
            if (this.#poller == null) {
                return;
            }
            this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
        }
        start() {
            if (this.#poller) {
                return;
            }
            this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
            this.#poll();
        }
        stop() {
            if (!this.#poller) {
                return;
            }
            this.#provider._clearTimeout(this.#poller);
            this.#poller = null;
        }
        pause(dropWhilePaused) {
            this.stop();
            if (dropWhilePaused) {
                this.#blockNumber = -2;
            }
        }
        resume() {
            this.start();
        }
    }
    /**
     *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]
     *  implmentation which will be called on every new block.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class OnBlockSubscriber {
        #provider;
        #poll;
        #running;
        /**
         *  Create a new **OnBlockSubscriber** attached to %%provider%%.
         */
        constructor(provider) {
            this.#provider = provider;
            this.#running = false;
            this.#poll = (blockNumber) => {
                this._poll(blockNumber, this.#provider);
            };
        }
        /**
         *  Called on every new block.
         */
        async _poll(blockNumber, provider) {
            throw new Error("sub-classes must override this");
        }
        start() {
            if (this.#running) {
                return;
            }
            this.#running = true;
            this.#poll(-2);
            this.#provider.on("block", this.#poll);
        }
        stop() {
            if (!this.#running) {
                return;
            }
            this.#running = false;
            this.#provider.off("block", this.#poll);
        }
        pause(dropWhilePaused) { this.stop(); }
        resume() { this.start(); }
    }
    class PollingBlockTagSubscriber extends OnBlockSubscriber {
        #tag;
        #lastBlock;
        constructor(provider, tag) {
            super(provider);
            this.#tag = tag;
            this.#lastBlock = -2;
        }
        pause(dropWhilePaused) {
            if (dropWhilePaused) {
                this.#lastBlock = -2;
            }
            super.pause(dropWhilePaused);
        }
        async _poll(blockNumber, provider) {
            const block = await provider.getBlock(this.#tag);
            if (block == null) {
                return;
            }
            if (this.#lastBlock === -2) {
                this.#lastBlock = block.number;
            }
            else if (block.number > this.#lastBlock) {
                provider.emit(this.#tag, block.number);
                this.#lastBlock = block.number;
            }
        }
    }
    /**
     *  @_ignore:
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class PollingOrphanSubscriber extends OnBlockSubscriber {
        #filter;
        constructor(provider, filter) {
            super(provider);
            this.#filter = copy$2(filter);
        }
        async _poll(blockNumber, provider) {
            throw new Error("@TODO");
        }
    }
    /**
     *  A **PollingTransactionSubscriber** will poll for a given transaction
     *  hash for its receipt.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class PollingTransactionSubscriber extends OnBlockSubscriber {
        #hash;
        /**
         *  Create a new **PollingTransactionSubscriber** attached to
         *  %%provider%%, listening for %%hash%%.
         */
        constructor(provider, hash) {
            super(provider);
            this.#hash = hash;
        }
        async _poll(blockNumber, provider) {
            const tx = await provider.getTransactionReceipt(this.#hash);
            if (tx) {
                provider.emit(this.#hash, tx);
            }
        }
    }
    /**
     *  A **PollingEventSubscriber** will poll for a given filter for its logs.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class PollingEventSubscriber {
        #provider;
        #filter;
        #poller;
        #running;
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        #blockNumber;
        /**
         *  Create a new **PollingTransactionSubscriber** attached to
         *  %%provider%%, listening for %%filter%%.
         */
        constructor(provider, filter) {
            this.#provider = provider;
            this.#filter = copy$2(filter);
            this.#poller = this.#poll.bind(this);
            this.#running = false;
            this.#blockNumber = -2;
        }
        async #poll(blockNumber) {
            // The initial block hasn't been determined yet
            if (this.#blockNumber === -2) {
                return;
            }
            const filter = copy$2(this.#filter);
            filter.fromBlock = this.#blockNumber + 1;
            filter.toBlock = blockNumber;
            const logs = await this.#provider.getLogs(filter);
            // No logs could just mean the node has not indexed them yet,
            // so we keep a sliding window of 60 blocks to keep scanning
            if (logs.length === 0) {
                if (this.#blockNumber < blockNumber - 60) {
                    this.#blockNumber = blockNumber - 60;
                }
                return;
            }
            for (const log of logs) {
                this.#provider.emit(this.#filter, log);
                // Only advance the block number when logs were found to
                // account for networks (like BNB and Polygon) which may
                // sacrifice event consistency for block event speed
                this.#blockNumber = log.blockNumber;
            }
        }
        start() {
            if (this.#running) {
                return;
            }
            this.#running = true;
            if (this.#blockNumber === -2) {
                this.#provider.getBlockNumber().then((blockNumber) => {
                    this.#blockNumber = blockNumber;
                });
            }
            this.#provider.on("block", this.#poller);
        }
        stop() {
            if (!this.#running) {
                return;
            }
            this.#running = false;
            this.#provider.off("block", this.#poller);
        }
        pause(dropWhilePaused) {
            this.stop();
            if (dropWhilePaused) {
                this.#blockNumber = -2;
            }
        }
        resume() {
            this.start();
        }
    }

    /**
     *  The available providers should suffice for most developers purposes,
     *  but the [[AbstractProvider]] class has many features which enable
     *  sub-classing it for specific purposes.
     *
     *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]
     */
    // @TODO
    // Event coalescence
    //   When we register an event with an async value (e.g. address is a Signer
    //   or ENS name), we need to add it immeidately for the Event API, but also
    //   need time to resolve the address. Upon resolving the address, we need to
    //   migrate the listener to the static event. We also need to maintain a map
    //   of Signer/ENS name to address so we can sync respond to listenerCount.
    // Constants
    const BN_2$1 = BigInt(2);
    const MAX_CCIP_REDIRECTS = 10;
    function isPromise$1(value) {
        return (value && typeof (value.then) === "function");
    }
    function getTag(prefix, value) {
        return prefix + ":" + JSON.stringify(value, (k, v) => {
            if (v == null) {
                return "null";
            }
            if (typeof (v) === "bigint") {
                return `bigint:${v.toString()}`;
            }
            if (typeof (v) === "string") {
                return v.toLowerCase();
            }
            // Sort object keys
            if (typeof (v) === "object" && !Array.isArray(v)) {
                const keys = Object.keys(v);
                keys.sort();
                return keys.reduce((accum, key) => {
                    accum[key] = v[key];
                    return accum;
                }, {});
            }
            return v;
        });
    }
    /**
     *  An **UnmanagedSubscriber** is useful for events which do not require
     *  any additional management, such as ``"debug"`` which only requires
     *  emit in synchronous event loop triggered calls.
     */
    class UnmanagedSubscriber {
        /**
         *  The name fof the event.
         */
        name;
        /**
         *  Create a new UnmanagedSubscriber with %%name%%.
         */
        constructor(name) { defineProperties(this, { name }); }
        start() { }
        stop() { }
        pause(dropWhilePaused) { }
        resume() { }
    }
    function copy$1(value) {
        return JSON.parse(JSON.stringify(value));
    }
    function concisify(items) {
        items = Array.from((new Set(items)).values());
        items.sort();
        return items;
    }
    async function getSubscription(_event, provider) {
        if (_event == null) {
            throw new Error("invalid event");
        }
        // Normalize topic array info an EventFilter
        if (Array.isArray(_event)) {
            _event = { topics: _event };
        }
        if (typeof (_event) === "string") {
            switch (_event) {
                case "block":
                case "debug":
                case "error":
                case "finalized":
                case "network":
                case "pending":
                case "safe": {
                    return { type: _event, tag: _event };
                }
            }
        }
        if (isHexString(_event, 32)) {
            const hash = _event.toLowerCase();
            return { type: "transaction", tag: getTag("tx", { hash }), hash };
        }
        if (_event.orphan) {
            const event = _event;
            // @TODO: Should lowercase and whatnot things here instead of copy...
            return { type: "orphan", tag: getTag("orphan", event), filter: copy$1(event) };
        }
        if ((_event.address || _event.topics)) {
            const event = _event;
            const filter = {
                topics: ((event.topics || []).map((t) => {
                    if (t == null) {
                        return null;
                    }
                    if (Array.isArray(t)) {
                        return concisify(t.map((t) => t.toLowerCase()));
                    }
                    return t.toLowerCase();
                }))
            };
            if (event.address) {
                const addresses = [];
                const promises = [];
                const addAddress = (addr) => {
                    if (isHexString(addr)) {
                        addresses.push(addr);
                    }
                    else {
                        promises.push((async () => {
                            addresses.push(await resolveAddress(addr, provider));
                        })());
                    }
                };
                if (Array.isArray(event.address)) {
                    event.address.forEach(addAddress);
                }
                else {
                    addAddress(event.address);
                }
                if (promises.length) {
                    await Promise.all(promises);
                }
                filter.address = concisify(addresses.map((a) => a.toLowerCase()));
            }
            return { filter, tag: getTag("event", filter), type: "event" };
        }
        assertArgument(false, "unknown ProviderEvent", "event", _event);
    }
    function getTime$1() { return (new Date()).getTime(); }
    const defaultOptions$1 = {
        cacheTimeout: 250,
        pollingInterval: 4000
    };
    /**
     *  An **AbstractProvider** provides a base class for other sub-classes to
     *  implement the [[Provider]] API by normalizing input arguments and
     *  formatting output results as well as tracking events for consistent
     *  behaviour on an eventually-consistent network.
     */
    class AbstractProvider {
        #subs;
        #plugins;
        // null=unpaused, true=paused+dropWhilePaused, false=paused
        #pausedState;
        #destroyed;
        #networkPromise;
        #anyNetwork;
        #performCache;
        // The most recent block number if running an event or -1 if no "block" event
        #lastBlockNumber;
        #nextTimer;
        #timers;
        #disableCcipRead;
        #options;
        /**
         *  Create a new **AbstractProvider** connected to %%network%%, or
         *  use the various network detection capabilities to discover the
         *  [[Network]] if necessary.
         */
        constructor(_network, options) {
            this.#options = Object.assign({}, defaultOptions$1, options || {});
            if (_network === "any") {
                this.#anyNetwork = true;
                this.#networkPromise = null;
            }
            else if (_network) {
                const network = Network.from(_network);
                this.#anyNetwork = false;
                this.#networkPromise = Promise.resolve(network);
                setTimeout(() => { this.emit("network", network, null); }, 0);
            }
            else {
                this.#anyNetwork = false;
                this.#networkPromise = null;
            }
            this.#lastBlockNumber = -1;
            this.#performCache = new Map();
            this.#subs = new Map();
            this.#plugins = new Map();
            this.#pausedState = null;
            this.#destroyed = false;
            this.#nextTimer = 1;
            this.#timers = new Map();
            this.#disableCcipRead = false;
        }
        get pollingInterval() { return this.#options.pollingInterval; }
        /**
         *  Returns ``this``, to allow an **AbstractProvider** to implement
         *  the [[ContractRunner]] interface.
         */
        get provider() { return this; }
        /**
         *  Returns all the registered plug-ins.
         */
        get plugins() {
            return Array.from(this.#plugins.values());
        }
        /**
         *  Attach a new plug-in.
         */
        attachPlugin(plugin) {
            if (this.#plugins.get(plugin.name)) {
                throw new Error(`cannot replace existing plugin: ${plugin.name} `);
            }
            this.#plugins.set(plugin.name, plugin.connect(this));
            return this;
        }
        /**
         *  Get a plugin by name.
         */
        getPlugin(name) {
            return (this.#plugins.get(name)) || null;
        }
        /**
         *  Prevent any CCIP-read operation, regardless of whether requested
         *  in a [[call]] using ``enableCcipRead``.
         */
        get disableCcipRead() { return this.#disableCcipRead; }
        set disableCcipRead(value) { this.#disableCcipRead = !!value; }
        // Shares multiple identical requests made during the same 250ms
        async #perform(req) {
            const timeout = this.#options.cacheTimeout;
            // Caching disabled
            if (timeout < 0) {
                return await this._perform(req);
            }
            // Create a tag
            const tag = getTag(req.method, req);
            let perform = this.#performCache.get(tag);
            if (!perform) {
                perform = this._perform(req);
                this.#performCache.set(tag, perform);
                setTimeout(() => {
                    if (this.#performCache.get(tag) === perform) {
                        this.#performCache.delete(tag);
                    }
                }, timeout);
            }
            return await perform;
        }
        /**
         *  Resolves to the data for executing the CCIP-read operations.
         */
        async ccipReadFetch(tx, calldata, urls) {
            if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
                return null;
            }
            const sender = tx.to.toLowerCase();
            const data = calldata.toLowerCase();
            const errorMessages = [];
            for (let i = 0; i < urls.length; i++) {
                const url = urls[i];
                // URL expansion
                const href = url.replace("{sender}", sender).replace("{data}", data);
                // If no {data} is present, use POST; otherwise GET
                //const json: string | null = (url.indexOf("{data}") >= 0) ? null: JSON.stringify({ data, sender });
                //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
                //    value.status = response.statusCode;
                //    return value;
                //});
                const request = new FetchRequest(href);
                if (url.indexOf("{data}") === -1) {
                    request.body = { data, sender };
                }
                this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
                let errorMessage = "unknown error";
                // Fetch the resource...
                let resp;
                try {
                    resp = await request.send();
                }
                catch (error) {
                    // ...low-level fetch error (missing host, bad SSL, etc.),
                    // so try next URL
                    errorMessages.push(error.message);
                    this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
                    continue;
                }
                try {
                    const result = resp.bodyJson;
                    if (result.data) {
                        this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
                        return result.data;
                    }
                    if (result.message) {
                        errorMessage = result.message;
                    }
                    this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
                }
                catch (error) { }
                // 4xx indicates the result is not present; stop
                assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
                // 5xx indicates server issue; try the next url
                errorMessages.push(errorMessage);
            }
            assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
                reason: "500_SERVER_ERROR",
                transaction: tx, info: { urls, errorMessages }
            });
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a block before
         *  returning it, to add additional properties or an alternate
         *  sub-class of [[Block]].
         */
        _wrapBlock(value, network) {
            return new Block(formatBlock(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a log before
         *  returning it, to add additional properties or an alternate
         *  sub-class of [[Log]].
         */
        _wrapLog(value, network) {
            return new Log(formatLog(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a transaction
         *  receipt before returning it, to add additional properties or an
         *  alternate sub-class of [[TransactionReceipt]].
         */
        _wrapTransactionReceipt(value, network) {
            return new TransactionReceipt(formatTransactionReceipt(value), this);
        }
        /**
         *  Provides the opportunity for a sub-class to wrap a transaction
         *  response before returning it, to add additional properties or an
         *  alternate sub-class of [[TransactionResponse]].
         */
        _wrapTransactionResponse(tx, network) {
            return new TransactionResponse(formatTransactionResponse(tx), this);
        }
        /**
         *  Resolves to the Network, forcing a network detection using whatever
         *  technique the sub-class requires.
         *
         *  Sub-classes **must** override this.
         */
        _detectNetwork() {
            assert(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
                operation: "_detectNetwork"
            });
        }
        /**
         *  Sub-classes should use this to perform all built-in operations. All
         *  methods sanitizes and normalizes the values passed into this.
         *
         *  Sub-classes **must** override this.
         */
        async _perform(req) {
            assert(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
                operation: req.method,
                info: req
            });
        }
        // State
        async getBlockNumber() {
            const blockNumber = getNumber(await this.#perform({ method: "getBlockNumber" }), "%response");
            if (this.#lastBlockNumber >= 0) {
                this.#lastBlockNumber = blockNumber;
            }
            return blockNumber;
        }
        /**
         *  Returns or resolves to the address for %%address%%, resolving ENS
         *  names and [[Addressable]] objects and returning if already an
         *  address.
         */
        _getAddress(address) {
            return resolveAddress(address, this);
        }
        /**
         *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
         *  negative values and returning if already a valid block tag.
         */
        _getBlockTag(blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            switch (blockTag) {
                case "earliest":
                    return "0x0";
                case "finalized":
                case "latest":
                case "pending":
                case "safe":
                    return blockTag;
            }
            if (isHexString(blockTag)) {
                if (isHexString(blockTag, 32)) {
                    return blockTag;
                }
                return toQuantity(blockTag);
            }
            if (typeof (blockTag) === "bigint") {
                blockTag = getNumber(blockTag, "blockTag");
            }
            if (typeof (blockTag) === "number") {
                if (blockTag >= 0) {
                    return toQuantity(blockTag);
                }
                if (this.#lastBlockNumber >= 0) {
                    return toQuantity(this.#lastBlockNumber + blockTag);
                }
                return this.getBlockNumber().then((b) => toQuantity(b + blockTag));
            }
            assertArgument(false, "invalid blockTag", "blockTag", blockTag);
        }
        /**
         *  Returns or resolves to a filter for %%filter%%, resolving any ENS
         *  names or [[Addressable]] object and returning if already a valid
         *  filter.
         */
        _getFilter(filter) {
            // Create a canonical representation of the topics
            const topics = (filter.topics || []).map((t) => {
                if (t == null) {
                    return null;
                }
                if (Array.isArray(t)) {
                    return concisify(t.map((t) => t.toLowerCase()));
                }
                return t.toLowerCase();
            });
            const blockHash = ("blockHash" in filter) ? filter.blockHash : undefined;
            const resolve = (_address, fromBlock, toBlock) => {
                let address = undefined;
                switch (_address.length) {
                    case 0: break;
                    case 1:
                        address = _address[0];
                        break;
                    default:
                        _address.sort();
                        address = _address;
                }
                if (blockHash) {
                    if (fromBlock != null || toBlock != null) {
                        throw new Error("invalid filter");
                    }
                }
                const filter = {};
                if (address) {
                    filter.address = address;
                }
                if (topics.length) {
                    filter.topics = topics;
                }
                if (fromBlock) {
                    filter.fromBlock = fromBlock;
                }
                if (toBlock) {
                    filter.toBlock = toBlock;
                }
                if (blockHash) {
                    filter.blockHash = blockHash;
                }
                return filter;
            };
            // Addresses could be async (ENS names or Addressables)
            let address = [];
            if (filter.address) {
                if (Array.isArray(filter.address)) {
                    for (const addr of filter.address) {
                        address.push(this._getAddress(addr));
                    }
                }
                else {
                    address.push(this._getAddress(filter.address));
                }
            }
            let fromBlock = undefined;
            if ("fromBlock" in filter) {
                fromBlock = this._getBlockTag(filter.fromBlock);
            }
            let toBlock = undefined;
            if ("toBlock" in filter) {
                toBlock = this._getBlockTag(filter.toBlock);
            }
            if (address.filter((a) => (typeof (a) !== "string")).length ||
                (fromBlock != null && typeof (fromBlock) !== "string") ||
                (toBlock != null && typeof (toBlock) !== "string")) {
                return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
                    return resolve(result[0], result[1], result[2]);
                });
            }
            return resolve(address, fromBlock, toBlock);
        }
        /**
         *  Returns or resolves to a transaction for %%request%%, resolving
         *  any ENS names or [[Addressable]] and returning if already a valid
         *  transaction.
         */
        _getTransactionRequest(_request) {
            const request = copyRequest(_request);
            const promises = [];
            ["to", "from"].forEach((key) => {
                if (request[key] == null) {
                    return;
                }
                const addr = resolveAddress(request[key], this);
                if (isPromise$1(addr)) {
                    promises.push((async function () { request[key] = await addr; })());
                }
                else {
                    request[key] = addr;
                }
            });
            if (request.blockTag != null) {
                const blockTag = this._getBlockTag(request.blockTag);
                if (isPromise$1(blockTag)) {
                    promises.push((async function () { request.blockTag = await blockTag; })());
                }
                else {
                    request.blockTag = blockTag;
                }
            }
            if (promises.length) {
                return (async function () {
                    await Promise.all(promises);
                    return request;
                })();
            }
            return request;
        }
        async getNetwork() {
            // No explicit network was set and this is our first time
            if (this.#networkPromise == null) {
                // Detect the current network (shared with all calls)
                const detectNetwork = (async () => {
                    try {
                        const network = await this._detectNetwork();
                        this.emit("network", network, null);
                        return network;
                    }
                    catch (error) {
                        if (this.#networkPromise === detectNetwork) {
                            this.#networkPromise = null;
                        }
                        throw error;
                    }
                })();
                this.#networkPromise = detectNetwork;
                return (await detectNetwork).clone();
            }
            const networkPromise = this.#networkPromise;
            const [expected, actual] = await Promise.all([
                networkPromise,
                this._detectNetwork() // The actual connected network
            ]);
            if (expected.chainId !== actual.chainId) {
                if (this.#anyNetwork) {
                    // The "any" network can change, so notify listeners
                    this.emit("network", actual, expected);
                    // Update the network if something else hasn't already changed it
                    if (this.#networkPromise === networkPromise) {
                        this.#networkPromise = Promise.resolve(actual);
                    }
                }
                else {
                    // Otherwise, we do not allow changes to the underlying network
                    assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
                        event: "changed"
                    });
                }
            }
            return expected.clone();
        }
        async getFeeData() {
            const network = await this.getNetwork();
            const getFeeDataFunc = async () => {
                const { _block, gasPrice, priorityFee } = await resolveProperties({
                    _block: this.#getBlock("latest", false),
                    gasPrice: ((async () => {
                        try {
                            const value = await this.#perform({ method: "getGasPrice" });
                            return getBigInt(value, "%response");
                        }
                        catch (error) { }
                        return null;
                    })()),
                    priorityFee: ((async () => {
                        try {
                            const value = await this.#perform({ method: "getPriorityFee" });
                            return getBigInt(value, "%response");
                        }
                        catch (error) { }
                        return null;
                    })())
                });
                let maxFeePerGas = null;
                let maxPriorityFeePerGas = null;
                // These are the recommended EIP-1559 heuristics for fee data
                const block = this._wrapBlock(_block, network);
                if (block && block.baseFeePerGas) {
                    maxPriorityFeePerGas = (priorityFee != null) ? priorityFee : BigInt("1000000000");
                    maxFeePerGas = (block.baseFeePerGas * BN_2$1) + maxPriorityFeePerGas;
                }
                return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
            };
            // Check for a FeeDataNetWorkPlugin
            const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
            if (plugin) {
                const req = new FetchRequest(plugin.url);
                const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
                return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
            }
            return await getFeeDataFunc();
        }
        async estimateGas(_tx) {
            let tx = this._getTransactionRequest(_tx);
            if (isPromise$1(tx)) {
                tx = await tx;
            }
            return getBigInt(await this.#perform({
                method: "estimateGas", transaction: tx
            }), "%response");
        }
        async #call(tx, blockTag, attempt) {
            assert(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
                reason: "TOO_MANY_REDIRECTS",
                transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
            });
            // This came in as a PerformActionTransaction, so to/from are safe; we can cast
            const transaction = copyRequest(tx);
            try {
                return hexlify(await this._perform({ method: "call", transaction, blockTag }));
            }
            catch (error) {
                // CCIP Read OffchainLookup
                if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
                    const data = error.data;
                    const txSender = await resolveAddress(transaction.to, this);
                    // Parse the CCIP Read Arguments
                    let ccipArgs;
                    try {
                        ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
                    }
                    catch (error) {
                        assert(false, error.message, "OFFCHAIN_FAULT", {
                            reason: "BAD_DATA", transaction, info: { data }
                        });
                    }
                    // Check the sender of the OffchainLookup matches the transaction
                    assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
                        action: "call",
                        data,
                        reason: "OffchainLookup",
                        transaction: transaction,
                        invocation: null,
                        revert: {
                            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                            name: "OffchainLookup",
                            args: ccipArgs.errorArgs
                        }
                    });
                    const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
                    assert(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
                        reason: "FETCH_FAILED", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs }
                    });
                    const tx = {
                        to: txSender,
                        data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
                    };
                    this.emit("debug", { action: "sendCcipReadCall", transaction: tx });
                    try {
                        const result = await this.#call(tx, blockTag, attempt + 1);
                        this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx), result });
                        return result;
                    }
                    catch (error) {
                        this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx), error });
                        throw error;
                    }
                }
                throw error;
            }
        }
        async #checkNetwork(promise) {
            const { value } = await resolveProperties({
                network: this.getNetwork(),
                value: promise
            });
            return value;
        }
        async call(_tx) {
            const { tx, blockTag } = await resolveProperties({
                tx: this._getTransactionRequest(_tx),
                blockTag: this._getBlockTag(_tx.blockTag)
            });
            return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
        }
        // Account
        async #getAccountValue(request, _address, _blockTag) {
            let address = this._getAddress(_address);
            let blockTag = this._getBlockTag(_blockTag);
            if (typeof (address) !== "string" || typeof (blockTag) !== "string") {
                [address, blockTag] = await Promise.all([address, blockTag]);
            }
            return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));
        }
        async getBalance(address, blockTag) {
            return getBigInt(await this.#getAccountValue({ method: "getBalance" }, address, blockTag), "%response");
        }
        async getTransactionCount(address, blockTag) {
            return getNumber(await this.#getAccountValue({ method: "getTransactionCount" }, address, blockTag), "%response");
        }
        async getCode(address, blockTag) {
            return hexlify(await this.#getAccountValue({ method: "getCode" }, address, blockTag));
        }
        async getStorage(address, _position, blockTag) {
            const position = getBigInt(_position, "position");
            return hexlify(await this.#getAccountValue({ method: "getStorage", position }, address, blockTag));
        }
        // Write
        async broadcastTransaction(signedTx) {
            const { blockNumber, hash, network } = await resolveProperties({
                blockNumber: this.getBlockNumber(),
                hash: this._perform({
                    method: "broadcastTransaction",
                    signedTransaction: signedTx
                }),
                network: this.getNetwork()
            });
            const tx = Transaction.from(signedTx);
            if (tx.hash !== hash) {
                throw new Error("@TODO: the returned hash did not match");
            }
            return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
        }
        async #getBlock(block, includeTransactions) {
            // @TODO: Add CustomBlockPlugin check
            if (isHexString(block, 32)) {
                return await this.#perform({
                    method: "getBlock", blockHash: block, includeTransactions
                });
            }
            let blockTag = this._getBlockTag(block);
            if (typeof (blockTag) !== "string") {
                blockTag = await blockTag;
            }
            return await this.#perform({
                method: "getBlock", blockTag, includeTransactions
            });
        }
        // Queries
        async getBlock(block, prefetchTxs) {
            const { network, params } = await resolveProperties({
                network: this.getNetwork(),
                params: this.#getBlock(block, !!prefetchTxs)
            });
            if (params == null) {
                return null;
            }
            return this._wrapBlock(params, network);
        }
        async getTransaction(hash) {
            const { network, params } = await resolveProperties({
                network: this.getNetwork(),
                params: this.#perform({ method: "getTransaction", hash })
            });
            if (params == null) {
                return null;
            }
            return this._wrapTransactionResponse(params, network);
        }
        async getTransactionReceipt(hash) {
            const { network, params } = await resolveProperties({
                network: this.getNetwork(),
                params: this.#perform({ method: "getTransactionReceipt", hash })
            });
            if (params == null) {
                return null;
            }
            // Some backends did not backfill the effectiveGasPrice into old transactions
            // in the receipt, so we look it up manually and inject it.
            if (params.gasPrice == null && params.effectiveGasPrice == null) {
                const tx = await this.#perform({ method: "getTransaction", hash });
                if (tx == null) {
                    throw new Error("report this; could not find tx or effectiveGasPrice");
                }
                params.effectiveGasPrice = tx.gasPrice;
            }
            return this._wrapTransactionReceipt(params, network);
        }
        async getTransactionResult(hash) {
            const { result } = await resolveProperties({
                network: this.getNetwork(),
                result: this.#perform({ method: "getTransactionResult", hash })
            });
            if (result == null) {
                return null;
            }
            return hexlify(result);
        }
        // Bloom-filter Queries
        async getLogs(_filter) {
            let filter = this._getFilter(_filter);
            if (isPromise$1(filter)) {
                filter = await filter;
            }
            const { network, params } = await resolveProperties({
                network: this.getNetwork(),
                params: this.#perform({ method: "getLogs", filter })
            });
            return params.map((p) => this._wrapLog(p, network));
        }
        // ENS
        _getProvider(chainId) {
            assert(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
                operation: "_getProvider()"
            });
        }
        async getResolver(name) {
            return await EnsResolver.fromName(this, name);
        }
        async getAvatar(name) {
            const resolver = await this.getResolver(name);
            if (resolver) {
                return await resolver.getAvatar();
            }
            return null;
        }
        async resolveName(name) {
            const resolver = await this.getResolver(name);
            if (resolver) {
                return await resolver.getAddress();
            }
            return null;
        }
        async lookupAddress(address) {
            address = getAddress(address);
            const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
            try {
                const ensAddr = await EnsResolver.getEnsAddress(this);
                const ensContract = new Contract(ensAddr, [
                    "function resolver(bytes32) view returns (address)"
                ], this);
                const resolver = await ensContract.resolver(node);
                if (resolver == null || resolver === ZeroAddress) {
                    return null;
                }
                const resolverContract = new Contract(resolver, [
                    "function name(bytes32) view returns (string)"
                ], this);
                const name = await resolverContract.name(node);
                // Failed forward resolution
                const check = await this.resolveName(name);
                if (check !== address) {
                    return null;
                }
                return name;
            }
            catch (error) {
                // No data was returned from the resolver
                if (isError(error, "BAD_DATA") && error.value === "0x") {
                    return null;
                }
                // Something reerted
                if (isError(error, "CALL_EXCEPTION")) {
                    return null;
                }
                throw error;
            }
            return null;
        }
        async waitForTransaction(hash, _confirms, timeout) {
            const confirms = (_confirms != null) ? _confirms : 1;
            if (confirms === 0) {
                return this.getTransactionReceipt(hash);
            }
            return new Promise(async (resolve, reject) => {
                let timer = null;
                const listener = (async (blockNumber) => {
                    try {
                        const receipt = await this.getTransactionReceipt(hash);
                        if (receipt != null) {
                            if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                                resolve(receipt);
                                //this.off("block", listener);
                                if (timer) {
                                    clearTimeout(timer);
                                    timer = null;
                                }
                                return;
                            }
                        }
                    }
                    catch (error) {
                        console.log("EEE", error);
                    }
                    this.once("block", listener);
                });
                if (timeout != null) {
                    timer = setTimeout(() => {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        this.off("block", listener);
                        reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
                    }, timeout);
                }
                listener(await this.getBlockNumber());
            });
        }
        async waitForBlock(blockTag) {
            assert(false, "not implemented yet", "NOT_IMPLEMENTED", {
                operation: "waitForBlock"
            });
        }
        /**
         *  Clear a timer created using the [[_setTimeout]] method.
         */
        _clearTimeout(timerId) {
            const timer = this.#timers.get(timerId);
            if (!timer) {
                return;
            }
            if (timer.timer) {
                clearTimeout(timer.timer);
            }
            this.#timers.delete(timerId);
        }
        /**
         *  Create a timer that will execute %%func%% after at least %%timeout%%
         *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
         *  in the next event loop.
         *
         *  [Pausing](AbstractProvider-paused) the provider will pause any
         *  associated timers.
         */
        _setTimeout(_func, timeout) {
            if (timeout == null) {
                timeout = 0;
            }
            const timerId = this.#nextTimer++;
            const func = () => {
                this.#timers.delete(timerId);
                _func();
            };
            if (this.paused) {
                this.#timers.set(timerId, { timer: null, func, time: timeout });
            }
            else {
                const timer = setTimeout(func, timeout);
                this.#timers.set(timerId, { timer, func, time: getTime$1() });
            }
            return timerId;
        }
        /**
         *  Perform %%func%% on each subscriber.
         */
        _forEachSubscriber(func) {
            for (const sub of this.#subs.values()) {
                func(sub.subscriber);
            }
        }
        /**
         *  Sub-classes may override this to customize subscription
         *  implementations.
         */
        _getSubscriber(sub) {
            switch (sub.type) {
                case "debug":
                case "error":
                case "network":
                    return new UnmanagedSubscriber(sub.type);
                case "block": {
                    const subscriber = new PollingBlockSubscriber(this);
                    subscriber.pollingInterval = this.pollingInterval;
                    return subscriber;
                }
                case "safe":
                case "finalized":
                    return new PollingBlockTagSubscriber(this, sub.type);
                case "event":
                    return new PollingEventSubscriber(this, sub.filter);
                case "transaction":
                    return new PollingTransactionSubscriber(this, sub.hash);
                case "orphan":
                    return new PollingOrphanSubscriber(this, sub.filter);
            }
            throw new Error(`unsupported event: ${sub.type}`);
        }
        /**
         *  If a [[Subscriber]] fails and needs to replace itself, this
         *  method may be used.
         *
         *  For example, this is used for providers when using the
         *  ``eth_getFilterChanges`` method, which can return null if state
         *  filters are not supported by the backend, allowing the Subscriber
         *  to swap in a [[PollingEventSubscriber]].
         */
        _recoverSubscriber(oldSub, newSub) {
            for (const sub of this.#subs.values()) {
                if (sub.subscriber === oldSub) {
                    if (sub.started) {
                        sub.subscriber.stop();
                    }
                    sub.subscriber = newSub;
                    if (sub.started) {
                        newSub.start();
                    }
                    if (this.#pausedState != null) {
                        newSub.pause(this.#pausedState);
                    }
                    break;
                }
            }
        }
        async #hasSub(event, emitArgs) {
            let sub = await getSubscription(event, this);
            // This is a log that is removing an existing log; we actually want
            // to emit an orphan event for the removed log
            if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
                sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
            }
            return this.#subs.get(sub.tag) || null;
        }
        async #getSub(event) {
            const subscription = await getSubscription(event, this);
            // Prevent tampering with our tag in any subclass' _getSubscriber
            const tag = subscription.tag;
            let sub = this.#subs.get(tag);
            if (!sub) {
                const subscriber = this._getSubscriber(subscription);
                const addressableMap = new WeakMap();
                const nameMap = new Map();
                sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
                this.#subs.set(tag, sub);
            }
            return sub;
        }
        async on(event, listener) {
            const sub = await this.#getSub(event);
            sub.listeners.push({ listener, once: false });
            if (!sub.started) {
                sub.subscriber.start();
                sub.started = true;
                if (this.#pausedState != null) {
                    sub.subscriber.pause(this.#pausedState);
                }
            }
            return this;
        }
        async once(event, listener) {
            const sub = await this.#getSub(event);
            sub.listeners.push({ listener, once: true });
            if (!sub.started) {
                sub.subscriber.start();
                sub.started = true;
                if (this.#pausedState != null) {
                    sub.subscriber.pause(this.#pausedState);
                }
            }
            return this;
        }
        async emit(event, ...args) {
            const sub = await this.#hasSub(event, args);
            // If there is not subscription or if a recent emit removed
            // the last of them (which also deleted the sub) do nothing
            if (!sub || sub.listeners.length === 0) {
                return false;
            }
            const count = sub.listeners.length;
            sub.listeners = sub.listeners.filter(({ listener, once }) => {
                const payload = new EventPayload(this, (once ? null : listener), event);
                try {
                    listener.call(this, ...args, payload);
                }
                catch (error) { }
                return !once;
            });
            if (sub.listeners.length === 0) {
                if (sub.started) {
                    sub.subscriber.stop();
                }
                this.#subs.delete(sub.tag);
            }
            return (count > 0);
        }
        async listenerCount(event) {
            if (event) {
                const sub = await this.#hasSub(event);
                if (!sub) {
                    return 0;
                }
                return sub.listeners.length;
            }
            let total = 0;
            for (const { listeners } of this.#subs.values()) {
                total += listeners.length;
            }
            return total;
        }
        async listeners(event) {
            if (event) {
                const sub = await this.#hasSub(event);
                if (!sub) {
                    return [];
                }
                return sub.listeners.map(({ listener }) => listener);
            }
            let result = [];
            for (const { listeners } of this.#subs.values()) {
                result = result.concat(listeners.map(({ listener }) => listener));
            }
            return result;
        }
        async off(event, listener) {
            const sub = await this.#hasSub(event);
            if (!sub) {
                return this;
            }
            if (listener) {
                const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);
                if (index >= 0) {
                    sub.listeners.splice(index, 1);
                }
            }
            if (!listener || sub.listeners.length === 0) {
                if (sub.started) {
                    sub.subscriber.stop();
                }
                this.#subs.delete(sub.tag);
            }
            return this;
        }
        async removeAllListeners(event) {
            if (event) {
                const { tag, started, subscriber } = await this.#getSub(event);
                if (started) {
                    subscriber.stop();
                }
                this.#subs.delete(tag);
            }
            else {
                for (const [tag, { started, subscriber }] of this.#subs) {
                    if (started) {
                        subscriber.stop();
                    }
                    this.#subs.delete(tag);
                }
            }
            return this;
        }
        // Alias for "on"
        async addListener(event, listener) {
            return await this.on(event, listener);
        }
        // Alias for "off"
        async removeListener(event, listener) {
            return this.off(event, listener);
        }
        /**
         *  If this provider has been destroyed using the [[destroy]] method.
         *
         *  Once destroyed, all resources are reclaimed, internal event loops
         *  and timers are cleaned up and no further requests may be sent to
         *  the provider.
         */
        get destroyed() {
            return this.#destroyed;
        }
        /**
         *  Sub-classes may use this to shutdown any sockets or release their
         *  resources and reject any pending requests.
         *
         *  Sub-classes **must** call ``super.destroy()``.
         */
        destroy() {
            // Stop all listeners
            this.removeAllListeners();
            // Shut down all tiemrs
            for (const timerId of this.#timers.keys()) {
                this._clearTimeout(timerId);
            }
            this.#destroyed = true;
        }
        /**
         *  Whether the provider is currently paused.
         *
         *  A paused provider will not emit any events, and generally should
         *  not make any requests to the network, but that is up to sub-classes
         *  to manage.
         *
         *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
         *  which will buffer any events that occur while paused until the
         *  provider is unpaused.
         */
        get paused() { return (this.#pausedState != null); }
        set paused(pause) {
            if (!!pause === this.paused) {
                return;
            }
            if (this.paused) {
                this.resume();
            }
            else {
                this.pause(false);
            }
        }
        /**
         *  Pause the provider. If %%dropWhilePaused%%, any events that occur
         *  while paused are dropped, otherwise all events will be emitted once
         *  the provider is unpaused.
         */
        pause(dropWhilePaused) {
            this.#lastBlockNumber = -1;
            if (this.#pausedState != null) {
                if (this.#pausedState == !!dropWhilePaused) {
                    return;
                }
                assert(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
                    operation: "pause"
                });
            }
            this._forEachSubscriber((s) => s.pause(dropWhilePaused));
            this.#pausedState = !!dropWhilePaused;
            for (const timer of this.#timers.values()) {
                // Clear the timer
                if (timer.timer) {
                    clearTimeout(timer.timer);
                }
                // Remaining time needed for when we become unpaused
                timer.time = getTime$1() - timer.time;
            }
        }
        /**
         *  Resume the provider.
         */
        resume() {
            if (this.#pausedState == null) {
                return;
            }
            this._forEachSubscriber((s) => s.resume());
            this.#pausedState = null;
            for (const timer of this.#timers.values()) {
                // Remaining time when we were paused
                let timeout = timer.time;
                if (timeout < 0) {
                    timeout = 0;
                }
                // Start time (in cause paused, so we con compute remaininf time)
                timer.time = getTime$1();
                // Start the timer
                setTimeout(timer.func, timeout);
            }
        }
    }
    function _parseString(result, start) {
        try {
            const bytes = _parseBytes(result, start);
            if (bytes) {
                return toUtf8String(bytes);
            }
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        try {
            const offset = getNumber(dataSlice(result, start, start + 32));
            const length = getNumber(dataSlice(result, offset, offset + 32));
            return dataSlice(result, offset + 32, offset + 32 + length);
        }
        catch (error) { }
        return null;
    }
    function numPad(value) {
        const result = toBeArray(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        const padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    const empty = new Uint8Array([]);
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        const result = [];
        let byteCount = 0;
        // Add place-holders for pointers as we add items
        for (let i = 0; i < datas.length; i++) {
            result.push(empty);
            byteCount += 32;
        }
        for (let i = 0; i < datas.length; i++) {
            const data = getBytes(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return concat(result);
    }
    const zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
    function parseOffchainLookup(data) {
        const result = {
            sender: "", urls: [], calldata: "", selector: "", extraData: "", errorArgs: []
        };
        assert(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
            reason: "insufficient OffchainLookup data"
        });
        const sender = dataSlice(data, 0, 32);
        assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
            reason: "corrupt OffchainLookup sender"
        });
        result.sender = dataSlice(sender, 12);
        // Read the URLs from the response
        try {
            const urls = [];
            const urlsOffset = getNumber(dataSlice(data, 32, 64));
            const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));
            const urlsData = dataSlice(data, urlsOffset + 32);
            for (let u = 0; u < urlsLength; u++) {
                const url = _parseString(urlsData, u * 32);
                if (url == null) {
                    throw new Error("abort");
                }
                urls.push(url);
            }
            result.urls = urls;
        }
        catch (error) {
            assert(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
                reason: "corrupt OffchainLookup urls"
            });
        }
        // Get the CCIP calldata to forward
        try {
            const calldata = _parseBytes(data, 64);
            if (calldata == null) {
                throw new Error("abort");
            }
            result.calldata = calldata;
        }
        catch (error) {
            assert(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
                reason: "corrupt OffchainLookup calldata"
            });
        }
        // Get the callbackSelector (bytes4)
        assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
            reason: "corrupt OffchainLookup callbaackSelector"
        });
        result.selector = dataSlice(data, 96, 100);
        // Get the extra data to send back to the contract as context
        try {
            const extraData = _parseBytes(data, 128);
            if (extraData == null) {
                throw new Error("abort");
            }
            result.extraData = extraData;
        }
        catch (error) {
            assert(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
                reason: "corrupt OffchainLookup extraData"
            });
        }
        result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
        return result;
    }

    /**
     *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes
     *  are sufficent for most developers, but this is provided to
     *  fascilitate more complex Signers.
     *
     *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]
     */
    function checkProvider(signer, operation) {
        if (signer.provider) {
            return signer.provider;
        }
        assert(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
    }
    async function populate(signer, tx) {
        let pop = copyRequest(tx);
        if (pop.to != null) {
            pop.to = resolveAddress(pop.to, signer);
        }
        if (pop.from != null) {
            const from = pop.from;
            pop.from = Promise.all([
                signer.getAddress(),
                resolveAddress(from, signer)
            ]).then(([address, from]) => {
                assertArgument(address.toLowerCase() === from.toLowerCase(), "transaction from mismatch", "tx.from", from);
                return address;
            });
        }
        else {
            pop.from = signer.getAddress();
        }
        return await resolveProperties(pop);
    }
    /**
     *  An **AbstractSigner** includes most of teh functionality required
     *  to get a [[Signer]] working as expected, but requires a few
     *  Signer-specific methods be overridden.
     *
     */
    class AbstractSigner {
        /**
         *  The provider this signer is connected to.
         */
        provider;
        /**
         *  Creates a new Signer connected to %%provider%%.
         */
        constructor(provider) {
            defineProperties(this, { provider: (provider || null) });
        }
        async getNonce(blockTag) {
            return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
        }
        async populateCall(tx) {
            const pop = await populate(this, tx);
            return pop;
        }
        async populateTransaction(tx) {
            const provider = checkProvider(this, "populateTransaction");
            const pop = await populate(this, tx);
            if (pop.nonce == null) {
                pop.nonce = await this.getNonce("pending");
            }
            if (pop.gasLimit == null) {
                pop.gasLimit = await this.estimateGas(pop);
            }
            // Populate the chain ID
            const network = await (this.provider).getNetwork();
            if (pop.chainId != null) {
                const chainId = getBigInt(pop.chainId);
                assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
            }
            else {
                pop.chainId = network.chainId;
            }
            // Do not allow mixing pre-eip-1559 and eip-1559 properties
            const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);
            if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
                assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
            }
            else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
                assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
            }
            if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
                // Fully-formed EIP-1559 transaction (skip getFeeData)
                pop.type = 2;
            }
            else if (pop.type === 0 || pop.type === 1) {
                // Explicit Legacy or EIP-2930 transaction
                // We need to get fee data to determine things
                const feeData = await provider.getFeeData();
                assert(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
                    operation: "getGasPrice"
                });
                // Populate missing gasPrice
                if (pop.gasPrice == null) {
                    pop.gasPrice = feeData.gasPrice;
                }
            }
            else {
                // We need to get fee data to determine things
                const feeData = await provider.getFeeData();
                if (pop.type == null) {
                    // We need to auto-detect the intended type of this transaction...
                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                        // The network supports EIP-1559!
                        // Upgrade transaction from null to eip-1559
                        pop.type = 2;
                        if (pop.gasPrice != null) {
                            // Using legacy gasPrice property on an eip-1559 network,
                            // so use gasPrice as both fee properties
                            const gasPrice = pop.gasPrice;
                            delete pop.gasPrice;
                            pop.maxFeePerGas = gasPrice;
                            pop.maxPriorityFeePerGas = gasPrice;
                        }
                        else {
                            // Populate missing fee data
                            if (pop.maxFeePerGas == null) {
                                pop.maxFeePerGas = feeData.maxFeePerGas;
                            }
                            if (pop.maxPriorityFeePerGas == null) {
                                pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                            }
                        }
                    }
                    else if (feeData.gasPrice != null) {
                        // Network doesn't support EIP-1559...
                        // ...but they are trying to use EIP-1559 properties
                        assert(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                            operation: "populateTransaction"
                        });
                        // Populate missing fee data
                        if (pop.gasPrice == null) {
                            pop.gasPrice = feeData.gasPrice;
                        }
                        // Explicitly set untyped transaction to legacy
                        // @TODO: Maybe this shold allow type 1?
                        pop.type = 0;
                    }
                    else {
                        // getFeeData has failed us.
                        assert(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                            operation: "signer.getFeeData"
                        });
                    }
                }
                else if (pop.type === 2 || pop.type === 3) {
                    // Explicitly using EIP-1559 or EIP-4844
                    // Populate missing fee data
                    if (pop.maxFeePerGas == null) {
                        pop.maxFeePerGas = feeData.maxFeePerGas;
                    }
                    if (pop.maxPriorityFeePerGas == null) {
                        pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                    }
                }
            }
            //@TOOD: Don't await all over the place; save them up for
            // the end for better batching
            return await resolveProperties(pop);
        }
        async estimateGas(tx) {
            return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
        }
        async call(tx) {
            return checkProvider(this, "call").call(await this.populateCall(tx));
        }
        async resolveName(name) {
            const provider = checkProvider(this, "resolveName");
            return await provider.resolveName(name);
        }
        async sendTransaction(tx) {
            const provider = checkProvider(this, "sendTransaction");
            const pop = await this.populateTransaction(tx);
            delete pop.from;
            const txObj = Transaction.from(pop);
            return await provider.broadcastTransaction(await this.signTransaction(txObj));
        }
    }
    /**
     *  A **VoidSigner** is a class deisgned to allow an address to be used
     *  in any API which accepts a Signer, but for which there are no
     *  credentials available to perform any actual signing.
     *
     *  This for example allow impersonating an account for the purpose of
     *  static calls or estimating gas, but does not allow sending transactions.
     */
    class VoidSigner extends AbstractSigner {
        /**
         *  The signer address.
         */
        address;
        /**
         *  Creates a new **VoidSigner** with %%address%% attached to
         *  %%provider%%.
         */
        constructor(address, provider) {
            super(provider);
            defineProperties(this, { address });
        }
        async getAddress() { return this.address; }
        connect(provider) {
            return new VoidSigner(this.address, provider);
        }
        #throwUnsupported(suffix, operation) {
            assert(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
        }
        async signTransaction(tx) {
            this.#throwUnsupported("transactions", "signTransaction");
        }
        async signMessage(message) {
            this.#throwUnsupported("messages", "signMessage");
        }
        async signTypedData(domain, types, value) {
            this.#throwUnsupported("typed-data", "signTypedData");
        }
    }

    /**
     *  There are many awesome community services that provide Ethereum
     *  nodes both for developers just starting out and for large-scale
     *  communities.
     *
     *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]
     */
    // Show the throttle message only once per service
    const shown = new Set();
    /**
     *  Displays a warning in tht console when the community resource is
     *  being used too heavily by the app, recommending the developer
     *  acquire their own credentials instead of using the community
     *  credentials.
     *
     *  The notification will only occur once per service.
     */
    function showThrottleMessage(service) {
        if (shown.has(service)) {
            return;
        }
        shown.add(service);
        console.log("========= NOTICE =========");
        console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.org/api-keys/");
        console.log("==========================");
    }

    function copy(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    /**
     *  Some backends support subscribing to events using a Filter ID.
     *
     *  When subscribing with this technique, the node issues a unique
     *  //Filter ID//. At this point the node dedicates resources to
     *  the filter, so that periodic calls to follow up on the //Filter ID//
     *  will receive any events since the last call.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class FilterIdSubscriber {
        #provider;
        #filterIdPromise;
        #poller;
        #running;
        #network;
        #hault;
        /**
         *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
         *  and [[_emitResults]] to setup the subscription and provide the event
         *  to the %%provider%%.
         */
        constructor(provider) {
            this.#provider = provider;
            this.#filterIdPromise = null;
            this.#poller = this.#poll.bind(this);
            this.#running = false;
            this.#network = null;
            this.#hault = false;
        }
        /**
         *  Sub-classes **must** override this to begin the subscription.
         */
        _subscribe(provider) {
            throw new Error("subclasses must override this");
        }
        /**
         *  Sub-classes **must** override this handle the events.
         */
        _emitResults(provider, result) {
            throw new Error("subclasses must override this");
        }
        /**
         *  Sub-classes **must** override this handle recovery on errors.
         */
        _recover(provider) {
            throw new Error("subclasses must override this");
        }
        async #poll(blockNumber) {
            try {
                // Subscribe if necessary
                if (this.#filterIdPromise == null) {
                    this.#filterIdPromise = this._subscribe(this.#provider);
                }
                // Get the Filter ID
                let filterId = null;
                try {
                    filterId = await this.#filterIdPromise;
                }
                catch (error) {
                    if (!isError(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
                        throw error;
                    }
                }
                // The backend does not support Filter ID; downgrade to
                // polling
                if (filterId == null) {
                    this.#filterIdPromise = null;
                    this.#provider._recoverSubscriber(this, this._recover(this.#provider));
                    return;
                }
                const network = await this.#provider.getNetwork();
                if (!this.#network) {
                    this.#network = network;
                }
                if (this.#network.chainId !== network.chainId) {
                    throw new Error("chaid changed");
                }
                if (this.#hault) {
                    return;
                }
                const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
                await this._emitResults(this.#provider, result);
            }
            catch (error) {
                console.log("@TODO", error);
            }
            this.#provider.once("block", this.#poller);
        }
        #teardown() {
            const filterIdPromise = this.#filterIdPromise;
            if (filterIdPromise) {
                this.#filterIdPromise = null;
                filterIdPromise.then((filterId) => {
                    if (this.#provider.destroyed) {
                        return;
                    }
                    this.#provider.send("eth_uninstallFilter", [filterId]);
                });
            }
        }
        start() {
            if (this.#running) {
                return;
            }
            this.#running = true;
            this.#poll(-2);
        }
        stop() {
            if (!this.#running) {
                return;
            }
            this.#running = false;
            this.#hault = true;
            this.#teardown();
            this.#provider.off("block", this.#poller);
        }
        pause(dropWhilePaused) {
            if (dropWhilePaused) {
                this.#teardown();
            }
            this.#provider.off("block", this.#poller);
        }
        resume() { this.start(); }
    }
    /**
     *  A **FilterIdSubscriber** for receiving contract events.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class FilterIdEventSubscriber extends FilterIdSubscriber {
        #event;
        /**
         *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
         *  listening for %%filter%%.
         */
        constructor(provider, filter) {
            super(provider);
            this.#event = copy(filter);
        }
        _recover(provider) {
            return new PollingEventSubscriber(provider, this.#event);
        }
        async _subscribe(provider) {
            const filterId = await provider.send("eth_newFilter", [this.#event]);
            return filterId;
        }
        async _emitResults(provider, results) {
            for (const result of results) {
                provider.emit(this.#event, provider._wrapLog(result, provider._network));
            }
        }
    }
    /**
     *  A **FilterIdSubscriber** for receiving pending transactions events.
     *
     *  @_docloc: api/providers/abstract-provider
     */
    class FilterIdPendingSubscriber extends FilterIdSubscriber {
        async _subscribe(provider) {
            return await provider.send("eth_newPendingTransactionFilter", []);
        }
        async _emitResults(provider, results) {
            for (const result of results) {
                provider.emit("pending", result);
            }
        }
    }

    /**
     *  One of the most common ways to interact with the blockchain is
     *  by a node running a JSON-RPC interface which can be connected to,
     *  based on the transport, using:
     *
     *  - HTTP or HTTPS - [[JsonRpcProvider]]
     *  - WebSocket - [[WebSocketProvider]]
     *  - IPC - [[IpcSocketProvider]]
     *
     * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]
     */
    // @TODO:
    // - Add the batching API
    // https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false
    const Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
    //const Methods = "getAddress,then".split(/,/g);
    function deepCopy(value) {
        if (value == null || Primitive.indexOf(typeof (value)) >= 0) {
            return value;
        }
        // Keep any Addressable
        if (typeof (value.getAddress) === "function") {
            return value;
        }
        if (Array.isArray(value)) {
            return (value.map(deepCopy));
        }
        if (typeof (value) === "object") {
            return Object.keys(value).reduce((accum, key) => {
                accum[key] = value[key];
                return accum;
            }, {});
        }
        throw new Error(`should not happen: ${value} (${typeof (value)})`);
    }
    function stall$3(duration) {
        return new Promise((resolve) => { setTimeout(resolve, duration); });
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    function isPollable(value) {
        return (value && typeof (value.pollingInterval) === "number");
    }
    const defaultOptions = {
        polling: false,
        staticNetwork: null,
        batchStallTime: 10,
        batchMaxSize: (1 << 20),
        batchMaxCount: 100,
        cacheTimeout: 250,
        pollingInterval: 4000
    };
    // @TODO: Unchecked Signers
    class JsonRpcSigner extends AbstractSigner {
        address;
        constructor(provider, address) {
            super(provider);
            address = getAddress(address);
            defineProperties(this, { address });
        }
        connect(provider) {
            assert(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
                operation: "signer.connect"
            });
        }
        async getAddress() {
            return this.address;
        }
        // JSON-RPC will automatially fill in nonce, etc. so we just check from
        async populateTransaction(tx) {
            return await this.populateCall(tx);
        }
        // Returns just the hash of the transaction after sent, which is what
        // the bare JSON-RPC API does;
        async sendUncheckedTransaction(_tx) {
            const tx = deepCopy(_tx);
            const promises = [];
            // Make sure the from matches the sender
            if (tx.from) {
                const _from = tx.from;
                promises.push((async () => {
                    const from = await resolveAddress(_from, this.provider);
                    assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
                    tx.from = from;
                })());
            }
            else {
                tx.from = this.address;
            }
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (tx.gasLimit == null) {
                promises.push((async () => {
                    tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
                })());
            }
            // The address may be an ENS name or Addressable
            if (tx.to != null) {
                const _to = tx.to;
                promises.push((async () => {
                    tx.to = await resolveAddress(_to, this.provider);
                })());
            }
            // Wait until all of our properties are filled in
            if (promises.length) {
                await Promise.all(promises);
            }
            const hexTx = this.provider.getRpcTransaction(tx);
            return this.provider.send("eth_sendTransaction", [hexTx]);
        }
        async sendTransaction(tx) {
            // This cannot be mined any earlier than any recent block
            const blockNumber = await this.provider.getBlockNumber();
            // Send the transaction
            const hash = await this.sendUncheckedTransaction(tx);
            // Unfortunately, JSON-RPC only provides and opaque transaction hash
            // for a response, and we need the actual transaction, so we poll
            // for it; it should show up very quickly
            return await (new Promise((resolve, reject) => {
                const timeouts = [1000, 100];
                let invalids = 0;
                const checkTx = async () => {
                    try {
                        // Try getting the transaction
                        const tx = await this.provider.getTransaction(hash);
                        if (tx != null) {
                            resolve(tx.replaceableTransaction(blockNumber));
                            return;
                        }
                    }
                    catch (error) {
                        // If we were cancelled: stop polling.
                        // If the data is bad: the node returns bad transactions
                        // If the network changed: calling again will also fail
                        // If unsupported: likely destroyed
                        if (isError(error, "CANCELLED") || isError(error, "BAD_DATA") ||
                            isError(error, "NETWORK_ERROR") || isError(error, "UNSUPPORTED_OPERATION")) {
                            if (error.info == null) {
                                error.info = {};
                            }
                            error.info.sendTransactionHash = hash;
                            reject(error);
                            return;
                        }
                        // Stop-gap for misbehaving backends; see #4513
                        if (isError(error, "INVALID_ARGUMENT")) {
                            invalids++;
                            if (error.info == null) {
                                error.info = {};
                            }
                            error.info.sendTransactionHash = hash;
                            if (invalids > 10) {
                                reject(error);
                                return;
                            }
                        }
                        // Notify anyone that cares; but we will try again, since
                        // it is likely an intermittent service error
                        this.provider.emit("error", makeError("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
                    }
                    // Wait another 4 seconds
                    this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);
                };
                checkTx();
            }));
        }
        async signTransaction(_tx) {
            const tx = deepCopy(_tx);
            // Make sure the from matches the sender
            if (tx.from) {
                const from = await resolveAddress(tx.from, this.provider);
                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
                tx.from = from;
            }
            else {
                tx.from = this.address;
            }
            const hexTx = this.provider.getRpcTransaction(tx);
            return await this.provider.send("eth_signTransaction", [hexTx]);
        }
        async signMessage(_message) {
            const message = ((typeof (_message) === "string") ? toUtf8Bytes(_message) : _message);
            return await this.provider.send("personal_sign", [
                hexlify(message), this.address.toLowerCase()
            ]);
        }
        async signTypedData(domain, types, _value) {
            const value = deepCopy(_value);
            // Populate any ENS names (in-place)
            const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value) => {
                const address = await resolveAddress(value);
                assertArgument(address != null, "TypedData does not support null address", "value", value);
                return address;
            });
            return await this.provider.send("eth_signTypedData_v4", [
                this.address.toLowerCase(),
                JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
            ]);
        }
        async unlock(password) {
            return this.provider.send("personal_unlockAccount", [
                this.address.toLowerCase(), password, null
            ]);
        }
        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
        async _legacySignMessage(_message) {
            const message = ((typeof (_message) === "string") ? toUtf8Bytes(_message) : _message);
            return await this.provider.send("eth_sign", [
                this.address.toLowerCase(), hexlify(message)
            ]);
        }
    }
    /**
     *  The JsonRpcApiProvider is an abstract class and **MUST** be
     *  sub-classed.
     *
     *  It provides the base for all JSON-RPC-based Provider interaction.
     *
     *  Sub-classing Notes:
     *  - a sub-class MUST override _send
     *  - a sub-class MUST call the `_start()` method once connected
     */
    class JsonRpcApiProvider extends AbstractProvider {
        #options;
        // The next ID to use for the JSON-RPC ID field
        #nextId;
        // Payloads are queued and triggered in batches using the drainTimer
        #payloads;
        #drainTimer;
        #notReady;
        #network;
        #pendingDetectNetwork;
        #scheduleDrain() {
            if (this.#drainTimer) {
                return;
            }
            // If we aren't using batching, no harm in sending it immediately
            const stallTime = (this._getOption("batchMaxCount") === 1) ? 0 : this._getOption("batchStallTime");
            this.#drainTimer = setTimeout(() => {
                this.#drainTimer = null;
                const payloads = this.#payloads;
                this.#payloads = [];
                while (payloads.length) {
                    // Create payload batches that satisfy our batch constraints
                    const batch = [(payloads.shift())];
                    while (payloads.length) {
                        if (batch.length === this.#options.batchMaxCount) {
                            break;
                        }
                        batch.push((payloads.shift()));
                        const bytes = JSON.stringify(batch.map((p) => p.payload));
                        if (bytes.length > this.#options.batchMaxSize) {
                            payloads.unshift((batch.pop()));
                            break;
                        }
                    }
                    // Process the result to each payload
                    (async () => {
                        const payload = ((batch.length === 1) ? batch[0].payload : batch.map((p) => p.payload));
                        this.emit("debug", { action: "sendRpcPayload", payload });
                        try {
                            const result = await this._send(payload);
                            this.emit("debug", { action: "receiveRpcResult", result });
                            // Process results in batch order
                            for (const { resolve, reject, payload } of batch) {
                                if (this.destroyed) {
                                    reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
                                    continue;
                                }
                                // Find the matching result
                                const resp = result.filter((r) => (r.id === payload.id))[0];
                                // No result; the node failed us in unexpected ways
                                if (resp == null) {
                                    const error = makeError("missing response for request", "BAD_DATA", {
                                        value: result, info: { payload }
                                    });
                                    this.emit("error", error);
                                    reject(error);
                                    continue;
                                }
                                // The response is an error
                                if ("error" in resp) {
                                    reject(this.getRpcError(payload, resp));
                                    continue;
                                }
                                // All good; send the result
                                resolve(resp.result);
                            }
                        }
                        catch (error) {
                            this.emit("debug", { action: "receiveRpcError", error });
                            for (const { reject } of batch) {
                                // @TODO: augment the error with the payload
                                reject(error);
                            }
                        }
                    })();
                }
            }, stallTime);
        }
        constructor(network, options) {
            super(network, options);
            this.#nextId = 1;
            this.#options = Object.assign({}, defaultOptions, options || {});
            this.#payloads = [];
            this.#drainTimer = null;
            this.#network = null;
            this.#pendingDetectNetwork = null;
            {
                let resolve = null;
                const promise = new Promise((_resolve) => {
                    resolve = _resolve;
                });
                this.#notReady = { promise, resolve };
            }
            const staticNetwork = this._getOption("staticNetwork");
            if (typeof (staticNetwork) === "boolean") {
                assertArgument(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
                if (staticNetwork && network != null) {
                    this.#network = Network.from(network);
                }
            }
            else if (staticNetwork) {
                // Make sure any static network is compatbile with the provided netwrok
                assertArgument(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
                this.#network = staticNetwork;
            }
        }
        /**
         *  Returns the value associated with the option %%key%%.
         *
         *  Sub-classes can use this to inquire about configuration options.
         */
        _getOption(key) {
            return this.#options[key];
        }
        /**
         *  Gets the [[Network]] this provider has committed to. On each call, the network
         *  is detected, and if it has changed, the call will reject.
         */
        get _network() {
            assert(this.#network, "network is not available yet", "NETWORK_ERROR");
            return this.#network;
        }
        /**
         *  Resolves to the non-normalized value by performing %%req%%.
         *
         *  Sub-classes may override this to modify behavior of actions,
         *  and should generally call ``super._perform`` as a fallback.
         */
        async _perform(req) {
            // Legacy networks do not like the type field being passed along (which
            // is fair), so we delete type if it is 0 and a non-EIP-1559 network
            if (req.method === "call" || req.method === "estimateGas") {
                let tx = req.transaction;
                if (tx && tx.type != null && getBigInt(tx.type)) {
                    // If there are no EIP-1559 or newer properties, it might be pre-EIP-1559
                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                        const feeData = await this.getFeeData();
                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                            // Network doesn't know about EIP-1559 (and hence type)
                            req = Object.assign({}, req, {
                                transaction: Object.assign({}, tx, { type: undefined })
                            });
                        }
                    }
                }
            }
            const request = this.getRpcRequest(req);
            if (request != null) {
                return await this.send(request.method, request.args);
            }
            return super._perform(req);
        }
        /**
         *  Sub-classes may override this; it detects the *actual* network that
         *  we are **currently** connected to.
         *
         *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
         *  _send primitive must be used instead.
         */
        async _detectNetwork() {
            const network = this._getOption("staticNetwork");
            if (network) {
                if (network === true) {
                    if (this.#network) {
                        return this.#network;
                    }
                }
                else {
                    return network;
                }
            }
            if (this.#pendingDetectNetwork) {
                return await this.#pendingDetectNetwork;
            }
            // If we are ready, use ``send``, which enabled requests to be batched
            if (this.ready) {
                this.#pendingDetectNetwork = (async () => {
                    try {
                        const result = Network.from(getBigInt(await this.send("eth_chainId", [])));
                        this.#pendingDetectNetwork = null;
                        return result;
                    }
                    catch (error) {
                        this.#pendingDetectNetwork = null;
                        throw error;
                    }
                })();
                return await this.#pendingDetectNetwork;
            }
            // We are not ready yet; use the primitive _send
            this.#pendingDetectNetwork = (async () => {
                const payload = {
                    id: this.#nextId++, method: "eth_chainId", params: [], jsonrpc: "2.0"
                };
                this.emit("debug", { action: "sendRpcPayload", payload });
                let result;
                try {
                    result = (await this._send(payload))[0];
                    this.#pendingDetectNetwork = null;
                }
                catch (error) {
                    this.#pendingDetectNetwork = null;
                    this.emit("debug", { action: "receiveRpcError", error });
                    throw error;
                }
                this.emit("debug", { action: "receiveRpcResult", result });
                if ("result" in result) {
                    return Network.from(getBigInt(result.result));
                }
                throw this.getRpcError(payload, result);
            })();
            return await this.#pendingDetectNetwork;
        }
        /**
         *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
         *  will be passed to [[_send]] from [[send]]. If it is overridden, then
         *  ``super._start()`` **MUST** be called.
         *
         *  Calling it multiple times is safe and has no effect.
         */
        _start() {
            if (this.#notReady == null || this.#notReady.resolve == null) {
                return;
            }
            this.#notReady.resolve();
            this.#notReady = null;
            (async () => {
                // Bootstrap the network
                while (this.#network == null && !this.destroyed) {
                    try {
                        this.#network = await this._detectNetwork();
                    }
                    catch (error) {
                        if (this.destroyed) {
                            break;
                        }
                        console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
                        this.emit("error", makeError("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
                        await stall$3(1000);
                    }
                }
                // Start dispatching requests
                this.#scheduleDrain();
            })();
        }
        /**
         *  Resolves once the [[_start]] has been called. This can be used in
         *  sub-classes to defer sending data until the connection has been
         *  established.
         */
        async _waitUntilReady() {
            if (this.#notReady == null) {
                return;
            }
            return await this.#notReady.promise;
        }
        /**
         *  Return a Subscriber that will manage the %%sub%%.
         *
         *  Sub-classes may override this to modify the behavior of
         *  subscription management.
         */
        _getSubscriber(sub) {
            // Pending Filters aren't availble via polling
            if (sub.type === "pending") {
                return new FilterIdPendingSubscriber(this);
            }
            if (sub.type === "event") {
                if (this._getOption("polling")) {
                    return new PollingEventSubscriber(this, sub.filter);
                }
                return new FilterIdEventSubscriber(this, sub.filter);
            }
            // Orphaned Logs are handled automatically, by the filter, since
            // logs with removed are emitted by it
            if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
                return new UnmanagedSubscriber("orphan");
            }
            return super._getSubscriber(sub);
        }
        /**
         *  Returns true only if the [[_start]] has been called.
         */
        get ready() { return this.#notReady == null; }
        /**
         *  Returns %%tx%% as a normalized JSON-RPC transaction request,
         *  which has all values hexlified and any numeric values converted
         *  to Quantity values.
         */
        getRpcTransaction(tx) {
            const result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
                if (tx[key] == null) {
                    return;
                }
                let dstKey = key;
                if (key === "gasLimit") {
                    dstKey = "gas";
                }
                result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
            });
            // Make sure addresses and data are lowercase
            ["from", "to", "data"].forEach((key) => {
                if (tx[key] == null) {
                    return;
                }
                result[key] = hexlify(tx[key]);
            });
            // Normalize the access list object
            if (tx.accessList) {
                result["accessList"] = accessListify(tx.accessList);
            }
            if (tx.blobVersionedHashes) {
                // @TODO: Remove this <any> case once EIP-4844 added to prepared tx
                result["blobVersionedHashes"] = tx.blobVersionedHashes.map(h => h.toLowerCase());
            }
            // @TODO: blobs should probably also be copied over, optionally
            // accounting for the kzg property to backfill blobVersionedHashes
            // using the commitment. Or should that be left as an exercise to
            // the caller?
            return result;
        }
        /**
         *  Returns the request method and arguments required to perform
         *  %%req%%.
         */
        getRpcRequest(req) {
            switch (req.method) {
                case "chainId":
                    return { method: "eth_chainId", args: [] };
                case "getBlockNumber":
                    return { method: "eth_blockNumber", args: [] };
                case "getGasPrice":
                    return { method: "eth_gasPrice", args: [] };
                case "getPriorityFee":
                    return { method: "eth_maxPriorityFeePerGas", args: [] };
                case "getBalance":
                    return {
                        method: "eth_getBalance",
                        args: [getLowerCase(req.address), req.blockTag]
                    };
                case "getTransactionCount":
                    return {
                        method: "eth_getTransactionCount",
                        args: [getLowerCase(req.address), req.blockTag]
                    };
                case "getCode":
                    return {
                        method: "eth_getCode",
                        args: [getLowerCase(req.address), req.blockTag]
                    };
                case "getStorage":
                    return {
                        method: "eth_getStorageAt",
                        args: [
                            getLowerCase(req.address),
                            ("0x" + req.position.toString(16)),
                            req.blockTag
                        ]
                    };
                case "broadcastTransaction":
                    return {
                        method: "eth_sendRawTransaction",
                        args: [req.signedTransaction]
                    };
                case "getBlock":
                    if ("blockTag" in req) {
                        return {
                            method: "eth_getBlockByNumber",
                            args: [req.blockTag, !!req.includeTransactions]
                        };
                    }
                    else if ("blockHash" in req) {
                        return {
                            method: "eth_getBlockByHash",
                            args: [req.blockHash, !!req.includeTransactions]
                        };
                    }
                    break;
                case "getTransaction":
                    return {
                        method: "eth_getTransactionByHash",
                        args: [req.hash]
                    };
                case "getTransactionReceipt":
                    return {
                        method: "eth_getTransactionReceipt",
                        args: [req.hash]
                    };
                case "call":
                    return {
                        method: "eth_call",
                        args: [this.getRpcTransaction(req.transaction), req.blockTag]
                    };
                case "estimateGas": {
                    return {
                        method: "eth_estimateGas",
                        args: [this.getRpcTransaction(req.transaction)]
                    };
                }
                case "getLogs":
                    if (req.filter && req.filter.address != null) {
                        if (Array.isArray(req.filter.address)) {
                            req.filter.address = req.filter.address.map(getLowerCase);
                        }
                        else {
                            req.filter.address = getLowerCase(req.filter.address);
                        }
                    }
                    return { method: "eth_getLogs", args: [req.filter] };
            }
            return null;
        }
        /**
         *  Returns an ethers-style Error for the given JSON-RPC error
         *  %%payload%%, coalescing the various strings and error shapes
         *  that different nodes return, coercing them into a machine-readable
         *  standardized error.
         */
        getRpcError(payload, _error) {
            const { method } = payload;
            const { error } = _error;
            if (method === "eth_estimateGas" && error.message) {
                const msg = error.message;
                if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
                    return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
                        transaction: (payload.params[0]),
                        info: { payload, error }
                    });
                }
            }
            if (method === "eth_call" || method === "eth_estimateGas") {
                const result = spelunkData(error);
                const e = AbiCoder.getBuiltinCallException((method === "eth_call") ? "call" : "estimateGas", (payload.params[0]), (result ? result.data : null));
                e.info = { error, payload };
                return e;
            }
            // Only estimateGas and call can return arbitrary contract-defined text, so now we
            // we can process text safely.
            const message = JSON.stringify(spelunkMessage(error));
            if (typeof (error.message) === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
                const actionMap = {
                    eth_sign: "signMessage",
                    personal_sign: "signMessage",
                    eth_signTypedData_v4: "signTypedData",
                    eth_signTransaction: "signTransaction",
                    eth_sendTransaction: "sendTransaction",
                    eth_requestAccounts: "requestAccess",
                    wallet_requestAccounts: "requestAccess",
                };
                return makeError(`user rejected action`, "ACTION_REJECTED", {
                    action: (actionMap[method] || "unknown"),
                    reason: "rejected",
                    info: { payload, error }
                });
            }
            if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
                const transaction = (payload.params[0]);
                if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
                    return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                        transaction, info: { error }
                    });
                }
                if (message.match(/nonce/i) && message.match(/too low/i)) {
                    return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
                }
                // "replacement transaction underpriced"
                if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
                    return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
                }
                if (message.match(/only replay-protected/i)) {
                    return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
                        operation: method, info: { transaction, info: { error } }
                    });
                }
            }
            let unsupported = !!message.match(/the method .* does not exist/i);
            if (!unsupported) {
                if (error && error.details && error.details.startsWith("Unauthorized method:")) {
                    unsupported = true;
                }
            }
            if (unsupported) {
                return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
                    operation: payload.method, info: { error, payload }
                });
            }
            return makeError("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
        }
        /**
         *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
         *  over the underlying channel. This can be used to call methods
         *  on the backend that do not have a high-level API within the Provider
         *  API.
         *
         *  This method queues requests according to the batch constraints
         *  in the options, assigns the request a unique ID.
         *
         *  **Do NOT override** this method in sub-classes; instead
         *  override [[_send]] or force the options values in the
         *  call to the constructor to modify this method's behavior.
         */
        send(method, params) {
            // @TODO: cache chainId?? purge on switch_networks
            // We have been destroyed; no operations are supported anymore
            if (this.destroyed) {
                return Promise.reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
            }
            const id = this.#nextId++;
            const promise = new Promise((resolve, reject) => {
                this.#payloads.push({
                    resolve, reject,
                    payload: { method, params, id, jsonrpc: "2.0" }
                });
            });
            // If there is not a pending drainTimer, set one
            this.#scheduleDrain();
            return promise;
        }
        /**
         *  Resolves to the [[Signer]] account for  %%address%% managed by
         *  the client.
         *
         *  If the %%address%% is a number, it is used as an index in the
         *  the accounts from [[listAccounts]].
         *
         *  This can only be used on clients which manage accounts (such as
         *  Geth with imported account or MetaMask).
         *
         *  Throws if the account doesn't exist.
         */
        async getSigner(address) {
            if (address == null) {
                address = 0;
            }
            const accountsPromise = this.send("eth_accounts", []);
            // Account index
            if (typeof (address) === "number") {
                const accounts = (await accountsPromise);
                if (address >= accounts.length) {
                    throw new Error("no such account");
                }
                return new JsonRpcSigner(this, accounts[address]);
            }
            const { accounts } = await resolveProperties({
                network: this.getNetwork(),
                accounts: accountsPromise
            });
            // Account address
            address = getAddress(address);
            for (const account of accounts) {
                if (getAddress(account) === address) {
                    return new JsonRpcSigner(this, address);
                }
            }
            throw new Error("invalid account");
        }
        async listAccounts() {
            const accounts = await this.send("eth_accounts", []);
            return accounts.map((a) => new JsonRpcSigner(this, a));
        }
        destroy() {
            // Stop processing requests
            if (this.#drainTimer) {
                clearTimeout(this.#drainTimer);
                this.#drainTimer = null;
            }
            // Cancel all pending requests
            for (const { payload, reject } of this.#payloads) {
                reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
            }
            this.#payloads = [];
            // Parent clean-up
            super.destroy();
        }
    }
    // @TODO: remove this in v7, it is not exported because this functionality
    // is exposed in the JsonRpcApiProvider by setting polling to true. It should
    // be safe to remove regardless, because it isn't reachable, but just in case.
    /**
     *  @_ignore:
     */
    class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
        #pollingInterval;
        constructor(network, options) {
            super(network, options);
            let pollingInterval = this._getOption("pollingInterval");
            if (pollingInterval == null) {
                pollingInterval = defaultOptions.pollingInterval;
            }
            this.#pollingInterval = pollingInterval;
        }
        _getSubscriber(sub) {
            const subscriber = super._getSubscriber(sub);
            if (isPollable(subscriber)) {
                subscriber.pollingInterval = this.#pollingInterval;
            }
            return subscriber;
        }
        /**
         *  The polling interval (default: 4000 ms)
         */
        get pollingInterval() { return this.#pollingInterval; }
        set pollingInterval(value) {
            if (!Number.isInteger(value) || value < 0) {
                throw new Error("invalid interval");
            }
            this.#pollingInterval = value;
            this._forEachSubscriber((sub) => {
                if (isPollable(sub)) {
                    sub.pollingInterval = this.#pollingInterval;
                }
            });
        }
    }
    /**
     *  The JsonRpcProvider is one of the most common Providers,
     *  which performs all operations over HTTP (or HTTPS) requests.
     *
     *  Events are processed by polling the backend for the current block
     *  number; when it advances, all block-base events are then checked
     *  for updates.
     */
    class JsonRpcProvider extends JsonRpcApiPollingProvider {
        #connect;
        constructor(url, network, options) {
            if (url == null) {
                url = "http:/\/localhost:8545";
            }
            super(network, options);
            if (typeof (url) === "string") {
                this.#connect = new FetchRequest(url);
            }
            else {
                this.#connect = url.clone();
            }
        }
        _getConnection() {
            return this.#connect.clone();
        }
        async send(method, params) {
            // All requests are over HTTP, so we can just start handling requests
            // We do this here rather than the constructor so that we don't send any
            // requests to the network (i.e. eth_chainId) until we absolutely have to.
            await this._start();
            return await super.send(method, params);
        }
        async _send(payload) {
            // Configure a POST connection for the requested method
            const request = this._getConnection();
            request.body = JSON.stringify(payload);
            request.setHeader("content-type", "application/json");
            const response = await request.send();
            response.assertOk();
            let resp = response.bodyJson;
            if (!Array.isArray(resp)) {
                resp = [resp];
            }
            return resp;
        }
    }
    function spelunkData(value) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match(/revert/i) && isHexString(value.data)) {
            return { message: value.message, data: value.data };
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                const result = spelunkData(value[key]);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunkData(JSON.parse(value));
            }
            catch (error) { }
        }
        return null;
    }
    function _spelunkMessage(value, result) {
        if (value == null) {
            return;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string") {
            result.push(value.message);
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                _spelunkMessage(value[key], result);
            }
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return _spelunkMessage(JSON.parse(value), result);
            }
            catch (error) { }
        }
    }
    function spelunkMessage(value) {
        const result = [];
        _spelunkMessage(value, result);
        return result;
    }

    /**
     *  [[link-ankr]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Sepolia Testnet (``sepolia``)
     *  - Arbitrum (``arbitrum``)
     *  - Base (``base``)
     *  - Base Goerlia Testnet (``base-goerli``)
     *  - Base Sepolia Testnet (``base-sepolia``)
     *  - BNB (``bnb``)
     *  - BNB Testnet (``bnbt``)
     *  - Optimism (``optimism``)
     *  - Optimism Goerli Testnet (``optimism-goerli``)
     *  - Optimism Sepolia Testnet (``optimism-sepolia``)
     *  - Polygon (``matic``)
     *  - Polygon Mumbai Testnet (``matic-mumbai``)
     *
     *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]
     */
    const defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost$5(name) {
        switch (name) {
            case "mainnet":
                return "rpc.ankr.com/eth";
            case "goerli":
                return "rpc.ankr.com/eth_goerli";
            case "sepolia":
                return "rpc.ankr.com/eth_sepolia";
            case "arbitrum":
                return "rpc.ankr.com/arbitrum";
            case "base":
                return "rpc.ankr.com/base";
            case "base-goerli":
                return "rpc.ankr.com/base_goerli";
            case "base-sepolia":
                return "rpc.ankr.com/base_sepolia";
            case "bnb":
                return "rpc.ankr.com/bsc";
            case "bnbt":
                return "rpc.ankr.com/bsc_testnet_chapel";
            case "matic":
                return "rpc.ankr.com/polygon";
            case "matic-mumbai":
                return "rpc.ankr.com/polygon_mumbai";
            case "optimism":
                return "rpc.ankr.com/optimism";
            case "optimism-goerli":
                return "rpc.ankr.com/optimism_testnet";
            case "optimism-sepolia":
                return "rpc.ankr.com/optimism_sepolia";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /**
     *  The **AnkrProvider** connects to the [[link-ankr]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-ankr-signup).
     */
    class AnkrProvider extends JsonRpcProvider {
        /**
         *  The API key for the Ankr connection.
         */
        apiKey;
        /**
         *  Create a new **AnkrProvider**.
         *
         *  By default connecting to ``mainnet`` with a highly throttled
         *  API key.
         */
        constructor(_network, apiKey) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (apiKey == null) {
                apiKey = defaultApiKey$1;
            }
            // Ankr does not support filterId, so we force polling
            const options = { polling: true, staticNetwork: network };
            const request = AnkrProvider.getRequest(network, apiKey);
            super(request, network, options);
            defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
            try {
                return new AnkrProvider(chainId, this.apiKey);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%% with
         *  %%apiKey%%.
         */
        static getRequest(network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey$1;
            }
            const request = new FetchRequest(`https:/\/${getHost$5(network.name)}/${apiKey}`);
            request.allowGzip = true;
            if (apiKey === defaultApiKey$1) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("AnkrProvider");
                    return true;
                };
            }
            return request;
        }
        getRpcError(payload, error) {
            if (payload.method === "eth_sendRawTransaction") {
                if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
                    error.error.message = "replacement transaction underpriced";
                }
            }
            return super.getRpcError(payload, error);
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$1);
        }
    }

    /**
     *  [[link-alchemy]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Sepolia Testnet (``sepolia``)
     *  - Arbitrum (``arbitrum``)
     *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
     *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
     *  - Base (``base``)
     *  - Base Goerlia Testnet (``base-goerli``)
     *  - Base Sepolia Testnet (``base-sepolia``)
     *  - Optimism (``optimism``)
     *  - Optimism Goerli Testnet (``optimism-goerli``)
     *  - Optimism Sepolia Testnet (``optimism-sepolia``)
     *  - Polygon (``matic``)
     *  - Polygon Amoy Testnet (``matic-amoy``)
     *  - Polygon Mumbai Testnet (``matic-mumbai``)
     *
     *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]
     */
    const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    function getHost$4(name) {
        switch (name) {
            case "mainnet":
                return "eth-mainnet.alchemyapi.io";
            case "goerli":
                return "eth-goerli.g.alchemy.com";
            case "sepolia":
                return "eth-sepolia.g.alchemy.com";
            case "arbitrum":
                return "arb-mainnet.g.alchemy.com";
            case "arbitrum-goerli":
                return "arb-goerli.g.alchemy.com";
            case "arbitrum-sepolia":
                return "arb-sepolia.g.alchemy.com";
            case "base":
                return "base-mainnet.g.alchemy.com";
            case "base-goerli":
                return "base-goerli.g.alchemy.com";
            case "base-sepolia":
                return "base-sepolia.g.alchemy.com";
            case "matic":
                return "polygon-mainnet.g.alchemy.com";
            case "matic-amoy":
                return "polygon-amoy.g.alchemy.com";
            case "matic-mumbai":
                return "polygon-mumbai.g.alchemy.com";
            case "optimism":
                return "opt-mainnet.g.alchemy.com";
            case "optimism-goerli":
                return "opt-goerli.g.alchemy.com";
            case "optimism-sepolia":
                return "opt-sepolia.g.alchemy.com";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /**
     *  The **AlchemyProvider** connects to the [[link-alchemy]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-alchemy-signup).
     *
     *  @_docloc: api/providers/thirdparty
     */
    class AlchemyProvider extends JsonRpcProvider {
        apiKey;
        constructor(_network, apiKey) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (apiKey == null) {
                apiKey = defaultApiKey;
            }
            const request = AlchemyProvider.getRequest(network, apiKey);
            super(request, network, { staticNetwork: network });
            defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
            try {
                return new AlchemyProvider(chainId, this.apiKey);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        async _perform(req) {
            // https://docs.alchemy.com/reference/trace-transaction
            if (req.method === "getTransactionResult") {
                const { trace, tx } = await resolveProperties({
                    trace: this.send("trace_transaction", [req.hash]),
                    tx: this.getTransaction(req.hash)
                });
                if (trace == null || tx == null) {
                    return null;
                }
                let data;
                let error = false;
                try {
                    data = trace[0].result.output;
                    error = (trace[0].error === "Reverted");
                }
                catch (error) { }
                if (data) {
                    assert(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
                        action: "getTransactionResult",
                        data,
                        reason: null,
                        transaction: tx,
                        invocation: null,
                        revert: null // @TODO
                    });
                    return data;
                }
                assert(false, "could not parse trace result", "BAD_DATA", { value: trace });
            }
            return await super._perform(req);
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey);
        }
        static getRequest(network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey;
            }
            const request = new FetchRequest(`https:/\/${getHost$4(network.name)}/v2/${apiKey}`);
            request.allowGzip = true;
            if (apiKey === defaultApiKey) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("alchemy");
                    return true;
                };
            }
            return request;
        }
    }

    /**
     *  [[link-chainstack]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Arbitrum (``arbitrum``)
     *  - BNB Smart Chain Mainnet (``bnb``)
     *  - Polygon (``matic``)
     *
     *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]
     */
    function getApiKey(name) {
        switch (name) {
            case "mainnet": return "39f1d67cedf8b7831010a665328c9197";
            case "arbitrum": return "0550c209db33c3abf4cc927e1e18cea1";
            case "bnb": return "98b5a77e531614387366f6fc5da097f8";
            case "matic": return "cd9d4d70377471aa7c142ec4a4205249";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    function getHost$3(name) {
        switch (name) {
            case "mainnet":
                return "ethereum-mainnet.core.chainstack.com";
            case "arbitrum":
                return "arbitrum-mainnet.core.chainstack.com";
            case "bnb":
                return "bsc-mainnet.core.chainstack.com";
            case "matic":
                return "polygon-mainnet.core.chainstack.com";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /**
     *  The **ChainstackProvider** connects to the [[link-chainstack]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-chainstack).
     */
    class ChainstackProvider extends JsonRpcProvider {
        /**
         *  The API key for the Chainstack connection.
         */
        apiKey;
        /**
         *  Creates a new **ChainstackProvider**.
         */
        constructor(_network, apiKey) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (apiKey == null) {
                apiKey = getApiKey(network.name);
            }
            const request = ChainstackProvider.getRequest(network, apiKey);
            super(request, network, { staticNetwork: network });
            defineProperties(this, { apiKey });
        }
        _getProvider(chainId) {
            try {
                return new ChainstackProvider(chainId, this.apiKey);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        isCommunityResource() {
            return (this.apiKey === getApiKey(this._network.name));
        }
        /**
         *  Returns a prepared request for connecting to %%network%%
         *  with %%apiKey%% and %%projectSecret%%.
         */
        static getRequest(network, apiKey) {
            if (apiKey == null) {
                apiKey = getApiKey(network.name);
            }
            const request = new FetchRequest(`https:/\/${getHost$3(network.name)}/${apiKey}`);
            request.allowGzip = true;
            if (apiKey === getApiKey(network.name)) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("ChainstackProvider");
                    return true;
                };
            }
            return request;
        }
    }

    /**
     *  About Cloudflare
     *
     *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]
     */
    /**
     *  About Cloudflare...
     */
    class CloudflareProvider extends JsonRpcProvider {
        constructor(_network) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            assertArgument(network.name === "mainnet", "unsupported network", "network", _network);
            super("https:/\/cloudflare-eth.com/", network, { staticNetwork: network });
        }
    }

    /**
     *  [[link-etherscan]] provides a third-party service for connecting to
     *  various blockchains over a combination of JSON-RPC and custom API
     *  endpoints.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Sepolia Testnet (``sepolia``)
     *  - Holesky Testnet (``holesky``)
     *  - Arbitrum (``arbitrum``)
     *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
     *  - Base (``base``)
     *  - Base Sepolia Testnet (``base-sepolia``)
     *  - BNB Smart Chain Mainnet (``bnb``)
     *  - BNB Smart Chain Testnet (``bnbt``)
     *  - Optimism (``optimism``)
     *  - Optimism Goerli Testnet (``optimism-goerli``)
     *  - Polygon (``matic``)
     *  - Polygon Mumbai Testnet (``matic-mumbai``)
     *  - Polygon Amoy Testnet (``matic-amoy``)
     *
     *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]
     */
    const THROTTLE = 2000;
    function isPromise(value) {
        return (value && typeof (value.then) === "function");
    }
    const EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
    /**
     *  A Network can include an **EtherscanPlugin** to provide
     *  a custom base URL.
     *
     *  @_docloc: api/providers/thirdparty:Etherscan
     */
    class EtherscanPlugin extends NetworkPlugin {
        /**
         *  The Etherscan API base URL.
         */
        baseUrl;
        /**
         *  Creates a new **EtherscanProvider** which will use
         *  %%baseUrl%%.
         */
        constructor(baseUrl) {
            super(EtherscanPluginId);
            defineProperties(this, { baseUrl });
        }
        clone() {
            return new EtherscanPlugin(this.baseUrl);
        }
    }
    const skipKeys = ["enableCcipRead"];
    let nextId = 1;
    /**
     *  The **EtherscanBaseProvider** is the super-class of
     *  [[EtherscanProvider]], which should generally be used instead.
     *
     *  Since the **EtherscanProvider** includes additional code for
     *  [[Contract]] access, in //rare cases// that contracts are not
     *  used, this class can reduce code size.
     *
     *  @_docloc: api/providers/thirdparty:Etherscan
     */
    class EtherscanProvider extends AbstractProvider {
        /**
         *  The connected network.
         */
        network;
        /**
         *  The API key or null if using the community provided bandwidth.
         */
        apiKey;
        #plugin;
        /**
         *  Creates a new **EtherscanBaseProvider**.
         */
        constructor(_network, _apiKey) {
            const apiKey = (_apiKey != null) ? _apiKey : null;
            super();
            const network = Network.from(_network);
            this.#plugin = network.getPlugin(EtherscanPluginId);
            defineProperties(this, { apiKey, network });
            // Test that the network is supported by Etherscan
            this.getBaseUrl();
        }
        /**
         *  Returns the base URL.
         *
         *  If an [[EtherscanPlugin]] is configured on the
         *  [[EtherscanBaseProvider_network]], returns the plugin's
         *  baseUrl.
         */
        getBaseUrl() {
            if (this.#plugin) {
                return this.#plugin.baseUrl;
            }
            switch (this.network.name) {
                case "mainnet":
                    return "https:/\/api.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                case "sepolia":
                    return "https:/\/api-sepolia.etherscan.io";
                case "holesky":
                    return "https:/\/api-holesky.etherscan.io";
                case "arbitrum":
                    return "https:/\/api.arbiscan.io";
                case "arbitrum-goerli":
                    return "https:/\/api-goerli.arbiscan.io";
                case "base":
                    return "https:/\/api.basescan.org";
                case "base-sepolia":
                    return "https:/\/api-sepolia.basescan.org";
                case "bnb":
                    return "https:/\/api.bscscan.com";
                case "bnbt":
                    return "https:/\/api-testnet.bscscan.com";
                case "matic":
                    return "https:/\/api.polygonscan.com";
                case "matic-amoy":
                    return "https:/\/api-amoy.polygonscan.com";
                case "matic-mumbai":
                    return "https:/\/api-testnet.polygonscan.com";
                case "optimism":
                    return "https:/\/api-optimistic.etherscan.io";
                case "optimism-goerli":
                    return "https:/\/api-goerli-optimistic.etherscan.io";
            }
            assertArgument(false, "unsupported network", "network", this.network);
        }
        /**
         *  Returns the URL for the %%module%% and %%params%%.
         */
        getUrl(module, params) {
            const query = Object.keys(params).reduce((accum, key) => {
                const value = params[key];
                if (value != null) {
                    accum += `&${key}=${value}`;
                }
                return accum;
            }, "");
            const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
            return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;
        }
        /**
         *  Returns the URL for using POST requests.
         */
        getPostUrl() {
            return `${this.getBaseUrl()}/api`;
        }
        /**
         *  Returns the parameters for using POST requests.
         */
        getPostData(module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        }
        async detectNetwork() {
            return this.network;
        }
        /**
         *  Resolves to the result of calling %%module%% with %%params%%.
         *
         *  If %%post%%, the request is made as a POST request.
         */
        async fetch(module, params, post) {
            const id = nextId++;
            const url = (post ? this.getPostUrl() : this.getUrl(module, params));
            const payload = (post ? this.getPostData(module, params) : null);
            this.emit("debug", { action: "sendRequest", id, url, payload: payload });
            const request = new FetchRequest(url);
            request.setThrottleParams({ slotInterval: 1000 });
            request.retryFunc = (req, resp, attempt) => {
                if (this.isCommunityResource()) {
                    showThrottleMessage("Etherscan");
                }
                return Promise.resolve(true);
            };
            request.processFunc = async (request, response) => {
                const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};
                const throttle = ((typeof (result.result) === "string") ? result.result : "").toLowerCase().indexOf("rate limit") >= 0;
                if (module === "proxy") {
                    // This JSON response indicates we are being throttled
                    if (result && result.status == 0 && result.message == "NOTOK" && throttle) {
                        this.emit("debug", { action: "receiveError", id, reason: "proxy-NOTOK", error: result });
                        response.throwThrottleError(result.result, THROTTLE);
                    }
                }
                else {
                    if (throttle) {
                        this.emit("debug", { action: "receiveError", id, reason: "null result", error: result.result });
                        response.throwThrottleError(result.result, THROTTLE);
                    }
                }
                return response;
            };
            if (payload) {
                request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
            }
            const response = await request.send();
            try {
                response.assertOk();
            }
            catch (error) {
                this.emit("debug", { action: "receiveError", id, error, reason: "assertOk" });
                assert(false, "response error", "SERVER_ERROR", { request, response });
            }
            if (!response.hasBody()) {
                this.emit("debug", { action: "receiveError", id, error: "missing body", reason: "null body" });
                assert(false, "missing response", "SERVER_ERROR", { request, response });
            }
            const result = JSON.parse(toUtf8String(response.body));
            if (module === "proxy") {
                if (result.jsonrpc != "2.0") {
                    this.emit("debug", { action: "receiveError", id, result, reason: "invalid JSON-RPC" });
                    assert(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
                }
                if (result.error) {
                    this.emit("debug", { action: "receiveError", id, result, reason: "JSON-RPC error" });
                    assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
                }
                this.emit("debug", { action: "receiveRequest", id, result });
                return result.result;
            }
            else {
                // getLogs, getHistory have weird success responses
                if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
                    this.emit("debug", { action: "receiveRequest", id, result });
                    return result.result;
                }
                if (result.status != 1 || (typeof (result.message) === "string" && !result.message.match(/^OK/))) {
                    this.emit("debug", { action: "receiveError", id, result });
                    assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
                }
                this.emit("debug", { action: "receiveRequest", id, result });
                return result.result;
            }
        }
        /**
         *  Returns %%transaction%% normalized for the Etherscan API.
         */
        _getTransactionPostData(transaction) {
            const result = {};
            for (let key in transaction) {
                if (skipKeys.indexOf(key) >= 0) {
                    continue;
                }
                if (transaction[key] == null) {
                    continue;
                }
                let value = transaction[key];
                if (key === "type" && value === 0) {
                    continue;
                }
                if (key === "blockTag" && value === "latest") {
                    continue;
                }
                // Quantity-types require no leading zero, unless 0
                if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                    value = toQuantity(value);
                }
                else if (key === "accessList") {
                    value = "[" + accessListify(value).map((set) => {
                        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
                    }).join(",") + "]";
                }
                else if (key === "blobVersionedHashes") {
                    if (value.length === 0) {
                        continue;
                    }
                    // @TODO: update this once the API supports blobs
                    assert(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
                        operation: "_getTransactionPostData",
                        info: { transaction }
                    });
                }
                else {
                    value = hexlify(value);
                }
                result[key] = value;
            }
            return result;
        }
        /**
         *  Throws the normalized Etherscan error.
         */
        _checkError(req, error, transaction) {
            // Pull any message out if, possible
            let message = "";
            if (isError(error, "SERVER_ERROR")) {
                // Check for an error emitted by a proxy call
                try {
                    message = error.info.result.error.message;
                }
                catch (e) { }
                if (!message) {
                    try {
                        message = error.info.message;
                    }
                    catch (e) { }
                }
            }
            if (req.method === "estimateGas") {
                if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
                    assert(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
                        transaction: req.transaction
                    });
                }
            }
            if (req.method === "call" || req.method === "estimateGas") {
                if (message.match(/execution reverted/i)) {
                    let data = "";
                    try {
                        data = error.info.result.error.data;
                    }
                    catch (error) { }
                    const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
                    e.info = { request: req, error };
                    throw e;
                }
            }
            if (message) {
                if (req.method === "broadcastTransaction") {
                    const transaction = Transaction.from(req.signedTransaction);
                    if (message.match(/replacement/i) && message.match(/underpriced/i)) {
                        assert(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                            transaction
                        });
                    }
                    if (message.match(/insufficient funds/)) {
                        assert(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                            transaction
                        });
                    }
                    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
                        assert(false, "nonce has already been used", "NONCE_EXPIRED", {
                            transaction
                        });
                    }
                }
            }
            // Something we could not process
            throw error;
        }
        async _detectNetwork() {
            return this.network;
        }
        async _perform(req) {
            switch (req.method) {
                case "chainId":
                    return this.network.chainId;
                case "getBlockNumber":
                    return this.fetch("proxy", { action: "eth_blockNumber" });
                case "getGasPrice":
                    return this.fetch("proxy", { action: "eth_gasPrice" });
                case "getPriorityFee":
                    // This is temporary until Etherscan completes support
                    if (this.network.name === "mainnet") {
                        return "1000000000";
                    }
                    else if (this.network.name === "optimism") {
                        return "1000000";
                    }
                    else {
                        throw new Error("fallback onto the AbstractProvider default");
                    }
                /* Working with Etherscan to get this added:
                try {
                    const test = await this.fetch("proxy", {
                        action: "eth_maxPriorityFeePerGas"
                    });
                    console.log(test);
                    return test;
                } catch (e) {
                    console.log("DEBUG", e);
                    throw e;
                }
                */
                /* This might be safe; but due to rounding neither myself
                   or Etherscan are necessarily comfortable with this. :)
                try {
                    const result = await this.fetch("gastracker", { action: "gasoracle" });
                    console.log(result);
                    const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
                    const baseFee = parseUnits(result.suggestBaseFee, "gwei");
                    const priorityFee = gasPrice - baseFee;
                    if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
                    return priorityFee;
                } catch (error) {
                    console.log("DEBUG", error);
                    throw error;
                }
                */
                case "getBalance":
                    // Returns base-10 result
                    return this.fetch("account", {
                        action: "balance",
                        address: req.address,
                        tag: req.blockTag
                    });
                case "getTransactionCount":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionCount",
                        address: req.address,
                        tag: req.blockTag
                    });
                case "getCode":
                    return this.fetch("proxy", {
                        action: "eth_getCode",
                        address: req.address,
                        tag: req.blockTag
                    });
                case "getStorage":
                    return this.fetch("proxy", {
                        action: "eth_getStorageAt",
                        address: req.address,
                        position: req.position,
                        tag: req.blockTag
                    });
                case "broadcastTransaction":
                    return this.fetch("proxy", {
                        action: "eth_sendRawTransaction",
                        hex: req.signedTransaction
                    }, true).catch((error) => {
                        return this._checkError(req, error, req.signedTransaction);
                    });
                case "getBlock":
                    if ("blockTag" in req) {
                        return this.fetch("proxy", {
                            action: "eth_getBlockByNumber",
                            tag: req.blockTag,
                            boolean: (req.includeTransactions ? "true" : "false")
                        });
                    }
                    assert(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
                        operation: "getBlock(blockHash)"
                    });
                case "getTransaction":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionByHash",
                        txhash: req.hash
                    });
                case "getTransactionReceipt":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionReceipt",
                        txhash: req.hash
                    });
                case "call": {
                    if (req.blockTag !== "latest") {
                        throw new Error("EtherscanProvider does not support blockTag for call");
                    }
                    const postData = this._getTransactionPostData(req.transaction);
                    postData.module = "proxy";
                    postData.action = "eth_call";
                    try {
                        return await this.fetch("proxy", postData, true);
                    }
                    catch (error) {
                        return this._checkError(req, error, req.transaction);
                    }
                }
                case "estimateGas": {
                    const postData = this._getTransactionPostData(req.transaction);
                    postData.module = "proxy";
                    postData.action = "eth_estimateGas";
                    try {
                        return await this.fetch("proxy", postData, true);
                    }
                    catch (error) {
                        return this._checkError(req, error, req.transaction);
                    }
                }
            }
            return super._perform(req);
        }
        async getNetwork() {
            return this.network;
        }
        /**
         *  Resolves to the current price of ether.
         *
         *  This returns ``0`` on any network other than ``mainnet``.
         */
        async getEtherPrice() {
            if (this.network.name !== "mainnet") {
                return 0.0;
            }
            return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
        }
        /**
         *  Resolves to a [Contract]] for %%address%%, using the
         *  Etherscan API to retreive the Contract ABI.
         */
        async getContract(_address) {
            let address = this._getAddress(_address);
            if (isPromise(address)) {
                address = await address;
            }
            try {
                const resp = await this.fetch("contract", {
                    action: "getabi", address
                });
                const abi = JSON.parse(resp);
                return new Contract(address, abi, this);
            }
            catch (error) {
                return null;
            }
        }
        isCommunityResource() {
            return (this.apiKey == null);
        }
    }

    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    const _WebSocket = getGlobal().WebSocket;

    /**
     *  Generic long-lived socket provider.
     *
     *  Sub-classing notes
     *  - a sub-class MUST call the `_start()` method once connected
     *  - a sub-class MUST override the `_write(string)` method
     *  - a sub-class MUST call `_processMessage(string)` for each message
     *
     *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]
     */
    /**
     *  A **SocketSubscriber** uses a socket transport to handle events and
     *  should use [[_emit]] to manage the events.
     */
    class SocketSubscriber {
        #provider;
        #filter;
        /**
         *  The filter.
         */
        get filter() { return JSON.parse(this.#filter); }
        #filterId;
        #paused;
        #emitPromise;
        /**
         *  Creates a new **SocketSubscriber** attached to %%provider%% listening
         *  to %%filter%%.
         */
        constructor(provider, filter) {
            this.#provider = provider;
            this.#filter = JSON.stringify(filter);
            this.#filterId = null;
            this.#paused = null;
            this.#emitPromise = null;
        }
        start() {
            this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
                this.#provider._register(filterId, this);
                return filterId;
            });
        }
        stop() {
            (this.#filterId).then((filterId) => {
                if (this.#provider.destroyed) {
                    return;
                }
                this.#provider.send("eth_unsubscribe", [filterId]);
            });
            this.#filterId = null;
        }
        // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
        //        and resume
        pause(dropWhilePaused) {
            assert(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
            this.#paused = !!dropWhilePaused;
        }
        resume() {
            this.#paused = null;
        }
        /**
         *  @_ignore:
         */
        _handleMessage(message) {
            if (this.#filterId == null) {
                return;
            }
            if (this.#paused === null) {
                let emitPromise = this.#emitPromise;
                if (emitPromise == null) {
                    emitPromise = this._emit(this.#provider, message);
                }
                else {
                    emitPromise = emitPromise.then(async () => {
                        await this._emit(this.#provider, message);
                    });
                }
                this.#emitPromise = emitPromise.then(() => {
                    if (this.#emitPromise === emitPromise) {
                        this.#emitPromise = null;
                    }
                });
            }
        }
        /**
         *  Sub-classes **must** override this to emit the events on the
         *  provider.
         */
        async _emit(provider, message) {
            throw new Error("sub-classes must implemente this; _emit");
        }
    }
    /**
     *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits
     *  ``"block"`` events.
     */
    class SocketBlockSubscriber extends SocketSubscriber {
        /**
         *  @_ignore:
         */
        constructor(provider) {
            super(provider, ["newHeads"]);
        }
        async _emit(provider, message) {
            provider.emit("block", parseInt(message.number));
        }
    }
    /**
     *  A **SocketPendingSubscriber** listens for pending transacitons and emits
     *  ``"pending"`` events.
     */
    class SocketPendingSubscriber extends SocketSubscriber {
        /**
         *  @_ignore:
         */
        constructor(provider) {
            super(provider, ["newPendingTransactions"]);
        }
        async _emit(provider, message) {
            provider.emit("pending", message);
        }
    }
    /**
     *  A **SocketEventSubscriber** listens for event logs.
     */
    class SocketEventSubscriber extends SocketSubscriber {
        #logFilter;
        /**
         *  The filter.
         */
        get logFilter() { return JSON.parse(this.#logFilter); }
        /**
         *  @_ignore:
         */
        constructor(provider, filter) {
            super(provider, ["logs", filter]);
            this.#logFilter = JSON.stringify(filter);
        }
        async _emit(provider, message) {
            provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
        }
    }
    /**
     *  A **SocketProvider** is backed by a long-lived connection over a
     *  socket, which can subscribe and receive real-time messages over
     *  its communication channel.
     */
    class SocketProvider extends JsonRpcApiProvider {
        #callbacks;
        // Maps each filterId to its subscriber
        #subs;
        // If any events come in before a subscriber has finished
        // registering, queue them
        #pending;
        /**
         *  Creates a new **SocketProvider** connected to %%network%%.
         *
         *  If unspecified, the network will be discovered.
         */
        constructor(network, _options) {
            // Copy the options
            const options = Object.assign({}, (_options != null) ? _options : {});
            // Support for batches is generally not supported for
            // connection-base providers; if this changes in the future
            // the _send should be updated to reflect this
            assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
            options.batchMaxCount = 1;
            // Socket-based Providers (generally) cannot change their network,
            // since they have a long-lived connection; but let people override
            // this if they have just cause.
            if (options.staticNetwork == null) {
                options.staticNetwork = true;
            }
            super(network, options);
            this.#callbacks = new Map();
            this.#subs = new Map();
            this.#pending = new Map();
        }
        // This value is only valid after _start has been called
        /*
        get _network(): Network {
            if (this.#network == null) {
                throw new Error("this shouldn't happen");
            }
            return this.#network.clone();
        }
        */
        _getSubscriber(sub) {
            switch (sub.type) {
                case "close":
                    return new UnmanagedSubscriber("close");
                case "block":
                    return new SocketBlockSubscriber(this);
                case "pending":
                    return new SocketPendingSubscriber(this);
                case "event":
                    return new SocketEventSubscriber(this, sub.filter);
                case "orphan":
                    // Handled auto-matically within AbstractProvider
                    // when the log.removed = true
                    if (sub.filter.orphan === "drop-log") {
                        return new UnmanagedSubscriber("drop-log");
                    }
            }
            return super._getSubscriber(sub);
        }
        /**
         *  Register a new subscriber. This is used internalled by Subscribers
         *  and generally is unecessary unless extending capabilities.
         */
        _register(filterId, subscriber) {
            this.#subs.set(filterId, subscriber);
            const pending = this.#pending.get(filterId);
            if (pending) {
                for (const message of pending) {
                    subscriber._handleMessage(message);
                }
                this.#pending.delete(filterId);
            }
        }
        async _send(payload) {
            // WebSocket provider doesn't accept batches
            assertArgument(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
            // @TODO: stringify payloads here and store to prevent mutations
            // Prepare a promise to respond to
            const promise = new Promise((resolve, reject) => {
                this.#callbacks.set(payload.id, { payload, resolve, reject });
            });
            // Wait until the socket is connected before writing to it
            await this._waitUntilReady();
            // Write the request to the socket
            await this._write(JSON.stringify(payload));
            return [await promise];
        }
        // Sub-classes must call this once they are connected
        /*
        async _start(): Promise<void> {
            if (this.#ready) { return; }

            for (const { payload } of this.#callbacks.values()) {
                await this._write(JSON.stringify(payload));
            }

            this.#ready = (async function() {
                await super._start();
            })();
        }
        */
        /**
         *  Sub-classes **must** call this with messages received over their
         *  transport to be processed and dispatched.
         */
        async _processMessage(message) {
            const result = (JSON.parse(message));
            if (result && typeof (result) === "object" && "id" in result) {
                const callback = this.#callbacks.get(result.id);
                if (callback == null) {
                    this.emit("error", makeError("received result for unknown id", "UNKNOWN_ERROR", {
                        reasonCode: "UNKNOWN_ID",
                        result
                    }));
                    return;
                }
                this.#callbacks.delete(result.id);
                callback.resolve(result);
            }
            else if (result && result.method === "eth_subscription") {
                const filterId = result.params.subscription;
                const subscriber = this.#subs.get(filterId);
                if (subscriber) {
                    subscriber._handleMessage(result.params.result);
                }
                else {
                    let pending = this.#pending.get(filterId);
                    if (pending == null) {
                        pending = [];
                        this.#pending.set(filterId, pending);
                    }
                    pending.push(result.params.result);
                }
            }
            else {
                this.emit("error", makeError("received unexpected message", "UNKNOWN_ERROR", {
                    reasonCode: "UNEXPECTED_MESSAGE",
                    result
                }));
                return;
            }
        }
        /**
         *  Sub-classes **must** override this to send %%message%% over their
         *  transport.
         */
        async _write(message) {
            throw new Error("sub-classes must override this");
        }
    }

    /**
     *  A JSON-RPC provider which is backed by a WebSocket.
     *
     *  WebSockets are often preferred because they retain a live connection
     *  to a server, which permits more instant access to events.
     *
     *  However, this incurs higher server infrasturture costs, so additional
     *  resources may be required to host your own WebSocket nodes and many
     *  third-party services charge additional fees for WebSocket endpoints.
     */
    class WebSocketProvider extends SocketProvider {
        #connect;
        #websocket;
        get websocket() {
            if (this.#websocket == null) {
                throw new Error("websocket closed");
            }
            return this.#websocket;
        }
        constructor(url, network, options) {
            super(network, options);
            if (typeof (url) === "string") {
                this.#connect = () => { return new _WebSocket(url); };
                this.#websocket = this.#connect();
            }
            else if (typeof (url) === "function") {
                this.#connect = url;
                this.#websocket = url();
            }
            else {
                this.#connect = null;
                this.#websocket = url;
            }
            this.websocket.onopen = async () => {
                try {
                    await this._start();
                    this.resume();
                }
                catch (error) {
                    console.log("failed to start WebsocketProvider", error);
                    // @TODO: now what? Attempt reconnect?
                }
            };
            this.websocket.onmessage = (message) => {
                this._processMessage(message.data);
            };
            /*
                    this.websocket.onclose = (event) => {
                        // @TODO: What event.code should we reconnect on?
                        const reconnect = false;
                        if (reconnect) {
                            this.pause(true);
                            if (this.#connect) {
                                this.#websocket = this.#connect();
                                this.#websocket.onopen = ...
                                // @TODO: this requires the super class to rebroadcast; move it there
                            }
                            this._reconnect();
                        }
                    };
            */
        }
        async _write(message) {
            this.websocket.send(message);
        }
        async destroy() {
            if (this.#websocket != null) {
                this.#websocket.close();
                this.#websocket = null;
            }
            super.destroy();
        }
    }

    /**
     *  [[link-infura]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Sepolia Testnet (``sepolia``)
     *  - Arbitrum (``arbitrum``)
     *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
     *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
     *  - Base (``base``)
     *  - Base Goerlia Testnet (``base-goerli``)
     *  - Base Sepolia Testnet (``base-sepolia``)
     *  - BNB Smart Chain Mainnet (``bnb``)
     *  - BNB Smart Chain Testnet (``bnbt``)
     *  - Linea (``linea``)
     *  - Linea Goerli Testnet (``linea-goerli``)
     *  - Linea Sepolia Testnet (``linea-sepolia``)
     *  - Optimism (``optimism``)
     *  - Optimism Goerli Testnet (``optimism-goerli``)
     *  - Optimism Sepolia Testnet (``optimism-sepolia``)
     *  - Polygon (``matic``)
     *  - Polygon Amoy Testnet (``matic-amoy``)
     *  - Polygon Mumbai Testnet (``matic-mumbai``)
     *
     *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]
     */
    const defaultProjectId = "84842078b09946638c03157f83405213";
    function getHost$2(name) {
        switch (name) {
            case "mainnet":
                return "mainnet.infura.io";
            case "goerli":
                return "goerli.infura.io";
            case "sepolia":
                return "sepolia.infura.io";
            case "arbitrum":
                return "arbitrum-mainnet.infura.io";
            case "arbitrum-goerli":
                return "arbitrum-goerli.infura.io";
            case "arbitrum-sepolia":
                return "arbitrum-sepolia.infura.io";
            case "base":
                return "base-mainnet.infura.io";
            case "base-goerlia":
                return "base-goerli.infura.io";
            case "base-sepolia":
                return "base-sepolia.infura.io";
            case "bnb":
                return "bnbsmartchain-mainnet.infura.io";
            case "bnbt":
                return "bnbsmartchain-testnet.infura.io";
            case "linea":
                return "linea-mainnet.infura.io";
            case "linea-goerli":
                return "linea-goerli.infura.io";
            case "linea-sepolia":
                return "linea-sepolia.infura.io";
            case "matic":
                return "polygon-mainnet.infura.io";
            case "matic-amoy":
                return "polygon-amoy.infura.io";
            case "matic-mumbai":
                return "polygon-mumbai.infura.io";
            case "optimism":
                return "optimism-mainnet.infura.io";
            case "optimism-goerli":
                return "optimism-goerli.infura.io";
            case "optimism-sepolia":
                return "optimism-sepolia.infura.io";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /**
     *  The **InfuraWebSocketProvider** connects to the [[link-infura]]
     *  WebSocket end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-infura-signup).
     */
    class InfuraWebSocketProvider extends WebSocketProvider {
        /**
         *  The Project ID for the INFURA connection.
         */
        projectId;
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        projectSecret;
        /**
         *  Creates a new **InfuraWebSocketProvider**.
         */
        constructor(network, projectId) {
            const provider = new InfuraProvider(network, projectId);
            const req = provider._getConnection();
            assert(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
            const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            super(url, provider._network);
            defineProperties(this, {
                projectId: provider.projectId,
                projectSecret: provider.projectSecret
            });
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }
    /**
     *  The **InfuraProvider** connects to the [[link-infura]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-infura-signup).
     */
    class InfuraProvider extends JsonRpcProvider {
        /**
         *  The Project ID for the INFURA connection.
         */
        projectId;
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        projectSecret;
        /**
         *  Creates a new **InfuraProvider**.
         */
        constructor(_network, projectId, projectSecret) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (projectId == null) {
                projectId = defaultProjectId;
            }
            if (projectSecret == null) {
                projectSecret = null;
            }
            const request = InfuraProvider.getRequest(network, projectId, projectSecret);
            super(request, network, { staticNetwork: network });
            defineProperties(this, { projectId, projectSecret });
        }
        _getProvider(chainId) {
            try {
                return new InfuraProvider(chainId, this.projectId, this.projectSecret);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
        /**
         *  Creates a new **InfuraWebSocketProvider**.
         */
        static getWebSocketProvider(network, projectId) {
            return new InfuraWebSocketProvider(network, projectId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%%
         *  with %%projectId%% and %%projectSecret%%.
         */
        static getRequest(network, projectId, projectSecret) {
            if (projectId == null) {
                projectId = defaultProjectId;
            }
            if (projectSecret == null) {
                projectSecret = null;
            }
            const request = new FetchRequest(`https:/\/${getHost$2(network.name)}/v3/${projectId}`);
            request.allowGzip = true;
            if (projectSecret) {
                request.setCredentials("", projectSecret);
            }
            if (projectId === defaultProjectId) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("InfuraProvider");
                    return true;
                };
            }
            return request;
        }
    }

    /**
     *  [[link-quicknode]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Sepolia Testnet (``sepolia``)
     *  - Holesky Testnet (``holesky``)
     *  - Arbitrum (``arbitrum``)
     *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
     *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
     *  - Base Mainnet (``base``);
     *  - Base Goerli Testnet (``base-goerli``);
     *  - Base Sepolia Testnet (``base-sepolia``);
     *  - BNB Smart Chain Mainnet (``bnb``)
     *  - BNB Smart Chain Testnet (``bnbt``)
     *  - Optimism (``optimism``)
     *  - Optimism Goerli Testnet (``optimism-goerli``)
     *  - Optimism Sepolia Testnet (``optimism-sepolia``)
     *  - Polygon (``matic``)
     *  - Polygon Mumbai Testnet (``matic-mumbai``)
     *
     *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]
     */
    const defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
    function getHost$1(name) {
        switch (name) {
            case "mainnet":
                return "ethers.quiknode.pro";
            case "goerli":
                return "ethers.ethereum-goerli.quiknode.pro";
            case "sepolia":
                return "ethers.ethereum-sepolia.quiknode.pro";
            case "holesky":
                return "ethers.ethereum-holesky.quiknode.pro";
            case "arbitrum":
                return "ethers.arbitrum-mainnet.quiknode.pro";
            case "arbitrum-goerli":
                return "ethers.arbitrum-goerli.quiknode.pro";
            case "arbitrum-sepolia":
                return "ethers.arbitrum-sepolia.quiknode.pro";
            case "base":
                return "ethers.base-mainnet.quiknode.pro";
            case "base-goerli":
                return "ethers.base-goerli.quiknode.pro";
            case "base-spolia":
                return "ethers.base-sepolia.quiknode.pro";
            case "bnb":
                return "ethers.bsc.quiknode.pro";
            case "bnbt":
                return "ethers.bsc-testnet.quiknode.pro";
            case "matic":
                return "ethers.matic.quiknode.pro";
            case "matic-mumbai":
                return "ethers.matic-testnet.quiknode.pro";
            case "optimism":
                return "ethers.optimism.quiknode.pro";
            case "optimism-goerli":
                return "ethers.optimism-goerli.quiknode.pro";
            case "optimism-sepolia":
                return "ethers.optimism-sepolia.quiknode.pro";
            case "xdai":
                return "ethers.xdai.quiknode.pro";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /*
    @TODO:
      These networks are not currently present in the Network
      default included networks. Research them and ensure they
      are EVM compatible and work with ethers

      http://ethers.matic-amoy.quiknode.pro

      http://ethers.avalanche-mainnet.quiknode.pro
      http://ethers.avalanche-testnet.quiknode.pro
      http://ethers.blast-sepolia.quiknode.pro
      http://ethers.celo-mainnet.quiknode.pro
      http://ethers.fantom.quiknode.pro
      http://ethers.imx-demo.quiknode.pro
      http://ethers.imx-mainnet.quiknode.pro
      http://ethers.imx-testnet.quiknode.pro
      http://ethers.near-mainnet.quiknode.pro
      http://ethers.near-testnet.quiknode.pro
      http://ethers.nova-mainnet.quiknode.pro
      http://ethers.scroll-mainnet.quiknode.pro
      http://ethers.scroll-testnet.quiknode.pro
      http://ethers.tron-mainnet.quiknode.pro
      http://ethers.zkevm-mainnet.quiknode.pro
      http://ethers.zkevm-testnet.quiknode.pro
      http://ethers.zksync-mainnet.quiknode.pro
      http://ethers.zksync-testnet.quiknode.pro
    */
    /**
     *  The **QuickNodeProvider** connects to the [[link-quicknode]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API token is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-quicknode).
     */
    class QuickNodeProvider extends JsonRpcProvider {
        /**
         *  The API token.
         */
        token;
        /**
         *  Creates a new **QuickNodeProvider**.
         */
        constructor(_network, token) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (token == null) {
                token = defaultToken;
            }
            const request = QuickNodeProvider.getRequest(network, token);
            super(request, network, { staticNetwork: network });
            defineProperties(this, { token });
        }
        _getProvider(chainId) {
            try {
                return new QuickNodeProvider(chainId, this.token);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        isCommunityResource() {
            return (this.token === defaultToken);
        }
        /**
         *  Returns a new request prepared for %%network%% and the
         *  %%token%%.
         */
        static getRequest(network, token) {
            if (token == null) {
                token = defaultToken;
            }
            const request = new FetchRequest(`https:/\/${getHost$1(network.name)}/${token}`);
            request.allowGzip = true;
            //if (projectSecret) { request.setCredentials("", projectSecret); }
            if (token === defaultToken) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("QuickNodeProvider");
                    return true;
                };
            }
            return request;
        }
    }

    /**
     *  A **FallbackProvider** provides resilience, security and performance
     *  in a way that is customizable and configurable.
     *
     *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]
     */
    const BN_1 = BigInt("1");
    const BN_2 = BigInt("2");
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
    }
    function stall$2(duration) {
        return new Promise((resolve) => { setTimeout(resolve, duration); });
    }
    function getTime() { return (new Date()).getTime(); }
    function stringify(value) {
        return JSON.stringify(value, (key, value) => {
            if (typeof (value) === "bigint") {
                return { type: "bigint", value: value.toString() };
            }
            return value;
        });
    }
    const defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
    const defaultState = {
        blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,
        outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,
        _network: null, _updateNumber: null, _totalTime: 0,
        _lastFatalError: null, _lastFatalErrorTimestamp: 0
    };
    async function waitForSync(config, blockNumber) {
        while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
            if (!config._updateNumber) {
                config._updateNumber = (async () => {
                    try {
                        const blockNumber = await config.provider.getBlockNumber();
                        if (blockNumber > config.blockNumber) {
                            config.blockNumber = blockNumber;
                        }
                    }
                    catch (error) {
                        config.blockNumber = -2;
                        config._lastFatalError = error;
                        config._lastFatalErrorTimestamp = getTime();
                    }
                    config._updateNumber = null;
                })();
            }
            await config._updateNumber;
            config.outOfSync++;
            if (config._lastFatalError) {
                break;
            }
        }
    }
    function _normalize(value) {
        if (value == null) {
            return "null";
        }
        if (Array.isArray(value)) {
            return "[" + (value.map(_normalize)).join(",") + "]";
        }
        if (typeof (value) === "object" && typeof (value.toJSON) === "function") {
            return _normalize(value.toJSON());
        }
        switch (typeof (value)) {
            case "boolean":
            case "symbol":
                return value.toString();
            case "bigint":
            case "number":
                return BigInt(value).toString();
            case "string":
                return JSON.stringify(value);
            case "object": {
                const keys = Object.keys(value);
                keys.sort();
                return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
            }
        }
        console.log("Could not serialize", value);
        throw new Error("Hmm...");
    }
    function normalizeResult(value) {
        if ("error" in value) {
            const error = value.error;
            return { tag: _normalize(error), value: error };
        }
        const result = value.result;
        return { tag: _normalize(result), value: result };
    }
    // This strategy picks the highest weight result, as long as the weight is
    // equal to or greater than quorum
    function checkQuorum(quorum, results) {
        const tally = new Map();
        for (const { value, tag, weight } of results) {
            const t = tally.get(tag) || { value, weight: 0 };
            t.weight += weight;
            tally.set(tag, t);
        }
        let best = null;
        for (const r of tally.values()) {
            if (r.weight >= quorum && (!best || r.weight > best.weight)) {
                best = r;
            }
        }
        if (best) {
            return best.value;
        }
        return undefined;
    }
    function getMedian(quorum, results) {
        let resultWeight = 0;
        const errorMap = new Map();
        let bestError = null;
        const values = [];
        for (const { value, tag, weight } of results) {
            if (value instanceof Error) {
                const e = errorMap.get(tag) || { value, weight: 0 };
                e.weight += weight;
                errorMap.set(tag, e);
                if (bestError == null || e.weight > bestError.weight) {
                    bestError = e;
                }
            }
            else {
                values.push(BigInt(value));
                resultWeight += weight;
            }
        }
        if (resultWeight < quorum) {
            // We have quorum for an error
            if (bestError && bestError.weight >= quorum) {
                return bestError.value;
            }
            // We do not have quorum for a result
            return undefined;
        }
        // Get the sorted values
        values.sort((a, b) => ((a < b) ? -1 : (b > a) ? 1 : 0));
        const mid = Math.floor(values.length / 2);
        // Odd-length; take the middle value
        if (values.length % 2) {
            return values[mid];
        }
        // Even length; take the ceiling of the mean of the center two values
        return (values[mid - 1] + values[mid] + BN_1) / BN_2;
    }
    function getAnyResult(quorum, results) {
        // If any value or error meets quorum, that is our preferred result
        const result = checkQuorum(quorum, results);
        if (result !== undefined) {
            return result;
        }
        // Otherwise, do we have any result?
        for (const r of results) {
            if (r.value) {
                return r.value;
            }
        }
        // Nope!
        return undefined;
    }
    function getFuzzyMode(quorum, results) {
        if (quorum === 1) {
            return getNumber(getMedian(quorum, results), "%internal");
        }
        const tally = new Map();
        const add = (result, weight) => {
            const t = tally.get(result) || { result, weight: 0 };
            t.weight += weight;
            tally.set(result, t);
        };
        for (const { weight, value } of results) {
            const r = getNumber(value);
            add(r - 1, weight);
            add(r, weight);
            add(r + 1, weight);
        }
        let bestWeight = 0;
        let bestResult = undefined;
        for (const { weight, result } of tally.values()) {
            // Use this result, if this result meets quorum and has either:
            // - a better weight
            // - or equal weight, but the result is larger
            if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {
                bestWeight = weight;
                bestResult = result;
            }
        }
        return bestResult;
    }
    /**
     *  A **FallbackProvider** manages several [[Providers]] providing
     *  resilience by switching between slow or misbehaving nodes, security
     *  by requiring multiple backends to aggree and performance by allowing
     *  faster backends to respond earlier.
     *
     */
    class FallbackProvider extends AbstractProvider {
        /**
         *  The number of backends that must agree on a value before it is
         *  accpeted.
         */
        quorum;
        /**
         *  @_ignore:
         */
        eventQuorum;
        /**
         *  @_ignore:
         */
        eventWorkers;
        #configs;
        #height;
        #initialSyncPromise;
        /**
         *  Creates a new **FallbackProvider** with %%providers%% connected to
         *  %%network%%.
         *
         *  If a [[Provider]] is included in %%providers%%, defaults are used
         *  for the configuration.
         */
        constructor(providers, network, options) {
            super(network, options);
            this.#configs = providers.map((p) => {
                if (p instanceof AbstractProvider) {
                    return Object.assign({ provider: p }, defaultConfig, defaultState);
                }
                else {
                    return Object.assign({}, defaultConfig, p, defaultState);
                }
            });
            this.#height = -2;
            this.#initialSyncPromise = null;
            if (options && options.quorum != null) {
                this.quorum = options.quorum;
            }
            else {
                this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {
                    accum += config.weight;
                    return accum;
                }, 0) / 2);
            }
            this.eventQuorum = 1;
            this.eventWorkers = 1;
            assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0), "quorum exceed provider weight", "quorum", this.quorum);
        }
        get providerConfigs() {
            return this.#configs.map((c) => {
                const result = Object.assign({}, c);
                for (const key in result) {
                    if (key[0] === "_") {
                        delete result[key];
                    }
                }
                return result;
            });
        }
        async _detectNetwork() {
            return Network.from(getBigInt(await this._perform({ method: "chainId" })));
        }
        // @TODO: Add support to select providers to be the event subscriber
        //_getSubscriber(sub: Subscription): Subscriber {
        //    throw new Error("@TODO");
        //}
        /**
         *  Transforms a %%req%% into the correct method call on %%provider%%.
         */
        async _translatePerform(provider, req) {
            switch (req.method) {
                case "broadcastTransaction":
                    return await provider.broadcastTransaction(req.signedTransaction);
                case "call":
                    return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
                case "chainId":
                    return (await provider.getNetwork()).chainId;
                case "estimateGas":
                    return await provider.estimateGas(req.transaction);
                case "getBalance":
                    return await provider.getBalance(req.address, req.blockTag);
                case "getBlock": {
                    const block = ("blockHash" in req) ? req.blockHash : req.blockTag;
                    return await provider.getBlock(block, req.includeTransactions);
                }
                case "getBlockNumber":
                    return await provider.getBlockNumber();
                case "getCode":
                    return await provider.getCode(req.address, req.blockTag);
                case "getGasPrice":
                    return (await provider.getFeeData()).gasPrice;
                case "getPriorityFee":
                    return (await provider.getFeeData()).maxPriorityFeePerGas;
                case "getLogs":
                    return await provider.getLogs(req.filter);
                case "getStorage":
                    return await provider.getStorage(req.address, req.position, req.blockTag);
                case "getTransaction":
                    return await provider.getTransaction(req.hash);
                case "getTransactionCount":
                    return await provider.getTransactionCount(req.address, req.blockTag);
                case "getTransactionReceipt":
                    return await provider.getTransactionReceipt(req.hash);
                case "getTransactionResult":
                    return await provider.getTransactionResult(req.hash);
            }
        }
        // Grab the next (random) config that is not already part of
        // the running set
        #getNextConfig(running) {
            // @TODO: Maybe do a check here to favour (heavily) providers that
            //        do not require waitForSync and disfavour providers that
            //        seem down-ish or are behaving slowly
            const configs = Array.from(running).map((r) => r.config);
            // Shuffle the states, sorted by priority
            const allConfigs = this.#configs.slice();
            shuffle(allConfigs);
            allConfigs.sort((a, b) => (a.priority - b.priority));
            for (const config of allConfigs) {
                if (config._lastFatalError) {
                    continue;
                }
                if (configs.indexOf(config) === -1) {
                    return config;
                }
            }
            return null;
        }
        // Adds a new runner (if available) to running.
        #addRunner(running, req) {
            const config = this.#getNextConfig(running);
            // No runners available
            if (config == null) {
                return null;
            }
            // Create a new runner
            const runner = {
                config, result: null, didBump: false,
                perform: null, staller: null
            };
            const now = getTime();
            // Start performing this operation
            runner.perform = (async () => {
                try {
                    config.requests++;
                    const result = await this._translatePerform(config.provider, req);
                    runner.result = { result };
                }
                catch (error) {
                    config.errorResponses++;
                    runner.result = { error };
                }
                const dt = (getTime() - now);
                config._totalTime += dt;
                config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
                runner.perform = null;
            })();
            // Start a staller; when this times out, it's time to force
            // kicking off another runner because we are taking too long
            runner.staller = (async () => {
                await stall$2(config.stallTimeout);
                runner.staller = null;
            })();
            running.add(runner);
            return runner;
        }
        // Initializes the blockNumber and network for each runner and
        // blocks until initialized
        async #initialSync() {
            let initialSync = this.#initialSyncPromise;
            if (!initialSync) {
                const promises = [];
                this.#configs.forEach((config) => {
                    promises.push((async () => {
                        await waitForSync(config, 0);
                        if (!config._lastFatalError) {
                            config._network = await config.provider.getNetwork();
                        }
                    })());
                });
                this.#initialSyncPromise = initialSync = (async () => {
                    // Wait for all providers to have a block number and network
                    await Promise.all(promises);
                    // Check all the networks match
                    let chainId = null;
                    for (const config of this.#configs) {
                        if (config._lastFatalError) {
                            continue;
                        }
                        const network = (config._network);
                        if (chainId == null) {
                            chainId = network.chainId;
                        }
                        else if (network.chainId !== chainId) {
                            assert(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                                operation: "new FallbackProvider"
                            });
                        }
                    }
                })();
            }
            await initialSync;
        }
        async #checkQuorum(running, req) {
            // Get all the result objects
            const results = [];
            for (const runner of running) {
                if (runner.result != null) {
                    const { tag, value } = normalizeResult(runner.result);
                    results.push({ tag, value, weight: runner.config.weight });
                }
            }
            // Are there enough results to event meet quorum?
            if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {
                return undefined;
            }
            switch (req.method) {
                case "getBlockNumber": {
                    // We need to get the bootstrap block height
                    if (this.#height === -2) {
                        this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({
                            value: c.blockNumber,
                            tag: getNumber(c.blockNumber).toString(),
                            weight: c.weight
                        })))));
                    }
                    // Find the mode across all the providers, allowing for
                    // a little drift between block heights
                    const mode = getFuzzyMode(this.quorum, results);
                    if (mode === undefined) {
                        return undefined;
                    }
                    if (mode > this.#height) {
                        this.#height = mode;
                    }
                    return this.#height;
                }
                case "getGasPrice":
                case "getPriorityFee":
                case "estimateGas":
                    return getMedian(this.quorum, results);
                case "getBlock":
                    // Pending blocks are in the mempool and already
                    // quite untrustworthy; just grab anything
                    if ("blockTag" in req && req.blockTag === "pending") {
                        return getAnyResult(this.quorum, results);
                    }
                    return checkQuorum(this.quorum, results);
                case "call":
                case "chainId":
                case "getBalance":
                case "getTransactionCount":
                case "getCode":
                case "getStorage":
                case "getTransaction":
                case "getTransactionReceipt":
                case "getLogs":
                    return checkQuorum(this.quorum, results);
                case "broadcastTransaction":
                    return getAnyResult(this.quorum, results);
            }
            assert(false, "unsupported method", "UNSUPPORTED_OPERATION", {
                operation: `_perform(${stringify(req.method)})`
            });
        }
        async #waitForQuorum(running, req) {
            if (running.size === 0) {
                throw new Error("no runners?!");
            }
            // Any promises that are interesting to watch for; an expired stall
            // or a successful perform
            const interesting = [];
            let newRunners = 0;
            for (const runner of running) {
                // No responses, yet; keep an eye on it
                if (runner.perform) {
                    interesting.push(runner.perform);
                }
                // Still stalling...
                if (runner.staller) {
                    interesting.push(runner.staller);
                    continue;
                }
                // This runner has already triggered another runner
                if (runner.didBump) {
                    continue;
                }
                // Got a response (result or error) or stalled; kick off another runner
                runner.didBump = true;
                newRunners++;
            }
            // Check if we have reached quorum on a result (or error)
            const value = await this.#checkQuorum(running, req);
            if (value !== undefined) {
                if (value instanceof Error) {
                    throw value;
                }
                return value;
            }
            // Add any new runners, because a staller timed out or a result
            // or error response came in.
            for (let i = 0; i < newRunners; i++) {
                this.#addRunner(running, req);
            }
            // All providers have returned, and we have no result
            assert(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
                request: "%sub-requests",
                info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }
            });
            // Wait for someone to either complete its perform or stall out
            await Promise.race(interesting);
            // This is recursive, but at worst case the depth is 2x the
            // number of providers (each has a perform and a staller)
            return await this.#waitForQuorum(running, req);
        }
        async _perform(req) {
            // Broadcasting a transaction is rare (ish) and already incurs
            // a cost on the user, so spamming is safe-ish. Just send it to
            // every backend.
            if (req.method === "broadcastTransaction") {
                // Once any broadcast provides a positive result, use it. No
                // need to wait for anyone else
                const results = this.#configs.map((c) => null);
                const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {
                    try {
                        const result = await provider._perform(req);
                        results[index] = Object.assign(normalizeResult({ result }), { weight });
                    }
                    catch (error) {
                        results[index] = Object.assign(normalizeResult({ error }), { weight });
                    }
                });
                // As each promise finishes...
                while (true) {
                    // Check for a valid broadcast result
                    const done = results.filter((r) => (r != null));
                    for (const { value } of done) {
                        if (!(value instanceof Error)) {
                            return value;
                        }
                    }
                    // Check for a legit broadcast error (one which we cannot
                    // recover from; some nodes may return the following red
                    // herring events:
                    // - alredy seend (UNKNOWN_ERROR)
                    // - NONCE_EXPIRED
                    // - REPLACEMENT_UNDERPRICED
                    const result = checkQuorum(this.quorum, results.filter((r) => (r != null)));
                    if (isError(result, "INSUFFICIENT_FUNDS")) {
                        throw result;
                    }
                    // Kick off the next provider (if any)
                    const waiting = broadcasts.filter((b, i) => (results[i] == null));
                    if (waiting.length === 0) {
                        break;
                    }
                    await Promise.race(waiting);
                }
                // Use standard quorum results; any result was returned above,
                // so this will find any error that met quorum if any
                const result = getAnyResult(this.quorum, results);
                assert(result !== undefined, "problem multi-broadcasting", "SERVER_ERROR", {
                    request: "%sub-requests",
                    info: { request: req, results: results.map(stringify) }
                });
                if (result instanceof Error) {
                    throw result;
                }
                return result;
            }
            await this.#initialSync();
            // Bootstrap enough runners to meet quorum
            const running = new Set();
            let inflightQuorum = 0;
            while (true) {
                const runner = this.#addRunner(running, req);
                if (runner == null) {
                    break;
                }
                inflightQuorum += runner.config.weight;
                if (inflightQuorum >= this.quorum) {
                    break;
                }
            }
            const result = await this.#waitForQuorum(running, req);
            // Track requests sent to a provider that are still
            // outstanding after quorum has been otherwise found
            for (const runner of running) {
                if (runner.perform && runner.result == null) {
                    runner.config.lateResponses++;
                }
            }
            return result;
        }
        async destroy() {
            for (const { provider } of this.#configs) {
                provider.destroy();
            }
            super.destroy();
        }
    }

    function isWebSocketLike(value) {
        return (value && typeof (value.send) === "function" &&
            typeof (value.close) === "function");
    }
    const Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    /**
     *  Returns a default provider for %%network%%.
     *
     *  If %%network%% is a [[WebSocketLike]] or string that begins with
     *  ``"ws:"`` or ``"wss:"``, a [[WebSocketProvider]] is returned backed
     *  by that WebSocket or URL.
     *
     *  If %%network%% is a string that begins with ``"HTTP:"`` or ``"HTTPS:"``,
     *  a [[JsonRpcProvider]] is returned connected to that URL.
     *
     *  Otherwise, a default provider is created backed by well-known public
     *  Web3 backends (such as [[link-infura]]) using community-provided API
     *  keys.
     *
     *  The %%options%% allows specifying custom API keys per backend (setting
     *  an API key to ``"-"`` will omit that provider) and ``options.exclusive``
     *  can be set to either a backend name or and array of backend names, which
     *  will whitelist **only** those backends.
     *
     *  Current backend strings supported are:
     *  - ``"alchemy"``
     *  - ``"ankr"``
     *  - ``"cloudflare"``
     *  - ``"chainstack"``
     *  - ``"etherscan"``
     *  - ``"infura"``
     *  - ``"publicPolygon"``
     *  - ``"quicknode"``
     *
     *  @example:
     *    // Connect to a local Geth node
     *    provider = getDefaultProvider("http://localhost:8545/");
     *
     *    // Connect to Ethereum mainnet with any current and future
     *    // third-party services available
     *    provider = getDefaultProvider("mainnet");
     *
     *    // Connect to Polygon, but only allow Etherscan and
     *    // INFURA and use "MY_API_KEY" in calls to Etherscan.
     *    provider = getDefaultProvider("matic", {
     *      etherscan: "MY_API_KEY",
     *      exclusive: [ "etherscan", "infura" ]
     *    });
     */
    function getDefaultProvider(network, options) {
        if (options == null) {
            options = {};
        }
        const allowService = (name) => {
            if (options[name] === "-") {
                return false;
            }
            if (typeof (options.exclusive) === "string") {
                return (name === options.exclusive);
            }
            if (Array.isArray(options.exclusive)) {
                return (options.exclusive.indexOf(name) !== -1);
            }
            return true;
        };
        if (typeof (network) === "string" && network.match(/^https?:/)) {
            return new JsonRpcProvider(network);
        }
        if (typeof (network) === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
            return new WebSocketProvider(network);
        }
        // Get the network and name, if possible
        let staticNetwork = null;
        try {
            staticNetwork = Network.from(network);
        }
        catch (error) { }
        const providers = [];
        if (allowService("publicPolygon") && staticNetwork) {
            if (staticNetwork.name === "matic") {
                providers.push(new JsonRpcProvider("https:/\/polygon-rpc.com/", staticNetwork, { staticNetwork }));
            }
            else if (staticNetwork.name === "matic-amoy") {
                providers.push(new JsonRpcProvider("https:/\/rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
            }
        }
        if (allowService("alchemy")) {
            try {
                providers.push(new AlchemyProvider(network, options.alchemy));
            }
            catch (error) { }
        }
        if (allowService("ankr") && options.ankr != null) {
            try {
                providers.push(new AnkrProvider(network, options.ankr));
            }
            catch (error) { }
        }
        if (allowService("chainstack")) {
            try {
                providers.push(new ChainstackProvider(network, options.chainstack));
            }
            catch (error) { }
        }
        if (allowService("cloudflare")) {
            try {
                providers.push(new CloudflareProvider(network));
            }
            catch (error) { }
        }
        if (allowService("etherscan")) {
            try {
                providers.push(new EtherscanProvider(network, options.etherscan));
            }
            catch (error) { }
        }
        if (allowService("infura")) {
            try {
                let projectId = options.infura;
                let projectSecret = undefined;
                if (typeof (projectId) === "object") {
                    projectSecret = projectId.projectSecret;
                    projectId = projectId.projectId;
                }
                providers.push(new InfuraProvider(network, projectId, projectSecret));
            }
            catch (error) { }
        }
        /*
            if (options.pocket !== "-") {
                try {
                    let appId = options.pocket;
                    let secretKey: undefined | string = undefined;
                    let loadBalancer: undefined | boolean = undefined;
                    if (typeof(appId) === "object") {
                        loadBalancer = !!appId.loadBalancer;
                        secretKey = appId.secretKey;
                        appId = appId.appId;
                    }
                    providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));
                } catch (error) { console.log(error); }
            }
        */
        if (allowService("quicknode")) {
            try {
                let token = options.quicknode;
                providers.push(new QuickNodeProvider(network, token));
            }
            catch (error) { }
        }
        assert(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
            operation: "getDefaultProvider"
        });
        // No need for a FallbackProvider
        if (providers.length === 1) {
            return providers[0];
        }
        // We use the floor because public third-party providers can be unreliable,
        // so a low number of providers with a large quorum will fail too often
        let quorum = Math.floor(providers.length / 2);
        if (quorum > 2) {
            quorum = 2;
        }
        // Testnets don't need as strong a security gaurantee and speed is
        // more useful during testing
        if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
            quorum = 1;
        }
        // Provided override qorum takes priority
        if (options && options.quorum) {
            quorum = options.quorum;
        }
        return new FallbackProvider(providers, undefined, { quorum });
    }

    /**
     *  A **NonceManager** wraps another [[Signer]] and automatically manages
     *  the nonce, ensuring serialized and sequential nonces are used during
     *  transaction.
     */
    class NonceManager extends AbstractSigner {
        /**
         *  The Signer being managed.
         */
        signer;
        #noncePromise;
        #delta;
        /**
         *  Creates a new **NonceManager** to manage %%signer%%.
         */
        constructor(signer) {
            super(signer.provider);
            defineProperties(this, { signer });
            this.#noncePromise = null;
            this.#delta = 0;
        }
        async getAddress() {
            return this.signer.getAddress();
        }
        connect(provider) {
            return new NonceManager(this.signer.connect(provider));
        }
        async getNonce(blockTag) {
            if (blockTag === "pending") {
                if (this.#noncePromise == null) {
                    this.#noncePromise = super.getNonce("pending");
                }
                const delta = this.#delta;
                return (await this.#noncePromise) + delta;
            }
            return super.getNonce(blockTag);
        }
        /**
         *  Manually increment the nonce. This may be useful when managng
         *  offline transactions.
         */
        increment() {
            this.#delta++;
        }
        /**
         *  Resets the nonce, causing the **NonceManager** to reload the current
         *  nonce from the blockchain on the next transaction.
         */
        reset() {
            this.#delta = 0;
            this.#noncePromise = null;
        }
        async sendTransaction(tx) {
            const noncePromise = this.getNonce("pending");
            this.increment();
            tx = await this.signer.populateTransaction(tx);
            tx.nonce = await noncePromise;
            // @TODO: Maybe handle interesting/recoverable errors?
            // Like don't increment if the tx was certainly not sent
            return await this.signer.sendTransaction(tx);
        }
        signTransaction(tx) {
            return this.signer.signTransaction(tx);
        }
        signMessage(message) {
            return this.signer.signMessage(message);
        }
        signTypedData(domain, types, value) {
            return this.signer.signTypedData(domain, types, value);
        }
    }

    /**
     *  A **BrowserProvider** is intended to wrap an injected provider which
     *  adheres to the [[link-eip-1193]] standard, which most (if not all)
     *  currently do.
     */
    class BrowserProvider extends JsonRpcApiPollingProvider {
        #request;
        /**
         *  Connect to the %%ethereum%% provider, optionally forcing the
         *  %%network%%.
         */
        constructor(ethereum, network, _options) {
            // Copy the options
            const options = Object.assign({}, ((_options != null) ? _options : {}), { batchMaxCount: 1 });
            assertArgument(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
            super(network, options);
            this.#request = async (method, params) => {
                const payload = { method, params };
                this.emit("debug", { action: "sendEip1193Request", payload });
                try {
                    const result = await ethereum.request(payload);
                    this.emit("debug", { action: "receiveEip1193Result", result });
                    return result;
                }
                catch (e) {
                    const error = new Error(e.message);
                    error.code = e.code;
                    error.data = e.data;
                    error.payload = payload;
                    this.emit("debug", { action: "receiveEip1193Error", error });
                    throw error;
                }
            };
        }
        async send(method, params) {
            await this._start();
            return await super.send(method, params);
        }
        async _send(payload) {
            assertArgument(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
            try {
                const result = await this.#request(payload.method, payload.params || []);
                return [{ id: payload.id, result }];
            }
            catch (e) {
                return [{
                        id: payload.id,
                        error: { code: e.code, data: e.data, message: e.message }
                    }];
            }
        }
        getRpcError(payload, error) {
            error = JSON.parse(JSON.stringify(error));
            // EIP-1193 gives us some machine-readable error codes, so rewrite
            // them into 
            switch (error.error.code || -1) {
                case 4001:
                    error.error.message = `ethers-user-denied: ${error.error.message}`;
                    break;
                case 4200:
                    error.error.message = `ethers-unsupported: ${error.error.message}`;
                    break;
            }
            return super.getRpcError(payload, error);
        }
        /**
         *  Resolves to ``true`` if the provider manages the %%address%%.
         */
        async hasSigner(address) {
            if (address == null) {
                address = 0;
            }
            const accounts = await this.send("eth_accounts", []);
            if (typeof (address) === "number") {
                return (accounts.length > address);
            }
            address = address.toLowerCase();
            return accounts.filter((a) => (a.toLowerCase() === address)).length !== 0;
        }
        async getSigner(address) {
            if (address == null) {
                address = 0;
            }
            if (!(await this.hasSigner(address))) {
                try {
                    //const resp = 
                    await this.#request("eth_requestAccounts", []);
                    //console.log("RESP", resp);
                }
                catch (error) {
                    const payload = error.payload;
                    throw this.getRpcError(payload, { id: payload.id, error });
                }
            }
            return await super.getSigner(address);
        }
    }

    /**
     *  [[link-pocket]] provides a third-party service for connecting to
     *  various blockchains over JSON-RPC.
     *
     *  **Supported Networks**
     *
     *  - Ethereum Mainnet (``mainnet``)
     *  - Goerli Testnet (``goerli``)
     *  - Polygon (``matic``)
     *  - Arbitrum (``arbitrum``)
     *
     *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]
     */
    const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    function getHost(name) {
        switch (name) {
            case "mainnet":
                return "eth-mainnet.gateway.pokt.network";
            case "goerli":
                return "eth-goerli.gateway.pokt.network";
            case "matic":
                return "poly-mainnet.gateway.pokt.network";
            case "matic-mumbai":
                return "polygon-mumbai-rpc.gateway.pokt.network";
        }
        assertArgument(false, "unsupported network", "network", name);
    }
    /**
     *  The **PocketProvider** connects to the [[link-pocket]]
     *  JSON-RPC end-points.
     *
     *  By default, a highly-throttled API key is used, which is
     *  appropriate for quick prototypes and simple scripts. To
     *  gain access to an increased rate-limit, it is highly
     *  recommended to [sign up here](link-pocket-signup).
     */
    class PocketProvider extends JsonRpcProvider {
        /**
         *  The Application ID for the Pocket connection.
         */
        applicationId;
        /**
         *  The Application Secret for making authenticated requests
         *  to the Pocket connection.
         */
        applicationSecret;
        /**
         *  Create a new **PocketProvider**.
         *
         *  By default connecting to ``mainnet`` with a highly throttled
         *  API key.
         */
        constructor(_network, applicationId, applicationSecret) {
            if (_network == null) {
                _network = "mainnet";
            }
            const network = Network.from(_network);
            if (applicationId == null) {
                applicationId = defaultApplicationId;
            }
            if (applicationSecret == null) {
                applicationSecret = null;
            }
            const options = { staticNetwork: network };
            const request = PocketProvider.getRequest(network, applicationId, applicationSecret);
            super(request, network, options);
            defineProperties(this, { applicationId, applicationSecret });
        }
        _getProvider(chainId) {
            try {
                return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
            }
            catch (error) { }
            return super._getProvider(chainId);
        }
        /**
         *  Returns a prepared request for connecting to %%network%% with
         *  %%applicationId%%.
         */
        static getRequest(network, applicationId, applicationSecret) {
            if (applicationId == null) {
                applicationId = defaultApplicationId;
            }
            const request = new FetchRequest(`https:/\/${getHost(network.name)}/v1/lb/${applicationId}`);
            request.allowGzip = true;
            if (applicationSecret) {
                request.setCredentials("", applicationSecret);
            }
            if (applicationId === defaultApplicationId) {
                request.retryFunc = async (request, response, attempt) => {
                    showThrottleMessage("PocketProvider");
                    return true;
                };
            }
            return request;
        }
        isCommunityResource() {
            return (this.applicationId === defaultApplicationId);
        }
    }

    const IpcSocketProvider = undefined;

    /**
     *  The **BaseWallet** is a stream-lined implementation of a
     *  [[Signer]] that operates with a private key.
     *
     *  It is preferred to use the [[Wallet]] class, as it offers
     *  additional functionality and simplifies loading a variety
     *  of JSON formats, Mnemonic Phrases, etc.
     *
     *  This class may be of use for those attempting to implement
     *  a minimal Signer.
     */
    class BaseWallet extends AbstractSigner {
        /**
         *  The wallet address.
         */
        address;
        #signingKey;
        /**
         *  Creates a new BaseWallet for %%privateKey%%, optionally
         *  connected to %%provider%%.
         *
         *  If %%provider%% is not specified, only offline methods can
         *  be used.
         */
        constructor(privateKey, provider) {
            super(provider);
            assertArgument(privateKey && typeof (privateKey.sign) === "function", "invalid private key", "privateKey", "[ REDACTED ]");
            this.#signingKey = privateKey;
            const address = computeAddress(this.signingKey.publicKey);
            defineProperties(this, { address });
        }
        // Store private values behind getters to reduce visibility
        // in console.log
        /**
         *  The [[SigningKey]] used for signing payloads.
         */
        get signingKey() { return this.#signingKey; }
        /**
         *  The private key for this wallet.
         */
        get privateKey() { return this.signingKey.privateKey; }
        async getAddress() { return this.address; }
        connect(provider) {
            return new BaseWallet(this.#signingKey, provider);
        }
        async signTransaction(tx) {
            tx = copyRequest(tx);
            // Replace any Addressable or ENS name with an address
            const { to, from } = await resolveProperties({
                to: (tx.to ? resolveAddress(tx.to, this.provider) : undefined),
                from: (tx.from ? resolveAddress(tx.from, this.provider) : undefined)
            });
            if (to != null) {
                tx.to = to;
            }
            if (from != null) {
                tx.from = from;
            }
            if (tx.from != null) {
                assertArgument(getAddress((tx.from)) === this.address, "transaction from address mismatch", "tx.from", tx.from);
                delete tx.from;
            }
            // Build the transaction
            const btx = Transaction.from(tx);
            btx.signature = this.signingKey.sign(btx.unsignedHash);
            return btx.serialized;
        }
        async signMessage(message) {
            return this.signMessageSync(message);
        }
        // @TODO: Add a secialized signTx and signTyped sync that enforces
        // all parameters are known?
        /**
         *  Returns the signature for %%message%% signed with this wallet.
         */
        signMessageSync(message) {
            return this.signingKey.sign(hashMessage(message)).serialized;
        }
        async signTypedData(domain, types, value) {
            // Populate any ENS names
            const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
                // @TODO: this should use resolveName; addresses don't
                //        need a provider
                assert(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
                    operation: "resolveName",
                    info: { name }
                });
                const address = await this.provider.resolveName(name);
                assert(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
                    value: name
                });
                return address;
            });
            return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
        }
    }

    const subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
    const Word = /^[a-z]*$/i;
    function unfold(words, sep) {
        let initial = 97;
        return words.reduce((accum, word) => {
            if (word === sep) {
                initial++;
            }
            else if (word.match(Word)) {
                accum.push(String.fromCharCode(initial) + word);
            }
            else {
                initial = 97;
                accum.push(word);
            }
            return accum;
        }, []);
    }
    /**
     *  @_ignore
     */
    function decode(data, subs) {
        // Replace all the substitutions with their expanded form
        for (let i = subsChrs.length - 1; i >= 0; i--) {
            data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
        }
        // Get all tle clumps; each suffix, first-increment and second-increment
        const clumps = [];
        const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
            if (semi) {
                for (let i = parseInt(semi); i >= 0; i--) {
                    clumps.push(";");
                }
            }
            else {
                clumps.push(item.toLowerCase());
            }
            return "";
        });
        /* c8 ignore start */
        if (leftover) {
            throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
        }
        /* c8 ignore stop */
        return unfold(unfold(clumps, ";"), ":");
    }
    /**
     *  @_ignore
     */
    function decodeOwl(data) {
        assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
        return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
    }

    /**
     *  A Wordlist represents a collection of language-specific
     *  words used to encode and devoce [[link-bip-39]] encoded data
     *  by mapping words to 11-bit values and vice versa.
     */
    class Wordlist {
        locale;
        /**
         *  Creates a new Wordlist instance.
         *
         *  Sub-classes MUST call this if they provide their own constructor,
         *  passing in the locale string of the language.
         *
         *  Generally there is no need to create instances of a Wordlist,
         *  since each language-specific Wordlist creates an instance and
         *  there is no state kept internally, so they are safe to share.
         */
        constructor(locale) {
            defineProperties(this, { locale });
        }
        /**
         *  Sub-classes may override this to provide a language-specific
         *  method for spliting %%phrase%% into individual words.
         *
         *  By default, %%phrase%% is split using any sequences of
         *  white-space as defined by regular expressions (i.e. ``/\s+/``).
         */
        split(phrase) {
            return phrase.toLowerCase().split(/\s+/g);
        }
        /**
         *  Sub-classes may override this to provider a language-specific
         *  method for joining %%words%% into a phrase.
         *
         *  By default, %%words%% are joined by a single space.
         */
        join(words) {
            return words.join(" ");
        }
    }

    // Use the encode-latin.js script to create the necessary
    // data files to be consumed by this class
    /**
     *  An OWL format Wordlist is an encoding method that exploits
     *  the general locality of alphabetically sorted words to
     *  achieve a simple but effective means of compression.
     *
     *  This class is generally not useful to most developers as
     *  it is used mainly internally to keep Wordlists for languages
     *  based on ASCII-7 small.
     *
     *  If necessary, there are tools within the ``generation/`` folder
     *  to create the necessary data.
     */
    class WordlistOwl extends Wordlist {
        #data;
        #checksum;
        /**
         *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
         *  and validated against the %%checksum%%.
         */
        constructor(locale, data, checksum) {
            super(locale);
            this.#data = data;
            this.#checksum = checksum;
            this.#words = null;
        }
        /**
         *  The OWL-encoded data.
         */
        get _data() { return this.#data; }
        /**
         *  Decode all the words for the wordlist.
         */
        _decodeWords() {
            return decodeOwl(this.#data);
        }
        #words;
        #loadWords() {
            if (this.#words == null) {
                const words = this._decodeWords();
                // Verify the computed list matches the official list
                const checksum = id(words.join("\n") + "\n");
                /* c8 ignore start */
                if (checksum !== this.#checksum) {
                    throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
                }
                /* c8 ignore stop */
                this.#words = words;
            }
            return this.#words;
        }
        getWord(index) {
            const words = this.#loadWords();
            assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
            return words[index];
        }
        getWordIndex(word) {
            return this.#loadWords().indexOf(word);
        }
    }

    const words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
    const checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
    let wordlist = null;
    /**
     *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).
     *
     *  @_docloc: api/wordlists
     */
    class LangEn extends WordlistOwl {
        /**
         *  Creates a new instance of the English language Wordlist.
         *
         *  This should be unnecessary most of the time as the exported
         *  [[langEn]] should suffice.
         *
         *  @_ignore:
         */
        constructor() { super("en", words, checksum); }
        /**
         *  Returns a singleton instance of a ``LangEn``, creating it
         *  if this is the first time being called.
         */
        static wordlist() {
            if (wordlist == null) {
                wordlist = new LangEn();
            }
            return wordlist;
        }
    }

    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits) & 0xff;
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return ((1 << bits) - 1) & 0xff;
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
        assertNormalize("NFKD");
        if (wordlist == null) {
            wordlist = LangEn.wordlist();
        }
        const words = wordlist.split(mnemonic);
        assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
        const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
        let offset = 0;
        for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
            for (let bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        const entropyBits = 32 * words.length / 3;
        const checksumBits = words.length / 3;
        const checksumMask = getUpperMask(checksumBits);
        const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
        return hexlify(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
        assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
        if (wordlist == null) {
            wordlist = LangEn.wordlist();
        }
        const indices = [0];
        let remainingBits = 11;
        for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        const checksumBits = entropy.length / 4;
        const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    const _guard$1 = {};
    /**
     *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]
     *  seeds and convert between phrases and entropy.
     */
    class Mnemonic {
        /**
         *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
         *
         *  Use the [[wordlist]] ``split`` method to get the individual words.
         */
        phrase;
        /**
         *  The password used for this mnemonic. If no password is used this
         *  is the empty string (i.e. ``""``) as per the specification.
         */
        password;
        /**
         *  The wordlist for this mnemonic.
         */
        wordlist;
        /**
         *  The underlying entropy which the mnemonic encodes.
         */
        entropy;
        /**
         *  @private
         */
        constructor(guard, entropy, phrase, password, wordlist) {
            if (password == null) {
                password = "";
            }
            if (wordlist == null) {
                wordlist = LangEn.wordlist();
            }
            assertPrivate(guard, _guard$1, "Mnemonic");
            defineProperties(this, { phrase, password, wordlist, entropy });
        }
        /**
         *  Returns the seed for the mnemonic.
         */
        computeSeed() {
            const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
            return pbkdf2(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
        }
        /**
         *  Creates a new Mnemonic for the %%phrase%%.
         *
         *  The default %%password%% is the empty string and the default
         *  wordlist is the [English wordlists](LangEn).
         */
        static fromPhrase(phrase, password, wordlist) {
            // Normalize the case and space; throws if invalid
            const entropy = mnemonicToEntropy(phrase, wordlist);
            phrase = entropyToMnemonic(getBytes(entropy), wordlist);
            return new Mnemonic(_guard$1, entropy, phrase, password, wordlist);
        }
        /**
         *  Create a new **Mnemonic** from the %%entropy%%.
         *
         *  The default %%password%% is the empty string and the default
         *  wordlist is the [English wordlists](LangEn).
         */
        static fromEntropy(_entropy, password, wordlist) {
            const entropy = getBytes(_entropy, "entropy");
            const phrase = entropyToMnemonic(entropy, wordlist);
            return new Mnemonic(_guard$1, hexlify(entropy), phrase, password, wordlist);
        }
        /**
         *  Returns the phrase for %%mnemonic%%.
         */
        static entropyToPhrase(_entropy, wordlist) {
            const entropy = getBytes(_entropy, "entropy");
            return entropyToMnemonic(entropy, wordlist);
        }
        /**
         *  Returns the entropy for %%phrase%%.
         */
        static phraseToEntropy(phrase, wordlist) {
            return mnemonicToEntropy(phrase, wordlist);
        }
        /**
         *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
         *
         *  This checks all the provided words belong to the %%wordlist%%,
         *  that the length is valid and the checksum is correct.
         */
        static isValidMnemonic(phrase, wordlist) {
            try {
                mnemonicToEntropy(phrase, wordlist);
                return true;
            }
            catch (error) { }
            return false;
        }
    }

    /*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
    var __classPrivateFieldGet$2 = (__$G && __$G.__classPrivateFieldGet) || function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet$2 = (__$G && __$G.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };
    var _AES_key, _AES_Kd, _AES_Ke;
    // Number of rounds by keysize
    const numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    // Round constant words
    const rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];
    // S-box and Inverse S-box (S is for Substitution)
    const S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    const Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];
    // Transformations for encryption
    const T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    const T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    const T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    const T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];
    // Transformations for decryption
    const T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    const T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    const T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    const T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];
    // Transformations for decryption key expansion
    const U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    const U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    const U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    const U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];
    function convertToInt32(bytes) {
        const result = [];
        for (let i = 0; i < bytes.length; i += 4) {
            result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);
        }
        return result;
    }
    class AES {
        get key() { return __classPrivateFieldGet$2(this, _AES_key, "f").slice(); }
        constructor(key) {
            _AES_key.set(this, void 0);
            _AES_Kd.set(this, void 0);
            _AES_Ke.set(this, void 0);
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }
            __classPrivateFieldSet$2(this, _AES_key, new Uint8Array(key), "f");
            const rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');
            }
            // encryption round keys
            __classPrivateFieldSet$2(this, _AES_Ke, [], "f");
            // decryption round keys
            __classPrivateFieldSet$2(this, _AES_Kd, [], "f");
            for (let i = 0; i <= rounds; i++) {
                __classPrivateFieldGet$2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
                __classPrivateFieldGet$2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
            }
            const roundKeyCount = (rounds + 1) * 4;
            const KC = this.key.length / 4;
            // convert the key into ints
            const tk = convertToInt32(this.key);
            // copy values into round key arrays
            let index;
            for (let i = 0; i < KC; i++) {
                index = i >> 2;
                __classPrivateFieldGet$2(this, _AES_Ke, "f")[index][i % 4] = tk[i];
                __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
            }
            // key expansion (fips-197 section 5.2)
            let rconpointer = 0;
            let t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                    (S[(tt >> 8) & 0xFF] << 16) ^
                    (S[tt & 0xFF] << 8) ^
                    S[(tt >> 24) & 0xFF] ^
                    (rcon[rconpointer] << 24));
                rconpointer += 1;
                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (let i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    // key expansion for 256-bit keys is "slightly different" (fips-197)
                }
                else {
                    for (let i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];
                    tk[KC / 2] ^= (S[tt & 0xFF] ^
                        (S[(tt >> 8) & 0xFF] << 8) ^
                        (S[(tt >> 16) & 0xFF] << 16) ^
                        (S[(tt >> 24) & 0xFF] << 24));
                    for (let i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }
                // copy values into round key arrays
                let i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    __classPrivateFieldGet$2(this, _AES_Ke, "f")[r][c] = tk[i];
                    __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
                    t++;
                }
            }
            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (let r = 1; r < rounds; r++) {
                for (let c = 0; c < 4; c++) {
                    tt = __classPrivateFieldGet$2(this, _AES_Kd, "f")[r][c];
                    __classPrivateFieldGet$2(this, _AES_Kd, "f")[r][c] = (U1[(tt >> 24) & 0xFF] ^
                        U2[(tt >> 16) & 0xFF] ^
                        U3[(tt >> 8) & 0xFF] ^
                        U4[tt & 0xFF]);
                }
            }
        }
        encrypt(plaintext) {
            if (plaintext.length != 16) {
                throw new TypeError('invalid plaintext size (must be 16 bytes)');
            }
            const rounds = __classPrivateFieldGet$2(this, _AES_Ke, "f").length - 1;
            const a = [0, 0, 0, 0];
            // convert plaintext to (ints ^ key)
            let t = convertToInt32(plaintext);
            for (let i = 0; i < 4; i++) {
                t[i] ^= __classPrivateFieldGet$2(this, _AES_Ke, "f")[0][i];
            }
            // apply round transforms
            for (let r = 1; r < rounds; r++) {
                for (let i = 0; i < 4; i++) {
                    a[i] = (T1[(t[i] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >> 8) & 0xff] ^
                        T4[t[(i + 3) % 4] & 0xff] ^
                        __classPrivateFieldGet$2(this, _AES_Ke, "f")[r][i]);
                }
                t = a.slice();
            }
            // the last round is special
            const result = new Uint8Array(16);
            let tt = 0;
            for (let i = 0; i < 4; i++) {
                tt = __classPrivateFieldGet$2(this, _AES_Ke, "f")[rounds][i];
                result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
                result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
            }
            return result;
        }
        decrypt(ciphertext) {
            if (ciphertext.length != 16) {
                throw new TypeError('invalid ciphertext size (must be 16 bytes)');
            }
            const rounds = __classPrivateFieldGet$2(this, _AES_Kd, "f").length - 1;
            const a = [0, 0, 0, 0];
            // convert plaintext to (ints ^ key)
            let t = convertToInt32(ciphertext);
            for (let i = 0; i < 4; i++) {
                t[i] ^= __classPrivateFieldGet$2(this, _AES_Kd, "f")[0][i];
            }
            // apply round transforms
            for (let r = 1; r < rounds; r++) {
                for (let i = 0; i < 4; i++) {
                    a[i] = (T5[(t[i] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >> 8) & 0xff] ^
                        T8[t[(i + 1) % 4] & 0xff] ^
                        __classPrivateFieldGet$2(this, _AES_Kd, "f")[r][i]);
                }
                t = a.slice();
            }
            // the last round is special
            const result = new Uint8Array(16);
            let tt = 0;
            for (let i = 0; i < 4; i++) {
                tt = __classPrivateFieldGet$2(this, _AES_Kd, "f")[rounds][i];
                result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
                result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
            }
            return result;
        }
    }
    _AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();

    class ModeOfOperation {
        constructor(name, key, cls) {
            if (cls && !(this instanceof cls)) {
                throw new Error(`${name} must be instantiated with "new"`);
            }
            Object.defineProperties(this, {
                aes: { enumerable: true, value: new AES(key) },
                name: { enumerable: true, value: name }
            });
        }
    }

    // Cipher Block Chaining
    var __classPrivateFieldSet$1 = (__$G && __$G.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };
    var __classPrivateFieldGet$1 = (__$G && __$G.__classPrivateFieldGet) || function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CBC_iv, _CBC_lastBlock;
    class CBC extends ModeOfOperation {
        constructor(key, iv) {
            super("ECC", key, CBC);
            _CBC_iv.set(this, void 0);
            _CBC_lastBlock.set(this, void 0);
            if (iv) {
                if (iv.length % 16) {
                    throw new TypeError("invalid iv size (must be 16 bytes)");
                }
                __classPrivateFieldSet$1(this, _CBC_iv, new Uint8Array(iv), "f");
            }
            else {
                __classPrivateFieldSet$1(this, _CBC_iv, new Uint8Array(16), "f");
            }
            __classPrivateFieldSet$1(this, _CBC_lastBlock, this.iv, "f");
        }
        get iv() { return new Uint8Array(__classPrivateFieldGet$1(this, _CBC_iv, "f")); }
        encrypt(plaintext) {
            if (plaintext.length % 16) {
                throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
            }
            const ciphertext = new Uint8Array(plaintext.length);
            for (let i = 0; i < plaintext.length; i += 16) {
                for (let j = 0; j < 16; j++) {
                    __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
                }
                __classPrivateFieldSet$1(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet$1(this, _CBC_lastBlock, "f")), "f");
                ciphertext.set(__classPrivateFieldGet$1(this, _CBC_lastBlock, "f"), i);
            }
            return ciphertext;
        }
        decrypt(ciphertext) {
            if (ciphertext.length % 16) {
                throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
            }
            const plaintext = new Uint8Array(ciphertext.length);
            for (let i = 0; i < ciphertext.length; i += 16) {
                const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
                for (let j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j];
                    __classPrivateFieldGet$1(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
                }
            }
            return plaintext;
        }
    }
    _CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();

    // Counter Mode
    var __classPrivateFieldSet = (__$G && __$G.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };
    var __classPrivateFieldGet = (__$G && __$G.__classPrivateFieldGet) || function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CTR_remaining, _CTR_remainingIndex, _CTR_counter;
    class CTR extends ModeOfOperation {
        constructor(key, initialValue) {
            super("CTR", key, CTR);
            // Remaining bytes for the one-time pad
            _CTR_remaining.set(this, void 0);
            _CTR_remainingIndex.set(this, void 0);
            // The current counter
            _CTR_counter.set(this, void 0);
            __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), "f");
            __classPrivateFieldGet(this, _CTR_counter, "f").fill(0);
            __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, "f"), "f"); // This will be discarded immediately
            __classPrivateFieldSet(this, _CTR_remainingIndex, 16, "f");
            if (initialValue == null) {
                initialValue = 1;
            }
            if (typeof (initialValue) === "number") {
                this.setCounterValue(initialValue);
            }
            else {
                this.setCounterBytes(initialValue);
            }
        }
        get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, "f")); }
        setCounterValue(value) {
            if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
                throw new TypeError("invalid counter initial integer value");
            }
            for (let index = 15; index >= 0; --index) {
                __classPrivateFieldGet(this, _CTR_counter, "f")[index] = value % 256;
                value = Math.floor(value / 256);
            }
        }
        setCounterBytes(value) {
            if (value.length !== 16) {
                throw new TypeError("invalid counter initial Uint8Array value length");
            }
            __classPrivateFieldGet(this, _CTR_counter, "f").set(value);
        }
        increment() {
            for (let i = 15; i >= 0; i--) {
                if (__classPrivateFieldGet(this, _CTR_counter, "f")[i] === 255) {
                    __classPrivateFieldGet(this, _CTR_counter, "f")[i] = 0;
                }
                else {
                    __classPrivateFieldGet(this, _CTR_counter, "f")[i]++;
                    break;
                }
            }
        }
        encrypt(plaintext) {
            var _a, _b;
            const crypttext = new Uint8Array(plaintext);
            for (let i = 0; i < crypttext.length; i++) {
                if (__classPrivateFieldGet(this, _CTR_remainingIndex, "f") === 16) {
                    __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, "f")), "f");
                    __classPrivateFieldSet(this, _CTR_remainingIndex, 0, "f");
                    this.increment();
                }
                crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, "f")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
            }
            return crypttext;
        }
        decrypt(ciphertext) {
            return this.encrypt(ciphertext);
        }
    }
    _CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();

    function pkcs7Strip(data) {
        if (data.length < 16) {
            throw new TypeError('PKCS#7 invalid length');
        }
        const padder = data[data.length - 1];
        if (padder > 16) {
            throw new TypeError('PKCS#7 padding byte out of range');
        }
        const length = data.length - padder;
        for (let i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new TypeError('PKCS#7 invalid padding byte');
            }
        }
        return new Uint8Array(data.subarray(0, length));
    }

    /**
     *  @_ignore
     */
    function looseArrayify(hexString) {
        if (typeof (hexString) === "string" && !hexString.startsWith("0x")) {
            hexString = "0x" + hexString;
        }
        return getBytesCopy(hexString);
    }
    function zpad$1(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return toUtf8Bytes(password, "NFKC");
        }
        return getBytesCopy(password);
    }
    function spelunk(object, _path) {
        const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
        assertArgument(match != null, "invalid path", "path", _path);
        const path = match[1];
        const type = match[3];
        const reqd = (match[4] === "!");
        let cur = object;
        for (const comp of path.toLowerCase().split('.')) {
            // Search for a child object with a case-insensitive matching key
            if (Array.isArray(cur)) {
                if (!comp.match(/^[0-9]+$/)) {
                    break;
                }
                cur = cur[parseInt(comp)];
            }
            else if (typeof (cur) === "object") {
                let found = null;
                for (const key in cur) {
                    if (key.toLowerCase() === comp) {
                        found = cur[key];
                        break;
                    }
                }
                cur = found;
            }
            else {
                cur = null;
            }
            if (cur == null) {
                break;
            }
        }
        assertArgument(!reqd || cur != null, "missing required value", "path", path);
        if (type && cur != null) {
            if (type === "int") {
                if (typeof (cur) === "string" && cur.match(/^-?[0-9]+$/)) {
                    return parseInt(cur);
                }
                else if (Number.isSafeInteger(cur)) {
                    return cur;
                }
            }
            if (type === "number") {
                if (typeof (cur) === "string" && cur.match(/^-?[0-9.]*$/)) {
                    return parseFloat(cur);
                }
            }
            if (type === "data") {
                if (typeof (cur) === "string") {
                    return looseArrayify(cur);
                }
            }
            if (type === "array" && Array.isArray(cur)) {
                return cur;
            }
            if (type === typeof (cur)) {
                return cur;
            }
            assertArgument(false, `wrong type found for ${type} `, "path", path);
        }
        return cur;
    }
    /*
    export function follow(object: any, path: string): null | string {
        let currentChild = object;

        for (const comp of path.toLowerCase().split('/')) {

            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
                 if (key.toLowerCase() === comp) {
                     matchingChild = currentChild[key];
                     break;
                 }
            }

            if (matchingChild === null) { return null; }

            currentChild = matchingChild;
        }

        return currentChild;
    }

    // "path/to/something:type!"
    export function followRequired(data: any, path: string): string {
        const value = follow(data, path);
        if (value != null) { return value; }
        return logger.throwArgumentError("invalid value", `data:${ path }`,
        JSON.stringify(data));
    }
    */
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    /*
    export function uuidV4(randomBytes: BytesLike): string {
        const bytes = getBytes(randomBytes, "randomBytes");

        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;

        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;

        const value = hexlify(bytes);

        return [
           value.substring(2, 10),
           value.substring(10, 14),
           value.substring(14, 18),
           value.substring(18, 22),
           value.substring(22, 34),
        ].join("-");
    }
    */

    /**
     *  The JSON Wallet formats allow a simple way to store the private
     *  keys needed in Ethereum along with related information and allows
     *  for extensible forms of encryption.
     *
     *  These utilities facilitate decrypting and encrypting the most common
     *  JSON Wallet formats.
     *
     *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
     */
    const defaultPath$1 = "m/44'/60'/0'/0/0";
    /**
     *  Returns true if %%json%% is a valid JSON Keystore Wallet.
     */
    function isKeystoreJson(json) {
        try {
            const data = JSON.parse(json);
            const version = ((data.version != null) ? parseInt(data.version) : 0);
            if (version === 3) {
                return true;
            }
        }
        catch (error) { }
        return false;
    }
    function decrypt(data, key, ciphertext) {
        const cipher = spelunk(data, "crypto.cipher:string");
        if (cipher === "aes-128-ctr") {
            const iv = spelunk(data, "crypto.cipherparams.iv:data!");
            const aesCtr = new CTR(key, iv);
            return hexlify(aesCtr.decrypt(ciphertext));
        }
        assert(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
            operation: "decrypt"
        });
    }
    function getAccount(data, _key) {
        const key = getBytes(_key);
        const ciphertext = spelunk(data, "crypto.ciphertext:data!");
        const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
        assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
        const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
        const address = computeAddress(privateKey);
        if (data.address) {
            let check = data.address.toLowerCase();
            if (!check.startsWith("0x")) {
                check = "0x" + check;
            }
            assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
        }
        const account = { address, privateKey };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        const version = spelunk(data, "x-ethers.version:string");
        if (version === "0.1") {
            const mnemonicKey = key.slice(32, 64);
            const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
            const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
            const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
            account.mnemonic = {
                path: (spelunk(data, "x-ethers.path:string") || defaultPath$1),
                locale: (spelunk(data, "x-ethers.locale:string") || "en"),
                entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
            };
        }
        return account;
    }
    function getDecryptKdfParams(data) {
        const kdf = spelunk(data, "crypto.kdf:string");
        if (kdf && typeof (kdf) === "string") {
            if (kdf.toLowerCase() === "scrypt") {
                const salt = spelunk(data, "crypto.kdfparams.salt:data!");
                const N = spelunk(data, "crypto.kdfparams.n:int!");
                const r = spelunk(data, "crypto.kdfparams.r:int!");
                const p = spelunk(data, "crypto.kdfparams.p:int!");
                // Make sure N is a power of 2
                assertArgument(N > 0 && (N & (N - 1)) === 0, "invalid kdf.N", "kdf.N", N);
                assertArgument(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
                const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
                assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
                return { name: "scrypt", salt, N, r, p, dkLen: 64 };
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                const salt = spelunk(data, "crypto.kdfparams.salt:data!");
                const prf = spelunk(data, "crypto.kdfparams.prf:string!");
                const algorithm = prf.split("-").pop();
                assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
                const count = spelunk(data, "crypto.kdfparams.c:int!");
                const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
                assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
                return { name: "pbkdf2", salt, count, dkLen, algorithm };
            }
        }
        assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
    }
    /**
     *  Returns the account details for the JSON Keystore Wallet %%json%%
     *  using %%password%%.
     *
     *  It is preferred to use the [async version](decryptKeystoreJson)
     *  instead, which allows a [[ProgressCallback]] to keep the user informed
     *  as to the decryption status.
     *
     *  This method will block the event loop (freezing all UI) until decryption
     *  is complete, which can take quite some time, depending on the wallet
     *  paramters and platform.
     */
    function decryptKeystoreJsonSync(json, _password) {
        const data = JSON.parse(json);
        const password = getPassword(_password);
        const params = getDecryptKdfParams(data);
        if (params.name === "pbkdf2") {
            const { salt, count, dkLen, algorithm } = params;
            const key = pbkdf2(password, salt, count, dkLen, algorithm);
            return getAccount(data, key);
        }
        assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
        const { salt, N, r, p, dkLen } = params;
        const key = scryptSync(password, salt, N, r, p, dkLen);
        return getAccount(data, key);
    }
    function stall$1(duration) {
        return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });
    }
    /**
     *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the
     *  %%password%%.
     *
     *  If provided, %%progress%% will be called periodically during the
     *  decrpytion to provide feedback, and if the function returns
     *  ``false`` will halt decryption.
     *
     *  The %%progressCallback%% will **always** receive ``0`` before
     *  decryption begins and ``1`` when complete.
     */
    async function decryptKeystoreJson(json, _password, progress) {
        const data = JSON.parse(json);
        const password = getPassword(_password);
        const params = getDecryptKdfParams(data);
        if (params.name === "pbkdf2") {
            if (progress) {
                progress(0);
                await stall$1(0);
            }
            const { salt, count, dkLen, algorithm } = params;
            const key = pbkdf2(password, salt, count, dkLen, algorithm);
            if (progress) {
                progress(1);
                await stall$1(0);
            }
            return getAccount(data, key);
        }
        assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
        const { salt, N, r, p, dkLen } = params;
        const key = await scrypt(password, salt, N, r, p, dkLen, progress);
        return getAccount(data, key);
    }
    function getEncryptKdfParams(options) {
        // Check/generate the salt
        const salt = (options.salt != null) ? getBytes(options.salt, "options.salt") : randomBytes(32);
        // Override the scrypt password-based key derivation function parameters
        let N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        assertArgument(typeof (N) === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
        assertArgument(typeof (r) === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
        assertArgument(typeof (p) === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
        return { name: "scrypt", dkLen: 32, salt, N, r, p };
    }
    function _encryptKeystore(key, kdf, account, options) {
        const privateKey = getBytes(account.privateKey, "privateKey");
        // Override initialization vector
        const iv = (options.iv != null) ? getBytes(options.iv, "options.iv") : randomBytes(16);
        assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
        // Override the uuid
        const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, "options.uuid") : randomBytes(16);
        assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
        // This will be used to encrypt the wallet (as per Web3 secret storage)
        // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        const derivedKey = key.slice(0, 16);
        const macPrefix = key.slice(16, 32);
        // Encrypt the private key
        const aesCtr = new CTR(derivedKey, iv);
        const ciphertext = getBytes(aesCtr.encrypt(privateKey));
        // Compute the message authentication code, used to check the password
        const mac = keccak256(concat([macPrefix, ciphertext]));
        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
        const data = {
            address: account.address.substring(2).toLowerCase(),
            id: uuidV4(uuidRandom),
            version: 3,
            Crypto: {
                cipher: "aes-128-ctr",
                cipherparams: {
                    iv: hexlify(iv).substring(2),
                },
                ciphertext: hexlify(ciphertext).substring(2),
                kdf: "scrypt",
                kdfparams: {
                    salt: hexlify(kdf.salt).substring(2),
                    n: kdf.N,
                    dklen: 32,
                    p: kdf.p,
                    r: kdf.r
                },
                mac: mac.substring(2)
            }
        };
        // If we have a mnemonic, encrypt it into the JSON wallet
        if (account.mnemonic) {
            const client = (options.client != null) ? options.client : `ethers/${version}`;
            const path = account.mnemonic.path || defaultPath$1;
            const locale = account.mnemonic.locale || "en";
            const mnemonicKey = key.slice(32, 64);
            const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
            const mnemonicIv = randomBytes(16);
            const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
            const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
            const now = new Date();
            const timestamp = (now.getUTCFullYear() + "-" +
                zpad$1(now.getUTCMonth() + 1, 2) + "-" +
                zpad$1(now.getUTCDate(), 2) + "T" +
                zpad$1(now.getUTCHours(), 2) + "-" +
                zpad$1(now.getUTCMinutes(), 2) + "-" +
                zpad$1(now.getUTCSeconds(), 2) + ".0Z");
            const gethFilename = ("UTC--" + timestamp + "--" + data.address);
            data["x-ethers"] = {
                client, gethFilename, path, locale,
                mnemonicCounter: hexlify(mnemonicIv).substring(2),
                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                version: "0.1"
            };
        }
        return JSON.stringify(data);
    }
    /**
     *  Return the JSON Keystore Wallet for %%account%% encrypted with
     *  %%password%%.
     *
     *  The %%options%% can be used to tune the password-based key
     *  derivation function parameters, explicitly set the random values
     *  used. Any provided [[ProgressCallback]] is ignord.
     */
    function encryptKeystoreJsonSync(account, password, options) {
        if (options == null) {
            options = {};
        }
        const passwordBytes = getPassword(password);
        const kdf = getEncryptKdfParams(options);
        const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
        return _encryptKeystore(getBytes(key), kdf, account, options);
    }
    /**
     *  Resolved to the JSON Keystore Wallet for %%account%% encrypted
     *  with %%password%%.
     *
     *  The %%options%% can be used to tune the password-based key
     *  derivation function parameters, explicitly set the random values
     *  used and provide a [[ProgressCallback]] to receive periodic updates
     *  on the completion status..
     */
    async function encryptKeystoreJson(account, password, options) {
        if (options == null) {
            options = {};
        }
        const passwordBytes = getPassword(password);
        const kdf = getEncryptKdfParams(options);
        const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
        return _encryptKeystore(getBytes(key), kdf, account, options);
    }

    /**
     *  Explain HD Wallets..
     *
     *  @_subsection: api/wallet:HD Wallets  [hd-wallets]
     */
    /**
     *  The default derivation path for Ethereum HD Nodes. (i.e. ``"m/44'/60'/0'/0/0"``)
     */
    const defaultPath = "m/44'/60'/0'/0/0";
    // "Bitcoin seed"
    const MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    const HardenedBit = 0x80000000;
    const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const Nibbles = "0123456789abcdef";
    function zpad(value, length) {
        let result = "";
        while (value) {
            result = Nibbles[value % 16] + result;
            value = Math.trunc(value / 16);
        }
        while (result.length < length * 2) {
            result = "0" + result;
        }
        return "0x" + result;
    }
    function encodeBase58Check(_value) {
        const value = getBytes(_value);
        const check = dataSlice(sha256(sha256(value)), 0, 4);
        const bytes = concat([value, check]);
        return encodeBase58(bytes);
    }
    const _guard = {};
    function ser_I(index, chainCode, publicKey, privateKey) {
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
            assert(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
                operation: "deriveChild"
            });
            // Data = 0x00 || ser_256(k_par)
            data.set(getBytes(privateKey), 1);
        }
        else {
            // Data = ser_p(point(k_par))
            data.set(getBytes(publicKey));
        }
        // Data += ser_32(i)
        for (let i = 24; i >= 0; i -= 8) {
            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
        }
        const I = getBytes(computeHmac("sha512", chainCode, data));
        return { IL: I.slice(0, 32), IR: I.slice(32) };
    }
    function derivePath(node, path) {
        const components = path.split("/");
        assertArgument(components.length > 0, "invalid path", "path", path);
        if (components[0] === "m") {
            assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
            components.shift();
        }
        let result = node;
        for (let i = 0; i < components.length; i++) {
            const component = components[i];
            if (component.match(/^[0-9]+'$/)) {
                const index = parseInt(component.substring(0, component.length - 1));
                assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
                result = result.deriveChild(HardenedBit + index);
            }
            else if (component.match(/^[0-9]+$/)) {
                const index = parseInt(component);
                assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
                result = result.deriveChild(index);
            }
            else {
                assertArgument(false, "invalid path component", `path[${i}]`, component);
            }
        }
        return result;
    }
    /**
     *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived
     *  from an HD Node using the [[link-bip-32]] stantard.
     *
     *  An HD Node forms a hierarchal structure with each HD Node having a
     *  private key and the ability to derive child HD Nodes, defined by
     *  a path indicating the index of each child.
     */
    class HDNodeWallet extends BaseWallet {
        /**
         *  The compressed public key.
         */
        publicKey;
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        fingerprint;
        /**
         *  The parent fingerprint.
         */
        parentFingerprint;
        /**
         *  The mnemonic used to create this HD Node, if available.
         *
         *  Sources such as extended keys do not encode the mnemonic, in
         *  which case this will be ``null``.
         */
        mnemonic;
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        chainCode;
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provide full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  encode it.
         */
        path;
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        index;
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        depth;
        /**
         *  @private
         */
        constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
            super(signingKey, provider);
            assertPrivate(guard, _guard, "HDNodeWallet");
            defineProperties(this, { publicKey: signingKey.compressedPublicKey });
            const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);
            defineProperties(this, {
                parentFingerprint, fingerprint,
                chainCode, path, index, depth
            });
            defineProperties(this, { mnemonic });
        }
        connect(provider) {
            return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
        }
        #account() {
            const account = { address: this.address, privateKey: this.privateKey };
            const m = this.mnemonic;
            if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
                account.mnemonic = {
                    path: this.path,
                    locale: "en",
                    entropy: m.entropy
                };
            }
            return account;
        }
        /**
         *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
         *  %%password%%.
         *
         *  If %%progressCallback%% is specified, it will receive periodic
         *  updates as the encryption process progreses.
         */
        async encrypt(password, progressCallback) {
            return await encryptKeystoreJson(this.#account(), password, { progressCallback });
        }
        /**
         *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
         *  %%password%%.
         *
         *  It is preferred to use the [async version](encrypt) instead,
         *  which allows a [[ProgressCallback]] to keep the user informed.
         *
         *  This method will block the event loop (freezing all UI) until
         *  it is complete, which may be a non-trivial duration.
         */
        encryptSync(password) {
            return encryptKeystoreJsonSync(this.#account(), password);
        }
        /**
         *  The extended key.
         *
         *  This key will begin with the prefix ``xpriv`` and can be used to
         *  reconstruct this HD Node to derive its children.
         */
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
            return encodeBase58Check(concat([
                "0x0488ADE4", zpad(this.depth, 1), this.parentFingerprint,
                zpad(this.index, 4), this.chainCode,
                concat(["0x00", this.privateKey])
            ]));
        }
        /**
         *  Returns true if this wallet has a path, providing a Type Guard
         *  that the path is non-null.
         */
        hasPath() { return (this.path != null); }
        /**
         *  Returns a neutered HD Node, which removes the private details
         *  of an HD Node.
         *
         *  A neutered node has no private key, but can be used to derive
         *  child addresses and other public data about the HD Node.
         */
        neuter() {
            return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
        }
        /**
         *  Return the child for %%index%%.
         */
        deriveChild(_index) {
            const index = getNumber(_index, "index");
            assertArgument(index <= 0xffffffff, "invalid index", "index", index);
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
                if (index & HardenedBit) {
                    path += "'";
                }
            }
            const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
            const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));
            return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
        }
        /**
         *  Return the HDNode for %%path%% from this node.
         */
        derivePath(path) {
            return derivePath(this, path);
        }
        static #fromSeed(_seed, mnemonic) {
            assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
            const seed = getBytes(_seed, "seed");
            assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
            const I = getBytes(computeHmac("sha512", MasterSecret, seed));
            const signingKey = new SigningKey(hexlify(I.slice(0, 32)));
            return new HDNodeWallet(_guard, signingKey, "0x00000000", hexlify(I.slice(32)), "m", 0, 0, mnemonic, null);
        }
        /**
         *  Creates a new HD Node from %%extendedKey%%.
         *
         *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
         *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
         *  or full HD Node ([[HDNodeWallet) respectively.
         */
        static fromExtendedKey(extendedKey) {
            const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact
            assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
            const depth = bytes[4];
            const parentFingerprint = hexlify(bytes.slice(5, 9));
            const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = hexlify(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (hexlify(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf": {
                    const publicKey = hexlify(key);
                    return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
                }
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
            }
            assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
        }
        /**
         *  Creates a new random HDNode.
         */
        static createRandom(password, path, wordlist) {
            if (password == null) {
                password = "";
            }
            if (path == null) {
                path = defaultPath;
            }
            if (wordlist == null) {
                wordlist = LangEn.wordlist();
            }
            const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);
            return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Create an HD Node from %%mnemonic%%.
         */
        static fromMnemonic(mnemonic, path) {
            if (!path) {
                path = defaultPath;
            }
            return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Creates an HD Node from a mnemonic %%phrase%%.
         */
        static fromPhrase(phrase, password, path, wordlist) {
            if (password == null) {
                password = "";
            }
            if (path == null) {
                path = defaultPath;
            }
            if (wordlist == null) {
                wordlist = LangEn.wordlist();
            }
            const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);
            return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
        }
        /**
         *  Creates an HD Node from a %%seed%%.
         */
        static fromSeed(seed) {
            return HDNodeWallet.#fromSeed(seed, null);
        }
    }
    /**
     *  A **HDNodeVoidWallet** cannot sign, but provides access to
     *  the children nodes of a [[link-bip-32]] HD wallet addresses.
     *
     *  The can be created by using an extended ``xpub`` key to
     *  [[HDNodeWallet_fromExtendedKey]] or by
     *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].
     */
    class HDNodeVoidWallet extends VoidSigner {
        /**
         *  The compressed public key.
         */
        publicKey;
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        fingerprint;
        /**
         *  The parent node fingerprint.
         */
        parentFingerprint;
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        chainCode;
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provider full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  enocde it.
         */
        path;
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        index;
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        depth;
        /**
         *  @private
         */
        constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
            super(address, provider);
            assertPrivate(guard, _guard, "HDNodeVoidWallet");
            defineProperties(this, { publicKey });
            const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);
            defineProperties(this, {
                publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth
            });
        }
        connect(provider) {
            return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
        }
        /**
         *  The extended key.
         *
         *  This key will begin with the prefix ``xpub`` and can be used to
         *  reconstruct this neutered key to derive its children addresses.
         */
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
            return encodeBase58Check(concat([
                "0x0488B21E",
                zpad(this.depth, 1),
                this.parentFingerprint,
                zpad(this.index, 4),
                this.chainCode,
                this.publicKey,
            ]));
        }
        /**
         *  Returns true if this wallet has a path, providing a Type Guard
         *  that the path is non-null.
         */
        hasPath() { return (this.path != null); }
        /**
         *  Return the child for %%index%%.
         */
        deriveChild(_index) {
            const index = getNumber(_index, "index");
            assertArgument(index <= 0xffffffff, "invalid index", "index", index);
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
                if (index & HardenedBit) {
                    path += "'";
                }
            }
            const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
            const Ki = SigningKey.addPoints(IL, this.publicKey, true);
            const address = computeAddress(Ki);
            return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
        }
        /**
         *  Return the signer for %%path%% from this node.
         */
        derivePath(path) {
            return derivePath(this, path);
        }
    }
    /*
    export class HDNodeWalletManager {
        #root: HDNodeWallet;

        constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {
            if (password == null) { password = ""; }
            if (path == null) { path = "m/44'/60'/0'/0"; }
            if (locale == null) { locale = LangEn.wordlist(); }
            this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);
        }

        getSigner(index?: number): HDNodeWallet {
            return this.#root.deriveChild((index == null) ? 0: index);
        }
    }
    */
    /**
     *  Returns the [[link-bip-32]] path for the account at %%index%%.
     *
     *  This is the pattern used by wallets like Ledger.
     *
     *  There is also an [alternate pattern](getIndexedAccountPath) used by
     *  some software.
     */
    function getAccountPath(_index) {
        const index = getNumber(_index, "index");
        assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
        return `m/44'/60'/${index}'/0/0`;
    }
    /**
     *  Returns the path using an alternative pattern for deriving accounts,
     *  at %%index%%.
     *
     *  This derivation path uses the //index// component rather than the
     *  //account// component to derive sequential accounts.
     *
     *  This is the pattern used by wallets like MetaMask.
     */
    function getIndexedAccountPath(_index) {
        const index = getNumber(_index, "index");
        assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
        return `m/44'/60'/0'/0/${index}`;
    }

    /**
     *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
     */
    /**
     *  Returns true if %%json%% is a valid JSON Crowdsale wallet.
     */
    function isCrowdsaleJson(json) {
        try {
            const data = JSON.parse(json);
            if (data.encseed) {
                return true;
            }
        }
        catch (error) { }
        return false;
    }
    // See: https://github.com/ethereum/pyethsaletool
    /**
     *  Before Ethereum launched, it was necessary to create a wallet
     *  format for backers to use, which would be used to receive ether
     *  as a reward for contributing to the project.
     *
     *  The [[link-crowdsale]] format is now obsolete, but it is still
     *  useful to support and the additional code is fairly trivial as
     *  all the primitives required are used through core portions of
     *  the library.
     */
    function decryptCrowdsaleJson(json, _password) {
        const data = JSON.parse(json);
        const password = getPassword(_password);
        // Ethereum Address
        const address = getAddress(spelunk(data, "ethaddr:string!"));
        // Encrypted Seed
        const encseed = looseArrayify(spelunk(data, "encseed:string!"));
        assertArgument(encseed && (encseed.length % 16) === 0, "invalid encseed", "json", json);
        const key = getBytes(pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
        const iv = encseed.slice(0, 16);
        const encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        const aesCbc = new CBC(key, iv);
        const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        let seedHex = "";
        for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        return { address, privateKey: id(seedHex) };
    }

    function stall(duration) {
        return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });
    }
    /**
     *  A **Wallet** manages a single private key which is used to sign
     *  transactions, messages and other common payloads.
     *
     *  This class is generally the main entry point for developers
     *  that wish to use a private key directly, as it can create
     *  instances from a large variety of common sources, including
     *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON
     *  wallets.
     */
    class Wallet extends BaseWallet {
        /**
         *  Create a new wallet for the private %%key%%, optionally connected
         *  to %%provider%%.
         */
        constructor(key, provider) {
            if (typeof (key) === "string" && !key.startsWith("0x")) {
                key = "0x" + key;
            }
            let signingKey = (typeof (key) === "string") ? new SigningKey(key) : key;
            super(signingKey, provider);
        }
        connect(provider) {
            return new Wallet(this.signingKey, provider);
        }
        /**
         *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
         *  %%password%%.
         *
         *  If %%progressCallback%% is specified, it will receive periodic
         *  updates as the encryption process progreses.
         */
        async encrypt(password, progressCallback) {
            const account = { address: this.address, privateKey: this.privateKey };
            return await encryptKeystoreJson(account, password, { progressCallback });
        }
        /**
         *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
         *  %%password%%.
         *
         *  It is preferred to use the [async version](encrypt) instead,
         *  which allows a [[ProgressCallback]] to keep the user informed.
         *
         *  This method will block the event loop (freezing all UI) until
         *  it is complete, which may be a non-trivial duration.
         */
        encryptSync(password) {
            const account = { address: this.address, privateKey: this.privateKey };
            return encryptKeystoreJsonSync(account, password);
        }
        static #fromAccount(account) {
            assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
            if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
                const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
                const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
                if (wallet.address === account.address && wallet.privateKey === account.privateKey) {
                    return wallet;
                }
                console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
            }
            const wallet = new Wallet(account.privateKey);
            assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
            return wallet;
        }
        /**
         *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
         *  with %%password%%.
         *
         *  If %%progress%% is provided, it is called periodically during
         *  decryption so that any UI can be updated.
         */
        static async fromEncryptedJson(json, password, progress) {
            let account = null;
            if (isKeystoreJson(json)) {
                account = await decryptKeystoreJson(json, password, progress);
            }
            else if (isCrowdsaleJson(json)) {
                if (progress) {
                    progress(0);
                    await stall(0);
                }
                account = decryptCrowdsaleJson(json, password);
                if (progress) {
                    progress(1);
                    await stall(0);
                }
            }
            return Wallet.#fromAccount(account);
        }
        /**
         *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
         *
         *  The [[fromEncryptedJson]] method is preferred, as this method
         *  will lock up and freeze the UI during decryption, which may take
         *  some time.
         */
        static fromEncryptedJsonSync(json, password) {
            let account = null;
            if (isKeystoreJson(json)) {
                account = decryptKeystoreJsonSync(json, password);
            }
            else if (isCrowdsaleJson(json)) {
                account = decryptCrowdsaleJson(json, password);
            }
            else {
                assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
            }
            return Wallet.#fromAccount(account);
        }
        /**
         *  Creates a new random [[HDNodeWallet]] using the available
         *  [cryptographic random source](randomBytes).
         *
         *  If there is no crytographic random source, this will throw.
         */
        static createRandom(provider) {
            const wallet = HDNodeWallet.createRandom();
            if (provider) {
                return wallet.connect(provider);
            }
            return wallet;
        }
        /**
         *  Creates a [[HDNodeWallet]] for %%phrase%%.
         */
        static fromPhrase(phrase, provider) {
            const wallet = HDNodeWallet.fromPhrase(phrase);
            if (provider) {
                return wallet.connect(provider);
            }
            return wallet;
        }
    }

    const Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    /**
     *  @_ignore
     */
    function decodeBits(width, data) {
        const maxValue = (1 << width) - 1;
        const result = [];
        let accum = 0, bits = 0, flood = 0;
        for (let i = 0; i < data.length; i++) {
            // Accumulate 6 bits of data
            accum = ((accum << 6) | Base64.indexOf(data[i]));
            bits += 6;
            // While we have enough for a word...
            while (bits >= width) {
                // ...read the word
                const value = (accum >> (bits - width));
                accum &= (1 << (bits - width)) - 1;
                bits -= width;
                // A value of 0 indicates we exceeded maxValue, it
                // floods over into the next value
                if (value === 0) {
                    flood += maxValue;
                }
                else {
                    result.push(value + flood);
                    flood = 0;
                }
            }
        }
        return result;
    }

    /**
     *  @_ignore
     */
    function decodeOwlA(data, accents) {
        let words = decodeOwl(data).join(",");
        // Inject the accents
        accents.split(/,/g).forEach((accent) => {
            const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
            assertArgument(match !== null, "internal error parsing accents", "accents", accents);
            let posOffset = 0;
            const positions = decodeBits(parseInt(match[3]), match[4]);
            const charCode = parseInt(match[2]);
            const regex = new RegExp(`([${match[1]}])`, "g");
            words = words.replace(regex, (all, letter) => {
                const rem = --positions[posOffset];
                if (rem === 0) {
                    letter = String.fromCharCode(letter.charCodeAt(0), charCode);
                    posOffset++;
                }
                return letter;
            });
        });
        return words.split(",");
    }

    /**
     *  An OWL-A format Wordlist extends the OWL format to add an
     *  overlay onto an OWL format Wordlist to support diacritic
     *  marks.
     *
     *  This class is generally not useful to most developers as
     *  it is used mainly internally to keep Wordlists for languages
     *  based on latin-1 small.
     *
     *  If necessary, there are tools within the ``generation/`` folder
     *  to create the necessary data.
     */
    class WordlistOwlA extends WordlistOwl {
        #accent;
        /**
         *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
         *  and %%accent%% data and validated against the %%checksum%%.
         */
        constructor(locale, data, accent, checksum) {
            super(locale, data, checksum);
            this.#accent = accent;
        }
        /**
         *  The OWLA-encoded accent data.
         */
        get _accent() { return this.#accent; }
        /**
         *  Decode all the words for the wordlist.
         */
        _decodeWords() {
            return decodeOwlA(this._data, this._accent);
        }
    }

    const wordlists = {
        en: LangEn.wordlist(),
    };

    /////////////////////////////
    //
    // dummy change; to pick-up ws security issue changes

    var ethers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbiCoder: AbiCoder,
        AbstractProvider: AbstractProvider,
        AbstractSigner: AbstractSigner,
        AlchemyProvider: AlchemyProvider,
        AnkrProvider: AnkrProvider,
        BaseContract: BaseContract,
        BaseWallet: BaseWallet,
        Block: Block,
        BrowserProvider: BrowserProvider,
        ChainstackProvider: ChainstackProvider,
        CloudflareProvider: CloudflareProvider,
        ConstructorFragment: ConstructorFragment,
        Contract: Contract,
        ContractEventPayload: ContractEventPayload,
        ContractFactory: ContractFactory,
        ContractTransactionReceipt: ContractTransactionReceipt,
        ContractTransactionResponse: ContractTransactionResponse,
        ContractUnknownEventPayload: ContractUnknownEventPayload,
        EnsPlugin: EnsPlugin,
        EnsResolver: EnsResolver,
        ErrorDescription: ErrorDescription,
        ErrorFragment: ErrorFragment,
        EtherSymbol: EtherSymbol,
        EtherscanPlugin: EtherscanPlugin,
        EtherscanProvider: EtherscanProvider,
        EventFragment: EventFragment,
        EventLog: EventLog,
        EventPayload: EventPayload,
        FallbackFragment: FallbackFragment,
        FallbackProvider: FallbackProvider,
        FeeData: FeeData,
        FeeDataNetworkPlugin: FeeDataNetworkPlugin,
        FetchCancelSignal: FetchCancelSignal,
        FetchRequest: FetchRequest,
        FetchResponse: FetchResponse,
        FetchUrlFeeDataNetworkPlugin: FetchUrlFeeDataNetworkPlugin,
        FixedNumber: FixedNumber,
        Fragment: Fragment,
        FunctionFragment: FunctionFragment,
        GasCostPlugin: GasCostPlugin,
        HDNodeVoidWallet: HDNodeVoidWallet,
        HDNodeWallet: HDNodeWallet,
        Indexed: Indexed,
        InfuraProvider: InfuraProvider,
        InfuraWebSocketProvider: InfuraWebSocketProvider,
        Interface: Interface,
        IpcSocketProvider: IpcSocketProvider,
        JsonRpcApiProvider: JsonRpcApiProvider,
        JsonRpcProvider: JsonRpcProvider,
        JsonRpcSigner: JsonRpcSigner,
        LangEn: LangEn,
        Log: Log,
        LogDescription: LogDescription,
        MaxInt256: MaxInt256,
        MaxUint256: MaxUint256,
        MessagePrefix: MessagePrefix,
        MinInt256: MinInt256,
        Mnemonic: Mnemonic,
        MulticoinProviderPlugin: MulticoinProviderPlugin,
        N: N$1,
        NamedFragment: NamedFragment,
        Network: Network,
        NetworkPlugin: NetworkPlugin,
        NonceManager: NonceManager,
        ParamType: ParamType,
        PocketProvider: PocketProvider,
        QuickNodeProvider: QuickNodeProvider,
        Result: Result,
        Signature: Signature,
        SigningKey: SigningKey,
        SocketBlockSubscriber: SocketBlockSubscriber,
        SocketEventSubscriber: SocketEventSubscriber,
        SocketPendingSubscriber: SocketPendingSubscriber,
        SocketProvider: SocketProvider,
        SocketSubscriber: SocketSubscriber,
        StructFragment: StructFragment,
        Transaction: Transaction,
        TransactionDescription: TransactionDescription,
        TransactionReceipt: TransactionReceipt,
        TransactionResponse: TransactionResponse,
        Typed: Typed,
        TypedDataEncoder: TypedDataEncoder,
        UndecodedEventLog: UndecodedEventLog,
        UnmanagedSubscriber: UnmanagedSubscriber,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        VoidSigner: VoidSigner,
        Wallet: Wallet,
        WebSocketProvider: WebSocketProvider,
        WeiPerEther: WeiPerEther,
        Wordlist: Wordlist,
        WordlistOwl: WordlistOwl,
        WordlistOwlA: WordlistOwlA,
        ZeroAddress: ZeroAddress,
        ZeroHash: ZeroHash,
        accessListify: accessListify,
        assert: assert,
        assertArgument: assertArgument,
        assertArgumentCount: assertArgumentCount,
        assertNormalize: assertNormalize,
        assertPrivate: assertPrivate,
        checkResultErrors: checkResultErrors,
        computeAddress: computeAddress,
        computeHmac: computeHmac,
        concat: concat,
        copyRequest: copyRequest,
        dataLength: dataLength,
        dataSlice: dataSlice,
        decodeBase58: decodeBase58,
        decodeBase64: decodeBase64,
        decodeBytes32String: decodeBytes32String,
        decodeRlp: decodeRlp,
        decryptCrowdsaleJson: decryptCrowdsaleJson,
        decryptKeystoreJson: decryptKeystoreJson,
        decryptKeystoreJsonSync: decryptKeystoreJsonSync,
        defaultPath: defaultPath,
        defineProperties: defineProperties,
        dnsEncode: dnsEncode,
        encodeBase58: encodeBase58,
        encodeBase64: encodeBase64,
        encodeBytes32String: encodeBytes32String,
        encodeRlp: encodeRlp,
        encryptKeystoreJson: encryptKeystoreJson,
        encryptKeystoreJsonSync: encryptKeystoreJsonSync,
        ensNormalize: ensNormalize,
        formatEther: formatEther,
        formatUnits: formatUnits,
        fromTwos: fromTwos,
        getAccountPath: getAccountPath,
        getAddress: getAddress,
        getBigInt: getBigInt,
        getBytes: getBytes,
        getBytesCopy: getBytesCopy,
        getCreate2Address: getCreate2Address,
        getCreateAddress: getCreateAddress,
        getDefaultProvider: getDefaultProvider,
        getIcapAddress: getIcapAddress,
        getIndexedAccountPath: getIndexedAccountPath,
        getNumber: getNumber,
        getUint: getUint,
        hashMessage: hashMessage,
        hexlify: hexlify,
        id: id,
        isAddress: isAddress,
        isAddressable: isAddressable,
        isBytesLike: isBytesLike,
        isCallException: isCallException,
        isCrowdsaleJson: isCrowdsaleJson,
        isError: isError,
        isHexString: isHexString,
        isKeystoreJson: isKeystoreJson,
        isValidName: isValidName,
        keccak256: keccak256,
        lock: lock,
        makeError: makeError,
        mask: mask,
        namehash: namehash,
        parseEther: parseEther,
        parseUnits: parseUnits$1,
        pbkdf2: pbkdf2,
        randomBytes: randomBytes,
        recoverAddress: recoverAddress,
        resolveAddress: resolveAddress,
        resolveProperties: resolveProperties,
        ripemd160: ripemd160,
        scrypt: scrypt,
        scryptSync: scryptSync,
        sha256: sha256,
        sha512: sha512,
        showThrottleMessage: showThrottleMessage,
        solidityPacked: solidityPacked,
        solidityPackedKeccak256: solidityPackedKeccak256,
        solidityPackedSha256: solidityPackedSha256,
        stripZerosLeft: stripZerosLeft,
        toBeArray: toBeArray,
        toBeHex: toBeHex,
        toBigInt: toBigInt,
        toNumber: toNumber,
        toQuantity: toQuantity,
        toTwos: toTwos,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        uuidV4: uuidV4,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData,
        version: version,
        wordlists: wordlists,
        zeroPadBytes: zeroPadBytes,
        zeroPadValue: zeroPadValue
    });

    exports.AbiCoder = AbiCoder;
    exports.AbstractProvider = AbstractProvider;
    exports.AbstractSigner = AbstractSigner;
    exports.AlchemyProvider = AlchemyProvider;
    exports.AnkrProvider = AnkrProvider;
    exports.BaseContract = BaseContract;
    exports.BaseWallet = BaseWallet;
    exports.Block = Block;
    exports.BrowserProvider = BrowserProvider;
    exports.ChainstackProvider = ChainstackProvider;
    exports.CloudflareProvider = CloudflareProvider;
    exports.ConstructorFragment = ConstructorFragment;
    exports.Contract = Contract;
    exports.ContractEventPayload = ContractEventPayload;
    exports.ContractFactory = ContractFactory;
    exports.ContractTransactionReceipt = ContractTransactionReceipt;
    exports.ContractTransactionResponse = ContractTransactionResponse;
    exports.ContractUnknownEventPayload = ContractUnknownEventPayload;
    exports.EnsPlugin = EnsPlugin;
    exports.EnsResolver = EnsResolver;
    exports.ErrorDescription = ErrorDescription;
    exports.ErrorFragment = ErrorFragment;
    exports.EtherSymbol = EtherSymbol;
    exports.EtherscanPlugin = EtherscanPlugin;
    exports.EtherscanProvider = EtherscanProvider;
    exports.EventFragment = EventFragment;
    exports.EventLog = EventLog;
    exports.EventPayload = EventPayload;
    exports.FallbackFragment = FallbackFragment;
    exports.FallbackProvider = FallbackProvider;
    exports.FeeData = FeeData;
    exports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
    exports.FetchCancelSignal = FetchCancelSignal;
    exports.FetchRequest = FetchRequest;
    exports.FetchResponse = FetchResponse;
    exports.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
    exports.FixedNumber = FixedNumber;
    exports.Fragment = Fragment;
    exports.FunctionFragment = FunctionFragment;
    exports.GasCostPlugin = GasCostPlugin;
    exports.HDNodeVoidWallet = HDNodeVoidWallet;
    exports.HDNodeWallet = HDNodeWallet;
    exports.Indexed = Indexed;
    exports.InfuraProvider = InfuraProvider;
    exports.InfuraWebSocketProvider = InfuraWebSocketProvider;
    exports.Interface = Interface;
    exports.IpcSocketProvider = IpcSocketProvider;
    exports.JsonRpcApiProvider = JsonRpcApiProvider;
    exports.JsonRpcProvider = JsonRpcProvider;
    exports.JsonRpcSigner = JsonRpcSigner;
    exports.LangEn = LangEn;
    exports.Log = Log;
    exports.LogDescription = LogDescription;
    exports.MaxInt256 = MaxInt256;
    exports.MaxUint256 = MaxUint256;
    exports.MessagePrefix = MessagePrefix;
    exports.MinInt256 = MinInt256;
    exports.Mnemonic = Mnemonic;
    exports.MulticoinProviderPlugin = MulticoinProviderPlugin;
    exports.N = N$1;
    exports.NamedFragment = NamedFragment;
    exports.Network = Network;
    exports.NetworkPlugin = NetworkPlugin;
    exports.NonceManager = NonceManager;
    exports.ParamType = ParamType;
    exports.PocketProvider = PocketProvider;
    exports.QuickNodeProvider = QuickNodeProvider;
    exports.Result = Result;
    exports.Signature = Signature;
    exports.SigningKey = SigningKey;
    exports.SocketBlockSubscriber = SocketBlockSubscriber;
    exports.SocketEventSubscriber = SocketEventSubscriber;
    exports.SocketPendingSubscriber = SocketPendingSubscriber;
    exports.SocketProvider = SocketProvider;
    exports.SocketSubscriber = SocketSubscriber;
    exports.StructFragment = StructFragment;
    exports.Transaction = Transaction;
    exports.TransactionDescription = TransactionDescription;
    exports.TransactionReceipt = TransactionReceipt;
    exports.TransactionResponse = TransactionResponse;
    exports.Typed = Typed;
    exports.TypedDataEncoder = TypedDataEncoder;
    exports.UndecodedEventLog = UndecodedEventLog;
    exports.UnmanagedSubscriber = UnmanagedSubscriber;
    exports.Utf8ErrorFuncs = Utf8ErrorFuncs;
    exports.VoidSigner = VoidSigner;
    exports.Wallet = Wallet;
    exports.WebSocketProvider = WebSocketProvider;
    exports.WeiPerEther = WeiPerEther;
    exports.Wordlist = Wordlist;
    exports.WordlistOwl = WordlistOwl;
    exports.WordlistOwlA = WordlistOwlA;
    exports.ZeroAddress = ZeroAddress;
    exports.ZeroHash = ZeroHash;
    exports.accessListify = accessListify;
    exports.assert = assert;
    exports.assertArgument = assertArgument;
    exports.assertArgumentCount = assertArgumentCount;
    exports.assertNormalize = assertNormalize;
    exports.assertPrivate = assertPrivate;
    exports.checkResultErrors = checkResultErrors;
    exports.computeAddress = computeAddress;
    exports.computeHmac = computeHmac;
    exports.concat = concat;
    exports.copyRequest = copyRequest;
    exports.dataLength = dataLength;
    exports.dataSlice = dataSlice;
    exports.decodeBase58 = decodeBase58;
    exports.decodeBase64 = decodeBase64;
    exports.decodeBytes32String = decodeBytes32String;
    exports.decodeRlp = decodeRlp;
    exports.decryptCrowdsaleJson = decryptCrowdsaleJson;
    exports.decryptKeystoreJson = decryptKeystoreJson;
    exports.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
    exports.defaultPath = defaultPath;
    exports.defineProperties = defineProperties;
    exports.dnsEncode = dnsEncode;
    exports.encodeBase58 = encodeBase58;
    exports.encodeBase64 = encodeBase64;
    exports.encodeBytes32String = encodeBytes32String;
    exports.encodeRlp = encodeRlp;
    exports.encryptKeystoreJson = encryptKeystoreJson;
    exports.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
    exports.ensNormalize = ensNormalize;
    exports.ethers = ethers;
    exports.formatEther = formatEther;
    exports.formatUnits = formatUnits;
    exports.fromTwos = fromTwos;
    exports.getAccountPath = getAccountPath;
    exports.getAddress = getAddress;
    exports.getBigInt = getBigInt;
    exports.getBytes = getBytes;
    exports.getBytesCopy = getBytesCopy;
    exports.getCreate2Address = getCreate2Address;
    exports.getCreateAddress = getCreateAddress;
    exports.getDefaultProvider = getDefaultProvider;
    exports.getIcapAddress = getIcapAddress;
    exports.getIndexedAccountPath = getIndexedAccountPath;
    exports.getNumber = getNumber;
    exports.getUint = getUint;
    exports.hashMessage = hashMessage;
    exports.hexlify = hexlify;
    exports.id = id;
    exports.isAddress = isAddress;
    exports.isAddressable = isAddressable;
    exports.isBytesLike = isBytesLike;
    exports.isCallException = isCallException;
    exports.isCrowdsaleJson = isCrowdsaleJson;
    exports.isError = isError;
    exports.isHexString = isHexString;
    exports.isKeystoreJson = isKeystoreJson;
    exports.isValidName = isValidName;
    exports.keccak256 = keccak256;
    exports.lock = lock;
    exports.makeError = makeError;
    exports.mask = mask;
    exports.namehash = namehash;
    exports.parseEther = parseEther;
    exports.parseUnits = parseUnits$1;
    exports.pbkdf2 = pbkdf2;
    exports.randomBytes = randomBytes;
    exports.recoverAddress = recoverAddress;
    exports.resolveAddress = resolveAddress;
    exports.resolveProperties = resolveProperties;
    exports.ripemd160 = ripemd160;
    exports.scrypt = scrypt;
    exports.scryptSync = scryptSync;
    exports.sha256 = sha256;
    exports.sha512 = sha512;
    exports.showThrottleMessage = showThrottleMessage;
    exports.solidityPacked = solidityPacked;
    exports.solidityPackedKeccak256 = solidityPackedKeccak256;
    exports.solidityPackedSha256 = solidityPackedSha256;
    exports.stripZerosLeft = stripZerosLeft;
    exports.toBeArray = toBeArray;
    exports.toBeHex = toBeHex;
    exports.toBigInt = toBigInt;
    exports.toNumber = toNumber;
    exports.toQuantity = toQuantity;
    exports.toTwos = toTwos;
    exports.toUtf8Bytes = toUtf8Bytes;
    exports.toUtf8CodePoints = toUtf8CodePoints;
    exports.toUtf8String = toUtf8String;
    exports.uuidV4 = uuidV4;
    exports.verifyMessage = verifyMessage;
    exports.verifyTypedData = verifyTypedData;
    exports.version = version;
    exports.wordlists = wordlists;
    exports.zeroPadBytes = zeroPadBytes;
    exports.zeroPadValue = zeroPadValue;

}));
=======
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ethers = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function getDefaultExportFromNamespaceIfPresent (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
	}

	function getDefaultExportFromNamespaceIfNotNamed (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
	}

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var bn = createCommonjsModule(function (module) {
	(function (module, exports) {
	  'use strict';

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = /*RicMoo:ethers:require(buffer)*/(null).Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out._strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) {
	      // No-op, we should not move anything at all
	    } else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})('object' === 'undefined' || module, commonjsGlobal);
	});

	var _version = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "logger/5.8.0";

	});

	var _version$1 = /*@__PURE__*/getDefaultExportFromCjs(_version);

	var lib = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Logger = exports.ErrorCode = exports.LogLevel = void 0;
	var _permanentCensorErrors = false;
	var _censorErrors = false;
	var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
	var _logLevel = LogLevels["default"];

	var _globalLogger = null;
	function _checkNormalize() {
	    try {
	        var missing_1 = [];
	        // Make sure all forms of normalization are supported
	        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
	            try {
	                if ("test".normalize(form) !== "test") {
	                    throw new Error("bad normalize");
	                }
	                ;
	            }
	            catch (error) {
	                missing_1.push(form);
	            }
	        });
	        if (missing_1.length) {
	            throw new Error("missing " + missing_1.join(", "));
	        }
	        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
	            throw new Error("broken implementation");
	        }
	    }
	    catch (error) {
	        return error.message;
	    }
	    return null;
	}
	var _normalizeError = _checkNormalize();
	var LogLevel;
	(function (LogLevel) {
	    LogLevel["DEBUG"] = "DEBUG";
	    LogLevel["INFO"] = "INFO";
	    LogLevel["WARNING"] = "WARNING";
	    LogLevel["ERROR"] = "ERROR";
	    LogLevel["OFF"] = "OFF";
	})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
	var ErrorCode;
	(function (ErrorCode) {
	    ///////////////////
	    // Generic Errors
	    // Unknown Error
	    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
	    // Not Implemented
	    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
	    // Unsupported Operation
	    //   - operation
	    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
	    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
	    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
	    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
	    // Some sort of bad response from the server
	    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
	    // Timeout
	    ErrorCode["TIMEOUT"] = "TIMEOUT";
	    ///////////////////
	    // Operational  Errors
	    // Buffer Overrun
	    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
	    // Numeric Fault
	    //   - operation: the operation being executed
	    //   - fault: the reason this faulted
	    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
	    ///////////////////
	    // Argument Errors
	    // Missing new operator to an object
	    //  - name: The name of the class
	    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
	    // Invalid argument (e.g. value is incompatible with type) to a function:
	    //   - argument: The argument name that was invalid
	    //   - value: The value of the argument
	    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
	    // Missing argument to a function:
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
	    // Too many arguments
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
	    ///////////////////
	    // Blockchain Errors
	    // Call exception
	    //  - transaction: the transaction
	    //  - address?: the contract address
	    //  - args?: The arguments passed into the function
	    //  - method?: The Solidity method signature
	    //  - errorSignature?: The EIP848 error signature
	    //  - errorArgs?: The EIP848 error parameters
	    //  - reason: The reason (only for EIP848 "Error(string)")
	    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
	    // Insufficient funds (< value + gasLimit * gasPrice)
	    //   - transaction: the transaction attempted
	    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
	    // Nonce has already been used
	    //   - transaction: the transaction attempted
	    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
	    // The replacement fee for the transaction is too low
	    //   - transaction: the transaction attempted
	    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
	    // The gas limit could not be estimated
	    //   - transaction: the transaction passed to estimateGas
	    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
	    // The transaction was replaced by one with a higher gas price
	    //   - reason: "cancelled", "replaced" or "repriced"
	    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
	    //   - hash: original transaction hash
	    //   - replacement: the full TransactionsResponse for the replacement
	    //   - receipt: the receipt of the replacement
	    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
	    ///////////////////
	    // Interaction Errors
	    // The user rejected the action, such as signing a message or sending
	    // a transaction
	    ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
	})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
	;
	var HEX = "0123456789abcdef";
	var Logger = /** @class */ (function () {
	    function Logger(version) {
	        Object.defineProperty(this, "version", {
	            enumerable: true,
	            value: version,
	            writable: false
	        });
	    }
	    Logger.prototype._log = function (logLevel, args) {
	        var level = logLevel.toLowerCase();
	        if (LogLevels[level] == null) {
	            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
	        }
	        if (_logLevel > LogLevels[level]) {
	            return;
	        }
	        console.log.apply(console, args);
	    };
	    Logger.prototype.debug = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._log(Logger.levels.DEBUG, args);
	    };
	    Logger.prototype.info = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._log(Logger.levels.INFO, args);
	    };
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._log(Logger.levels.WARNING, args);
	    };
	    Logger.prototype.makeError = function (message, code, params) {
	        // Errors are being censored
	        if (_censorErrors) {
	            return this.makeError("censored error", code, {});
	        }
	        if (!code) {
	            code = Logger.errors.UNKNOWN_ERROR;
	        }
	        if (!params) {
	            params = {};
	        }
	        var messageDetails = [];
	        Object.keys(params).forEach(function (key) {
	            var value = params[key];
	            try {
	                if (value instanceof Uint8Array) {
	                    var hex = "";
	                    for (var i = 0; i < value.length; i++) {
	                        hex += HEX[value[i] >> 4];
	                        hex += HEX[value[i] & 0x0f];
	                    }
	                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
	                }
	                else {
	                    messageDetails.push(key + "=" + JSON.stringify(value));
	                }
	            }
	            catch (error) {
	                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
	            }
	        });
	        messageDetails.push("code=" + code);
	        messageDetails.push("version=" + this.version);
	        var reason = message;
	        var url = "";
	        switch (code) {
	            case ErrorCode.NUMERIC_FAULT: {
	                url = "NUMERIC_FAULT";
	                var fault = message;
	                switch (fault) {
	                    case "overflow":
	                    case "underflow":
	                    case "division-by-zero":
	                        url += "-" + fault;
	                        break;
	                    case "negative-power":
	                    case "negative-width":
	                        url += "-unsupported";
	                        break;
	                    case "unbound-bitwise-result":
	                        url += "-unbound-result";
	                        break;
	                }
	                break;
	            }
	            case ErrorCode.CALL_EXCEPTION:
	            case ErrorCode.INSUFFICIENT_FUNDS:
	            case ErrorCode.MISSING_NEW:
	            case ErrorCode.NONCE_EXPIRED:
	            case ErrorCode.REPLACEMENT_UNDERPRICED:
	            case ErrorCode.TRANSACTION_REPLACED:
	            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
	                url = code;
	                break;
	        }
	        if (url) {
	            message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
	        }
	        if (messageDetails.length) {
	            message += " (" + messageDetails.join(", ") + ")";
	        }
	        // @TODO: Any??
	        var error = new Error(message);
	        error.reason = reason;
	        error.code = code;
	        Object.keys(params).forEach(function (key) {
	            error[key] = params[key];
	        });
	        return error;
	    };
	    Logger.prototype.throwError = function (message, code, params) {
	        throw this.makeError(message, code, params);
	    };
	    Logger.prototype.throwArgumentError = function (message, name, value) {
	        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
	            argument: name,
	            value: value
	        });
	    };
	    Logger.prototype.assert = function (condition, message, code, params) {
	        if (!!condition) {
	            return;
	        }
	        this.throwError(message, code, params);
	    };
	    Logger.prototype.assertArgument = function (condition, message, name, value) {
	        if (!!condition) {
	            return;
	        }
	        this.throwArgumentError(message, name, value);
	    };
	    Logger.prototype.checkNormalize = function (message) {
	        if (message == null) {
	            message = "platform missing String.prototype.normalize";
	        }
	        if (_normalizeError) {
	            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "String.prototype.normalize", form: _normalizeError
	            });
	        }
	    };
	    Logger.prototype.checkSafeUint53 = function (value, message) {
	        if (typeof (value) !== "number") {
	            return;
	        }
	        if (message == null) {
	            message = "value not safe";
	        }
	        if (value < 0 || value >= 0x1fffffffffffff) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "out-of-safe-range",
	                value: value
	            });
	        }
	        if (value % 1) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "non-integer",
	                value: value
	            });
	        }
	    };
	    Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {
	        if (message) {
	            message = ": " + message;
	        }
	        else {
	            message = "";
	        }
	        if (count < expectedCount) {
	            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	        if (count > expectedCount) {
	            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	    };
	    Logger.prototype.checkNew = function (target, kind) {
	        if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    };
	    Logger.prototype.checkAbstract = function (target, kind) {
	        if (target === kind) {
	            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
	        }
	        else if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    };
	    Logger.globalLogger = function () {
	        if (!_globalLogger) {
	            _globalLogger = new Logger(_version.version);
	        }
	        return _globalLogger;
	    };
	    Logger.setCensorship = function (censorship, permanent) {
	        if (!censorship && permanent) {
	            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        if (_permanentCensorErrors) {
	            if (!censorship) {
	                return;
	            }
	            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        _censorErrors = !!censorship;
	        _permanentCensorErrors = !!permanent;
	    };
	    Logger.setLogLevel = function (logLevel) {
	        var level = LogLevels[logLevel.toLowerCase()];
	        if (level == null) {
	            Logger.globalLogger().warn("invalid log level - " + logLevel);
	            return;
	        }
	        _logLevel = level;
	    };
	    Logger.from = function (version) {
	        return new Logger(version);
	    };
	    Logger.errors = ErrorCode;
	    Logger.levels = LogLevel;
	    return Logger;
	}());
	exports.Logger = Logger;

	});

	var index = /*@__PURE__*/getDefaultExportFromCjs(lib);

	var _version$2 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "bytes/5.8.0";

	});

	var _version$3 = /*@__PURE__*/getDefaultExportFromCjs(_version$2);

	var lib$1 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.joinSignature = exports.splitSignature = exports.hexZeroPad = exports.hexStripZeros = exports.hexValue = exports.hexConcat = exports.hexDataSlice = exports.hexDataLength = exports.hexlify = exports.isHexString = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.isBytes = exports.isBytesLike = void 0;


	var logger = new lib.Logger(_version$2.version);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	function addSlice(array) {
	    if (array.slice) {
	        return array;
	    }
	    array.slice = function () {
	        var args = Array.prototype.slice.call(arguments);
	        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
	    };
	    return array;
	}
	function isBytesLike(value) {
	    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
	}
	exports.isBytesLike = isBytesLike;
	function isInteger(value) {
	    return (typeof (value) === "number" && value == value && (value % 1) === 0);
	}
	function isBytes(value) {
	    if (value == null) {
	        return false;
	    }
	    if (value.constructor === Uint8Array) {
	        return true;
	    }
	    if (typeof (value) === "string") {
	        return false;
	    }
	    if (!isInteger(value.length) || value.length < 0) {
	        return false;
	    }
	    for (var i = 0; i < value.length; i++) {
	        var v = value[i];
	        if (!isInteger(v) || v < 0 || v >= 256) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.isBytes = isBytes;
	function arrayify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger.checkSafeUint53(value, "invalid arrayify value");
	        var result = [];
	        while (value) {
	            result.unshift(value & 0xff);
	            value = parseInt(String(value / 256));
	        }
	        if (result.length === 0) {
	            result.push(0);
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        value = value.toHexString();
	    }
	    if (isHexString(value)) {
	        var hex = value.substring(2);
	        if (hex.length % 2) {
	            if (options.hexPad === "left") {
	                hex = "0" + hex;
	            }
	            else if (options.hexPad === "right") {
	                hex += "0";
	            }
	            else {
	                logger.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        var result = [];
	        for (var i = 0; i < hex.length; i += 2) {
	            result.push(parseInt(hex.substring(i, i + 2), 16));
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (isBytes(value)) {
	        return addSlice(new Uint8Array(value));
	    }
	    return logger.throwArgumentError("invalid arrayify value", "value", value);
	}
	exports.arrayify = arrayify;
	function concat(items) {
	    var objects = items.map(function (item) { return arrayify(item); });
	    var length = objects.reduce(function (accum, item) { return (accum + item.length); }, 0);
	    var result = new Uint8Array(length);
	    objects.reduce(function (offset, object) {
	        result.set(object, offset);
	        return offset + object.length;
	    }, 0);
	    return addSlice(result);
	}
	exports.concat = concat;
	function stripZeros(value) {
	    var result = arrayify(value);
	    if (result.length === 0) {
	        return result;
	    }
	    // Find the first non-zero entry
	    var start = 0;
	    while (start < result.length && result[start] === 0) {
	        start++;
	    }
	    // If we started with zeros, strip them
	    if (start) {
	        result = result.slice(start);
	    }
	    return result;
	}
	exports.stripZeros = stripZeros;
	function zeroPad(value, length) {
	    value = arrayify(value);
	    if (value.length > length) {
	        logger.throwArgumentError("value out of range", "value", arguments[0]);
	    }
	    var result = new Uint8Array(length);
	    result.set(value, length - value.length);
	    return addSlice(result);
	}
	exports.zeroPad = zeroPad;
	function isHexString(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	exports.isHexString = isHexString;
	var HexCharacters = "0123456789abcdef";
	function hexlify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger.checkSafeUint53(value, "invalid hexlify value");
	        var hex = "";
	        while (value) {
	            hex = HexCharacters[value & 0xf] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = "0" + hex;
	            }
	            return "0x" + hex;
	        }
	        return "0x00";
	    }
	    if (typeof (value) === "bigint") {
	        value = value.toString(16);
	        if (value.length % 2) {
	            return ("0x0" + value);
	        }
	        return "0x" + value;
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (isHexString(value)) {
	        if (value.length % 2) {
	            if (options.hexPad === "left") {
	                value = "0x0" + value.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                value += "0";
	            }
	            else {
	                logger.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        return value.toLowerCase();
	    }
	    if (isBytes(value)) {
	        var result = "0x";
	        for (var i = 0; i < value.length; i++) {
	            var v = value[i];
	            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	        }
	        return result;
	    }
	    return logger.throwArgumentError("invalid hexlify value", "value", value);
	}
	exports.hexlify = hexlify;
	/*
	function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
	    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
	        return "0x0" + value.substring(2);
	    }
	    return value;
	}
	*/
	function hexDataLength(data) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString(data) || (data.length % 2)) {
	        return null;
	    }
	    return (data.length - 2) / 2;
	}
	exports.hexDataLength = hexDataLength;
	function hexDataSlice(data, offset, endOffset) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString(data) || (data.length % 2)) {
	        logger.throwArgumentError("invalid hexData", "value", data);
	    }
	    offset = 2 + 2 * offset;
	    if (endOffset != null) {
	        return "0x" + data.substring(offset, 2 + 2 * endOffset);
	    }
	    return "0x" + data.substring(offset);
	}
	exports.hexDataSlice = hexDataSlice;
	function hexConcat(items) {
	    var result = "0x";
	    items.forEach(function (item) {
	        result += hexlify(item).substring(2);
	    });
	    return result;
	}
	exports.hexConcat = hexConcat;
	function hexValue(value) {
	    var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
	    if (trimmed === "0x") {
	        return "0x0";
	    }
	    return trimmed;
	}
	exports.hexValue = hexValue;
	function hexStripZeros(value) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    if (!isHexString(value)) {
	        logger.throwArgumentError("invalid hex string", "value", value);
	    }
	    value = value.substring(2);
	    var offset = 0;
	    while (offset < value.length && value[offset] === "0") {
	        offset++;
	    }
	    return "0x" + value.substring(offset);
	}
	exports.hexStripZeros = hexStripZeros;
	function hexZeroPad(value, length) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    else if (!isHexString(value)) {
	        logger.throwArgumentError("invalid hex string", "value", value);
	    }
	    if (value.length > 2 * length + 2) {
	        logger.throwArgumentError("value out of range", "value", arguments[1]);
	    }
	    while (value.length < 2 * length + 2) {
	        value = "0x0" + value.substring(2);
	    }
	    return value;
	}
	exports.hexZeroPad = hexZeroPad;
	function splitSignature(signature) {
	    var result = {
	        r: "0x",
	        s: "0x",
	        _vs: "0x",
	        recoveryParam: 0,
	        v: 0,
	        yParityAndS: "0x",
	        compact: "0x"
	    };
	    if (isBytesLike(signature)) {
	        var bytes = arrayify(signature);
	        // Get the r, s and v
	        if (bytes.length === 64) {
	            // EIP-2098; pull the v from the top bit of s and clear it
	            result.v = 27 + (bytes[32] >> 7);
	            bytes[32] &= 0x7f;
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	        }
	        else if (bytes.length === 65) {
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	            result.v = bytes[64];
	        }
	        else {
	            logger.throwArgumentError("invalid signature string", "signature", signature);
	        }
	        // Allow a recid to be used as the v
	        if (result.v < 27) {
	            if (result.v === 0 || result.v === 1) {
	                result.v += 27;
	            }
	            else {
	                logger.throwArgumentError("signature invalid v byte", "signature", signature);
	            }
	        }
	        // Compute recoveryParam from v
	        result.recoveryParam = 1 - (result.v % 2);
	        // Compute _vs from recoveryParam and s
	        if (result.recoveryParam) {
	            bytes[32] |= 0x80;
	        }
	        result._vs = hexlify(bytes.slice(32, 64));
	    }
	    else {
	        result.r = signature.r;
	        result.s = signature.s;
	        result.v = signature.v;
	        result.recoveryParam = signature.recoveryParam;
	        result._vs = signature._vs;
	        // If the _vs is available, use it to populate missing s, v and recoveryParam
	        // and verify non-missing s, v and recoveryParam
	        if (result._vs != null) {
	            var vs_1 = zeroPad(arrayify(result._vs), 32);
	            result._vs = hexlify(vs_1);
	            // Set or check the recid
	            var recoveryParam = ((vs_1[0] >= 128) ? 1 : 0);
	            if (result.recoveryParam == null) {
	                result.recoveryParam = recoveryParam;
	            }
	            else if (result.recoveryParam !== recoveryParam) {
	                logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
	            }
	            // Set or check the s
	            vs_1[0] &= 0x7f;
	            var s = hexlify(vs_1);
	            if (result.s == null) {
	                result.s = s;
	            }
	            else if (result.s !== s) {
	                logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
	            }
	        }
	        // Use recid and v to populate each other
	        if (result.recoveryParam == null) {
	            if (result.v == null) {
	                logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
	            }
	            else if (result.v === 0 || result.v === 1) {
	                result.recoveryParam = result.v;
	            }
	            else {
	                result.recoveryParam = 1 - (result.v % 2);
	            }
	        }
	        else {
	            if (result.v == null) {
	                result.v = 27 + result.recoveryParam;
	            }
	            else {
	                var recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
	                if (result.recoveryParam !== recId) {
	                    logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
	                }
	            }
	        }
	        if (result.r == null || !isHexString(result.r)) {
	            logger.throwArgumentError("signature missing or invalid r", "signature", signature);
	        }
	        else {
	            result.r = hexZeroPad(result.r, 32);
	        }
	        if (result.s == null || !isHexString(result.s)) {
	            logger.throwArgumentError("signature missing or invalid s", "signature", signature);
	        }
	        else {
	            result.s = hexZeroPad(result.s, 32);
	        }
	        var vs = arrayify(result.s);
	        if (vs[0] >= 128) {
	            logger.throwArgumentError("signature s out of range", "signature", signature);
	        }
	        if (result.recoveryParam) {
	            vs[0] |= 0x80;
	        }
	        var _vs = hexlify(vs);
	        if (result._vs) {
	            if (!isHexString(result._vs)) {
	                logger.throwArgumentError("signature invalid _vs", "signature", signature);
	            }
	            result._vs = hexZeroPad(result._vs, 32);
	        }
	        // Set or check the _vs
	        if (result._vs == null) {
	            result._vs = _vs;
	        }
	        else if (result._vs !== _vs) {
	            logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
	        }
	    }
	    result.yParityAndS = result._vs;
	    result.compact = result.r + result.yParityAndS.substring(2);
	    return result;
	}
	exports.splitSignature = splitSignature;
	function joinSignature(signature) {
	    signature = splitSignature(signature);
	    return hexlify(concat([
	        signature.r,
	        signature.s,
	        (signature.recoveryParam ? "0x1c" : "0x1b")
	    ]));
	}
	exports.joinSignature = joinSignature;

	});

	var index$1 = /*@__PURE__*/getDefaultExportFromCjs(lib$1);

	var _version$4 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "bignumber/5.8.0";

	});

	var _version$5 = /*@__PURE__*/getDefaultExportFromCjs(_version$4);

	var bignumber = createCommonjsModule(function (module, exports) {
	"use strict";
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;
	/**
	 *  BigNumber
	 *
	 *  A wrapper around the BN.js object. We use the BN.js library
	 *  because it is used by elliptic, so it is required regardless.
	 *
	 */
	var bn_js_1 = __importDefault(bn);
	var BN = bn_js_1.default.BN;



	var logger = new lib.Logger(_version$4.version);
	var _constructorGuard = {};
	var MAX_SAFE = 0x1fffffffffffff;
	function isBigNumberish(value) {
	    return (value != null) && (BigNumber.isBigNumber(value) ||
	        (typeof (value) === "number" && (value % 1) === 0) ||
	        (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
	        (0, lib$1.isHexString)(value) ||
	        (typeof (value) === "bigint") ||
	        (0, lib$1.isBytes)(value));
	}
	exports.isBigNumberish = isBigNumberish;
	// Only warn about passing 10 into radix once
	var _warnedToStringRadix = false;
	var BigNumber = /** @class */ (function () {
	    function BigNumber(constructorGuard, hex) {
	        if (constructorGuard !== _constructorGuard) {
	            logger.throwError("cannot call constructor directly; use BigNumber.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new (BigNumber)"
	            });
	        }
	        this._hex = hex;
	        this._isBigNumber = true;
	        Object.freeze(this);
	    }
	    BigNumber.prototype.fromTwos = function (value) {
	        return toBigNumber(toBN(this).fromTwos(value));
	    };
	    BigNumber.prototype.toTwos = function (value) {
	        return toBigNumber(toBN(this).toTwos(value));
	    };
	    BigNumber.prototype.abs = function () {
	        if (this._hex[0] === "-") {
	            return BigNumber.from(this._hex.substring(1));
	        }
	        return this;
	    };
	    BigNumber.prototype.add = function (other) {
	        return toBigNumber(toBN(this).add(toBN(other)));
	    };
	    BigNumber.prototype.sub = function (other) {
	        return toBigNumber(toBN(this).sub(toBN(other)));
	    };
	    BigNumber.prototype.div = function (other) {
	        var o = BigNumber.from(other);
	        if (o.isZero()) {
	            throwFault("division-by-zero", "div");
	        }
	        return toBigNumber(toBN(this).div(toBN(other)));
	    };
	    BigNumber.prototype.mul = function (other) {
	        return toBigNumber(toBN(this).mul(toBN(other)));
	    };
	    BigNumber.prototype.mod = function (other) {
	        var value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("division-by-zero", "mod");
	        }
	        return toBigNumber(toBN(this).umod(value));
	    };
	    BigNumber.prototype.pow = function (other) {
	        var value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("negative-power", "pow");
	        }
	        return toBigNumber(toBN(this).pow(value));
	    };
	    BigNumber.prototype.and = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("unbound-bitwise-result", "and");
	        }
	        return toBigNumber(toBN(this).and(value));
	    };
	    BigNumber.prototype.or = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("unbound-bitwise-result", "or");
	        }
	        return toBigNumber(toBN(this).or(value));
	    };
	    BigNumber.prototype.xor = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("unbound-bitwise-result", "xor");
	        }
	        return toBigNumber(toBN(this).xor(value));
	    };
	    BigNumber.prototype.mask = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("negative-width", "mask");
	        }
	        return toBigNumber(toBN(this).maskn(value));
	    };
	    BigNumber.prototype.shl = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("negative-width", "shl");
	        }
	        return toBigNumber(toBN(this).shln(value));
	    };
	    BigNumber.prototype.shr = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("negative-width", "shr");
	        }
	        return toBigNumber(toBN(this).shrn(value));
	    };
	    BigNumber.prototype.eq = function (other) {
	        return toBN(this).eq(toBN(other));
	    };
	    BigNumber.prototype.lt = function (other) {
	        return toBN(this).lt(toBN(other));
	    };
	    BigNumber.prototype.lte = function (other) {
	        return toBN(this).lte(toBN(other));
	    };
	    BigNumber.prototype.gt = function (other) {
	        return toBN(this).gt(toBN(other));
	    };
	    BigNumber.prototype.gte = function (other) {
	        return toBN(this).gte(toBN(other));
	    };
	    BigNumber.prototype.isNegative = function () {
	        return (this._hex[0] === "-");
	    };
	    BigNumber.prototype.isZero = function () {
	        return toBN(this).isZero();
	    };
	    BigNumber.prototype.toNumber = function () {
	        try {
	            return toBN(this).toNumber();
	        }
	        catch (error) {
	            throwFault("overflow", "toNumber", this.toString());
	        }
	        return null;
	    };
	    BigNumber.prototype.toBigInt = function () {
	        try {
	            return BigInt(this.toString());
	        }
	        catch (e) { }
	        return logger.throwError("this platform does not support BigInt", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            value: this.toString()
	        });
	    };
	    BigNumber.prototype.toString = function () {
	        // Lots of people expect this, which we do not support, so check (See: #889)
	        if (arguments.length > 0) {
	            if (arguments[0] === 10) {
	                if (!_warnedToStringRadix) {
	                    _warnedToStringRadix = true;
	                    logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
	                }
	            }
	            else if (arguments[0] === 16) {
	                logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	            else {
	                logger.throwError("BigNumber.toString does not accept parameters", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	        }
	        return toBN(this).toString(10);
	    };
	    BigNumber.prototype.toHexString = function () {
	        return this._hex;
	    };
	    BigNumber.prototype.toJSON = function (key) {
	        return { type: "BigNumber", hex: this.toHexString() };
	    };
	    BigNumber.from = function (value) {
	        if (value instanceof BigNumber) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            if (value.match(/^-?0x[0-9a-f]+$/i)) {
	                return new BigNumber(_constructorGuard, toHex(value));
	            }
	            if (value.match(/^-?[0-9]+$/)) {
	                return new BigNumber(_constructorGuard, toHex(new BN(value)));
	            }
	            return logger.throwArgumentError("invalid BigNumber string", "value", value);
	        }
	        if (typeof (value) === "number") {
	            if (value % 1) {
	                throwFault("underflow", "BigNumber.from", value);
	            }
	            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
	                throwFault("overflow", "BigNumber.from", value);
	            }
	            return BigNumber.from(String(value));
	        }
	        var anyValue = value;
	        if (typeof (anyValue) === "bigint") {
	            return BigNumber.from(anyValue.toString());
	        }
	        if ((0, lib$1.isBytes)(anyValue)) {
	            return BigNumber.from((0, lib$1.hexlify)(anyValue));
	        }
	        if (anyValue) {
	            // Hexable interface (takes priority)
	            if (anyValue.toHexString) {
	                var hex = anyValue.toHexString();
	                if (typeof (hex) === "string") {
	                    return BigNumber.from(hex);
	                }
	            }
	            else {
	                // For now, handle legacy JSON-ified values (goes away in v6)
	                var hex = anyValue._hex;
	                // New-form JSON
	                if (hex == null && anyValue.type === "BigNumber") {
	                    hex = anyValue.hex;
	                }
	                if (typeof (hex) === "string") {
	                    if ((0, lib$1.isHexString)(hex) || (hex[0] === "-" && (0, lib$1.isHexString)(hex.substring(1)))) {
	                        return BigNumber.from(hex);
	                    }
	                }
	            }
	        }
	        return logger.throwArgumentError("invalid BigNumber value", "value", value);
	    };
	    BigNumber.isBigNumber = function (value) {
	        return !!(value && value._isBigNumber);
	    };
	    return BigNumber;
	}());
	exports.BigNumber = BigNumber;
	// Normalize the hex string
	function toHex(value) {
	    // For BN, call on the hex string
	    if (typeof (value) !== "string") {
	        return toHex(value.toString(16));
	    }
	    // If negative, prepend the negative sign to the normalized positive value
	    if (value[0] === "-") {
	        // Strip off the negative sign
	        value = value.substring(1);
	        // Cannot have multiple negative signs (e.g. "--0x04")
	        if (value[0] === "-") {
	            logger.throwArgumentError("invalid hex", "value", value);
	        }
	        // Call toHex on the positive component
	        value = toHex(value);
	        // Do not allow "-0x00"
	        if (value === "0x00") {
	            return value;
	        }
	        // Negate the value
	        return "-" + value;
	    }
	    // Add a "0x" prefix if missing
	    if (value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    // Normalize zero
	    if (value === "0x") {
	        return "0x00";
	    }
	    // Make the string even length
	    if (value.length % 2) {
	        value = "0x0" + value.substring(2);
	    }
	    // Trim to smallest even-length string
	    while (value.length > 4 && value.substring(0, 4) === "0x00") {
	        value = "0x" + value.substring(4);
	    }
	    return value;
	}
	function toBigNumber(value) {
	    return BigNumber.from(toHex(value));
	}
	function toBN(value) {
	    var hex = BigNumber.from(value).toHexString();
	    if (hex[0] === "-") {
	        return (new BN("-" + hex.substring(3), 16));
	    }
	    return new BN(hex.substring(2), 16);
	}
	function throwFault(fault, operation, value) {
	    var params = { fault: fault, operation: operation };
	    if (value != null) {
	        params.value = value;
	    }
	    return logger.throwError(fault, lib.Logger.errors.NUMERIC_FAULT, params);
	}
	// value should have no prefix
	function _base36To16(value) {
	    return (new BN(value, 36)).toString(16);
	}
	exports._base36To16 = _base36To16;
	// value should have no prefix
	function _base16To36(value) {
	    return (new BN(value, 16)).toString(36);
	}
	exports._base16To36 = _base16To36;

	});

	var bignumber$1 = /*@__PURE__*/getDefaultExportFromCjs(bignumber);

	var fixednumber = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;



	var logger = new lib.Logger(_version$4.version);

	var _constructorGuard = {};
	var Zero = bignumber.BigNumber.from(0);
	var NegativeOne = bignumber.BigNumber.from(-1);
	function throwFault(message, fault, operation, value) {
	    var params = { fault: fault, operation: operation };
	    if (value !== undefined) {
	        params.value = value;
	    }
	    return logger.throwError(message, lib.Logger.errors.NUMERIC_FAULT, params);
	}
	// Constant to pull zeros from for multipliers
	var zeros = "0";
	while (zeros.length < 256) {
	    zeros += zeros;
	}
	// Returns a string "1" followed by decimal "0"s
	function getMultiplier(decimals) {
	    if (typeof (decimals) !== "number") {
	        try {
	            decimals = bignumber.BigNumber.from(decimals).toNumber();
	        }
	        catch (e) { }
	    }
	    if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
	        return ("1" + zeros.substring(0, decimals));
	    }
	    return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
	}
	function formatFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    var multiplier = getMultiplier(decimals);
	    // Make sure wei is a big number (convert as necessary)
	    value = bignumber.BigNumber.from(value);
	    var negative = value.lt(Zero);
	    if (negative) {
	        value = value.mul(NegativeOne);
	    }
	    var fraction = value.mod(multiplier).toString();
	    while (fraction.length < multiplier.length - 1) {
	        fraction = "0" + fraction;
	    }
	    // Strip training 0
	    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
	    var whole = value.div(multiplier).toString();
	    if (multiplier.length === 1) {
	        value = whole;
	    }
	    else {
	        value = whole + "." + fraction;
	    }
	    if (negative) {
	        value = "-" + value;
	    }
	    return value;
	}
	exports.formatFixed = formatFixed;
	function parseFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    var multiplier = getMultiplier(decimals);
	    if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
	        logger.throwArgumentError("invalid decimal value", "value", value);
	    }
	    // Is it negative?
	    var negative = (value.substring(0, 1) === "-");
	    if (negative) {
	        value = value.substring(1);
	    }
	    if (value === ".") {
	        logger.throwArgumentError("missing value", "value", value);
	    }
	    // Split it into a whole and fractional part
	    var comps = value.split(".");
	    if (comps.length > 2) {
	        logger.throwArgumentError("too many decimal points", "value", value);
	    }
	    var whole = comps[0], fraction = comps[1];
	    if (!whole) {
	        whole = "0";
	    }
	    if (!fraction) {
	        fraction = "0";
	    }
	    // Trim trailing zeros
	    while (fraction[fraction.length - 1] === "0") {
	        fraction = fraction.substring(0, fraction.length - 1);
	    }
	    // Check the fraction doesn't exceed our decimals size
	    if (fraction.length > multiplier.length - 1) {
	        throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
	    }
	    // If decimals is 0, we have an empty string for fraction
	    if (fraction === "") {
	        fraction = "0";
	    }
	    // Fully pad the string with zeros to get to wei
	    while (fraction.length < multiplier.length - 1) {
	        fraction += "0";
	    }
	    var wholeValue = bignumber.BigNumber.from(whole);
	    var fractionValue = bignumber.BigNumber.from(fraction);
	    var wei = (wholeValue.mul(multiplier)).add(fractionValue);
	    if (negative) {
	        wei = wei.mul(NegativeOne);
	    }
	    return wei;
	}
	exports.parseFixed = parseFixed;
	var FixedFormat = /** @class */ (function () {
	    function FixedFormat(constructorGuard, signed, width, decimals) {
	        if (constructorGuard !== _constructorGuard) {
	            logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.signed = signed;
	        this.width = width;
	        this.decimals = decimals;
	        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
	        this._multiplier = getMultiplier(decimals);
	        Object.freeze(this);
	    }
	    FixedFormat.from = function (value) {
	        if (value instanceof FixedFormat) {
	            return value;
	        }
	        if (typeof (value) === "number") {
	            value = "fixed128x" + value;
	        }
	        var signed = true;
	        var width = 128;
	        var decimals = 18;
	        if (typeof (value) === "string") {
	            if (value === "fixed") {
	                // defaults...
	            }
	            else if (value === "ufixed") {
	                signed = false;
	            }
	            else {
	                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
	                if (!match) {
	                    logger.throwArgumentError("invalid fixed format", "format", value);
	                }
	                signed = (match[1] !== "u");
	                width = parseInt(match[2]);
	                decimals = parseInt(match[3]);
	            }
	        }
	        else if (value) {
	            var check = function (key, type, defaultValue) {
	                if (value[key] == null) {
	                    return defaultValue;
	                }
	                if (typeof (value[key]) !== type) {
	                    logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
	                }
	                return value[key];
	            };
	            signed = check("signed", "boolean", signed);
	            width = check("width", "number", width);
	            decimals = check("decimals", "number", decimals);
	        }
	        if (width % 8) {
	            logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
	        }
	        if (decimals > 80) {
	            logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
	        }
	        return new FixedFormat(_constructorGuard, signed, width, decimals);
	    };
	    return FixedFormat;
	}());
	exports.FixedFormat = FixedFormat;
	var FixedNumber = /** @class */ (function () {
	    function FixedNumber(constructorGuard, hex, value, format) {
	        if (constructorGuard !== _constructorGuard) {
	            logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.format = format;
	        this._hex = hex;
	        this._value = value;
	        this._isFixedNumber = true;
	        Object.freeze(this);
	    }
	    FixedNumber.prototype._checkFormat = function (other) {
	        if (this.format.name !== other.format.name) {
	            logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
	        }
	    };
	    FixedNumber.prototype.addUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.subUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.mulUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.divUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.floor = function () {
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        var result = FixedNumber.from(comps[0], this.format);
	        var hasFraction = !comps[1].match(/^(0*)$/);
	        if (this.isNegative() && hasFraction) {
	            result = result.subUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    };
	    FixedNumber.prototype.ceiling = function () {
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        var result = FixedNumber.from(comps[0], this.format);
	        var hasFraction = !comps[1].match(/^(0*)$/);
	        if (!this.isNegative() && hasFraction) {
	            result = result.addUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    };
	    // @TODO: Support other rounding algorithms
	    FixedNumber.prototype.round = function (decimals) {
	        if (decimals == null) {
	            decimals = 0;
	        }
	        // If we are already in range, we're done
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        if (decimals < 0 || decimals > 80 || (decimals % 1)) {
	            logger.throwArgumentError("invalid decimal count", "decimals", decimals);
	        }
	        if (comps[1].length <= decimals) {
	            return this;
	        }
	        var factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
	        var bump = BUMP.toFormat(this.format);
	        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
	    };
	    FixedNumber.prototype.isZero = function () {
	        return (this._value === "0.0" || this._value === "0");
	    };
	    FixedNumber.prototype.isNegative = function () {
	        return (this._value[0] === "-");
	    };
	    FixedNumber.prototype.toString = function () { return this._value; };
	    FixedNumber.prototype.toHexString = function (width) {
	        if (width == null) {
	            return this._hex;
	        }
	        if (width % 8) {
	            logger.throwArgumentError("invalid byte width", "width", width);
	        }
	        var hex = bignumber.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
	        return (0, lib$1.hexZeroPad)(hex, width / 8);
	    };
	    FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };
	    FixedNumber.prototype.toFormat = function (format) {
	        return FixedNumber.fromString(this._value, format);
	    };
	    FixedNumber.fromValue = function (value, decimals, format) {
	        // If decimals looks more like a format, and there is no format, shift the parameters
	        if (format == null && decimals != null && !(0, bignumber.isBigNumberish)(decimals)) {
	            format = decimals;
	            decimals = null;
	        }
	        if (decimals == null) {
	            decimals = 0;
	        }
	        if (format == null) {
	            format = "fixed";
	        }
	        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
	    };
	    FixedNumber.fromString = function (value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        var fixedFormat = FixedFormat.from(format);
	        var numeric = parseFixed(value, fixedFormat.decimals);
	        if (!fixedFormat.signed && numeric.lt(Zero)) {
	            throwFault("unsigned value cannot be negative", "overflow", "value", value);
	        }
	        var hex = null;
	        if (fixedFormat.signed) {
	            hex = numeric.toTwos(fixedFormat.width).toHexString();
	        }
	        else {
	            hex = numeric.toHexString();
	            hex = (0, lib$1.hexZeroPad)(hex, fixedFormat.width / 8);
	        }
	        var decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
	    };
	    FixedNumber.fromBytes = function (value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        var fixedFormat = FixedFormat.from(format);
	        if ((0, lib$1.arrayify)(value).length > fixedFormat.width / 8) {
	            throw new Error("overflow");
	        }
	        var numeric = bignumber.BigNumber.from(value);
	        if (fixedFormat.signed) {
	            numeric = numeric.fromTwos(fixedFormat.width);
	        }
	        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
	        var decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
	    };
	    FixedNumber.from = function (value, format) {
	        if (typeof (value) === "string") {
	            return FixedNumber.fromString(value, format);
	        }
	        if ((0, lib$1.isBytes)(value)) {
	            return FixedNumber.fromBytes(value, format);
	        }
	        try {
	            return FixedNumber.fromValue(value, 0, format);
	        }
	        catch (error) {
	            // Allow NUMERIC_FAULT to bubble up
	            if (error.code !== lib.Logger.errors.INVALID_ARGUMENT) {
	                throw error;
	            }
	        }
	        return logger.throwArgumentError("invalid FixedNumber value", "value", value);
	    };
	    FixedNumber.isFixedNumber = function (value) {
	        return !!(value && value._isFixedNumber);
	    };
	    return FixedNumber;
	}());
	exports.FixedNumber = FixedNumber;
	var ONE = FixedNumber.from(1);
	var BUMP = FixedNumber.from("0.5");

	});

	var fixednumber$1 = /*@__PURE__*/getDefaultExportFromCjs(fixednumber);

	var lib$2 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;

	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber.BigNumber; } });

	Object.defineProperty(exports, "formatFixed", { enumerable: true, get: function () { return fixednumber.formatFixed; } });
	Object.defineProperty(exports, "FixedFormat", { enumerable: true, get: function () { return fixednumber.FixedFormat; } });
	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return fixednumber.FixedNumber; } });
	Object.defineProperty(exports, "parseFixed", { enumerable: true, get: function () { return fixednumber.parseFixed; } });
	// Internal methods used by address
	var bignumber_2 = bignumber;
	Object.defineProperty(exports, "_base16To36", { enumerable: true, get: function () { return bignumber_2._base16To36; } });
	Object.defineProperty(exports, "_base36To16", { enumerable: true, get: function () { return bignumber_2._base36To16; } });

	});

	var index$2 = /*@__PURE__*/getDefaultExportFromCjs(lib$2);

	var _version$6 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "properties/5.8.0";

	});

	var _version$7 = /*@__PURE__*/getDefaultExportFromCjs(_version$6);

	var lib$3 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Description = exports.deepCopy = exports.shallowCopy = exports.checkProperties = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = void 0;


	var logger = new lib.Logger(_version$6.version);
	function defineReadOnly(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true,
	        value: value,
	        writable: false,
	    });
	}
	exports.defineReadOnly = defineReadOnly;
	// Crawl up the constructor chain to find a static method
	function getStatic(ctor, key) {
	    for (var i = 0; i < 32; i++) {
	        if (ctor[key]) {
	            return ctor[key];
	        }
	        if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
	            break;
	        }
	        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
	    }
	    return null;
	}
	exports.getStatic = getStatic;
	function resolveProperties(object) {
	    return __awaiter(this, void 0, void 0, function () {
	        var promises, results;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    promises = Object.keys(object).map(function (key) {
	                        var value = object[key];
	                        return Promise.resolve(value).then(function (v) { return ({ key: key, value: v }); });
	                    });
	                    return [4 /*yield*/, Promise.all(promises)];
	                case 1:
	                    results = _a.sent();
	                    return [2 /*return*/, results.reduce(function (accum, result) {
	                            accum[(result.key)] = result.value;
	                            return accum;
	                        }, {})];
	            }
	        });
	    });
	}
	exports.resolveProperties = resolveProperties;
	function checkProperties(object, properties) {
	    if (!object || typeof (object) !== "object") {
	        logger.throwArgumentError("invalid object", "object", object);
	    }
	    Object.keys(object).forEach(function (key) {
	        if (!properties[key]) {
	            logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
	        }
	    });
	}
	exports.checkProperties = checkProperties;
	function shallowCopy(object) {
	    var result = {};
	    for (var key in object) {
	        result[key] = object[key];
	    }
	    return result;
	}
	exports.shallowCopy = shallowCopy;
	var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
	function _isFrozen(object) {
	    // Opaque objects are not mutable, so safe to copy by assignment
	    if (object === undefined || object === null || opaque[typeof (object)]) {
	        return true;
	    }
	    if (Array.isArray(object) || typeof (object) === "object") {
	        if (!Object.isFrozen(object)) {
	            return false;
	        }
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var value = null;
	            try {
	                value = object[keys[i]];
	            }
	            catch (error) {
	                // If accessing a value triggers an error, it is a getter
	                // designed to do so (e.g. Result) and is therefore "frozen"
	                continue;
	            }
	            if (!_isFrozen(value)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return logger.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
	}
	// Returns a new copy of object, such that no properties may be replaced.
	// New properties may be added only to objects.
	function _deepCopy(object) {
	    if (_isFrozen(object)) {
	        return object;
	    }
	    // Arrays are mutable, so we need to create a copy
	    if (Array.isArray(object)) {
	        return Object.freeze(object.map(function (item) { return deepCopy(item); }));
	    }
	    if (typeof (object) === "object") {
	        var result = {};
	        for (var key in object) {
	            var value = object[key];
	            if (value === undefined) {
	                continue;
	            }
	            defineReadOnly(result, key, deepCopy(value));
	        }
	        return result;
	    }
	    return logger.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
	}
	function deepCopy(object) {
	    return _deepCopy(object);
	}
	exports.deepCopy = deepCopy;
	var Description = /** @class */ (function () {
	    function Description(info) {
	        for (var key in info) {
	            this[key] = deepCopy(info[key]);
	        }
	    }
	    return Description;
	}());
	exports.Description = Description;

	});

	var index$3 = /*@__PURE__*/getDefaultExportFromCjs(lib$3);

	var _version$8 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "abi/5.8.0";

	});

	var _version$9 = /*@__PURE__*/getDefaultExportFromCjs(_version$8);

	var fragments = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;




	var logger = new lib.Logger(_version$8.version);
	;
	var _constructorGuard = {};
	var ModifiersBytes = { calldata: true, memory: true, storage: true };
	var ModifiersNest = { calldata: true, memory: true };
	function checkModifier(type, name) {
	    if (type === "bytes" || type === "string") {
	        if (ModifiersBytes[name]) {
	            return true;
	        }
	    }
	    else if (type === "address") {
	        if (name === "payable") {
	            return true;
	        }
	    }
	    else if (type.indexOf("[") >= 0 || type === "tuple") {
	        if (ModifiersNest[name]) {
	            return true;
	        }
	    }
	    if (ModifiersBytes[name] || name === "payable") {
	        logger.throwArgumentError("invalid modifier", "name", name);
	    }
	    return false;
	}
	// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
	function parseParamType(param, allowIndexed) {
	    var originalParam = param;
	    function throwError(i) {
	        logger.throwArgumentError("unexpected character at position " + i, "param", param);
	    }
	    param = param.replace(/\s/g, " ");
	    function newNode(parent) {
	        var node = { type: "", name: "", parent: parent, state: { allowType: true } };
	        if (allowIndexed) {
	            node.indexed = false;
	        }
	        return node;
	    }
	    var parent = { type: "", name: "", state: { allowType: true } };
	    var node = parent;
	    for (var i = 0; i < param.length; i++) {
	        var c = param[i];
	        switch (c) {
	            case "(":
	                if (node.state.allowType && node.type === "") {
	                    node.type = "tuple";
	                }
	                else if (!node.state.allowParams) {
	                    throwError(i);
	                }
	                node.state.allowType = false;
	                node.type = verifyType(node.type);
	                node.components = [newNode(node)];
	                node = node.components[0];
	                break;
	            case ")":
	                delete node.state;
	                if (node.name === "indexed") {
	                    if (!allowIndexed) {
	                        throwError(i);
	                    }
	                    node.indexed = true;
	                    node.name = "";
	                }
	                if (checkModifier(node.type, node.name)) {
	                    node.name = "";
	                }
	                node.type = verifyType(node.type);
	                var child = node;
	                node = node.parent;
	                if (!node) {
	                    throwError(i);
	                }
	                delete child.parent;
	                node.state.allowParams = false;
	                node.state.allowName = true;
	                node.state.allowArray = true;
	                break;
	            case ",":
	                delete node.state;
	                if (node.name === "indexed") {
	                    if (!allowIndexed) {
	                        throwError(i);
	                    }
	                    node.indexed = true;
	                    node.name = "";
	                }
	                if (checkModifier(node.type, node.name)) {
	                    node.name = "";
	                }
	                node.type = verifyType(node.type);
	                var sibling = newNode(node.parent);
	                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
	                node.parent.components.push(sibling);
	                delete node.parent;
	                node = sibling;
	                break;
	            // Hit a space...
	            case " ":
	                // If reading type, the type is done and may read a param or name
	                if (node.state.allowType) {
	                    if (node.type !== "") {
	                        node.type = verifyType(node.type);
	                        delete node.state.allowType;
	                        node.state.allowName = true;
	                        node.state.allowParams = true;
	                    }
	                }
	                // If reading name, the name is done
	                if (node.state.allowName) {
	                    if (node.name !== "") {
	                        if (node.name === "indexed") {
	                            if (!allowIndexed) {
	                                throwError(i);
	                            }
	                            if (node.indexed) {
	                                throwError(i);
	                            }
	                            node.indexed = true;
	                            node.name = "";
	                        }
	                        else if (checkModifier(node.type, node.name)) {
	                            node.name = "";
	                        }
	                        else {
	                            node.state.allowName = false;
	                        }
	                    }
	                }
	                break;
	            case "[":
	                if (!node.state.allowArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.allowArray = false;
	                node.state.allowName = false;
	                node.state.readArray = true;
	                break;
	            case "]":
	                if (!node.state.readArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.readArray = false;
	                node.state.allowArray = true;
	                node.state.allowName = true;
	                break;
	            default:
	                if (node.state.allowType) {
	                    node.type += c;
	                    node.state.allowParams = true;
	                    node.state.allowArray = true;
	                }
	                else if (node.state.allowName) {
	                    node.name += c;
	                    delete node.state.allowArray;
	                }
	                else if (node.state.readArray) {
	                    node.type += c;
	                }
	                else {
	                    throwError(i);
	                }
	        }
	    }
	    if (node.parent) {
	        logger.throwArgumentError("unexpected eof", "param", param);
	    }
	    delete parent.state;
	    if (node.name === "indexed") {
	        if (!allowIndexed) {
	            throwError(originalParam.length - 7);
	        }
	        if (node.indexed) {
	            throwError(originalParam.length - 7);
	        }
	        node.indexed = true;
	        node.name = "";
	    }
	    else if (checkModifier(node.type, node.name)) {
	        node.name = "";
	    }
	    parent.type = verifyType(parent.type);
	    return parent;
	}
	function populate(object, params) {
	    for (var key in params) {
	        (0, lib$3.defineReadOnly)(object, key, params[key]);
	    }
	}
	exports.FormatTypes = Object.freeze({
	    // Bare formatting, as is needed for computing a sighash of an event or function
	    sighash: "sighash",
	    // Human-Readable with Minimal spacing and without names (compact human-readable)
	    minimal: "minimal",
	    // Human-Readable with nice spacing, including all names
	    full: "full",
	    // JSON-format a la Solidity
	    json: "json"
	});
	var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
	var ParamType = /** @class */ (function () {
	    function ParamType(constructorGuard, params) {
	        if (constructorGuard !== _constructorGuard) {
	            logger.throwError("use fromString", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new ParamType()"
	            });
	        }
	        populate(this, params);
	        var match = this.type.match(paramTypeArray);
	        if (match) {
	            populate(this, {
	                arrayLength: parseInt(match[2] || "-1"),
	                arrayChildren: ParamType.fromObject({
	                    type: match[1],
	                    components: this.components
	                }),
	                baseType: "array"
	            });
	        }
	        else {
	            populate(this, {
	                arrayLength: null,
	                arrayChildren: null,
	                baseType: ((this.components != null) ? "tuple" : this.type)
	            });
	        }
	        this._isParamType = true;
	        Object.freeze(this);
	    }
	    // Format the parameter fragment
	    //   - sighash: "(uint256,address)"
	    //   - minimal: "tuple(uint256,address) indexed"
	    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
	    ParamType.prototype.format = function (format) {
	        if (!format) {
	            format = exports.FormatTypes.sighash;
	        }
	        if (!exports.FormatTypes[format]) {
	            logger.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === exports.FormatTypes.json) {
	            var result_1 = {
	                type: ((this.baseType === "tuple") ? "tuple" : this.type),
	                name: (this.name || undefined)
	            };
	            if (typeof (this.indexed) === "boolean") {
	                result_1.indexed = this.indexed;
	            }
	            if (this.components) {
	                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });
	            }
	            return JSON.stringify(result_1);
	        }
	        var result = "";
	        // Array
	        if (this.baseType === "array") {
	            result += this.arrayChildren.format(format);
	            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
	        }
	        else {
	            if (this.baseType === "tuple") {
	                if (format !== exports.FormatTypes.sighash) {
	                    result += this.type;
	                }
	                result += "(" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ")";
	            }
	            else {
	                result += this.type;
	            }
	        }
	        if (format !== exports.FormatTypes.sighash) {
	            if (this.indexed === true) {
	                result += " indexed";
	            }
	            if (format === exports.FormatTypes.full && this.name) {
	                result += " " + this.name;
	            }
	        }
	        return result;
	    };
	    ParamType.from = function (value, allowIndexed) {
	        if (typeof (value) === "string") {
	            return ParamType.fromString(value, allowIndexed);
	        }
	        return ParamType.fromObject(value);
	    };
	    ParamType.fromObject = function (value) {
	        if (ParamType.isParamType(value)) {
	            return value;
	        }
	        return new ParamType(_constructorGuard, {
	            name: (value.name || null),
	            type: verifyType(value.type),
	            indexed: ((value.indexed == null) ? null : !!value.indexed),
	            components: (value.components ? value.components.map(ParamType.fromObject) : null)
	        });
	    };
	    ParamType.fromString = function (value, allowIndexed) {
	        function ParamTypify(node) {
	            return ParamType.fromObject({
	                name: node.name,
	                type: node.type,
	                indexed: node.indexed,
	                components: node.components
	            });
	        }
	        return ParamTypify(parseParamType(value, !!allowIndexed));
	    };
	    ParamType.isParamType = function (value) {
	        return !!(value != null && value._isParamType);
	    };
	    return ParamType;
	}());
	exports.ParamType = ParamType;
	;
	function parseParams(value, allowIndex) {
	    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });
	}
	var Fragment = /** @class */ (function () {
	    function Fragment(constructorGuard, params) {
	        if (constructorGuard !== _constructorGuard) {
	            logger.throwError("use a static from method", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new Fragment()"
	            });
	        }
	        populate(this, params);
	        this._isFragment = true;
	        Object.freeze(this);
	    }
	    Fragment.from = function (value) {
	        if (Fragment.isFragment(value)) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            return Fragment.fromString(value);
	        }
	        return Fragment.fromObject(value);
	    };
	    Fragment.fromObject = function (value) {
	        if (Fragment.isFragment(value)) {
	            return value;
	        }
	        switch (value.type) {
	            case "function":
	                return FunctionFragment.fromObject(value);
	            case "event":
	                return EventFragment.fromObject(value);
	            case "constructor":
	                return ConstructorFragment.fromObject(value);
	            case "error":
	                return ErrorFragment.fromObject(value);
	            case "fallback":
	            case "receive":
	                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
	                return null;
	        }
	        return logger.throwArgumentError("invalid fragment object", "value", value);
	    };
	    Fragment.fromString = function (value) {
	        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
	        value = value.replace(/\s/g, " ");
	        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
	        value = value.trim();
	        if (value.split(" ")[0] === "event") {
	            return EventFragment.fromString(value.substring(5).trim());
	        }
	        else if (value.split(" ")[0] === "function") {
	            return FunctionFragment.fromString(value.substring(8).trim());
	        }
	        else if (value.split("(")[0].trim() === "constructor") {
	            return ConstructorFragment.fromString(value.trim());
	        }
	        else if (value.split(" ")[0] === "error") {
	            return ErrorFragment.fromString(value.substring(5).trim());
	        }
	        return logger.throwArgumentError("unsupported fragment", "value", value);
	    };
	    Fragment.isFragment = function (value) {
	        return !!(value && value._isFragment);
	    };
	    return Fragment;
	}());
	exports.Fragment = Fragment;
	var EventFragment = /** @class */ (function (_super) {
	    __extends(EventFragment, _super);
	    function EventFragment() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EventFragment.prototype.format = function (format) {
	        if (!format) {
	            format = exports.FormatTypes.sighash;
	        }
	        if (!exports.FormatTypes[format]) {
	            logger.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === exports.FormatTypes.json) {
	            return JSON.stringify({
	                type: "event",
	                anonymous: this.anonymous,
	                name: this.name,
	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
	            });
	        }
	        var result = "";
	        if (format !== exports.FormatTypes.sighash) {
	            result += "event ";
	        }
	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
	        if (format !== exports.FormatTypes.sighash) {
	            if (this.anonymous) {
	                result += "anonymous ";
	            }
	        }
	        return result.trim();
	    };
	    EventFragment.from = function (value) {
	        if (typeof (value) === "string") {
	            return EventFragment.fromString(value);
	        }
	        return EventFragment.fromObject(value);
	    };
	    EventFragment.fromObject = function (value) {
	        if (EventFragment.isEventFragment(value)) {
	            return value;
	        }
	        if (value.type !== "event") {
	            logger.throwArgumentError("invalid event object", "value", value);
	        }
	        var params = {
	            name: verifyIdentifier(value.name),
	            anonymous: value.anonymous,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            type: "event"
	        };
	        return new EventFragment(_constructorGuard, params);
	    };
	    EventFragment.fromString = function (value) {
	        var match = value.match(regexParen);
	        if (!match) {
	            logger.throwArgumentError("invalid event string", "value", value);
	        }
	        var anonymous = false;
	        match[3].split(" ").forEach(function (modifier) {
	            switch (modifier.trim()) {
	                case "anonymous":
	                    anonymous = true;
	                    break;
	                case "":
	                    break;
	                default:
	                    logger.warn("unknown modifier: " + modifier);
	            }
	        });
	        return EventFragment.fromObject({
	            name: match[1].trim(),
	            anonymous: anonymous,
	            inputs: parseParams(match[2], true),
	            type: "event"
	        });
	    };
	    EventFragment.isEventFragment = function (value) {
	        return (value && value._isFragment && value.type === "event");
	    };
	    return EventFragment;
	}(Fragment));
	exports.EventFragment = EventFragment;
	function parseGas(value, params) {
	    params.gas = null;
	    var comps = value.split("@");
	    if (comps.length !== 1) {
	        if (comps.length > 2) {
	            logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
	        }
	        if (!comps[1].match(/^[0-9]+$/)) {
	            logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
	        }
	        params.gas = lib$2.BigNumber.from(comps[1]);
	        return comps[0];
	    }
	    return value;
	}
	function parseModifiers(value, params) {
	    params.constant = false;
	    params.payable = false;
	    params.stateMutability = "nonpayable";
	    value.split(" ").forEach(function (modifier) {
	        switch (modifier.trim()) {
	            case "constant":
	                params.constant = true;
	                break;
	            case "payable":
	                params.payable = true;
	                params.stateMutability = "payable";
	                break;
	            case "nonpayable":
	                params.payable = false;
	                params.stateMutability = "nonpayable";
	                break;
	            case "pure":
	                params.constant = true;
	                params.stateMutability = "pure";
	                break;
	            case "view":
	                params.constant = true;
	                params.stateMutability = "view";
	                break;
	            case "external":
	            case "public":
	            case "":
	                break;
	            default:
	                console.log("unknown modifier: " + modifier);
	        }
	    });
	}
	function verifyState(value) {
	    var result = {
	        constant: false,
	        payable: true,
	        stateMutability: "payable"
	    };
	    if (value.stateMutability != null) {
	        result.stateMutability = value.stateMutability;
	        // Set (and check things are consistent) the constant property
	        result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
	        if (value.constant != null) {
	            if ((!!value.constant) !== result.constant) {
	                logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
	            }
	        }
	        // Set (and check things are consistent) the payable property
	        result.payable = (result.stateMutability === "payable");
	        if (value.payable != null) {
	            if ((!!value.payable) !== result.payable) {
	                logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
	            }
	        }
	    }
	    else if (value.payable != null) {
	        result.payable = !!value.payable;
	        // If payable we can assume non-constant; otherwise we can't assume
	        if (value.constant == null && !result.payable && value.type !== "constructor") {
	            logger.throwArgumentError("unable to determine stateMutability", "value", value);
	        }
	        result.constant = !!value.constant;
	        if (result.constant) {
	            result.stateMutability = "view";
	        }
	        else {
	            result.stateMutability = (result.payable ? "payable" : "nonpayable");
	        }
	        if (result.payable && result.constant) {
	            logger.throwArgumentError("cannot have constant payable function", "value", value);
	        }
	    }
	    else if (value.constant != null) {
	        result.constant = !!value.constant;
	        result.payable = !result.constant;
	        result.stateMutability = (result.constant ? "view" : "payable");
	    }
	    else if (value.type !== "constructor") {
	        logger.throwArgumentError("unable to determine stateMutability", "value", value);
	    }
	    return result;
	}
	var ConstructorFragment = /** @class */ (function (_super) {
	    __extends(ConstructorFragment, _super);
	    function ConstructorFragment() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ConstructorFragment.prototype.format = function (format) {
	        if (!format) {
	            format = exports.FormatTypes.sighash;
	        }
	        if (!exports.FormatTypes[format]) {
	            logger.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === exports.FormatTypes.json) {
	            return JSON.stringify({
	                type: "constructor",
	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
	                payable: this.payable,
	                gas: (this.gas ? this.gas.toNumber() : undefined),
	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
	            });
	        }
	        if (format === exports.FormatTypes.sighash) {
	            logger.throwError("cannot format a constructor for sighash", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "format(sighash)"
	            });
	        }
	        var result = "constructor(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
	        if (this.stateMutability && this.stateMutability !== "nonpayable") {
	            result += this.stateMutability + " ";
	        }
	        return result.trim();
	    };
	    ConstructorFragment.from = function (value) {
	        if (typeof (value) === "string") {
	            return ConstructorFragment.fromString(value);
	        }
	        return ConstructorFragment.fromObject(value);
	    };
	    ConstructorFragment.fromObject = function (value) {
	        if (ConstructorFragment.isConstructorFragment(value)) {
	            return value;
	        }
	        if (value.type !== "constructor") {
	            logger.throwArgumentError("invalid constructor object", "value", value);
	        }
	        var state = verifyState(value);
	        if (state.constant) {
	            logger.throwArgumentError("constructor cannot be constant", "value", value);
	        }
	        var params = {
	            name: null,
	            type: value.type,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            payable: state.payable,
	            stateMutability: state.stateMutability,
	            gas: (value.gas ? lib$2.BigNumber.from(value.gas) : null)
	        };
	        return new ConstructorFragment(_constructorGuard, params);
	    };
	    ConstructorFragment.fromString = function (value) {
	        var params = { type: "constructor" };
	        value = parseGas(value, params);
	        var parens = value.match(regexParen);
	        if (!parens || parens[1].trim() !== "constructor") {
	            logger.throwArgumentError("invalid constructor string", "value", value);
	        }
	        params.inputs = parseParams(parens[2].trim(), false);
	        parseModifiers(parens[3].trim(), params);
	        return ConstructorFragment.fromObject(params);
	    };
	    ConstructorFragment.isConstructorFragment = function (value) {
	        return (value && value._isFragment && value.type === "constructor");
	    };
	    return ConstructorFragment;
	}(Fragment));
	exports.ConstructorFragment = ConstructorFragment;
	var FunctionFragment = /** @class */ (function (_super) {
	    __extends(FunctionFragment, _super);
	    function FunctionFragment() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FunctionFragment.prototype.format = function (format) {
	        if (!format) {
	            format = exports.FormatTypes.sighash;
	        }
	        if (!exports.FormatTypes[format]) {
	            logger.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === exports.FormatTypes.json) {
	            return JSON.stringify({
	                type: "function",
	                name: this.name,
	                constant: this.constant,
	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
	                payable: this.payable,
	                gas: (this.gas ? this.gas.toNumber() : undefined),
	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
	                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),
	            });
	        }
	        var result = "";
	        if (format !== exports.FormatTypes.sighash) {
	            result += "function ";
	        }
	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
	        if (format !== exports.FormatTypes.sighash) {
	            if (this.stateMutability) {
	                if (this.stateMutability !== "nonpayable") {
	                    result += (this.stateMutability + " ");
	                }
	            }
	            else if (this.constant) {
	                result += "view ";
	            }
	            if (this.outputs && this.outputs.length) {
	                result += "returns (" + this.outputs.map(function (output) { return output.format(format); }).join(", ") + ") ";
	            }
	            if (this.gas != null) {
	                result += "@" + this.gas.toString() + " ";
	            }
	        }
	        return result.trim();
	    };
	    FunctionFragment.from = function (value) {
	        if (typeof (value) === "string") {
	            return FunctionFragment.fromString(value);
	        }
	        return FunctionFragment.fromObject(value);
	    };
	    FunctionFragment.fromObject = function (value) {
	        if (FunctionFragment.isFunctionFragment(value)) {
	            return value;
	        }
	        if (value.type !== "function") {
	            logger.throwArgumentError("invalid function object", "value", value);
	        }
	        var state = verifyState(value);
	        var params = {
	            type: value.type,
	            name: verifyIdentifier(value.name),
	            constant: state.constant,
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
	            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
	            payable: state.payable,
	            stateMutability: state.stateMutability,
	            gas: (value.gas ? lib$2.BigNumber.from(value.gas) : null)
	        };
	        return new FunctionFragment(_constructorGuard, params);
	    };
	    FunctionFragment.fromString = function (value) {
	        var params = { type: "function" };
	        value = parseGas(value, params);
	        var comps = value.split(" returns ");
	        if (comps.length > 2) {
	            logger.throwArgumentError("invalid function string", "value", value);
	        }
	        var parens = comps[0].match(regexParen);
	        if (!parens) {
	            logger.throwArgumentError("invalid function signature", "value", value);
	        }
	        params.name = parens[1].trim();
	        if (params.name) {
	            verifyIdentifier(params.name);
	        }
	        params.inputs = parseParams(parens[2], false);
	        parseModifiers(parens[3].trim(), params);
	        // We have outputs
	        if (comps.length > 1) {
	            var returns = comps[1].match(regexParen);
	            if (returns[1].trim() != "" || returns[3].trim() != "") {
	                logger.throwArgumentError("unexpected tokens", "value", value);
	            }
	            params.outputs = parseParams(returns[2], false);
	        }
	        else {
	            params.outputs = [];
	        }
	        return FunctionFragment.fromObject(params);
	    };
	    FunctionFragment.isFunctionFragment = function (value) {
	        return (value && value._isFragment && value.type === "function");
	    };
	    return FunctionFragment;
	}(ConstructorFragment));
	exports.FunctionFragment = FunctionFragment;
	//export class StructFragment extends Fragment {
	//}
	function checkForbidden(fragment) {
	    var sig = fragment.format();
	    if (sig === "Error(string)" || sig === "Panic(uint256)") {
	        logger.throwArgumentError("cannot specify user defined " + sig + " error", "fragment", fragment);
	    }
	    return fragment;
	}
	var ErrorFragment = /** @class */ (function (_super) {
	    __extends(ErrorFragment, _super);
	    function ErrorFragment() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ErrorFragment.prototype.format = function (format) {
	        if (!format) {
	            format = exports.FormatTypes.sighash;
	        }
	        if (!exports.FormatTypes[format]) {
	            logger.throwArgumentError("invalid format type", "format", format);
	        }
	        if (format === exports.FormatTypes.json) {
	            return JSON.stringify({
	                type: "error",
	                name: this.name,
	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
	            });
	        }
	        var result = "";
	        if (format !== exports.FormatTypes.sighash) {
	            result += "error ";
	        }
	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
	        return result.trim();
	    };
	    ErrorFragment.from = function (value) {
	        if (typeof (value) === "string") {
	            return ErrorFragment.fromString(value);
	        }
	        return ErrorFragment.fromObject(value);
	    };
	    ErrorFragment.fromObject = function (value) {
	        if (ErrorFragment.isErrorFragment(value)) {
	            return value;
	        }
	        if (value.type !== "error") {
	            logger.throwArgumentError("invalid error object", "value", value);
	        }
	        var params = {
	            type: value.type,
	            name: verifyIdentifier(value.name),
	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
	        };
	        return checkForbidden(new ErrorFragment(_constructorGuard, params));
	    };
	    ErrorFragment.fromString = function (value) {
	        var params = { type: "error" };
	        var parens = value.match(regexParen);
	        if (!parens) {
	            logger.throwArgumentError("invalid error signature", "value", value);
	        }
	        params.name = parens[1].trim();
	        if (params.name) {
	            verifyIdentifier(params.name);
	        }
	        params.inputs = parseParams(parens[2], false);
	        return checkForbidden(ErrorFragment.fromObject(params));
	    };
	    ErrorFragment.isErrorFragment = function (value) {
	        return (value && value._isFragment && value.type === "error");
	    };
	    return ErrorFragment;
	}(Fragment));
	exports.ErrorFragment = ErrorFragment;
	function verifyType(type) {
	    // These need to be transformed to their full description
	    if (type.match(/^uint($|[^1-9])/)) {
	        type = "uint256" + type.substring(4);
	    }
	    else if (type.match(/^int($|[^1-9])/)) {
	        type = "int256" + type.substring(3);
	    }
	    // @TODO: more verification
	    return type;
	}
	// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
	var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
	function verifyIdentifier(value) {
	    if (!value || !value.match(regexIdentifier)) {
	        logger.throwArgumentError("invalid identifier \"" + value + "\"", "value", value);
	    }
	    return value;
	}
	var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
	function splitNesting(value) {
	    value = value.trim();
	    var result = [];
	    var accum = "";
	    var depth = 0;
	    for (var offset = 0; offset < value.length; offset++) {
	        var c = value[offset];
	        if (c === "," && depth === 0) {
	            result.push(accum);
	            accum = "";
	        }
	        else {
	            accum += c;
	            if (c === "(") {
	                depth++;
	            }
	            else if (c === ")") {
	                depth--;
	                if (depth === -1) {
	                    logger.throwArgumentError("unbalanced parenthesis", "value", value);
	                }
	            }
	        }
	    }
	    if (accum) {
	        result.push(accum);
	    }
	    return result;
	}

	});

	var fragments$1 = /*@__PURE__*/getDefaultExportFromCjs(fragments);

	var abstractCoder = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = void 0;





	var logger = new lib.Logger(_version$8.version);
	function checkResultErrors(result) {
	    // Find the first error (if any)
	    var errors = [];
	    var checkErrors = function (path, object) {
	        if (!Array.isArray(object)) {
	            return;
	        }
	        for (var key in object) {
	            var childPath = path.slice();
	            childPath.push(key);
	            try {
	                checkErrors(childPath, object[key]);
	            }
	            catch (error) {
	                errors.push({ path: childPath, error: error });
	            }
	        }
	    };
	    checkErrors([], result);
	    return errors;
	}
	exports.checkResultErrors = checkResultErrors;
	var Coder = /** @class */ (function () {
	    function Coder(name, type, localName, dynamic) {
	        // @TODO: defineReadOnly these
	        this.name = name;
	        this.type = type;
	        this.localName = localName;
	        this.dynamic = dynamic;
	    }
	    Coder.prototype._throwError = function (message, value) {
	        logger.throwArgumentError(message, this.localName, value);
	    };
	    return Coder;
	}());
	exports.Coder = Coder;
	var Writer = /** @class */ (function () {
	    function Writer(wordSize) {
	        (0, lib$3.defineReadOnly)(this, "wordSize", wordSize || 32);
	        this._data = [];
	        this._dataLength = 0;
	        this._padding = new Uint8Array(wordSize);
	    }
	    Object.defineProperty(Writer.prototype, "data", {
	        get: function () {
	            return (0, lib$1.hexConcat)(this._data);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Writer.prototype, "length", {
	        get: function () { return this._dataLength; },
	        enumerable: false,
	        configurable: true
	    });
	    Writer.prototype._writeData = function (data) {
	        this._data.push(data);
	        this._dataLength += data.length;
	        return data.length;
	    };
	    Writer.prototype.appendWriter = function (writer) {
	        return this._writeData((0, lib$1.concat)(writer._data));
	    };
	    // Arrayish items; padded on the right to wordSize
	    Writer.prototype.writeBytes = function (value) {
	        var bytes = (0, lib$1.arrayify)(value);
	        var paddingOffset = bytes.length % this.wordSize;
	        if (paddingOffset) {
	            bytes = (0, lib$1.concat)([bytes, this._padding.slice(paddingOffset)]);
	        }
	        return this._writeData(bytes);
	    };
	    Writer.prototype._getValue = function (value) {
	        var bytes = (0, lib$1.arrayify)(lib$2.BigNumber.from(value));
	        if (bytes.length > this.wordSize) {
	            logger.throwError("value out-of-bounds", lib.Logger.errors.BUFFER_OVERRUN, {
	                length: this.wordSize,
	                offset: bytes.length
	            });
	        }
	        if (bytes.length % this.wordSize) {
	            bytes = (0, lib$1.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
	        }
	        return bytes;
	    };
	    // BigNumberish items; padded on the left to wordSize
	    Writer.prototype.writeValue = function (value) {
	        return this._writeData(this._getValue(value));
	    };
	    Writer.prototype.writeUpdatableValue = function () {
	        var _this = this;
	        var offset = this._data.length;
	        this._data.push(this._padding);
	        this._dataLength += this.wordSize;
	        return function (value) {
	            _this._data[offset] = _this._getValue(value);
	        };
	    };
	    return Writer;
	}());
	exports.Writer = Writer;
	var Reader = /** @class */ (function () {
	    function Reader(data, wordSize, coerceFunc, allowLoose) {
	        (0, lib$3.defineReadOnly)(this, "_data", (0, lib$1.arrayify)(data));
	        (0, lib$3.defineReadOnly)(this, "wordSize", wordSize || 32);
	        (0, lib$3.defineReadOnly)(this, "_coerceFunc", coerceFunc);
	        (0, lib$3.defineReadOnly)(this, "allowLoose", allowLoose);
	        this._offset = 0;
	    }
	    Object.defineProperty(Reader.prototype, "data", {
	        get: function () { return (0, lib$1.hexlify)(this._data); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Reader.prototype, "consumed", {
	        get: function () { return this._offset; },
	        enumerable: false,
	        configurable: true
	    });
	    // The default Coerce function
	    Reader.coerce = function (name, value) {
	        var match = name.match("^u?int([0-9]+)$");
	        if (match && parseInt(match[1]) <= 48) {
	            value = value.toNumber();
	        }
	        return value;
	    };
	    Reader.prototype.coerce = function (name, value) {
	        if (this._coerceFunc) {
	            return this._coerceFunc(name, value);
	        }
	        return Reader.coerce(name, value);
	    };
	    Reader.prototype._peekBytes = function (offset, length, loose) {
	        var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
	        if (this._offset + alignedLength > this._data.length) {
	            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
	                alignedLength = length;
	            }
	            else {
	                logger.throwError("data out-of-bounds", lib.Logger.errors.BUFFER_OVERRUN, {
	                    length: this._data.length,
	                    offset: this._offset + alignedLength
	                });
	            }
	        }
	        return this._data.slice(this._offset, this._offset + alignedLength);
	    };
	    Reader.prototype.subReader = function (offset) {
	        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
	    };
	    Reader.prototype.readBytes = function (length, loose) {
	        var bytes = this._peekBytes(0, length, !!loose);
	        this._offset += bytes.length;
	        // @TODO: Make sure the length..end bytes are all 0?
	        return bytes.slice(0, length);
	    };
	    Reader.prototype.readValue = function () {
	        return lib$2.BigNumber.from(this.readBytes(this.wordSize));
	    };
	    return Reader;
	}());
	exports.Reader = Reader;

	});

	var abstractCoder$1 = /*@__PURE__*/getDefaultExportFromCjs(abstractCoder);

	var sha3 = createCommonjsModule(function (module) {
	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.8.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2018
	 * @license MIT
	 */
	/*jslint bitwise: true */
	(function () {
	  'use strict';

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var AMD = typeof undefined === 'function' && undefined.amd;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };

	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createCshakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };

	  var createKmacOutputMethod = function (bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };

	  var createOutputMethods = function (method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };

	  var createCshakeMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };

	  var createKmacMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };

	  var algorithms = [
	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255, n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };

	  Keccak.prototype.encodeString = function (str) {
	    var notString, type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var bytes = 0, length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };

	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }

	  Kmac.prototype = new Keccak();

	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	    if (AMD) {
	      undefined(function () {
	        return methods;
	      });
	    }
	  }
	})();
	});

	var lib$4 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.keccak256 = void 0;
	var js_sha3_1 = __importDefault(sha3);

	function keccak256(data) {
	    return '0x' + js_sha3_1.default.keccak_256((0, lib$1.arrayify)(data));
	}
	exports.keccak256 = keccak256;

	});

	var index$4 = /*@__PURE__*/getDefaultExportFromCjs(lib$4);

	var _version$a = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "rlp/5.8.0";

	});

	var _version$b = /*@__PURE__*/getDefaultExportFromCjs(_version$a);

	var lib$5 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decode = exports.encode = void 0;
	//See: https://github.com/ethereum/wiki/wiki/RLP



	var logger = new lib.Logger(_version$a.version);
	function arrayifyInteger(value) {
	    var result = [];
	    while (value) {
	        result.unshift(value & 0xff);
	        value >>= 8;
	    }
	    return result;
	}
	function unarrayifyInteger(data, offset, length) {
	    var result = 0;
	    for (var i = 0; i < length; i++) {
	        result = (result * 256) + data[offset + i];
	    }
	    return result;
	}
	function _encode(object) {
	    if (Array.isArray(object)) {
	        var payload_1 = [];
	        object.forEach(function (child) {
	            payload_1 = payload_1.concat(_encode(child));
	        });
	        if (payload_1.length <= 55) {
	            payload_1.unshift(0xc0 + payload_1.length);
	            return payload_1;
	        }
	        var length_1 = arrayifyInteger(payload_1.length);
	        length_1.unshift(0xf7 + length_1.length);
	        return length_1.concat(payload_1);
	    }
	    if (!(0, lib$1.isBytesLike)(object)) {
	        logger.throwArgumentError("RLP object must be BytesLike", "object", object);
	    }
	    var data = Array.prototype.slice.call((0, lib$1.arrayify)(object));
	    if (data.length === 1 && data[0] <= 0x7f) {
	        return data;
	    }
	    else if (data.length <= 55) {
	        data.unshift(0x80 + data.length);
	        return data;
	    }
	    var length = arrayifyInteger(data.length);
	    length.unshift(0xb7 + length.length);
	    return length.concat(data);
	}
	function encode(object) {
	    return (0, lib$1.hexlify)(_encode(object));
	}
	exports.encode = encode;
	function _decodeChildren(data, offset, childOffset, length) {
	    var result = [];
	    while (childOffset < offset + 1 + length) {
	        var decoded = _decode(data, childOffset);
	        result.push(decoded.result);
	        childOffset += decoded.consumed;
	        if (childOffset > offset + 1 + length) {
	            logger.throwError("child data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	    }
	    return { consumed: (1 + length), result: result };
	}
	// returns { consumed: number, result: Object }
	function _decode(data, offset) {
	    if (data.length === 0) {
	        logger.throwError("data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	    }
	    // Array with extra length prefix
	    if (data[offset] >= 0xf8) {
	        var lengthLength = data[offset] - 0xf7;
	        if (offset + 1 + lengthLength > data.length) {
	            logger.throwError("data short segment too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length_2 > data.length) {
	            logger.throwError("data long segment too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
	    }
	    else if (data[offset] >= 0xc0) {
	        var length_3 = data[offset] - 0xc0;
	        if (offset + 1 + length_3 > data.length) {
	            logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        return _decodeChildren(data, offset, offset + 1, length_3);
	    }
	    else if (data[offset] >= 0xb8) {
	        var lengthLength = data[offset] - 0xb7;
	        if (offset + 1 + lengthLength > data.length) {
	            logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length_4 > data.length) {
	            logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var result = (0, lib$1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
	        return { consumed: (1 + lengthLength + length_4), result: result };
	    }
	    else if (data[offset] >= 0x80) {
	        var length_5 = data[offset] - 0x80;
	        if (offset + 1 + length_5 > data.length) {
	            logger.throwError("data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var result = (0, lib$1.hexlify)(data.slice(offset + 1, offset + 1 + length_5));
	        return { consumed: (1 + length_5), result: result };
	    }
	    return { consumed: 1, result: (0, lib$1.hexlify)(data[offset]) };
	}
	function decode(data) {
	    var bytes = (0, lib$1.arrayify)(data);
	    var decoded = _decode(bytes, 0);
	    if (decoded.consumed !== bytes.length) {
	        logger.throwArgumentError("invalid rlp data", "data", data);
	    }
	    return decoded.result;
	}
	exports.decode = decode;

	});

	var index$5 = /*@__PURE__*/getDefaultExportFromCjs(lib$5);

	var _version$c = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "address/5.8.0";

	});

	var _version$d = /*@__PURE__*/getDefaultExportFromCjs(_version$c);

	var lib$6 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.isAddress = exports.getAddress = void 0;






	var logger = new lib.Logger(_version$c.version);
	function getChecksumAddress(address) {
	    if (!(0, lib$1.isHexString)(address, 20)) {
	        logger.throwArgumentError("invalid address", "address", address);
	    }
	    address = address.toLowerCase();
	    var chars = address.substring(2).split("");
	    var expanded = new Uint8Array(40);
	    for (var i = 0; i < 40; i++) {
	        expanded[i] = chars[i].charCodeAt(0);
	    }
	    var hashed = (0, lib$1.arrayify)((0, lib$4.keccak256)(expanded));
	    for (var i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return "0x" + chars.join("");
	}
	// Shims for environments that are missing some required constants and functions
	var MAX_SAFE_INTEGER = 0x1fffffffffffff;
	function log10(x) {
	    if (Math.log10) {
	        return Math.log10(x);
	    }
	    return Math.log(x) / Math.LN10;
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	var ibanLookup = {};
	for (var i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (var i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + "00";
	    var expanded = address.split("").map(function (c) { return ibanLookup[c]; }).join("");
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        var block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    var checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = "0" + checksum;
	    }
	    return checksum;
	}
	;
	function getAddress(address) {
	    var result = null;
	    if (typeof (address) !== "string") {
	        logger.throwArgumentError("invalid address", "address", address);
	    }
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (address.substring(0, 2) !== "0x") {
	            address = "0x" + address;
	        }
	        result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
	            logger.throwArgumentError("bad address checksum", "address", address);
	        }
	        // Maybe ICAP? (we only support direct mode)
	    }
	    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        if (address.substring(2, 4) !== ibanChecksum(address)) {
	            logger.throwArgumentError("bad icap checksum", "address", address);
	        }
	        result = (0, lib$2._base36To16)(address.substring(4));
	        while (result.length < 40) {
	            result = "0" + result;
	        }
	        result = getChecksumAddress("0x" + result);
	    }
	    else {
	        logger.throwArgumentError("invalid address", "address", address);
	    }
	    return result;
	}
	exports.getAddress = getAddress;
	function isAddress(address) {
	    try {
	        getAddress(address);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	exports.isAddress = isAddress;
	function getIcapAddress(address) {
	    var base36 = (0, lib$2._base16To36)(getAddress(address).substring(2)).toUpperCase();
	    while (base36.length < 30) {
	        base36 = "0" + base36;
	    }
	    return "XE" + ibanChecksum("XE00" + base36) + base36;
	}
	exports.getIcapAddress = getIcapAddress;
	// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
	function getContractAddress(transaction) {
	    var from = null;
	    try {
	        from = getAddress(transaction.from);
	    }
	    catch (error) {
	        logger.throwArgumentError("missing from address", "transaction", transaction);
	    }
	    var nonce = (0, lib$1.stripZeros)((0, lib$1.arrayify)(lib$2.BigNumber.from(transaction.nonce).toHexString()));
	    return getAddress((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$5.encode)([from, nonce])), 12));
	}
	exports.getContractAddress = getContractAddress;
	function getCreate2Address(from, salt, initCodeHash) {
	    if ((0, lib$1.hexDataLength)(salt) !== 32) {
	        logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
	    }
	    if ((0, lib$1.hexDataLength)(initCodeHash) !== 32) {
	        logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
	    }
	    return getAddress((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
	}
	exports.getCreate2Address = getCreate2Address;

	});

	var index$6 = /*@__PURE__*/getDefaultExportFromCjs(lib$6);

	var address = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AddressCoder = void 0;



	var AddressCoder = /** @class */ (function (_super) {
	    __extends(AddressCoder, _super);
	    function AddressCoder(localName) {
	        return _super.call(this, "address", "address", localName, false) || this;
	    }
	    AddressCoder.prototype.defaultValue = function () {
	        return "0x0000000000000000000000000000000000000000";
	    };
	    AddressCoder.prototype.encode = function (writer, value) {
	        try {
	            value = (0, lib$6.getAddress)(value);
	        }
	        catch (error) {
	            this._throwError(error.message, value);
	        }
	        return writer.writeValue(value);
	    };
	    AddressCoder.prototype.decode = function (reader) {
	        return (0, lib$6.getAddress)((0, lib$1.hexZeroPad)(reader.readValue().toHexString(), 20));
	    };
	    return AddressCoder;
	}(abstractCoder.Coder));
	exports.AddressCoder = AddressCoder;

	});

	var address$1 = /*@__PURE__*/getDefaultExportFromCjs(address);

	var anonymous = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AnonymousCoder = void 0;

	// Clones the functionality of an existing Coder, but without a localName
	var AnonymousCoder = /** @class */ (function (_super) {
	    __extends(AnonymousCoder, _super);
	    function AnonymousCoder(coder) {
	        var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;
	        _this.coder = coder;
	        return _this;
	    }
	    AnonymousCoder.prototype.defaultValue = function () {
	        return this.coder.defaultValue();
	    };
	    AnonymousCoder.prototype.encode = function (writer, value) {
	        return this.coder.encode(writer, value);
	    };
	    AnonymousCoder.prototype.decode = function (reader) {
	        return this.coder.decode(reader);
	    };
	    return AnonymousCoder;
	}(abstractCoder.Coder));
	exports.AnonymousCoder = AnonymousCoder;

	});

	var anonymous$1 = /*@__PURE__*/getDefaultExportFromCjs(anonymous);

	var array = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ArrayCoder = exports.unpack = exports.pack = void 0;


	var logger = new lib.Logger(_version$8.version);


	function pack(writer, coders, values) {
	    var arrayValues = null;
	    if (Array.isArray(values)) {
	        arrayValues = values;
	    }
	    else if (values && typeof (values) === "object") {
	        var unique_1 = {};
	        arrayValues = coders.map(function (coder) {
	            var name = coder.localName;
	            if (!name) {
	                logger.throwError("cannot encode object for signature with missing names", lib.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            if (unique_1[name]) {
	                logger.throwError("cannot encode object for signature with duplicate names", lib.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            unique_1[name] = true;
	            return values[name];
	        });
	    }
	    else {
	        logger.throwArgumentError("invalid tuple value", "tuple", values);
	    }
	    if (coders.length !== arrayValues.length) {
	        logger.throwArgumentError("types/value length mismatch", "tuple", values);
	    }
	    var staticWriter = new abstractCoder.Writer(writer.wordSize);
	    var dynamicWriter = new abstractCoder.Writer(writer.wordSize);
	    var updateFuncs = [];
	    coders.forEach(function (coder, index) {
	        var value = arrayValues[index];
	        if (coder.dynamic) {
	            // Get current dynamic offset (for the future pointer)
	            var dynamicOffset_1 = dynamicWriter.length;
	            // Encode the dynamic value into the dynamicWriter
	            coder.encode(dynamicWriter, value);
	            // Prepare to populate the correct offset once we are done
	            var updateFunc_1 = staticWriter.writeUpdatableValue();
	            updateFuncs.push(function (baseOffset) {
	                updateFunc_1(baseOffset + dynamicOffset_1);
	            });
	        }
	        else {
	            coder.encode(staticWriter, value);
	        }
	    });
	    // Backfill all the dynamic offsets, now that we know the static length
	    updateFuncs.forEach(function (func) { func(staticWriter.length); });
	    var length = writer.appendWriter(staticWriter);
	    length += writer.appendWriter(dynamicWriter);
	    return length;
	}
	exports.pack = pack;
	function unpack(reader, coders) {
	    var values = [];
	    // A reader anchored to this base
	    var baseReader = reader.subReader(0);
	    coders.forEach(function (coder) {
	        var value = null;
	        if (coder.dynamic) {
	            var offset = reader.readValue();
	            var offsetReader = baseReader.subReader(offset.toNumber());
	            try {
	                value = coder.decode(offsetReader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        else {
	            try {
	                value = coder.decode(reader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        if (value != undefined) {
	            values.push(value);
	        }
	    });
	    // We only output named properties for uniquely named coders
	    var uniqueNames = coders.reduce(function (accum, coder) {
	        var name = coder.localName;
	        if (name) {
	            if (!accum[name]) {
	                accum[name] = 0;
	            }
	            accum[name]++;
	        }
	        return accum;
	    }, {});
	    // Add any named parameters (i.e. tuples)
	    coders.forEach(function (coder, index) {
	        var name = coder.localName;
	        if (!name || uniqueNames[name] !== 1) {
	            return;
	        }
	        if (name === "length") {
	            name = "_length";
	        }
	        if (values[name] != null) {
	            return;
	        }
	        var value = values[index];
	        if (value instanceof Error) {
	            Object.defineProperty(values, name, {
	                enumerable: true,
	                get: function () { throw value; }
	            });
	        }
	        else {
	            values[name] = value;
	        }
	    });
	    var _loop_1 = function (i) {
	        var value = values[i];
	        if (value instanceof Error) {
	            Object.defineProperty(values, i, {
	                enumerable: true,
	                get: function () { throw value; }
	            });
	        }
	    };
	    for (var i = 0; i < values.length; i++) {
	        _loop_1(i);
	    }
	    return Object.freeze(values);
	}
	exports.unpack = unpack;
	var ArrayCoder = /** @class */ (function (_super) {
	    __extends(ArrayCoder, _super);
	    function ArrayCoder(coder, length, localName) {
	        var _this = this;
	        var type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
	        var dynamic = (length === -1 || coder.dynamic);
	        _this = _super.call(this, "array", type, localName, dynamic) || this;
	        _this.coder = coder;
	        _this.length = length;
	        return _this;
	    }
	    ArrayCoder.prototype.defaultValue = function () {
	        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
	        var defaultChild = this.coder.defaultValue();
	        var result = [];
	        for (var i = 0; i < this.length; i++) {
	            result.push(defaultChild);
	        }
	        return result;
	    };
	    ArrayCoder.prototype.encode = function (writer, value) {
	        if (!Array.isArray(value)) {
	            this._throwError("expected array value", value);
	        }
	        var count = this.length;
	        if (count === -1) {
	            count = value.length;
	            writer.writeValue(value.length);
	        }
	        logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
	        var coders = [];
	        for (var i = 0; i < value.length; i++) {
	            coders.push(this.coder);
	        }
	        return pack(writer, coders, value);
	    };
	    ArrayCoder.prototype.decode = function (reader) {
	        var count = this.length;
	        if (count === -1) {
	            count = reader.readValue().toNumber();
	            // Check that there is *roughly* enough data to ensure
	            // stray random data is not being read as a length. Each
	            // slot requires at least 32 bytes for their value (or 32
	            // bytes as a link to the data). This could use a much
	            // tighter bound, but we are erroring on the side of safety.
	            if (count * 32 > reader._data.length) {
	                logger.throwError("insufficient data length", lib.Logger.errors.BUFFER_OVERRUN, {
	                    length: reader._data.length,
	                    count: count
	                });
	            }
	        }
	        var coders = [];
	        for (var i = 0; i < count; i++) {
	            coders.push(new anonymous.AnonymousCoder(this.coder));
	        }
	        return reader.coerce(this.name, unpack(reader, coders));
	    };
	    return ArrayCoder;
	}(abstractCoder.Coder));
	exports.ArrayCoder = ArrayCoder;

	});

	var array$1 = /*@__PURE__*/getDefaultExportFromCjs(array);

	var boolean_1 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BooleanCoder = void 0;

	var BooleanCoder = /** @class */ (function (_super) {
	    __extends(BooleanCoder, _super);
	    function BooleanCoder(localName) {
	        return _super.call(this, "bool", "bool", localName, false) || this;
	    }
	    BooleanCoder.prototype.defaultValue = function () {
	        return false;
	    };
	    BooleanCoder.prototype.encode = function (writer, value) {
	        return writer.writeValue(value ? 1 : 0);
	    };
	    BooleanCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.type, !reader.readValue().isZero());
	    };
	    return BooleanCoder;
	}(abstractCoder.Coder));
	exports.BooleanCoder = BooleanCoder;

	});

	var boolean = /*@__PURE__*/getDefaultExportFromCjs(boolean_1);

	var bytes = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BytesCoder = exports.DynamicBytesCoder = void 0;


	var DynamicBytesCoder = /** @class */ (function (_super) {
	    __extends(DynamicBytesCoder, _super);
	    function DynamicBytesCoder(type, localName) {
	        return _super.call(this, type, type, localName, true) || this;
	    }
	    DynamicBytesCoder.prototype.defaultValue = function () {
	        return "0x";
	    };
	    DynamicBytesCoder.prototype.encode = function (writer, value) {
	        value = (0, lib$1.arrayify)(value);
	        var length = writer.writeValue(value.length);
	        length += writer.writeBytes(value);
	        return length;
	    };
	    DynamicBytesCoder.prototype.decode = function (reader) {
	        return reader.readBytes(reader.readValue().toNumber(), true);
	    };
	    return DynamicBytesCoder;
	}(abstractCoder.Coder));
	exports.DynamicBytesCoder = DynamicBytesCoder;
	var BytesCoder = /** @class */ (function (_super) {
	    __extends(BytesCoder, _super);
	    function BytesCoder(localName) {
	        return _super.call(this, "bytes", localName) || this;
	    }
	    BytesCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, lib$1.hexlify)(_super.prototype.decode.call(this, reader)));
	    };
	    return BytesCoder;
	}(DynamicBytesCoder));
	exports.BytesCoder = BytesCoder;

	});

	var bytes$1 = /*@__PURE__*/getDefaultExportFromCjs(bytes);

	var fixedBytes = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FixedBytesCoder = void 0;


	// @TODO: Merge this with bytes
	var FixedBytesCoder = /** @class */ (function (_super) {
	    __extends(FixedBytesCoder, _super);
	    function FixedBytesCoder(size, localName) {
	        var _this = this;
	        var name = "bytes" + String(size);
	        _this = _super.call(this, name, name, localName, false) || this;
	        _this.size = size;
	        return _this;
	    }
	    FixedBytesCoder.prototype.defaultValue = function () {
	        return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
	    };
	    FixedBytesCoder.prototype.encode = function (writer, value) {
	        var data = (0, lib$1.arrayify)(value);
	        if (data.length !== this.size) {
	            this._throwError("incorrect data length", value);
	        }
	        return writer.writeBytes(data);
	    };
	    FixedBytesCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, lib$1.hexlify)(reader.readBytes(this.size)));
	    };
	    return FixedBytesCoder;
	}(abstractCoder.Coder));
	exports.FixedBytesCoder = FixedBytesCoder;

	});

	var fixedBytes$1 = /*@__PURE__*/getDefaultExportFromCjs(fixedBytes);

	var _null = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.NullCoder = void 0;

	var NullCoder = /** @class */ (function (_super) {
	    __extends(NullCoder, _super);
	    function NullCoder(localName) {
	        return _super.call(this, "null", "", localName, false) || this;
	    }
	    NullCoder.prototype.defaultValue = function () {
	        return null;
	    };
	    NullCoder.prototype.encode = function (writer, value) {
	        if (value != null) {
	            this._throwError("not null", value);
	        }
	        return writer.writeBytes([]);
	    };
	    NullCoder.prototype.decode = function (reader) {
	        reader.readBytes(0);
	        return reader.coerce(this.name, null);
	    };
	    return NullCoder;
	}(abstractCoder.Coder));
	exports.NullCoder = NullCoder;

	});

	var _null$1 = /*@__PURE__*/getDefaultExportFromCjs(_null);

	var addresses = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AddressZero = void 0;
	exports.AddressZero = "0x0000000000000000000000000000000000000000";

	});

	var addresses$1 = /*@__PURE__*/getDefaultExportFromCjs(addresses);

	var bignumbers = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = void 0;

	var NegativeOne = ( /*#__PURE__*/lib$2.BigNumber.from(-1));
	exports.NegativeOne = NegativeOne;
	var Zero = ( /*#__PURE__*/lib$2.BigNumber.from(0));
	exports.Zero = Zero;
	var One = ( /*#__PURE__*/lib$2.BigNumber.from(1));
	exports.One = One;
	var Two = ( /*#__PURE__*/lib$2.BigNumber.from(2));
	exports.Two = Two;
	var WeiPerEther = ( /*#__PURE__*/lib$2.BigNumber.from("1000000000000000000"));
	exports.WeiPerEther = WeiPerEther;
	var MaxUint256 = ( /*#__PURE__*/lib$2.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
	exports.MaxUint256 = MaxUint256;
	var MinInt256 = ( /*#__PURE__*/lib$2.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
	exports.MinInt256 = MinInt256;
	var MaxInt256 = ( /*#__PURE__*/lib$2.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
	exports.MaxInt256 = MaxInt256;

	});

	var bignumbers$1 = /*@__PURE__*/getDefaultExportFromCjs(bignumbers);

	var hashes = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HashZero = void 0;
	exports.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

	});

	var hashes$1 = /*@__PURE__*/getDefaultExportFromCjs(hashes);

	var strings = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EtherSymbol = void 0;
	// NFKC (composed)             // (decomposed)
	exports.EtherSymbol = "\u039e"; // "\uD835\uDF63";

	});

	var strings$1 = /*@__PURE__*/getDefaultExportFromCjs(strings);

	var lib$7 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;

	Object.defineProperty(exports, "AddressZero", { enumerable: true, get: function () { return addresses.AddressZero; } });

	Object.defineProperty(exports, "NegativeOne", { enumerable: true, get: function () { return bignumbers.NegativeOne; } });
	Object.defineProperty(exports, "Zero", { enumerable: true, get: function () { return bignumbers.Zero; } });
	Object.defineProperty(exports, "One", { enumerable: true, get: function () { return bignumbers.One; } });
	Object.defineProperty(exports, "Two", { enumerable: true, get: function () { return bignumbers.Two; } });
	Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return bignumbers.WeiPerEther; } });
	Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return bignumbers.MaxUint256; } });
	Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return bignumbers.MinInt256; } });
	Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return bignumbers.MaxInt256; } });

	Object.defineProperty(exports, "HashZero", { enumerable: true, get: function () { return hashes.HashZero; } });

	Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return strings.EtherSymbol; } });

	});

	var index$7 = /*@__PURE__*/getDefaultExportFromCjs(lib$7);

	var number = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.NumberCoder = void 0;



	var NumberCoder = /** @class */ (function (_super) {
	    __extends(NumberCoder, _super);
	    function NumberCoder(size, signed, localName) {
	        var _this = this;
	        var name = ((signed ? "int" : "uint") + (size * 8));
	        _this = _super.call(this, name, name, localName, false) || this;
	        _this.size = size;
	        _this.signed = signed;
	        return _this;
	    }
	    NumberCoder.prototype.defaultValue = function () {
	        return 0;
	    };
	    NumberCoder.prototype.encode = function (writer, value) {
	        var v = lib$2.BigNumber.from(value);
	        // Check bounds are safe for encoding
	        var maxUintValue = lib$7.MaxUint256.mask(writer.wordSize * 8);
	        if (this.signed) {
	            var bounds = maxUintValue.mask(this.size * 8 - 1);
	            if (v.gt(bounds) || v.lt(bounds.add(lib$7.One).mul(lib$7.NegativeOne))) {
	                this._throwError("value out-of-bounds", value);
	            }
	        }
	        else if (v.lt(lib$7.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
	            this._throwError("value out-of-bounds", value);
	        }
	        v = v.toTwos(this.size * 8).mask(this.size * 8);
	        if (this.signed) {
	            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
	        }
	        return writer.writeValue(v);
	    };
	    NumberCoder.prototype.decode = function (reader) {
	        var value = reader.readValue().mask(this.size * 8);
	        if (this.signed) {
	            value = value.fromTwos(this.size * 8);
	        }
	        return reader.coerce(this.name, value);
	    };
	    return NumberCoder;
	}(abstractCoder.Coder));
	exports.NumberCoder = NumberCoder;

	});

	var number$1 = /*@__PURE__*/getDefaultExportFromCjs(number);

	var _version$e = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "strings/5.8.0";

	});

	var _version$f = /*@__PURE__*/getDefaultExportFromCjs(_version$e);

	var utf8 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;



	var logger = new lib.Logger(_version$e.version);
	///////////////////////////////
	var UnicodeNormalizationForm;
	(function (UnicodeNormalizationForm) {
	    UnicodeNormalizationForm["current"] = "";
	    UnicodeNormalizationForm["NFC"] = "NFC";
	    UnicodeNormalizationForm["NFD"] = "NFD";
	    UnicodeNormalizationForm["NFKC"] = "NFKC";
	    UnicodeNormalizationForm["NFKD"] = "NFKD";
	})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
	;
	var Utf8ErrorReason;
	(function (Utf8ErrorReason) {
	    // A continuation byte was present where there was nothing to continue
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
	    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
	    // The string is too short to process the expected codepoint
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["OVERRUN"] = "string overrun";
	    // A missing continuation byte was expected but not found
	    // - offset = the index the continuation byte was expected at
	    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
	    // The computed code point is outside the range for UTF-8
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; outside the UTF-8 range
	    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
	    // UTF-8 strings may not contain UTF-16 surrogate pairs
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
	    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
	    // The string is an overlong representation
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; already bounds checked
	    Utf8ErrorReason["OVERLONG"] = "overlong representation";
	})(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));
	;
	function errorFunc(reason, offset, bytes, output, badCodepoint) {
	    return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
	}
	function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
	    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
	    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
	        var i = 0;
	        for (var o = offset + 1; o < bytes.length; o++) {
	            if (bytes[o] >> 6 !== 0x02) {
	                break;
	            }
	            i++;
	        }
	        return i;
	    }
	    // This byte runs us past the end of the string, so just jump to the end
	    // (but the first byte was read already read and therefore skipped)
	    if (reason === Utf8ErrorReason.OVERRUN) {
	        return bytes.length - offset - 1;
	    }
	    // Nothing to skip
	    return 0;
	}
	function replaceFunc(reason, offset, bytes, output, badCodepoint) {
	    // Overlong representations are otherwise "valid" code points; just non-deistingtished
	    if (reason === Utf8ErrorReason.OVERLONG) {
	        output.push(badCodepoint);
	        return 0;
	    }
	    // Put the replacement character into the output
	    output.push(0xfffd);
	    // Otherwise, process as if ignoring errors
	    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
	}
	// Common error handing strategies
	exports.Utf8ErrorFuncs = Object.freeze({
	    error: errorFunc,
	    ignore: ignoreFunc,
	    replace: replaceFunc
	});
	// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
	function getUtf8CodePoints(bytes, onError) {
	    if (onError == null) {
	        onError = exports.Utf8ErrorFuncs.error;
	    }
	    bytes = (0, lib$1.arrayify)(bytes);
	    var result = [];
	    var i = 0;
	    // Invalid bytes are ignored
	    while (i < bytes.length) {
	        var c = bytes[i++];
	        // 0xxx xxxx
	        if (c >> 7 === 0) {
	            result.push(c);
	            continue;
	        }
	        // Multibyte; how many bytes left for this character?
	        var extraLength = null;
	        var overlongMask = null;
	        // 110x xxxx 10xx xxxx
	        if ((c & 0xe0) === 0xc0) {
	            extraLength = 1;
	            overlongMask = 0x7f;
	            // 1110 xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf0) === 0xe0) {
	            extraLength = 2;
	            overlongMask = 0x7ff;
	            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf8) === 0xf0) {
	            extraLength = 3;
	            overlongMask = 0xffff;
	        }
	        else {
	            if ((c & 0xc0) === 0x80) {
	                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
	            }
	            else {
	                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
	            }
	            continue;
	        }
	        // Do we have enough bytes in our data?
	        if (i - 1 + extraLength >= bytes.length) {
	            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
	            continue;
	        }
	        // Remove the length prefix from the char
	        var res = c & ((1 << (8 - extraLength - 1)) - 1);
	        for (var j = 0; j < extraLength; j++) {
	            var nextChar = bytes[i];
	            // Invalid continuation byte
	            if ((nextChar & 0xc0) != 0x80) {
	                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
	                res = null;
	                break;
	            }
	            ;
	            res = (res << 6) | (nextChar & 0x3f);
	            i++;
	        }
	        // See above loop for invalid continuation byte
	        if (res === null) {
	            continue;
	        }
	        // Maximum code point
	        if (res > 0x10ffff) {
	            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        // Reserved for UTF-16 surrogate halves
	        if (res >= 0xd800 && res <= 0xdfff) {
	            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        // Check for overlong sequences (more bytes than needed)
	        if (res <= overlongMask) {
	            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
	            continue;
	        }
	        result.push(res);
	    }
	    return result;
	}
	// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
	function toUtf8Bytes(str, form) {
	    if (form === void 0) { form = UnicodeNormalizationForm.current; }
	    if (form != UnicodeNormalizationForm.current) {
	        logger.checkNormalize();
	        str = str.normalize(form);
	    }
	    var result = [];
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 0x80) {
	            result.push(c);
	        }
	        else if (c < 0x800) {
	            result.push((c >> 6) | 0xc0);
	            result.push((c & 0x3f) | 0x80);
	        }
	        else if ((c & 0xfc00) == 0xd800) {
	            i++;
	            var c2 = str.charCodeAt(i);
	            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
	                throw new Error("invalid utf-8 string");
	            }
	            // Surrogate Pair
	            var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
	            result.push((pair >> 18) | 0xf0);
	            result.push(((pair >> 12) & 0x3f) | 0x80);
	            result.push(((pair >> 6) & 0x3f) | 0x80);
	            result.push((pair & 0x3f) | 0x80);
	        }
	        else {
	            result.push((c >> 12) | 0xe0);
	            result.push(((c >> 6) & 0x3f) | 0x80);
	            result.push((c & 0x3f) | 0x80);
	        }
	    }
	    return (0, lib$1.arrayify)(result);
	}
	exports.toUtf8Bytes = toUtf8Bytes;
	;
	function escapeChar(value) {
	    var hex = ("0000" + value.toString(16));
	    return "\\u" + hex.substring(hex.length - 4);
	}
	function _toEscapedUtf8String(bytes, onError) {
	    return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
	        if (codePoint < 256) {
	            switch (codePoint) {
	                case 8: return "\\b";
	                case 9: return "\\t";
	                case 10: return "\\n";
	                case 13: return "\\r";
	                case 34: return "\\\"";
	                case 92: return "\\\\";
	            }
	            if (codePoint >= 32 && codePoint < 127) {
	                return String.fromCharCode(codePoint);
	            }
	        }
	        if (codePoint <= 0xffff) {
	            return escapeChar(codePoint);
	        }
	        codePoint -= 0x10000;
	        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
	    }).join("") + '"';
	}
	exports._toEscapedUtf8String = _toEscapedUtf8String;
	function _toUtf8String(codePoints) {
	    return codePoints.map(function (codePoint) {
	        if (codePoint <= 0xffff) {
	            return String.fromCharCode(codePoint);
	        }
	        codePoint -= 0x10000;
	        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
	    }).join("");
	}
	exports._toUtf8String = _toUtf8String;
	function toUtf8String(bytes, onError) {
	    return _toUtf8String(getUtf8CodePoints(bytes, onError));
	}
	exports.toUtf8String = toUtf8String;
	function toUtf8CodePoints(str, form) {
	    if (form === void 0) { form = UnicodeNormalizationForm.current; }
	    return getUtf8CodePoints(toUtf8Bytes(str, form));
	}
	exports.toUtf8CodePoints = toUtf8CodePoints;

	});

	var utf8$1 = /*@__PURE__*/getDefaultExportFromCjs(utf8);

	var bytes32 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseBytes32String = exports.formatBytes32String = void 0;



	function formatBytes32String(text) {
	    // Get the bytes
	    var bytes = (0, utf8.toUtf8Bytes)(text);
	    // Check we have room for null-termination
	    if (bytes.length > 31) {
	        throw new Error("bytes32 string must be less than 32 bytes");
	    }
	    // Zero-pad (implicitly null-terminates)
	    return (0, lib$1.hexlify)((0, lib$1.concat)([bytes, lib$7.HashZero]).slice(0, 32));
	}
	exports.formatBytes32String = formatBytes32String;
	function parseBytes32String(bytes) {
	    var data = (0, lib$1.arrayify)(bytes);
	    // Must be 32 bytes with a null-termination
	    if (data.length !== 32) {
	        throw new Error("invalid bytes32 - not 32 bytes long");
	    }
	    if (data[31] !== 0) {
	        throw new Error("invalid bytes32 string - no null terminator");
	    }
	    // Find the null termination
	    var length = 31;
	    while (data[length - 1] === 0) {
	        length--;
	    }
	    // Determine the string value
	    return (0, utf8.toUtf8String)(data.slice(0, length));
	}
	exports.parseBytes32String = parseBytes32String;

	});

	var bytes32$1 = /*@__PURE__*/getDefaultExportFromCjs(bytes32);

	var idna = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.nameprep = exports._nameprepTableC = exports._nameprepTableB2 = exports._nameprepTableA1 = void 0;

	function bytes2(data) {
	    if ((data.length % 4) !== 0) {
	        throw new Error("bad data");
	    }
	    var result = [];
	    for (var i = 0; i < data.length; i += 4) {
	        result.push(parseInt(data.substring(i, i + 4), 16));
	    }
	    return result;
	}
	function createTable(data, func) {
	    if (!func) {
	        func = function (value) { return [parseInt(value, 16)]; };
	    }
	    var lo = 0;
	    var result = {};
	    data.split(",").forEach(function (pair) {
	        var comps = pair.split(":");
	        lo += parseInt(comps[0], 16);
	        result[lo] = func(comps[1]);
	    });
	    return result;
	}
	function createRangeTable(data) {
	    var hi = 0;
	    return data.split(",").map(function (v) {
	        var comps = v.split("-");
	        if (comps.length === 1) {
	            comps[1] = "0";
	        }
	        else if (comps[1] === "") {
	            comps[1] = "1";
	        }
	        var lo = hi + parseInt(comps[0], 16);
	        hi = parseInt(comps[1], 16);
	        return { l: lo, h: hi };
	    });
	}
	function matchMap(value, ranges) {
	    var lo = 0;
	    for (var i = 0; i < ranges.length; i++) {
	        var range = ranges[i];
	        lo += range.l;
	        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
	            if (range.e && range.e.indexOf(value - lo) !== -1) {
	                continue;
	            }
	            return range;
	        }
	    }
	    return null;
	}
	var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
	// @TODO: Make this relative...
	var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) { return parseInt(v, 16); });
	var Table_B_2_ranges = [
	    { h: 25, s: 32, l: 65 },
	    { h: 30, s: 32, e: [23], l: 127 },
	    { h: 54, s: 1, e: [48], l: 64, d: 2 },
	    { h: 14, s: 1, l: 57, d: 2 },
	    { h: 44, s: 1, l: 17, d: 2 },
	    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
	    { h: 16, s: 1, l: 68, d: 2 },
	    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
	    { h: 26, s: 32, e: [17], l: 435 },
	    { h: 22, s: 1, l: 71, d: 2 },
	    { h: 15, s: 80, l: 40 },
	    { h: 31, s: 32, l: 16 },
	    { h: 32, s: 1, l: 80, d: 2 },
	    { h: 52, s: 1, l: 42, d: 2 },
	    { h: 12, s: 1, l: 55, d: 2 },
	    { h: 40, s: 1, e: [38], l: 15, d: 2 },
	    { h: 14, s: 1, l: 48, d: 2 },
	    { h: 37, s: 48, l: 49 },
	    { h: 148, s: 1, l: 6351, d: 2 },
	    { h: 88, s: 1, l: 160, d: 2 },
	    { h: 15, s: 16, l: 704 },
	    { h: 25, s: 26, l: 854 },
	    { h: 25, s: 32, l: 55915 },
	    { h: 37, s: 40, l: 1247 },
	    { h: 25, s: -119711, l: 53248 },
	    { h: 25, s: -119763, l: 52 },
	    { h: 25, s: -119815, l: 52 },
	    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
	    { h: 25, s: -119919, l: 52 },
	    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
	    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
	    { h: 25, s: -120075, l: 52 },
	    { h: 25, s: -120127, l: 52 },
	    { h: 25, s: -120179, l: 52 },
	    { h: 25, s: -120231, l: 52 },
	    { h: 25, s: -120283, l: 52 },
	    { h: 25, s: -120335, l: 52 },
	    { h: 24, s: -119543, e: [17], l: 56 },
	    { h: 24, s: -119601, e: [17], l: 58 },
	    { h: 24, s: -119659, e: [17], l: 58 },
	    { h: 24, s: -119717, e: [17], l: 58 },
	    { h: 24, s: -119775, e: [17], l: 58 }
	];
	var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
	var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
	var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
	var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
	function flatten(values) {
	    return values.reduce(function (accum, value) {
	        value.forEach(function (value) { accum.push(value); });
	        return accum;
	    }, []);
	}
	function _nameprepTableA1(codepoint) {
	    return !!matchMap(codepoint, Table_A_1_ranges);
	}
	exports._nameprepTableA1 = _nameprepTableA1;
	function _nameprepTableB2(codepoint) {
	    var range = matchMap(codepoint, Table_B_2_ranges);
	    if (range) {
	        return [codepoint + range.s];
	    }
	    var codes = Table_B_2_lut_abs[codepoint];
	    if (codes) {
	        return codes;
	    }
	    var shift = Table_B_2_lut_rel[codepoint];
	    if (shift) {
	        return [codepoint + shift[0]];
	    }
	    var complex = Table_B_2_complex[codepoint];
	    if (complex) {
	        return complex;
	    }
	    return null;
	}
	exports._nameprepTableB2 = _nameprepTableB2;
	function _nameprepTableC(codepoint) {
	    return !!matchMap(codepoint, Table_C_ranges);
	}
	exports._nameprepTableC = _nameprepTableC;
	function nameprep(value) {
	    // This allows platforms with incomplete normalize to bypass
	    // it for very basic names which the built-in toLowerCase
	    // will certainly handle correctly
	    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
	        return value.toLowerCase();
	    }
	    // Get the code points (keeping the current normalization)
	    var codes = (0, utf8.toUtf8CodePoints)(value);
	    codes = flatten(codes.map(function (code) {
	        // Substitute Table B.1 (Maps to Nothing)
	        if (Table_B_1_flags.indexOf(code) >= 0) {
	            return [];
	        }
	        if (code >= 0xfe00 && code <= 0xfe0f) {
	            return [];
	        }
	        // Substitute Table B.2 (Case Folding)
	        var codesTableB2 = _nameprepTableB2(code);
	        if (codesTableB2) {
	            return codesTableB2;
	        }
	        // No Substitution
	        return [code];
	    }));
	    // Normalize using form KC
	    codes = (0, utf8.toUtf8CodePoints)((0, utf8._toUtf8String)(codes), utf8.UnicodeNormalizationForm.NFKC);
	    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
	    codes.forEach(function (code) {
	        if (_nameprepTableC(code)) {
	            throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
	        }
	    });
	    // Prohibit Unassigned Code Points (Table A.1)
	    codes.forEach(function (code) {
	        if (_nameprepTableA1(code)) {
	            throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
	        }
	    });
	    // IDNA extras
	    var name = (0, utf8._toUtf8String)(codes);
	    // IDNA: 4.2.3.1
	    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
	        throw new Error("invalid hyphen");
	    }
	    return name;
	}
	exports.nameprep = nameprep;

	});

	var idna$1 = /*@__PURE__*/getDefaultExportFromCjs(idna);

	var lib$8 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;

	Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return bytes32.formatBytes32String; } });
	Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return bytes32.parseBytes32String; } });

	Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return idna.nameprep; } });

	Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return utf8._toEscapedUtf8String; } });
	Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return utf8.toUtf8Bytes; } });
	Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return utf8.toUtf8CodePoints; } });
	Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return utf8.toUtf8String; } });
	Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return utf8.UnicodeNormalizationForm; } });
	Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return utf8.Utf8ErrorFuncs; } });
	Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return utf8.Utf8ErrorReason; } });

	});

	var index$8 = /*@__PURE__*/getDefaultExportFromCjs(lib$8);

	var string = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StringCoder = void 0;


	var StringCoder = /** @class */ (function (_super) {
	    __extends(StringCoder, _super);
	    function StringCoder(localName) {
	        return _super.call(this, "string", localName) || this;
	    }
	    StringCoder.prototype.defaultValue = function () {
	        return "";
	    };
	    StringCoder.prototype.encode = function (writer, value) {
	        return _super.prototype.encode.call(this, writer, (0, lib$8.toUtf8Bytes)(value));
	    };
	    StringCoder.prototype.decode = function (reader) {
	        return (0, lib$8.toUtf8String)(_super.prototype.decode.call(this, reader));
	    };
	    return StringCoder;
	}(bytes.DynamicBytesCoder));
	exports.StringCoder = StringCoder;

	});

	var string$1 = /*@__PURE__*/getDefaultExportFromCjs(string);

	var tuple = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TupleCoder = void 0;


	var TupleCoder = /** @class */ (function (_super) {
	    __extends(TupleCoder, _super);
	    function TupleCoder(coders, localName) {
	        var _this = this;
	        var dynamic = false;
	        var types = [];
	        coders.forEach(function (coder) {
	            if (coder.dynamic) {
	                dynamic = true;
	            }
	            types.push(coder.type);
	        });
	        var type = ("tuple(" + types.join(",") + ")");
	        _this = _super.call(this, "tuple", type, localName, dynamic) || this;
	        _this.coders = coders;
	        return _this;
	    }
	    TupleCoder.prototype.defaultValue = function () {
	        var values = [];
	        this.coders.forEach(function (coder) {
	            values.push(coder.defaultValue());
	        });
	        // We only output named properties for uniquely named coders
	        var uniqueNames = this.coders.reduce(function (accum, coder) {
	            var name = coder.localName;
	            if (name) {
	                if (!accum[name]) {
	                    accum[name] = 0;
	                }
	                accum[name]++;
	            }
	            return accum;
	        }, {});
	        // Add named values
	        this.coders.forEach(function (coder, index) {
	            var name = coder.localName;
	            if (!name || uniqueNames[name] !== 1) {
	                return;
	            }
	            if (name === "length") {
	                name = "_length";
	            }
	            if (values[name] != null) {
	                return;
	            }
	            values[name] = values[index];
	        });
	        return Object.freeze(values);
	    };
	    TupleCoder.prototype.encode = function (writer, value) {
	        return (0, array.pack)(writer, this.coders, value);
	    };
	    TupleCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, array.unpack)(reader, this.coders));
	    };
	    return TupleCoder;
	}(abstractCoder.Coder));
	exports.TupleCoder = TupleCoder;

	});

	var tuple$1 = /*@__PURE__*/getDefaultExportFromCjs(tuple);

	var abiCoder = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.defaultAbiCoder = exports.AbiCoder = void 0;
	// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI




	var logger = new lib.Logger(_version$8.version);











	var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
	var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
	var AbiCoder = /** @class */ (function () {
	    function AbiCoder(coerceFunc) {
	        (0, lib$3.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
	    }
	    AbiCoder.prototype._getCoder = function (param) {
	        var _this = this;
	        switch (param.baseType) {
	            case "address":
	                return new address.AddressCoder(param.name);
	            case "bool":
	                return new boolean_1.BooleanCoder(param.name);
	            case "string":
	                return new string.StringCoder(param.name);
	            case "bytes":
	                return new bytes.BytesCoder(param.name);
	            case "array":
	                return new array.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
	            case "tuple":
	                return new tuple.TupleCoder((param.components || []).map(function (component) {
	                    return _this._getCoder(component);
	                }), param.name);
	            case "":
	                return new _null.NullCoder(param.name);
	        }
	        // u?int[0-9]*
	        var match = param.type.match(paramTypeNumber);
	        if (match) {
	            var size = parseInt(match[2] || "256");
	            if (size === 0 || size > 256 || (size % 8) !== 0) {
	                logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
	            }
	            return new number.NumberCoder(size / 8, (match[1] === "int"), param.name);
	        }
	        // bytes[0-9]+
	        match = param.type.match(paramTypeBytes);
	        if (match) {
	            var size = parseInt(match[1]);
	            if (size === 0 || size > 32) {
	                logger.throwArgumentError("invalid bytes length", "param", param);
	            }
	            return new fixedBytes.FixedBytesCoder(size, param.name);
	        }
	        return logger.throwArgumentError("invalid type", "type", param.type);
	    };
	    AbiCoder.prototype._getWordSize = function () { return 32; };
	    AbiCoder.prototype._getReader = function (data, allowLoose) {
	        return new abstractCoder.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
	    };
	    AbiCoder.prototype._getWriter = function () {
	        return new abstractCoder.Writer(this._getWordSize());
	    };
	    AbiCoder.prototype.getDefaultValue = function (types) {
	        var _this = this;
	        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });
	        var coder = new tuple.TupleCoder(coders, "_");
	        return coder.defaultValue();
	    };
	    AbiCoder.prototype.encode = function (types, values) {
	        var _this = this;
	        if (types.length !== values.length) {
	            logger.throwError("types/values length mismatch", lib.Logger.errors.INVALID_ARGUMENT, {
	                count: { types: types.length, values: values.length },
	                value: { types: types, values: values }
	            });
	        }
	        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });
	        var coder = (new tuple.TupleCoder(coders, "_"));
	        var writer = this._getWriter();
	        coder.encode(writer, values);
	        return writer.data;
	    };
	    AbiCoder.prototype.decode = function (types, data, loose) {
	        var _this = this;
	        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });
	        var coder = new tuple.TupleCoder(coders, "_");
	        return coder.decode(this._getReader((0, lib$1.arrayify)(data), loose));
	    };
	    return AbiCoder;
	}());
	exports.AbiCoder = AbiCoder;
	exports.defaultAbiCoder = new AbiCoder();

	});

	var abiCoder$1 = /*@__PURE__*/getDefaultExportFromCjs(abiCoder);

	var id_1 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.id = void 0;


	function id(text) {
	    return (0, lib$4.keccak256)((0, lib$8.toUtf8Bytes)(text));
	}
	exports.id = id;

	});

	var id = /*@__PURE__*/getDefaultExportFromCjs(id_1);

	var _version$g = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "hash/5.8.0";

	});

	var _version$h = /*@__PURE__*/getDefaultExportFromCjs(_version$g);

	var browserBase64 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encode = exports.decode = void 0;

	function decode(textData) {
	    textData = atob(textData);
	    var data = [];
	    for (var i = 0; i < textData.length; i++) {
	        data.push(textData.charCodeAt(i));
	    }
	    return (0, lib$1.arrayify)(data);
	}
	exports.decode = decode;
	function encode(data) {
	    data = (0, lib$1.arrayify)(data);
	    var textData = "";
	    for (var i = 0; i < data.length; i++) {
	        textData += String.fromCharCode(data[i]);
	    }
	    return btoa(textData);
	}
	exports.encode = encode;

	});

	var browserBase64$1 = /*@__PURE__*/getDefaultExportFromCjs(browserBase64);

	var lib$9 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encode = exports.decode = void 0;

	Object.defineProperty(exports, "decode", { enumerable: true, get: function () { return browserBase64.decode; } });
	Object.defineProperty(exports, "encode", { enumerable: true, get: function () { return browserBase64.encode; } });

	});

	var index$9 = /*@__PURE__*/getDefaultExportFromCjs(lib$9);

	var decoder = createCommonjsModule(function (module, exports) {
	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.read_emoji_trie = exports.read_zero_terminated_array = exports.read_mapped_map = exports.read_member_array = exports.signed = exports.read_compressed_payload = exports.read_payload = exports.decode_arithmetic = void 0;
	// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
	function flat(array, depth) {
	    if (depth == null) {
	        depth = 1;
	    }
	    var result = [];
	    var forEach = result.forEach;
	    var flatDeep = function (arr, depth) {
	        forEach.call(arr, function (val) {
	            if (depth > 0 && Array.isArray(val)) {
	                flatDeep(val, depth - 1);
	            }
	            else {
	                result.push(val);
	            }
	        });
	    };
	    flatDeep(array, depth);
	    return result;
	}
	function fromEntries(array) {
	    var result = {};
	    for (var i = 0; i < array.length; i++) {
	        var value = array[i];
	        result[value[0]] = value[1];
	    }
	    return result;
	}
	function decode_arithmetic(bytes) {
	    var pos = 0;
	    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
	    // decode the frequency table
	    var symbol_count = u16();
	    var total = 1;
	    var acc = [0, 1]; // first symbol has frequency 1
	    for (var i = 1; i < symbol_count; i++) {
	        acc.push(total += u16());
	    }
	    // skip the sized-payload that the last 3 symbols index into
	    var skip = u16();
	    var pos_payload = pos;
	    pos += skip;
	    var read_width = 0;
	    var read_buffer = 0;
	    function read_bit() {
	        if (read_width == 0) {
	            // this will read beyond end of buffer
	            // but (undefined|0) => zero pad
	            read_buffer = (read_buffer << 8) | bytes[pos++];
	            read_width = 8;
	        }
	        return (read_buffer >> --read_width) & 1;
	    }
	    var N = 31;
	    var FULL = Math.pow(2, N);
	    var HALF = FULL >>> 1;
	    var QRTR = HALF >> 1;
	    var MASK = FULL - 1;
	    // fill register
	    var register = 0;
	    for (var i = 0; i < N; i++)
	        register = (register << 1) | read_bit();
	    var symbols = [];
	    var low = 0;
	    var range = FULL; // treat like a float
	    while (true) {
	        var value = Math.floor((((register - low + 1) * total) - 1) / range);
	        var start = 0;
	        var end = symbol_count;
	        while (end - start > 1) { // binary search
	            var mid = (start + end) >>> 1;
	            if (value < acc[mid]) {
	                end = mid;
	            }
	            else {
	                start = mid;
	            }
	        }
	        if (start == 0)
	            break; // first symbol is end mark
	        symbols.push(start);
	        var a = low + Math.floor(range * acc[start] / total);
	        var b = low + Math.floor(range * acc[start + 1] / total) - 1;
	        while (((a ^ b) & HALF) == 0) {
	            register = (register << 1) & MASK | read_bit();
	            a = (a << 1) & MASK;
	            b = (b << 1) & MASK | 1;
	        }
	        while (a & ~b & QRTR) {
	            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
	            a = (a << 1) ^ HALF;
	            b = ((b ^ HALF) << 1) | HALF | 1;
	        }
	        low = a;
	        range = 1 + b - a;
	    }
	    var offset = symbol_count - 4;
	    return symbols.map(function (x) {
	        switch (x - offset) {
	            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
	            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
	            case 1: return offset + bytes[pos_payload++];
	            default: return x - 1;
	        }
	    });
	}
	exports.decode_arithmetic = decode_arithmetic;
	// returns an iterator which returns the next symbol
	function read_payload(v) {
	    var pos = 0;
	    return function () { return v[pos++]; };
	}
	exports.read_payload = read_payload;
	function read_compressed_payload(bytes) {
	    return read_payload(decode_arithmetic(bytes));
	}
	exports.read_compressed_payload = read_compressed_payload;
	// eg. [0,1,2,3...] => [0,-1,1,-2,...]
	function signed(i) {
	    return (i & 1) ? (~i >> 1) : (i >> 1);
	}
	exports.signed = signed;
	function read_counts(n, next) {
	    var v = Array(n);
	    for (var i = 0; i < n; i++)
	        v[i] = 1 + next();
	    return v;
	}
	function read_ascending(n, next) {
	    var v = Array(n);
	    for (var i = 0, x = -1; i < n; i++)
	        v[i] = x += 1 + next();
	    return v;
	}
	function read_deltas(n, next) {
	    var v = Array(n);
	    for (var i = 0, x = 0; i < n; i++)
	        v[i] = x += signed(next());
	    return v;
	}
	function read_member_array(next, lookup) {
	    var v = read_ascending(next(), next);
	    var n = next();
	    var vX = read_ascending(n, next);
	    var vN = read_counts(n, next);
	    for (var i = 0; i < n; i++) {
	        for (var j = 0; j < vN[i]; j++) {
	            v.push(vX[i] + j);
	        }
	    }
	    return lookup ? v.map(function (x) { return lookup[x]; }) : v;
	}
	exports.read_member_array = read_member_array;
	// returns array of 
	// [x, ys] => single replacement rule
	// [x, ys, n, dx, dx] => linear map
	function read_mapped_map(next) {
	    var ret = [];
	    while (true) {
	        var w = next();
	        if (w == 0)
	            break;
	        ret.push(read_linear_table(w, next));
	    }
	    while (true) {
	        var w = next() - 1;
	        if (w < 0)
	            break;
	        ret.push(read_replacement_table(w, next));
	    }
	    return fromEntries(flat(ret));
	}
	exports.read_mapped_map = read_mapped_map;
	function read_zero_terminated_array(next) {
	    var v = [];
	    while (true) {
	        var i = next();
	        if (i == 0)
	            break;
	        v.push(i);
	    }
	    return v;
	}
	exports.read_zero_terminated_array = read_zero_terminated_array;
	function read_transposed(n, w, next) {
	    var m = Array(n).fill(undefined).map(function () { return []; });
	    for (var i = 0; i < w; i++) {
	        read_deltas(n, next).forEach(function (x, j) { return m[j].push(x); });
	    }
	    return m;
	}
	function read_linear_table(w, next) {
	    var dx = 1 + next();
	    var dy = next();
	    var vN = read_zero_terminated_array(next);
	    var m = read_transposed(vN.length, 1 + w, next);
	    return flat(m.map(function (v, i) {
	        var x = v[0], ys = v.slice(1);
	        //let [x, ...ys] = v;
	        //return Array(vN[i]).fill().map((_, j) => {
	        return Array(vN[i]).fill(undefined).map(function (_, j) {
	            var j_dy = j * dy;
	            return [x + j * dx, ys.map(function (y) { return y + j_dy; })];
	        });
	    }));
	}
	function read_replacement_table(w, next) {
	    var n = 1 + next();
	    var m = read_transposed(n, 1 + w, next);
	    return m.map(function (v) { return [v[0], v.slice(1)]; });
	}
	function read_emoji_trie(next) {
	    var sorted = read_member_array(next).sort(function (a, b) { return a - b; });
	    return read();
	    function read() {
	        var branches = [];
	        while (true) {
	            var keys = read_member_array(next, sorted);
	            if (keys.length == 0)
	                break;
	            branches.push({ set: new Set(keys), node: read() });
	        }
	        branches.sort(function (a, b) { return b.set.size - a.set.size; }); // sort by likelihood
	        var temp = next();
	        var valid = temp % 3;
	        temp = (temp / 3) | 0;
	        var fe0f = !!(temp & 1);
	        temp >>= 1;
	        var save = temp == 1;
	        var check = temp == 2;
	        return { branches: branches, valid: valid, fe0f: fe0f, save: save, check: check };
	    }
	}
	exports.read_emoji_trie = read_emoji_trie;

	});

	var decoder$1 = /*@__PURE__*/getDefaultExportFromCjs(decoder);

	var include = createCommonjsModule(function (module, exports) {
	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getData = void 0;


	function getData() {
	    return (0, decoder.read_compressed_payload)((0, lib$9.decode)(''));
	}
	exports.getData = getData;

	});

	var include$1 = /*@__PURE__*/getDefaultExportFromCjs(include);

	var lib$a = createCommonjsModule(function (module, exports) {
	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ens_normalize = exports.ens_normalize_post_check = void 0;


	var r = (0, include.getData)();

	// @TODO: This should be lazily loaded
	var VALID = new Set((0, decoder.read_member_array)(r));
	var IGNORED = new Set((0, decoder.read_member_array)(r));
	var MAPPED = (0, decoder.read_mapped_map)(r);
	var EMOJI_ROOT = (0, decoder.read_emoji_trie)(r);
	//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
	//const STOP = 0x2E;
	var HYPHEN = 0x2D;
	var UNDERSCORE = 0x5F;
	function explode_cp(name) {
	    return (0, lib$8.toUtf8CodePoints)(name);
	}
	function filter_fe0f(cps) {
	    return cps.filter(function (cp) { return cp != 0xFE0F; });
	}
	function ens_normalize_post_check(name) {
	    for (var _i = 0, _a = name.split('.'); _i < _a.length; _i++) {
	        var label = _a[_i];
	        var cps = explode_cp(label);
	        try {
	            for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
	                if (cps[i] !== UNDERSCORE) {
	                    throw new Error("underscore only allowed at start");
	                }
	            }
	            if (cps.length >= 4 && cps.every(function (cp) { return cp < 0x80; }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
	                throw new Error("invalid label extension");
	            }
	        }
	        catch (err) {
	            throw new Error("Invalid label \"" + label + "\": " + err.message);
	        }
	    }
	    return name;
	}
	exports.ens_normalize_post_check = ens_normalize_post_check;
	function ens_normalize(name) {
	    return ens_normalize_post_check(normalize(name, filter_fe0f));
	}
	exports.ens_normalize = ens_normalize;
	function normalize(name, emoji_filter) {
	    var input = explode_cp(name).reverse(); // flip for pop
	    var output = [];
	    while (input.length) {
	        var emoji = consume_emoji_reversed(input);
	        if (emoji) {
	            output.push.apply(output, emoji_filter(emoji));
	            continue;
	        }
	        var cp = input.pop();
	        if (VALID.has(cp)) {
	            output.push(cp);
	            continue;
	        }
	        if (IGNORED.has(cp)) {
	            continue;
	        }
	        var cps = MAPPED[cp];
	        if (cps) {
	            output.push.apply(output, cps);
	            continue;
	        }
	        throw new Error("Disallowed codepoint: 0x" + cp.toString(16).toUpperCase());
	    }
	    return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
	}
	function nfc(s) {
	    return s.normalize('NFC');
	}
	function consume_emoji_reversed(cps, eaten) {
	    var _a;
	    var node = EMOJI_ROOT;
	    var emoji;
	    var saved;
	    var stack = [];
	    var pos = cps.length;
	    if (eaten)
	        eaten.length = 0; // clear input buffer (if needed)
	    var _loop_1 = function () {
	        var cp = cps[--pos];
	        node = (_a = node.branches.find(function (x) { return x.set.has(cp); })) === null || _a === void 0 ? void 0 : _a.node;
	        if (!node)
	            return "break";
	        if (node.save) { // remember
	            saved = cp;
	        }
	        else if (node.check) { // check exclusion
	            if (cp === saved)
	                return "break";
	        }
	        stack.push(cp);
	        if (node.fe0f) {
	            stack.push(0xFE0F);
	            if (pos > 0 && cps[pos - 1] == 0xFE0F)
	                pos--; // consume optional FE0F
	        }
	        if (node.valid) { // this is a valid emoji (so far)
	            emoji = stack.slice(); // copy stack
	            if (node.valid == 2)
	                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
	            if (eaten)
	                eaten.push.apply(eaten, cps.slice(pos).reverse()); // copy input (if needed)
	            cps.length = pos; // truncate
	        }
	    };
	    while (pos) {
	        var state_1 = _loop_1();
	        if (state_1 === "break")
	            break;
	    }
	    return emoji;
	}

	});

	var lib$b = /*@__PURE__*/getDefaultExportFromCjs(lib$a);

	var namehash_1 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;





	var logger = new lib.Logger(_version$g.version);

	var Zeros = new Uint8Array(32);
	Zeros.fill(0);
	function checkComponent(comp) {
	    if (comp.length === 0) {
	        throw new Error("invalid ENS name; empty component");
	    }
	    return comp;
	}
	function ensNameSplit(name) {
	    var bytes = (0, lib$8.toUtf8Bytes)((0, lib$a.ens_normalize)(name));
	    var comps = [];
	    if (name.length === 0) {
	        return comps;
	    }
	    var last = 0;
	    for (var i = 0; i < bytes.length; i++) {
	        var d = bytes[i];
	        // A separator (i.e. "."); copy this component
	        if (d === 0x2e) {
	            comps.push(checkComponent(bytes.slice(last, i)));
	            last = i + 1;
	        }
	    }
	    // There was a stray separator at the end of the name
	    if (last >= bytes.length) {
	        throw new Error("invalid ENS name; empty component");
	    }
	    comps.push(checkComponent(bytes.slice(last)));
	    return comps;
	}
	function ensNormalize(name) {
	    return ensNameSplit(name).map(function (comp) { return (0, lib$8.toUtf8String)(comp); }).join(".");
	}
	exports.ensNormalize = ensNormalize;
	function isValidName(name) {
	    try {
	        return (ensNameSplit(name).length !== 0);
	    }
	    catch (error) { }
	    return false;
	}
	exports.isValidName = isValidName;
	function namehash(name) {
	    /* istanbul ignore if */
	    if (typeof (name) !== "string") {
	        logger.throwArgumentError("invalid ENS name; not a string", "name", name);
	    }
	    var result = Zeros;
	    var comps = ensNameSplit(name);
	    while (comps.length) {
	        result = (0, lib$4.keccak256)((0, lib$1.concat)([result, (0, lib$4.keccak256)(comps.pop())]));
	    }
	    return (0, lib$1.hexlify)(result);
	}
	exports.namehash = namehash;
	function dnsEncode(name) {
	    return (0, lib$1.hexlify)((0, lib$1.concat)(ensNameSplit(name).map(function (comp) {
	        // DNS does not allow components over 63 bytes in length
	        if (comp.length > 63) {
	            throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
	        }
	        var bytes = new Uint8Array(comp.length + 1);
	        bytes.set(comp, 1);
	        bytes[0] = bytes.length - 1;
	        return bytes;
	    }))) + "00";
	}
	exports.dnsEncode = dnsEncode;

	});

	var namehash = /*@__PURE__*/getDefaultExportFromCjs(namehash_1);

	var message = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hashMessage = exports.messagePrefix = void 0;



	exports.messagePrefix = "\x19Ethereum Signed Message:\n";
	function hashMessage(message) {
	    if (typeof (message) === "string") {
	        message = (0, lib$8.toUtf8Bytes)(message);
	    }
	    return (0, lib$4.keccak256)((0, lib$1.concat)([
	        (0, lib$8.toUtf8Bytes)(exports.messagePrefix),
	        (0, lib$8.toUtf8Bytes)(String(message.length)),
	        message
	    ]));
	}
	exports.hashMessage = hashMessage;

	});

	var message$1 = /*@__PURE__*/getDefaultExportFromCjs(message);

	var typedData = createCommonjsModule(function (module, exports) {
	"use strict";
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TypedDataEncoder = void 0;







	var logger = new lib.Logger(_version$g.version);

	var padding = new Uint8Array(32);
	padding.fill(0);
	var NegativeOne = lib$2.BigNumber.from(-1);
	var Zero = lib$2.BigNumber.from(0);
	var One = lib$2.BigNumber.from(1);
	var MaxUint256 = lib$2.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	function hexPadRight(value) {
	    var bytes = (0, lib$1.arrayify)(value);
	    var padOffset = bytes.length % 32;
	    if (padOffset) {
	        return (0, lib$1.hexConcat)([bytes, padding.slice(padOffset)]);
	    }
	    return (0, lib$1.hexlify)(bytes);
	}
	var hexTrue = (0, lib$1.hexZeroPad)(One.toHexString(), 32);
	var hexFalse = (0, lib$1.hexZeroPad)(Zero.toHexString(), 32);
	var domainFieldTypes = {
	    name: "string",
	    version: "string",
	    chainId: "uint256",
	    verifyingContract: "address",
	    salt: "bytes32"
	};
	var domainFieldNames = [
	    "name", "version", "chainId", "verifyingContract", "salt"
	];
	function checkString(key) {
	    return function (value) {
	        if (typeof (value) !== "string") {
	            logger.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
	        }
	        return value;
	    };
	}
	var domainChecks = {
	    name: checkString("name"),
	    version: checkString("version"),
	    chainId: function (value) {
	        try {
	            return lib$2.BigNumber.from(value).toString();
	        }
	        catch (error) { }
	        return logger.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
	    },
	    verifyingContract: function (value) {
	        try {
	            return (0, lib$6.getAddress)(value).toLowerCase();
	        }
	        catch (error) { }
	        return logger.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
	    },
	    salt: function (value) {
	        try {
	            var bytes = (0, lib$1.arrayify)(value);
	            if (bytes.length !== 32) {
	                throw new Error("bad length");
	            }
	            return (0, lib$1.hexlify)(bytes);
	        }
	        catch (error) { }
	        return logger.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
	    }
	};
	function getBaseEncoder(type) {
	    // intXX and uintXX
	    {
	        var match = type.match(/^(u?)int(\d*)$/);
	        if (match) {
	            var signed = (match[1] === "");
	            var width = parseInt(match[2] || "256");
	            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
	                logger.throwArgumentError("invalid numeric width", "type", type);
	            }
	            var boundsUpper_1 = MaxUint256.mask(signed ? (width - 1) : width);
	            var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
	            return function (value) {
	                var v = lib$2.BigNumber.from(value);
	                if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
	                    logger.throwArgumentError("value out-of-bounds for " + type, "value", value);
	                }
	                return (0, lib$1.hexZeroPad)(v.toTwos(256).toHexString(), 32);
	            };
	        }
	    }
	    // bytesXX
	    {
	        var match = type.match(/^bytes(\d+)$/);
	        if (match) {
	            var width_1 = parseInt(match[1]);
	            if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
	                logger.throwArgumentError("invalid bytes width", "type", type);
	            }
	            return function (value) {
	                var bytes = (0, lib$1.arrayify)(value);
	                if (bytes.length !== width_1) {
	                    logger.throwArgumentError("invalid length for " + type, "value", value);
	                }
	                return hexPadRight(value);
	            };
	        }
	    }
	    switch (type) {
	        case "address": return function (value) {
	            return (0, lib$1.hexZeroPad)((0, lib$6.getAddress)(value), 32);
	        };
	        case "bool": return function (value) {
	            return ((!value) ? hexFalse : hexTrue);
	        };
	        case "bytes": return function (value) {
	            return (0, lib$4.keccak256)(value);
	        };
	        case "string": return function (value) {
	            return (0, id_1.id)(value);
	        };
	    }
	    return null;
	}
	function encodeType(name, fields) {
	    return name + "(" + fields.map(function (_a) {
	        var name = _a.name, type = _a.type;
	        return (type + " " + name);
	    }).join(",") + ")";
	}
	var TypedDataEncoder = /** @class */ (function () {
	    function TypedDataEncoder(types) {
	        (0, lib$3.defineReadOnly)(this, "types", Object.freeze((0, lib$3.deepCopy)(types)));
	        (0, lib$3.defineReadOnly)(this, "_encoderCache", {});
	        (0, lib$3.defineReadOnly)(this, "_types", {});
	        // Link struct types to their direct child structs
	        var links = {};
	        // Link structs to structs which contain them as a child
	        var parents = {};
	        // Link all subtypes within a given struct
	        var subtypes = {};
	        Object.keys(types).forEach(function (type) {
	            links[type] = {};
	            parents[type] = [];
	            subtypes[type] = {};
	        });
	        var _loop_1 = function (name_1) {
	            var uniqueNames = {};
	            types[name_1].forEach(function (field) {
	                // Check each field has a unique name
	                if (uniqueNames[field.name]) {
	                    logger.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_1), "types", types);
	                }
	                uniqueNames[field.name] = true;
	                // Get the base type (drop any array specifiers)
	                var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
	                if (baseType === name_1) {
	                    logger.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
	                }
	                // Is this a base encoding type?
	                var encoder = getBaseEncoder(baseType);
	                if (encoder) {
	                    return;
	                }
	                if (!parents[baseType]) {
	                    logger.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
	                }
	                // Add linkage
	                parents[baseType].push(name_1);
	                links[name_1][baseType] = true;
	            });
	        };
	        for (var name_1 in types) {
	            _loop_1(name_1);
	        }
	        // Deduce the primary type
	        var primaryTypes = Object.keys(parents).filter(function (n) { return (parents[n].length === 0); });
	        if (primaryTypes.length === 0) {
	            logger.throwArgumentError("missing primary type", "types", types);
	        }
	        else if (primaryTypes.length > 1) {
	            logger.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function (t) { return (JSON.stringify(t)); }).join(", "), "types", types);
	        }
	        (0, lib$3.defineReadOnly)(this, "primaryType", primaryTypes[0]);
	        // Check for circular type references
	        function checkCircular(type, found) {
	            if (found[type]) {
	                logger.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
	            }
	            found[type] = true;
	            Object.keys(links[type]).forEach(function (child) {
	                if (!parents[child]) {
	                    return;
	                }
	                // Recursively check children
	                checkCircular(child, found);
	                // Mark all ancestors as having this decendant
	                Object.keys(found).forEach(function (subtype) {
	                    subtypes[subtype][child] = true;
	                });
	            });
	            delete found[type];
	        }
	        checkCircular(this.primaryType, {});
	        // Compute each fully describe type
	        for (var name_2 in subtypes) {
	            var st = Object.keys(subtypes[name_2]);
	            st.sort();
	            this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) { return encodeType(t, types[t]); }).join("");
	        }
	    }
	    TypedDataEncoder.prototype.getEncoder = function (type) {
	        var encoder = this._encoderCache[type];
	        if (!encoder) {
	            encoder = this._encoderCache[type] = this._getEncoder(type);
	        }
	        return encoder;
	    };
	    TypedDataEncoder.prototype._getEncoder = function (type) {
	        var _this = this;
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            var encoder = getBaseEncoder(type);
	            if (encoder) {
	                return encoder;
	            }
	        }
	        // Array
	        var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
	        if (match) {
	            var subtype_1 = match[1];
	            var subEncoder_1 = this.getEncoder(subtype_1);
	            var length_1 = parseInt(match[3]);
	            return function (value) {
	                if (length_1 >= 0 && value.length !== length_1) {
	                    logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
	                }
	                var result = value.map(subEncoder_1);
	                if (_this._types[subtype_1]) {
	                    result = result.map(lib$4.keccak256);
	                }
	                return (0, lib$4.keccak256)((0, lib$1.hexConcat)(result));
	            };
	        }
	        // Struct
	        var fields = this.types[type];
	        if (fields) {
	            var encodedType_1 = (0, id_1.id)(this._types[type]);
	            return function (value) {
	                var values = fields.map(function (_a) {
	                    var name = _a.name, type = _a.type;
	                    var result = _this.getEncoder(type)(value[name]);
	                    if (_this._types[type]) {
	                        return (0, lib$4.keccak256)(result);
	                    }
	                    return result;
	                });
	                values.unshift(encodedType_1);
	                return (0, lib$1.hexConcat)(values);
	            };
	        }
	        return logger.throwArgumentError("unknown type: " + type, "type", type);
	    };
	    TypedDataEncoder.prototype.encodeType = function (name) {
	        var result = this._types[name];
	        if (!result) {
	            logger.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
	        }
	        return result;
	    };
	    TypedDataEncoder.prototype.encodeData = function (type, value) {
	        return this.getEncoder(type)(value);
	    };
	    TypedDataEncoder.prototype.hashStruct = function (name, value) {
	        return (0, lib$4.keccak256)(this.encodeData(name, value));
	    };
	    TypedDataEncoder.prototype.encode = function (value) {
	        return this.encodeData(this.primaryType, value);
	    };
	    TypedDataEncoder.prototype.hash = function (value) {
	        return this.hashStruct(this.primaryType, value);
	    };
	    TypedDataEncoder.prototype._visit = function (type, value, callback) {
	        var _this = this;
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            var encoder = getBaseEncoder(type);
	            if (encoder) {
	                return callback(type, value);
	            }
	        }
	        // Array
	        var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
	        if (match) {
	            var subtype_2 = match[1];
	            var length_2 = parseInt(match[3]);
	            if (length_2 >= 0 && value.length !== length_2) {
	                logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
	            }
	            return value.map(function (v) { return _this._visit(subtype_2, v, callback); });
	        }
	        // Struct
	        var fields = this.types[type];
	        if (fields) {
	            return fields.reduce(function (accum, _a) {
	                var name = _a.name, type = _a.type;
	                accum[name] = _this._visit(type, value[name], callback);
	                return accum;
	            }, {});
	        }
	        return logger.throwArgumentError("unknown type: " + type, "type", type);
	    };
	    TypedDataEncoder.prototype.visit = function (value, callback) {
	        return this._visit(this.primaryType, value, callback);
	    };
	    TypedDataEncoder.from = function (types) {
	        return new TypedDataEncoder(types);
	    };
	    TypedDataEncoder.getPrimaryType = function (types) {
	        return TypedDataEncoder.from(types).primaryType;
	    };
	    TypedDataEncoder.hashStruct = function (name, types, value) {
	        return TypedDataEncoder.from(types).hashStruct(name, value);
	    };
	    TypedDataEncoder.hashDomain = function (domain) {
	        var domainFields = [];
	        for (var name_3 in domain) {
	            var type = domainFieldTypes[name_3];
	            if (!type) {
	                logger.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
	            }
	            domainFields.push({ name: name_3, type: type });
	        }
	        domainFields.sort(function (a, b) {
	            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
	        });
	        return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
	    };
	    TypedDataEncoder.encode = function (domain, types, value) {
	        return (0, lib$1.hexConcat)([
	            "0x1901",
	            TypedDataEncoder.hashDomain(domain),
	            TypedDataEncoder.from(types).hash(value)
	        ]);
	    };
	    TypedDataEncoder.hash = function (domain, types, value) {
	        return (0, lib$4.keccak256)(TypedDataEncoder.encode(domain, types, value));
	    };
	    // Replaces all address types with ENS names with their looked up address
	    TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {
	        return __awaiter(this, void 0, void 0, function () {
	            var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
	            return __generator(this, function (_e) {
	                switch (_e.label) {
	                    case 0:
	                        // Make a copy to isolate it from the object passed in
	                        domain = (0, lib$3.shallowCopy)(domain);
	                        ensCache = {};
	                        // Do we need to look up the domain's verifyingContract?
	                        if (domain.verifyingContract && !(0, lib$1.isHexString)(domain.verifyingContract, 20)) {
	                            ensCache[domain.verifyingContract] = "0x";
	                        }
	                        encoder = TypedDataEncoder.from(types);
	                        // Get a list of all the addresses
	                        encoder.visit(value, function (type, value) {
	                            if (type === "address" && !(0, lib$1.isHexString)(value, 20)) {
	                                ensCache[value] = "0x";
	                            }
	                            return value;
	                        });
	                        _a = [];
	                        for (_b in ensCache)
	                            _a.push(_b);
	                        _i = 0;
	                        _e.label = 1;
	                    case 1:
	                        if (!(_i < _a.length)) return [3 /*break*/, 4];
	                        name_4 = _a[_i];
	                        _c = ensCache;
	                        _d = name_4;
	                        return [4 /*yield*/, resolveName(name_4)];
	                    case 2:
	                        _c[_d] = _e.sent();
	                        _e.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4:
	                        // Replace the domain verifyingContract if needed
	                        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
	                            domain.verifyingContract = ensCache[domain.verifyingContract];
	                        }
	                        // Replace all ENS names with their address
	                        value = encoder.visit(value, function (type, value) {
	                            if (type === "address" && ensCache[value]) {
	                                return ensCache[value];
	                            }
	                            return value;
	                        });
	                        return [2 /*return*/, { domain: domain, value: value }];
	                }
	            });
	        });
	    };
	    TypedDataEncoder.getPayload = function (domain, types, value) {
	        // Validate the domain fields
	        TypedDataEncoder.hashDomain(domain);
	        // Derive the EIP712Domain Struct reference type
	        var domainValues = {};
	        var domainTypes = [];
	        domainFieldNames.forEach(function (name) {
	            var value = domain[name];
	            if (value == null) {
	                return;
	            }
	            domainValues[name] = domainChecks[name](value);
	            domainTypes.push({ name: name, type: domainFieldTypes[name] });
	        });
	        var encoder = TypedDataEncoder.from(types);
	        var typesWithDomain = (0, lib$3.shallowCopy)(types);
	        if (typesWithDomain.EIP712Domain) {
	            logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
	        }
	        else {
	            typesWithDomain.EIP712Domain = domainTypes;
	        }
	        // Validate the data structures and types
	        encoder.encode(value);
	        return {
	            types: typesWithDomain,
	            domain: domainValues,
	            primaryType: encoder.primaryType,
	            message: encoder.visit(value, function (type, value) {
	                // bytes
	                if (type.match(/^bytes(\d*)/)) {
	                    return (0, lib$1.hexlify)((0, lib$1.arrayify)(value));
	                }
	                // uint or int
	                if (type.match(/^u?int/)) {
	                    return lib$2.BigNumber.from(value).toString();
	                }
	                switch (type) {
	                    case "address":
	                        return value.toLowerCase();
	                    case "bool":
	                        return !!value;
	                    case "string":
	                        if (typeof (value) !== "string") {
	                            logger.throwArgumentError("invalid string", "value", value);
	                        }
	                        return value;
	                }
	                return logger.throwArgumentError("unsupported type", "type", type);
	            })
	        };
	    };
	    return TypedDataEncoder;
	}());
	exports.TypedDataEncoder = TypedDataEncoder;

	});

	var typedData$1 = /*@__PURE__*/getDefaultExportFromCjs(typedData);

	var lib$c = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.ensNormalize = exports.isValidName = exports.namehash = exports.dnsEncode = exports.id = void 0;

	Object.defineProperty(exports, "id", { enumerable: true, get: function () { return id_1.id; } });

	Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return namehash_1.dnsEncode; } });
	Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return namehash_1.isValidName; } });
	Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return namehash_1.namehash; } });

	Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return message.hashMessage; } });
	Object.defineProperty(exports, "messagePrefix", { enumerable: true, get: function () { return message.messagePrefix; } });
	var namehash_2 = namehash_1;
	Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function () { return namehash_2.ensNormalize; } });

	Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return typedData.TypedDataEncoder; } });

	});

	var index$a = /*@__PURE__*/getDefaultExportFromCjs(lib$c);

	var _interface = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;








	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abstractCoder.checkResultErrors; } });



	var logger = new lib.Logger(_version$8.version);
	var LogDescription = /** @class */ (function (_super) {
	    __extends(LogDescription, _super);
	    function LogDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return LogDescription;
	}(lib$3.Description));
	exports.LogDescription = LogDescription;
	var TransactionDescription = /** @class */ (function (_super) {
	    __extends(TransactionDescription, _super);
	    function TransactionDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return TransactionDescription;
	}(lib$3.Description));
	exports.TransactionDescription = TransactionDescription;
	var ErrorDescription = /** @class */ (function (_super) {
	    __extends(ErrorDescription, _super);
	    function ErrorDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return ErrorDescription;
	}(lib$3.Description));
	exports.ErrorDescription = ErrorDescription;
	var Indexed = /** @class */ (function (_super) {
	    __extends(Indexed, _super);
	    function Indexed() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Indexed.isIndexed = function (value) {
	        return !!(value && value._isIndexed);
	    };
	    return Indexed;
	}(lib$3.Description));
	exports.Indexed = Indexed;
	var BuiltinErrors = {
	    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
	    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
	};
	function wrapAccessError(property, error) {
	    var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
	    wrap.error = error;
	    return wrap;
	}
	/*
	function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
	    params.reduce((accum, param) => {
	        if (param.name) {
	            if (accum[param.name]) {
	                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
	            }
	            accum[param.name] = true;
	        }
	        return accum;
	    }, <{ [ name: string ]: boolean }>{ });
	}
	*/
	var Interface = /** @class */ (function () {
	    function Interface(fragments$1) {
	        var _newTarget = this.constructor;
	        var _this = this;
	        var abi = [];
	        if (typeof (fragments$1) === "string") {
	            abi = JSON.parse(fragments$1);
	        }
	        else {
	            abi = fragments$1;
	        }
	        (0, lib$3.defineReadOnly)(this, "fragments", abi.map(function (fragment) {
	            return fragments.Fragment.from(fragment);
	        }).filter(function (fragment) { return (fragment != null); }));
	        (0, lib$3.defineReadOnly)(this, "_abiCoder", (0, lib$3.getStatic)(_newTarget, "getAbiCoder")());
	        (0, lib$3.defineReadOnly)(this, "functions", {});
	        (0, lib$3.defineReadOnly)(this, "errors", {});
	        (0, lib$3.defineReadOnly)(this, "events", {});
	        (0, lib$3.defineReadOnly)(this, "structs", {});
	        // Add all fragments by their signature
	        this.fragments.forEach(function (fragment) {
	            var bucket = null;
	            switch (fragment.type) {
	                case "constructor":
	                    if (_this.deploy) {
	                        logger.warn("duplicate definition - constructor");
	                        return;
	                    }
	                    //checkNames(fragment, "input", fragment.inputs);
	                    (0, lib$3.defineReadOnly)(_this, "deploy", fragment);
	                    return;
	                case "function":
	                    //checkNames(fragment, "input", fragment.inputs);
	                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
	                    bucket = _this.functions;
	                    break;
	                case "event":
	                    //checkNames(fragment, "input", fragment.inputs);
	                    bucket = _this.events;
	                    break;
	                case "error":
	                    bucket = _this.errors;
	                    break;
	                default:
	                    return;
	            }
	            var signature = fragment.format();
	            if (bucket[signature]) {
	                logger.warn("duplicate definition - " + signature);
	                return;
	            }
	            bucket[signature] = fragment;
	        });
	        // If we do not have a constructor add a default
	        if (!this.deploy) {
	            (0, lib$3.defineReadOnly)(this, "deploy", fragments.ConstructorFragment.from({
	                payable: false,
	                type: "constructor"
	            }));
	        }
	        (0, lib$3.defineReadOnly)(this, "_isInterface", true);
	    }
	    Interface.prototype.format = function (format) {
	        if (!format) {
	            format = fragments.FormatTypes.full;
	        }
	        if (format === fragments.FormatTypes.sighash) {
	            logger.throwArgumentError("interface does not support formatting sighash", "format", format);
	        }
	        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });
	        // We need to re-bundle the JSON fragments a bit
	        if (format === fragments.FormatTypes.json) {
	            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));
	        }
	        return abi;
	    };
	    // Sub-classes can override these to handle other blockchains
	    Interface.getAbiCoder = function () {
	        return abiCoder.defaultAbiCoder;
	    };
	    Interface.getAddress = function (address) {
	        return (0, lib$6.getAddress)(address);
	    };
	    Interface.getSighash = function (fragment) {
	        return (0, lib$1.hexDataSlice)((0, lib$c.id)(fragment.format()), 0, 4);
	    };
	    Interface.getEventTopic = function (eventFragment) {
	        return (0, lib$c.id)(eventFragment.format());
	    };
	    // Find a function definition by any means necessary (unless it is ambiguous)
	    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {
	        if ((0, lib$1.isHexString)(nameOrSignatureOrSighash)) {
	            for (var name_1 in this.functions) {
	                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
	                    return this.functions[name_1];
	                }
	            }
	            logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
	            var name_2 = nameOrSignatureOrSighash.trim();
	            var matching = Object.keys(this.functions).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_2); });
	            if (matching.length === 0) {
	                logger.throwArgumentError("no matching function", "name", name_2);
	            }
	            else if (matching.length > 1) {
	                logger.throwArgumentError("multiple matching functions", "name", name_2);
	            }
	            return this.functions[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        var result = this.functions[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
	        if (!result) {
	            logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
	        }
	        return result;
	    };
	    // Find an event definition by any means necessary (unless it is ambiguous)
	    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {
	        if ((0, lib$1.isHexString)(nameOrSignatureOrTopic)) {
	            var topichash = nameOrSignatureOrTopic.toLowerCase();
	            for (var name_3 in this.events) {
	                if (topichash === this.getEventTopic(name_3)) {
	                    return this.events[name_3];
	                }
	            }
	            logger.throwArgumentError("no matching event", "topichash", topichash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
	            var name_4 = nameOrSignatureOrTopic.trim();
	            var matching = Object.keys(this.events).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_4); });
	            if (matching.length === 0) {
	                logger.throwArgumentError("no matching event", "name", name_4);
	            }
	            else if (matching.length > 1) {
	                logger.throwArgumentError("multiple matching events", "name", name_4);
	            }
	            return this.events[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        var result = this.events[fragments.EventFragment.fromString(nameOrSignatureOrTopic).format()];
	        if (!result) {
	            logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
	        }
	        return result;
	    };
	    // Find a function definition by any means necessary (unless it is ambiguous)
	    Interface.prototype.getError = function (nameOrSignatureOrSighash) {
	        if ((0, lib$1.isHexString)(nameOrSignatureOrSighash)) {
	            var getSighash = (0, lib$3.getStatic)(this.constructor, "getSighash");
	            for (var name_5 in this.errors) {
	                var error = this.errors[name_5];
	                if (nameOrSignatureOrSighash === getSighash(error)) {
	                    return this.errors[name_5];
	                }
	            }
	            logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
	        }
	        // It is a bare name, look up the function (will return null if ambiguous)
	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
	            var name_6 = nameOrSignatureOrSighash.trim();
	            var matching = Object.keys(this.errors).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_6); });
	            if (matching.length === 0) {
	                logger.throwArgumentError("no matching error", "name", name_6);
	            }
	            else if (matching.length > 1) {
	                logger.throwArgumentError("multiple matching errors", "name", name_6);
	            }
	            return this.errors[matching[0]];
	        }
	        // Normalize the signature and lookup the function
	        var result = this.errors[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
	        if (!result) {
	            logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
	        }
	        return result;
	    };
	    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
	    Interface.prototype.getSighash = function (fragment) {
	        if (typeof (fragment) === "string") {
	            try {
	                fragment = this.getFunction(fragment);
	            }
	            catch (error) {
	                try {
	                    fragment = this.getError(fragment);
	                }
	                catch (_) {
	                    throw error;
	                }
	            }
	        }
	        return (0, lib$3.getStatic)(this.constructor, "getSighash")(fragment);
	    };
	    // Get the topic (the bytes32 hash) used by Solidity to identify an event
	    Interface.prototype.getEventTopic = function (eventFragment) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        return (0, lib$3.getStatic)(this.constructor, "getEventTopic")(eventFragment);
	    };
	    Interface.prototype._decodeParams = function (params, data) {
	        return this._abiCoder.decode(params, data);
	    };
	    Interface.prototype._encodeParams = function (params, values) {
	        return this._abiCoder.encode(params, values);
	    };
	    Interface.prototype.encodeDeploy = function (values) {
	        return this._encodeParams(this.deploy.inputs, values || []);
	    };
	    Interface.prototype.decodeErrorResult = function (fragment, data) {
	        if (typeof (fragment) === "string") {
	            fragment = this.getError(fragment);
	        }
	        var bytes = (0, lib$1.arrayify)(data);
	        if ((0, lib$1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
	            logger.throwArgumentError("data signature does not match error " + fragment.name + ".", "data", (0, lib$1.hexlify)(bytes));
	        }
	        return this._decodeParams(fragment.inputs, bytes.slice(4));
	    };
	    Interface.prototype.encodeErrorResult = function (fragment, values) {
	        if (typeof (fragment) === "string") {
	            fragment = this.getError(fragment);
	        }
	        return (0, lib$1.hexlify)((0, lib$1.concat)([
	            this.getSighash(fragment),
	            this._encodeParams(fragment.inputs, values || [])
	        ]));
	    };
	    // Decode the data for a function call (e.g. tx.data)
	    Interface.prototype.decodeFunctionData = function (functionFragment, data) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        var bytes = (0, lib$1.arrayify)(data);
	        if ((0, lib$1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
	            logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", (0, lib$1.hexlify)(bytes));
	        }
	        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
	    };
	    // Encode the data for a function call (e.g. tx.data)
	    Interface.prototype.encodeFunctionData = function (functionFragment, values) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        return (0, lib$1.hexlify)((0, lib$1.concat)([
	            this.getSighash(functionFragment),
	            this._encodeParams(functionFragment.inputs, values || [])
	        ]));
	    };
	    // Decode the result from a function call (e.g. from eth_call)
	    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        var bytes = (0, lib$1.arrayify)(data);
	        var reason = null;
	        var message = "";
	        var errorArgs = null;
	        var errorName = null;
	        var errorSignature = null;
	        switch (bytes.length % this._abiCoder._getWordSize()) {
	            case 0:
	                try {
	                    return this._abiCoder.decode(functionFragment.outputs, bytes);
	                }
	                catch (error) { }
	                break;
	            case 4: {
	                var selector = (0, lib$1.hexlify)(bytes.slice(0, 4));
	                var builtin = BuiltinErrors[selector];
	                if (builtin) {
	                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
	                    errorName = builtin.name;
	                    errorSignature = builtin.signature;
	                    if (builtin.reason) {
	                        reason = errorArgs[0];
	                    }
	                    if (errorName === "Error") {
	                        message = "; VM Exception while processing transaction: reverted with reason string " + JSON.stringify(errorArgs[0]);
	                    }
	                    else if (errorName === "Panic") {
	                        message = "; VM Exception while processing transaction: reverted with panic code " + errorArgs[0];
	                    }
	                }
	                else {
	                    try {
	                        var error = this.getError(selector);
	                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
	                        errorName = error.name;
	                        errorSignature = error.format();
	                    }
	                    catch (error) { }
	                }
	                break;
	            }
	        }
	        return logger.throwError("call revert exception" + message, lib.Logger.errors.CALL_EXCEPTION, {
	            method: functionFragment.format(),
	            data: (0, lib$1.hexlify)(data),
	            errorArgs: errorArgs,
	            errorName: errorName,
	            errorSignature: errorSignature,
	            reason: reason
	        });
	    };
	    // Encode the result for a function call (e.g. for eth_call)
	    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {
	        if (typeof (functionFragment) === "string") {
	            functionFragment = this.getFunction(functionFragment);
	        }
	        return (0, lib$1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
	    };
	    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
	    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {
	        var _this = this;
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        if (values.length > eventFragment.inputs.length) {
	            logger.throwError("too many arguments for " + eventFragment.format(), lib.Logger.errors.UNEXPECTED_ARGUMENT, {
	                argument: "values",
	                value: values
	            });
	        }
	        var topics = [];
	        if (!eventFragment.anonymous) {
	            topics.push(this.getEventTopic(eventFragment));
	        }
	        var encodeTopic = function (param, value) {
	            if (param.type === "string") {
	                return (0, lib$c.id)(value);
	            }
	            else if (param.type === "bytes") {
	                return (0, lib$4.keccak256)((0, lib$1.hexlify)(value));
	            }
	            if (param.type === "bool" && typeof (value) === "boolean") {
	                value = (value ? "0x01" : "0x00");
	            }
	            if (param.type.match(/^u?int/)) {
	                value = lib$2.BigNumber.from(value).toHexString();
	            }
	            // Check addresses are valid
	            if (param.type === "address") {
	                _this._abiCoder.encode(["address"], [value]);
	            }
	            return (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(value), 32);
	        };
	        values.forEach(function (value, index) {
	            var param = eventFragment.inputs[index];
	            if (!param.indexed) {
	                if (value != null) {
	                    logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
	                }
	                return;
	            }
	            if (value == null) {
	                topics.push(null);
	            }
	            else if (param.baseType === "array" || param.baseType === "tuple") {
	                logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
	            }
	            else if (Array.isArray(value)) {
	                topics.push(value.map(function (value) { return encodeTopic(param, value); }));
	            }
	            else {
	                topics.push(encodeTopic(param, value));
	            }
	        });
	        // Trim off trailing nulls
	        while (topics.length && topics[topics.length - 1] === null) {
	            topics.pop();
	        }
	        return topics;
	    };
	    Interface.prototype.encodeEventLog = function (eventFragment, values) {
	        var _this = this;
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        var topics = [];
	        var dataTypes = [];
	        var dataValues = [];
	        if (!eventFragment.anonymous) {
	            topics.push(this.getEventTopic(eventFragment));
	        }
	        if (values.length !== eventFragment.inputs.length) {
	            logger.throwArgumentError("event arguments/values mismatch", "values", values);
	        }
	        eventFragment.inputs.forEach(function (param, index) {
	            var value = values[index];
	            if (param.indexed) {
	                if (param.type === "string") {
	                    topics.push((0, lib$c.id)(value));
	                }
	                else if (param.type === "bytes") {
	                    topics.push((0, lib$4.keccak256)(value));
	                }
	                else if (param.baseType === "tuple" || param.baseType === "array") {
	                    // @TODO
	                    throw new Error("not implemented");
	                }
	                else {
	                    topics.push(_this._abiCoder.encode([param.type], [value]));
	                }
	            }
	            else {
	                dataTypes.push(param);
	                dataValues.push(value);
	            }
	        });
	        return {
	            data: this._abiCoder.encode(dataTypes, dataValues),
	            topics: topics
	        };
	    };
	    // Decode a filter for the event and the search criteria
	    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {
	        if (typeof (eventFragment) === "string") {
	            eventFragment = this.getEvent(eventFragment);
	        }
	        if (topics != null && !eventFragment.anonymous) {
	            var topicHash = this.getEventTopic(eventFragment);
	            if (!(0, lib$1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
	                logger.throwError("fragment/topic mismatch", lib.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
	            }
	            topics = topics.slice(1);
	        }
	        var indexed = [];
	        var nonIndexed = [];
	        var dynamic = [];
	        eventFragment.inputs.forEach(function (param, index) {
	            if (param.indexed) {
	                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
	                    indexed.push(fragments.ParamType.fromObject({ type: "bytes32", name: param.name }));
	                    dynamic.push(true);
	                }
	                else {
	                    indexed.push(param);
	                    dynamic.push(false);
	                }
	            }
	            else {
	                nonIndexed.push(param);
	                dynamic.push(false);
	            }
	        });
	        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, lib$1.concat)(topics)) : null;
	        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
	        var result = [];
	        var nonIndexedIndex = 0, indexedIndex = 0;
	        eventFragment.inputs.forEach(function (param, index) {
	            if (param.indexed) {
	                if (resultIndexed == null) {
	                    result[index] = new Indexed({ _isIndexed: true, hash: null });
	                }
	                else if (dynamic[index]) {
	                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
	                }
	                else {
	                    try {
	                        result[index] = resultIndexed[indexedIndex++];
	                    }
	                    catch (error) {
	                        result[index] = error;
	                    }
	                }
	            }
	            else {
	                try {
	                    result[index] = resultNonIndexed[nonIndexedIndex++];
	                }
	                catch (error) {
	                    result[index] = error;
	                }
	            }
	            // Add the keyword argument if named and safe
	            if (param.name && result[param.name] == null) {
	                var value_1 = result[index];
	                // Make error named values throw on access
	                if (value_1 instanceof Error) {
	                    Object.defineProperty(result, param.name, {
	                        enumerable: true,
	                        get: function () { throw wrapAccessError("property " + JSON.stringify(param.name), value_1); }
	                    });
	                }
	                else {
	                    result[param.name] = value_1;
	                }
	            }
	        });
	        var _loop_1 = function (i) {
	            var value = result[i];
	            if (value instanceof Error) {
	                Object.defineProperty(result, i, {
	                    enumerable: true,
	                    get: function () { throw wrapAccessError("index " + i, value); }
	                });
	            }
	        };
	        // Make all error indexed values throw on access
	        for (var i = 0; i < result.length; i++) {
	            _loop_1(i);
	        }
	        return Object.freeze(result);
	    };
	    // Given a transaction, find the matching function fragment (if any) and
	    // determine all its properties and call parameters
	    Interface.prototype.parseTransaction = function (tx) {
	        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
	        if (!fragment) {
	            return null;
	        }
	        return new TransactionDescription({
	            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
	            functionFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            sighash: this.getSighash(fragment),
	            value: lib$2.BigNumber.from(tx.value || "0"),
	        });
	    };
	    // @TODO
	    //parseCallResult(data: BytesLike): ??
	    // Given an event log, find the matching event fragment (if any) and
	    // determine all its properties and values
	    Interface.prototype.parseLog = function (log) {
	        var fragment = this.getEvent(log.topics[0]);
	        if (!fragment || fragment.anonymous) {
	            return null;
	        }
	        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
	        //        Probably not, because just because it is the only event in the ABI does
	        //        not mean we have the full ABI; maybe just a fragment?
	        return new LogDescription({
	            eventFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            topic: this.getEventTopic(fragment),
	            args: this.decodeEventLog(fragment, log.data, log.topics)
	        });
	    };
	    Interface.prototype.parseError = function (data) {
	        var hexData = (0, lib$1.hexlify)(data);
	        var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
	        if (!fragment) {
	            return null;
	        }
	        return new ErrorDescription({
	            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
	            errorFragment: fragment,
	            name: fragment.name,
	            signature: fragment.format(),
	            sighash: this.getSighash(fragment),
	        });
	    };
	    /*
	    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
	        if (Interface.isInterface(value)) {
	            return value;
	        }
	        if (typeof(value) === "string") {
	            return new Interface(JSON.parse(value));
	        }
	        return new Interface(value);
	    }
	    */
	    Interface.isInterface = function (value) {
	        return !!(value && value._isInterface);
	    };
	    return Interface;
	}());
	exports.Interface = Interface;

	});

	var _interface$1 = /*@__PURE__*/getDefaultExportFromCjs(_interface);

	var lib$d = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;

	Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return fragments.ConstructorFragment; } });
	Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return fragments.ErrorFragment; } });
	Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return fragments.EventFragment; } });
	Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return fragments.FormatTypes; } });
	Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return fragments.Fragment; } });
	Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return fragments.FunctionFragment; } });
	Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return fragments.ParamType; } });

	Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abiCoder.AbiCoder; } });
	Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abiCoder.defaultAbiCoder; } });

	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return _interface.checkResultErrors; } });
	Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return _interface.Indexed; } });
	Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return _interface.Interface; } });
	Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return _interface.LogDescription; } });
	Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return _interface.TransactionDescription; } });

	});

	var index$b = /*@__PURE__*/getDefaultExportFromCjs(lib$d);

	var _version$i = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "abstract-provider/5.8.0";

	});

	var _version$j = /*@__PURE__*/getDefaultExportFromCjs(_version$i);

	var lib$e = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Provider = exports.TransactionOrderForkEvent = exports.TransactionForkEvent = exports.BlockForkEvent = exports.ForkEvent = void 0;





	var logger = new lib.Logger(_version$i.version);
	;
	;
	//export type CallTransactionable = {
	//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
	//};
	var ForkEvent = /** @class */ (function (_super) {
	    __extends(ForkEvent, _super);
	    function ForkEvent() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ForkEvent.isForkEvent = function (value) {
	        return !!(value && value._isForkEvent);
	    };
	    return ForkEvent;
	}(lib$3.Description));
	exports.ForkEvent = ForkEvent;
	var BlockForkEvent = /** @class */ (function (_super) {
	    __extends(BlockForkEvent, _super);
	    function BlockForkEvent(blockHash, expiry) {
	        var _this = this;
	        if (!(0, lib$1.isHexString)(blockHash, 32)) {
	            logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isBlockForkEvent: true,
	            expiry: (expiry || 0),
	            blockHash: blockHash
	        }) || this;
	        return _this;
	    }
	    return BlockForkEvent;
	}(ForkEvent));
	exports.BlockForkEvent = BlockForkEvent;
	var TransactionForkEvent = /** @class */ (function (_super) {
	    __extends(TransactionForkEvent, _super);
	    function TransactionForkEvent(hash, expiry) {
	        var _this = this;
	        if (!(0, lib$1.isHexString)(hash, 32)) {
	            logger.throwArgumentError("invalid transaction hash", "hash", hash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isTransactionForkEvent: true,
	            expiry: (expiry || 0),
	            hash: hash
	        }) || this;
	        return _this;
	    }
	    return TransactionForkEvent;
	}(ForkEvent));
	exports.TransactionForkEvent = TransactionForkEvent;
	var TransactionOrderForkEvent = /** @class */ (function (_super) {
	    __extends(TransactionOrderForkEvent, _super);
	    function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
	        var _this = this;
	        if (!(0, lib$1.isHexString)(beforeHash, 32)) {
	            logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
	        }
	        if (!(0, lib$1.isHexString)(afterHash, 32)) {
	            logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isTransactionOrderForkEvent: true,
	            expiry: (expiry || 0),
	            beforeHash: beforeHash,
	            afterHash: afterHash
	        }) || this;
	        return _this;
	    }
	    return TransactionOrderForkEvent;
	}(ForkEvent));
	exports.TransactionOrderForkEvent = TransactionOrderForkEvent;
	///////////////////////////////
	// Exported Abstracts
	var Provider = /** @class */ (function () {
	    function Provider() {
	        var _newTarget = this.constructor;
	        logger.checkAbstract(_newTarget, Provider);
	        (0, lib$3.defineReadOnly)(this, "_isProvider", true);
	    }
	    Provider.prototype.getFeeData = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                            block: this.getBlock("latest"),
	                            gasPrice: this.getGasPrice().catch(function (error) {
	                                // @TODO: Why is this now failing on Calaveras?
	                                //console.log(error);
	                                return null;
	                            })
	                        })];
	                    case 1:
	                        _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
	                        lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
	                        if (block && block.baseFeePerGas) {
	                            // We may want to compute this more accurately in the future,
	                            // using the formula "check if the base fee is correct".
	                            // See: https://eips.ethereum.org/EIPS/eip-1559
	                            lastBaseFeePerGas = block.baseFeePerGas;
	                            maxPriorityFeePerGas = lib$2.BigNumber.from("1500000000");
	                            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
	                        }
	                        return [2 /*return*/, { lastBaseFeePerGas: lastBaseFeePerGas, maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas, gasPrice: gasPrice }];
	                }
	            });
	        });
	    };
	    // Alias for "on"
	    Provider.prototype.addListener = function (eventName, listener) {
	        return this.on(eventName, listener);
	    };
	    // Alias for "off"
	    Provider.prototype.removeListener = function (eventName, listener) {
	        return this.off(eventName, listener);
	    };
	    Provider.isProvider = function (value) {
	        return !!(value && value._isProvider);
	    };
	    return Provider;
	}());
	exports.Provider = Provider;

	});

	var index$c = /*@__PURE__*/getDefaultExportFromCjs(lib$e);

	var _version$k = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "abstract-signer/5.8.0";

	});

	var _version$l = /*@__PURE__*/getDefaultExportFromCjs(_version$k);

	var lib$f = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VoidSigner = exports.Signer = void 0;



	var logger = new lib.Logger(_version$k.version);
	var allowedTransactionKeys = [
	    "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
	];
	var forwardErrors = [
	    lib.Logger.errors.INSUFFICIENT_FUNDS,
	    lib.Logger.errors.NONCE_EXPIRED,
	    lib.Logger.errors.REPLACEMENT_UNDERPRICED,
	];
	;
	;
	var Signer = /** @class */ (function () {
	    ///////////////////
	    // Sub-classes MUST call super
	    function Signer() {
	        var _newTarget = this.constructor;
	        logger.checkAbstract(_newTarget, Signer);
	        (0, lib$3.defineReadOnly)(this, "_isSigner", true);
	    }
	    ///////////////////
	    // Sub-classes MAY override these
	    Signer.prototype.getBalance = function (blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getBalance");
	                        return [4 /*yield*/, this.provider.getBalance(this.getAddress(), blockTag)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getTransactionCount = function (blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getTransactionCount");
	                        return [4 /*yield*/, this.provider.getTransactionCount(this.getAddress(), blockTag)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates "from" if unspecified, and estimates the gas for the transaction
	    Signer.prototype.estimateGas = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("estimateGas");
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.provider.estimateGas(tx)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates "from" if unspecified, and calls with the transaction
	    Signer.prototype.call = function (transaction, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("call");
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.provider.call(tx, blockTag)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates all fields in a transaction, signs it and sends it to the network
	    Signer.prototype.sendTransaction = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx, signedTx;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("sendTransaction");
	                        return [4 /*yield*/, this.populateTransaction(transaction)];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.signTransaction(tx)];
	                    case 2:
	                        signedTx = _a.sent();
	                        return [4 /*yield*/, this.provider.sendTransaction(signedTx)];
	                    case 3: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getChainId = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var network;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getChainId");
	                        return [4 /*yield*/, this.provider.getNetwork()];
	                    case 1:
	                        network = _a.sent();
	                        return [2 /*return*/, network.chainId];
	                }
	            });
	        });
	    };
	    Signer.prototype.getGasPrice = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getGasPrice");
	                        return [4 /*yield*/, this.provider.getGasPrice()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getFeeData = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getFeeData");
	                        return [4 /*yield*/, this.provider.getFeeData()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.resolveName = function (name) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("resolveName");
	                        return [4 /*yield*/, this.provider.resolveName(name)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Checks a transaction does not contain invalid keys and if
	    // no "from" is provided, populates it.
	    // - does NOT require a provider
	    // - adds "from" is not present
	    // - returns a COPY (safe to mutate the result)
	    // By default called from: (overriding these prevents it)
	    //   - call
	    //   - estimateGas
	    //   - populateTransaction (and therefor sendTransaction)
	    Signer.prototype.checkTransaction = function (transaction) {
	        for (var key in transaction) {
	            if (allowedTransactionKeys.indexOf(key) === -1) {
	                logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
	            }
	        }
	        var tx = (0, lib$3.shallowCopy)(transaction);
	        if (tx.from == null) {
	            tx.from = this.getAddress();
	        }
	        else {
	            // Make sure any provided address matches this signer
	            tx.from = Promise.all([
	                Promise.resolve(tx.from),
	                this.getAddress()
	            ]).then(function (result) {
	                if (result[0].toLowerCase() !== result[1].toLowerCase()) {
	                    logger.throwArgumentError("from address mismatch", "transaction", transaction);
	                }
	                return result[0];
	            });
	        }
	        return tx;
	    };
	    // Populates ALL keys for a transaction and checks that "from" matches
	    // this Signer. Should be used by sendTransaction but NOT by signTransaction.
	    // By default called from: (overriding these prevents it)
	    //   - sendTransaction
	    //
	    // Notes:
	    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
	    Signer.prototype.populateTransaction = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx, hasEip1559, feeData, gasPrice;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        if (tx.to != null) {
	                            tx.to = Promise.resolve(tx.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {
	                                var address;
	                                return __generator(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0:
	                                            if (to == null) {
	                                                return [2 /*return*/, null];
	                                            }
	                                            return [4 /*yield*/, this.resolveName(to)];
	                                        case 1:
	                                            address = _a.sent();
	                                            if (address == null) {
	                                                logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
	                                            }
	                                            return [2 /*return*/, address];
	                                    }
	                                });
	                            }); });
	                            // Prevent this error from causing an UnhandledPromiseException
	                            tx.to.catch(function (error) { });
	                        }
	                        hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
	                        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
	                            logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
	                        }
	                        else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
	                            logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
	                        }
	                        if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null))) return [3 /*break*/, 2];
	                        // Fully-formed EIP-1559 transaction (skip getFeeData)
	                        tx.type = 2;
	                        return [3 /*break*/, 5];
	                    case 2:
	                        if (!(tx.type === 0 || tx.type === 1)) return [3 /*break*/, 3];
	                        // Explicit Legacy or EIP-2930 transaction
	                        // Populate missing gasPrice
	                        if (tx.gasPrice == null) {
	                            tx.gasPrice = this.getGasPrice();
	                        }
	                        return [3 /*break*/, 5];
	                    case 3: return [4 /*yield*/, this.getFeeData()];
	                    case 4:
	                        feeData = _a.sent();
	                        if (tx.type == null) {
	                            // We need to auto-detect the intended type of this transaction...
	                            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
	                                // The network supports EIP-1559!
	                                // Upgrade transaction from null to eip-1559
	                                tx.type = 2;
	                                if (tx.gasPrice != null) {
	                                    gasPrice = tx.gasPrice;
	                                    delete tx.gasPrice;
	                                    tx.maxFeePerGas = gasPrice;
	                                    tx.maxPriorityFeePerGas = gasPrice;
	                                }
	                                else {
	                                    // Populate missing fee data
	                                    if (tx.maxFeePerGas == null) {
	                                        tx.maxFeePerGas = feeData.maxFeePerGas;
	                                    }
	                                    if (tx.maxPriorityFeePerGas == null) {
	                                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                                    }
	                                }
	                            }
	                            else if (feeData.gasPrice != null) {
	                                // Network doesn't support EIP-1559...
	                                // ...but they are trying to use EIP-1559 properties
	                                if (hasEip1559) {
	                                    logger.throwError("network does not support EIP-1559", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                        operation: "populateTransaction"
	                                    });
	                                }
	                                // Populate missing fee data
	                                if (tx.gasPrice == null) {
	                                    tx.gasPrice = feeData.gasPrice;
	                                }
	                                // Explicitly set untyped transaction to legacy
	                                tx.type = 0;
	                            }
	                            else {
	                                // getFeeData has failed us.
	                                logger.throwError("failed to get consistent fee data", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                    operation: "signer.getFeeData"
	                                });
	                            }
	                        }
	                        else if (tx.type === 2) {
	                            // Explicitly using EIP-1559
	                            // Populate missing fee data
	                            if (tx.maxFeePerGas == null) {
	                                tx.maxFeePerGas = feeData.maxFeePerGas;
	                            }
	                            if (tx.maxPriorityFeePerGas == null) {
	                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                            }
	                        }
	                        _a.label = 5;
	                    case 5:
	                        if (tx.nonce == null) {
	                            tx.nonce = this.getTransactionCount("pending");
	                        }
	                        if (tx.gasLimit == null) {
	                            tx.gasLimit = this.estimateGas(tx).catch(function (error) {
	                                if (forwardErrors.indexOf(error.code) >= 0) {
	                                    throw error;
	                                }
	                                return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	                                    error: error,
	                                    tx: tx
	                                });
	                            });
	                        }
	                        if (tx.chainId == null) {
	                            tx.chainId = this.getChainId();
	                        }
	                        else {
	                            tx.chainId = Promise.all([
	                                Promise.resolve(tx.chainId),
	                                this.getChainId()
	                            ]).then(function (results) {
	                                if (results[1] !== 0 && results[0] !== results[1]) {
	                                    logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
	                                }
	                                return results[0];
	                            });
	                        }
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)(tx)];
	                    case 6: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    ///////////////////
	    // Sub-classes SHOULD leave these alone
	    Signer.prototype._checkProvider = function (operation) {
	        if (!this.provider) {
	            logger.throwError("missing provider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: (operation || "_checkProvider")
	            });
	        }
	    };
	    Signer.isSigner = function (value) {
	        return !!(value && value._isSigner);
	    };
	    return Signer;
	}());
	exports.Signer = Signer;
	var VoidSigner = /** @class */ (function (_super) {
	    __extends(VoidSigner, _super);
	    function VoidSigner(address, provider) {
	        var _this = _super.call(this) || this;
	        (0, lib$3.defineReadOnly)(_this, "address", address);
	        (0, lib$3.defineReadOnly)(_this, "provider", provider || null);
	        return _this;
	    }
	    VoidSigner.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    VoidSigner.prototype._fail = function (message, operation) {
	        return Promise.resolve().then(function () {
	            logger.throwError(message, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
	        });
	    };
	    VoidSigner.prototype.signMessage = function (message) {
	        return this._fail("VoidSigner cannot sign messages", "signMessage");
	    };
	    VoidSigner.prototype.signTransaction = function (transaction) {
	        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
	    };
	    VoidSigner.prototype._signTypedData = function (domain, types, value) {
	        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
	    };
	    VoidSigner.prototype.connect = function (provider) {
	        return new VoidSigner(this.address, provider);
	    };
	    return VoidSigner;
	}(Signer));
	exports.VoidSigner = VoidSigner;

	});

	var index$d = /*@__PURE__*/getDefaultExportFromCjs(lib$f);

	var bn$1 = createCommonjsModule(function (module) {
	(function (module, exports) {
	  'use strict';

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = /*RicMoo:ethers:require(buffer)*/(null).Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // 'A' - 'F'
	    if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    // '0' - '9'
	    } else {
	      return (c - 48) & 0xf;
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this.strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) {
	      // No-op, we should not move anything at all
	    } else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})('object' === 'undefined' || module, commonjsGlobal);
	});

	var minimalisticAssert = assert;

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils_1 = createCommonjsModule(function (module, exports) {
	'use strict';

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	});

	var utils_1$1 = createCommonjsModule(function (module, exports) {
	'use strict';

	var utils = exports;




	utils.assert = minimalisticAssert;
	utils.toArray = utils_1.toArray;
	utils.zero2 = utils_1.zero2;
	utils.toHex = utils_1.toHex;
	utils.encode = utils_1.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  var i;
	  for (i = 0; i < naf.length; i += 1) {
	    naf[i] = 0;
	  }

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new bn$1(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	});

	'use strict';



	var getNAF = utils_1$1.getNAF;
	var getJSF = utils_1$1.getJSF;
	var assert$1 = utils_1$1.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn$1(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn$1.red(conf.prime) : bn$1.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn$1(0).toRed(this.red);
	  this.one = new bn$1(1).toRed(this.red);
	  this.two = new bn$1(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn$1(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$1(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$1(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils_1$1.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$1(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$1(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils_1$1.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	'use strict';






	var assert$2 = utils_1$1.assert;

	function ShortCurve(conf) {
	  base.call(this, 'short', conf);

	  this.a = new bn$1(conf.a, 16).toRed(this.red);
	  this.b = new bn$1(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits_browser(ShortCurve, base);
	var short_1 = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn$1(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn$1(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn$1(vec.a, 16),
	        b: new bn$1(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn$1.mont(num);
	  var tinv = new bn$1(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new bn$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn$1(1);
	  var y1 = new bn$1(0);
	  var x2 = new bn$1(0);
	  var y2 = new bn$1(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn$1(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point(curve, x, y, isRed) {
	  base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn$1(x, 16);
	    this.y = new bn$1(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits_browser(Point, base.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new bn$1(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn$1(0);
	  } else {
	    this.x = new bn$1(x, 16);
	    this.y = new bn$1(y, 16);
	    this.z = new bn$1(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits_browser(JPoint, base.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn$1(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var curve_1 = createCommonjsModule(function (module, exports) {
	'use strict';

	var curve = exports;

	curve.base = base;
	curve.short = short_1;
	curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
	curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
	});

	'use strict';




	var inherits_1 = inherits_browser;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1 = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	var toHex_1 = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1 = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1 = rotl32;

	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1 = sum32;

	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1 = sum32_3;

	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1 = sum32_5;

	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1 = sum64;

	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1 = sum64_hi;

	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1 = sum64_lo;

	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1 = sum64_4_hi;

	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1 = sum64_4_lo;

	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1 = sum64_5_hi;

	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1 = sum64_5_lo;

	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1 = rotr64_hi;

	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1 = rotr64_lo;

	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1 = shr64_hi;

	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1 = shr64_lo;

	var utils = {
		inherits: inherits_1,
		toArray: toArray_1,
		toHex: toHex_1,
		htonl: htonl_1,
		toHex32: toHex32_1,
		zero2: zero2_1,
		zero8: zero8_1,
		join32: join32_1,
		split32: split32_1,
		rotr32: rotr32_1,
		rotl32: rotl32_1,
		sum32: sum32_1,
		sum32_3: sum32_3_1,
		sum32_4: sum32_4_1,
		sum32_5: sum32_5_1,
		sum64: sum64_1,
		sum64_hi: sum64_hi_1,
		sum64_lo: sum64_lo_1,
		sum64_4_hi: sum64_4_hi_1,
		sum64_4_lo: sum64_4_lo_1,
		sum64_5_hi: sum64_5_hi_1,
		sum64_5_lo: sum64_5_lo_1,
		rotr64_hi: rotr64_hi_1,
		rotr64_lo: rotr64_lo_1,
		shr64_hi: shr64_hi_1,
		shr64_lo: shr64_lo_1
	};

	'use strict';




	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1 = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common = {
		BlockHash: BlockHash_1
	};

	'use strict';


	var rotr32$1 = utils.rotr32;

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}
	var ft_1_1 = ft_1;

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1 = ch32;

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1 = maj32;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1 = p32;

	function s0_256(x) {
	  return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
	}
	var s0_256_1 = s0_256;

	function s1_256(x) {
	  return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
	}
	var s1_256_1 = s1_256;

	function g0_256(x) {
	  return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
	}
	var g0_256_1 = g0_256;

	function g1_256(x) {
	  return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
	}
	var g1_256_1 = g1_256;

	var common$1 = {
		ft_1: ft_1_1,
		ch32: ch32_1,
		maj32: maj32_1,
		p32: p32_1,
		s0_256: s0_256_1,
		s1_256: s1_256_1,
		g0_256: g0_256_1,
		g1_256: g1_256_1
	};

	'use strict';





	var rotl32$1 = utils.rotl32;
	var sum32$1 = utils.sum32;
	var sum32_5$1 = utils.sum32_5;
	var ft_1$1 = common$1.ft_1;
	var BlockHash$1 = common.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash$1);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	'use strict';






	var sum32$2 = utils.sum32;
	var sum32_4$1 = utils.sum32_4;
	var sum32_5$2 = utils.sum32_5;
	var ch32$1 = common$1.ch32;
	var maj32$1 = common$1.maj32;
	var s0_256$1 = common$1.s0_256;
	var s1_256$1 = common$1.s1_256;
	var g0_256$1 = common$1.g0_256;
	var g1_256$1 = common$1.g1_256;

	var BlockHash$2 = common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash$2);
	var _256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$2(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$2(T1, T2);
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	  this.h[5] = sum32$2(this.h[5], f);
	  this.h[6] = sum32$2(this.h[6], g);
	  this.h[7] = sum32$2(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	'use strict';




	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  _256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, _256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};

	'use strict';





	var rotr64_hi$1 = utils.rotr64_hi;
	var rotr64_lo$1 = utils.rotr64_lo;
	var shr64_hi$1 = utils.shr64_hi;
	var shr64_lo$1 = utils.shr64_lo;
	var sum64$1 = utils.sum64;
	var sum64_hi$1 = utils.sum64_hi;
	var sum64_lo$1 = utils.sum64_lo;
	var sum64_4_hi$1 = utils.sum64_4_hi;
	var sum64_4_lo$1 = utils.sum64_4_lo;
	var sum64_5_hi$1 = utils.sum64_5_hi;
	var sum64_5_lo$1 = utils.sum64_5_lo;

	var BlockHash$3 = common.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash$3.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash$3);
	var _512 = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64$1(this.h, 0, ah, al);
	  sum64$1(this.h, 2, bh, bl);
	  sum64$1(this.h, 4, ch, cl);
	  sum64$1(this.h, 6, dh, dl);
	  sum64$1(this.h, 8, eh, el);
	  sum64$1(this.h, 10, fh, fl);
	  sum64$1(this.h, 12, gh, gl);
	  sum64$1(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 28);
	  var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 28);
	  var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 14);
	  var c1_hi = rotr64_hi$1(xh, xl, 18);
	  var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 14);
	  var c1_lo = rotr64_lo$1(xh, xl, 18);
	  var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 1);
	  var c1_hi = rotr64_hi$1(xh, xl, 8);
	  var c2_hi = shr64_hi$1(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 1);
	  var c1_lo = rotr64_lo$1(xh, xl, 8);
	  var c2_lo = shr64_lo$1(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 19);
	  var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi$1(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 19);
	  var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo$1(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	'use strict';





	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  _512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, _512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};

	'use strict';

	var sha1 = _1;
	var sha224 = _224;
	var sha256 = _256;
	var sha384 = _384;
	var sha512 = _512;

	var sha = {
		sha1: sha1,
		sha224: sha224,
		sha256: sha256,
		sha384: sha384,
		sha512: sha512
	};

	'use strict';




	var rotl32$2 = utils.rotl32;
	var sum32$3 = utils.sum32;
	var sum32_3$1 = utils.sum32_3;
	var sum32_4$2 = utils.sum32_4;
	var BlockHash$4 = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash$4.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash$4);
	var ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32$3(
	      rotl32$2(
	        sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32$2(C, 10);
	    C = B;
	    B = T;
	    T = sum32$3(
	      rotl32$2(
	        sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32$2(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3$1(this.h[1], C, Dh);
	  this.h[1] = sum32_3$1(this.h[2], D, Eh);
	  this.h[2] = sum32_3$1(this.h[3], E, Ah);
	  this.h[3] = sum32_3$1(this.h[4], A, Bh);
	  this.h[4] = sum32_3$1(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd = {
		ripemd160: ripemd160
	};

	'use strict';




	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	var hmac = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils;
	hash.common = common;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	var curves_1 = createCommonjsModule(function (module, exports) {
	'use strict';

	var curves = exports;





	var assert = utils_1$1.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve_1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve_1.edwards(options);
	  else
	    this.curve = new curve_1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash_1.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash_1.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash_1.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	});
	});

	'use strict';





	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash_1.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils_1.toArray(entropy, entropyEnc);
	  add = utils_1.toArray(add, addEnc);

	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils_1.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils_1.encode(res, enc);
	};

	'use strict';



	var assert$3 = utils_1$1.assert;

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new bn$1(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$3(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$3(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$3(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature, options) {
	  return this.ec.verify(msg, signature, this, undefined, options);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	'use strict';




	var assert$4 = utils_1$1.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new bn$1(options.r, 16);
	  this.s = new bn$1(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature = Signature;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  if(buf[p.place] === 0x00) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils_1$1.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  if ((data[p.place] & 128) !== 0) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  if ((data[p.place] & 128) !== 0) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new bn$1(r);
	  this.s = new bn$1(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils_1$1.encode(res, enc);
	};

	'use strict';





	var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
	var assert$5 = utils_1$1.assert;




	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
	      'Unknown curve ' + options);

	    options = curves_1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves_1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new key(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return key.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return key.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn$1(2));
	  for (;;) {
	    var priv = new bn$1(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
	  var byteLength;
	  if (bn$1.isBN(msg) || typeof msg === 'number') {
	    msg = new bn$1(msg, 16);
	    byteLength = msg.byteLength();
	  } else if (typeof msg === 'object') {
	    // BN assumes an array-like input and asserts length
	    byteLength = msg.length;
	    msg = new bn$1(msg, 16);
	  } else {
	    // BN converts the value to string
	    var str = msg.toString();
	    // HEX encoding
	    byteLength = (str.length + 1) >>> 1;
	    msg = new bn$1(str, 16);
	  }
	  // Allow overriding
	  if (typeof bitLength !== 'number') {
	    bitLength = byteLength * 8;
	  }
	  var delta = bitLength - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  if (typeof msg !== 'string' && typeof msg !== 'number' && !bn$1.isBN(msg)) {
	    assert$5(typeof msg === 'object' && msg && typeof msg.length === 'number',
	      'Expected message to be an array-like, a hex string, or a BN instance');
	    assert$5((msg.length >>> 0) === msg.length); // non-negative 32-bit integer
	    for (var i = 0; i < msg.length; i++) assert$5((msg[i] & 255) === msg[i]);
	  }

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(msg, false, options.msgBitLength);

	  // Would fail further checks, but let's make the error message clear
	  assert$5(!msg.isNeg(), 'Can not sign a negative message');

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Recheck nonce to be bijective to msg
	  assert$5((new bn$1(nonce)).eq(msg), 'Can not sign message');

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn$1(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new bn$1(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature$1, key, enc, options) {
	  if (!options)
	    options = {};

	  msg = this._truncateToN(msg, false, options.msgBitLength);
	  key = this.keyFromPublic(key, enc);
	  signature$1 = new signature(signature$1, 'hex');

	  // Perform primitive values validation
	  var r = signature$1.r;
	  var s = signature$1.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
	  assert$5((3 & j) === j, 'The recovery param is more than two bits');
	  signature$1 = new signature(signature$1, enc);

	  var n = this.n;
	  var e = new bn$1(msg);
	  var r = signature$1.r;
	  var s = signature$1.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature$1.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
	  signature$1 = new signature(signature$1, enc);
	  if (signature$1.recoveryParam !== null)
	    return signature$1.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature$1, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var elliptic_1 = createCommonjsModule(function (module, exports) {
	'use strict';

	var elliptic = exports;

	elliptic.version = /*RicMoo:ethers*/{ version: "6.6.1" }.version;
	elliptic.utils = utils_1$1;
	elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
	elliptic.curve = curve_1;
	elliptic.curves = curves_1;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
	});

	var elliptic = createCommonjsModule(function (module, exports) {
	"use strict";
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EC = void 0;
	var elliptic_1$1 = __importDefault(elliptic_1);
	var EC = elliptic_1$1.default.ec;
	exports.EC = EC;

	});

	var elliptic$1 = /*@__PURE__*/getDefaultExportFromCjs(elliptic);

	var _version$m = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "signing-key/5.8.0";

	});

	var _version$n = /*@__PURE__*/getDefaultExportFromCjs(_version$m);

	var lib$g = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;





	var logger = new lib.Logger(_version$m.version);
	var _curve = null;
	function getCurve() {
	    if (!_curve) {
	        _curve = new elliptic.EC("secp256k1");
	    }
	    return _curve;
	}
	var SigningKey = /** @class */ (function () {
	    function SigningKey(privateKey) {
	        (0, lib$3.defineReadOnly)(this, "curve", "secp256k1");
	        (0, lib$3.defineReadOnly)(this, "privateKey", (0, lib$1.hexlify)(privateKey));
	        if ((0, lib$1.hexDataLength)(this.privateKey) !== 32) {
	            logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
	        }
	        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));
	        (0, lib$3.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
	        (0, lib$3.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
	        (0, lib$3.defineReadOnly)(this, "_isSigningKey", true);
	    }
	    SigningKey.prototype._addPoint = function (other) {
	        var p0 = getCurve().keyFromPublic((0, lib$1.arrayify)(this.publicKey));
	        var p1 = getCurve().keyFromPublic((0, lib$1.arrayify)(other));
	        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
	    };
	    SigningKey.prototype.signDigest = function (digest) {
	        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));
	        var digestBytes = (0, lib$1.arrayify)(digest);
	        if (digestBytes.length !== 32) {
	            logger.throwArgumentError("bad digest length", "digest", digest);
	        }
	        var signature = keyPair.sign(digestBytes, { canonical: true });
	        return (0, lib$1.splitSignature)({
	            recoveryParam: signature.recoveryParam,
	            r: (0, lib$1.hexZeroPad)("0x" + signature.r.toString(16), 32),
	            s: (0, lib$1.hexZeroPad)("0x" + signature.s.toString(16), 32),
	        });
	    };
	    SigningKey.prototype.computeSharedSecret = function (otherKey) {
	        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));
	        var otherKeyPair = getCurve().keyFromPublic((0, lib$1.arrayify)(computePublicKey(otherKey)));
	        return (0, lib$1.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
	    };
	    SigningKey.isSigningKey = function (value) {
	        return !!(value && value._isSigningKey);
	    };
	    return SigningKey;
	}());
	exports.SigningKey = SigningKey;
	function recoverPublicKey(digest, signature) {
	    var sig = (0, lib$1.splitSignature)(signature);
	    var rs = { r: (0, lib$1.arrayify)(sig.r), s: (0, lib$1.arrayify)(sig.s) };
	    return "0x" + getCurve().recoverPubKey((0, lib$1.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
	}
	exports.recoverPublicKey = recoverPublicKey;
	function computePublicKey(key, compressed) {
	    var bytes = (0, lib$1.arrayify)(key);
	    if (bytes.length === 32) {
	        var signingKey = new SigningKey(bytes);
	        if (compressed) {
	            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
	        }
	        return signingKey.publicKey;
	    }
	    else if (bytes.length === 33) {
	        if (compressed) {
	            return (0, lib$1.hexlify)(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
	    }
	    else if (bytes.length === 65) {
	        if (!compressed) {
	            return (0, lib$1.hexlify)(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
	    }
	    return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
	}
	exports.computePublicKey = computePublicKey;

	});

	var index$e = /*@__PURE__*/getDefaultExportFromCjs(lib$g);

	var _version$o = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "transactions/5.8.0";

	});

	var _version$p = /*@__PURE__*/getDefaultExportFromCjs(_version$o);

	var lib$h = createCommonjsModule(function (module, exports) {
	"use strict";
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;






	var RLP = __importStar(lib$5);



	var logger = new lib.Logger(_version$o.version);
	var TransactionTypes;
	(function (TransactionTypes) {
	    TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
	    TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
	    TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
	})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
	;
	///////////////////////////////
	function handleAddress(value) {
	    if (value === "0x") {
	        return null;
	    }
	    return (0, lib$6.getAddress)(value);
	}
	function handleNumber(value) {
	    if (value === "0x") {
	        return lib$7.Zero;
	    }
	    return lib$2.BigNumber.from(value);
	}
	// Legacy Transaction Fields
	var transactionFields = [
	    { name: "nonce", maxLength: 32, numeric: true },
	    { name: "gasPrice", maxLength: 32, numeric: true },
	    { name: "gasLimit", maxLength: 32, numeric: true },
	    { name: "to", length: 20 },
	    { name: "value", maxLength: 32, numeric: true },
	    { name: "data" },
	];
	var allowedTransactionKeys = {
	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
	};
	function computeAddress(key) {
	    var publicKey = (0, lib$g.computePublicKey)(key);
	    return (0, lib$6.getAddress)((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.hexDataSlice)(publicKey, 1)), 12));
	}
	exports.computeAddress = computeAddress;
	function recoverAddress(digest, signature) {
	    return computeAddress((0, lib$g.recoverPublicKey)((0, lib$1.arrayify)(digest), signature));
	}
	exports.recoverAddress = recoverAddress;
	function formatNumber(value, name) {
	    var result = (0, lib$1.stripZeros)(lib$2.BigNumber.from(value).toHexString());
	    if (result.length > 32) {
	        logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
	    }
	    return result;
	}
	function accessSetify(addr, storageKeys) {
	    return {
	        address: (0, lib$6.getAddress)(addr),
	        storageKeys: (storageKeys || []).map(function (storageKey, index) {
	            if ((0, lib$1.hexDataLength)(storageKey) !== 32) {
	                logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index + "]", storageKey);
	            }
	            return storageKey.toLowerCase();
	        })
	    };
	}
	function accessListify(value) {
	    if (Array.isArray(value)) {
	        return value.map(function (set, index) {
	            if (Array.isArray(set)) {
	                if (set.length > 2) {
	                    logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index + "]", set);
	                }
	                return accessSetify(set[0], set[1]);
	            }
	            return accessSetify(set.address, set.storageKeys);
	        });
	    }
	    var result = Object.keys(value).map(function (addr) {
	        var storageKeys = value[addr].reduce(function (accum, storageKey) {
	            accum[storageKey] = true;
	            return accum;
	        }, {});
	        return accessSetify(addr, Object.keys(storageKeys).sort());
	    });
	    result.sort(function (a, b) { return (a.address.localeCompare(b.address)); });
	    return result;
	}
	exports.accessListify = accessListify;
	function formatAccessList(value) {
	    return accessListify(value).map(function (set) { return [set.address, set.storageKeys]; });
	}
	function _serializeEip1559(transaction, signature) {
	    // If there is an explicit gasPrice, make sure it matches the
	    // EIP-1559 fees; otherwise they may not understand what they
	    // think they are setting in terms of fee.
	    if (transaction.gasPrice != null) {
	        var gasPrice = lib$2.BigNumber.from(transaction.gasPrice);
	        var maxFeePerGas = lib$2.BigNumber.from(transaction.maxFeePerGas || 0);
	        if (!gasPrice.eq(maxFeePerGas)) {
	            logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
	                gasPrice: gasPrice,
	                maxFeePerGas: maxFeePerGas
	            });
	        }
	    }
	    var fields = [
	        formatNumber(transaction.chainId || 0, "chainId"),
	        formatNumber(transaction.nonce || 0, "nonce"),
	        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
	        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
	        formatNumber(transaction.gasLimit || 0, "gasLimit"),
	        ((transaction.to != null) ? (0, lib$6.getAddress)(transaction.to) : "0x"),
	        formatNumber(transaction.value || 0, "value"),
	        (transaction.data || "0x"),
	        (formatAccessList(transaction.accessList || []))
	    ];
	    if (signature) {
	        var sig = (0, lib$1.splitSignature)(signature);
	        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
	        fields.push((0, lib$1.stripZeros)(sig.r));
	        fields.push((0, lib$1.stripZeros)(sig.s));
	    }
	    return (0, lib$1.hexConcat)(["0x02", RLP.encode(fields)]);
	}
	function _serializeEip2930(transaction, signature) {
	    var fields = [
	        formatNumber(transaction.chainId || 0, "chainId"),
	        formatNumber(transaction.nonce || 0, "nonce"),
	        formatNumber(transaction.gasPrice || 0, "gasPrice"),
	        formatNumber(transaction.gasLimit || 0, "gasLimit"),
	        ((transaction.to != null) ? (0, lib$6.getAddress)(transaction.to) : "0x"),
	        formatNumber(transaction.value || 0, "value"),
	        (transaction.data || "0x"),
	        (formatAccessList(transaction.accessList || []))
	    ];
	    if (signature) {
	        var sig = (0, lib$1.splitSignature)(signature);
	        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
	        fields.push((0, lib$1.stripZeros)(sig.r));
	        fields.push((0, lib$1.stripZeros)(sig.s));
	    }
	    return (0, lib$1.hexConcat)(["0x01", RLP.encode(fields)]);
	}
	// Legacy Transactions and EIP-155
	function _serialize(transaction, signature) {
	    (0, lib$3.checkProperties)(transaction, allowedTransactionKeys);
	    var raw = [];
	    transactionFields.forEach(function (fieldInfo) {
	        var value = transaction[fieldInfo.name] || ([]);
	        var options = {};
	        if (fieldInfo.numeric) {
	            options.hexPad = "left";
	        }
	        value = (0, lib$1.arrayify)((0, lib$1.hexlify)(value, options));
	        // Fixed-width field
	        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
	            logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
	        }
	        // Variable-width (with a maximum)
	        if (fieldInfo.maxLength) {
	            value = (0, lib$1.stripZeros)(value);
	            if (value.length > fieldInfo.maxLength) {
	                logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
	            }
	        }
	        raw.push((0, lib$1.hexlify)(value));
	    });
	    var chainId = 0;
	    if (transaction.chainId != null) {
	        // A chainId was provided; if non-zero we'll use EIP-155
	        chainId = transaction.chainId;
	        if (typeof (chainId) !== "number") {
	            logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
	        }
	    }
	    else if (signature && !(0, lib$1.isBytesLike)(signature) && signature.v > 28) {
	        // No chainId provided, but the signature is signing with EIP-155; derive chainId
	        chainId = Math.floor((signature.v - 35) / 2);
	    }
	    // We have an EIP-155 transaction (chainId was specified and non-zero)
	    if (chainId !== 0) {
	        raw.push((0, lib$1.hexlify)(chainId)); // @TODO: hexValue?
	        raw.push("0x");
	        raw.push("0x");
	    }
	    // Requesting an unsigned transaction
	    if (!signature) {
	        return RLP.encode(raw);
	    }
	    // The splitSignature will ensure the transaction has a recoveryParam in the
	    // case that the signTransaction function only adds a v.
	    var sig = (0, lib$1.splitSignature)(signature);
	    // We pushed a chainId and null r, s on for hashing only; remove those
	    var v = 27 + sig.recoveryParam;
	    if (chainId !== 0) {
	        raw.pop();
	        raw.pop();
	        raw.pop();
	        v += chainId * 2 + 8;
	        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
	        if (sig.v > 28 && sig.v !== v) {
	            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
	        }
	    }
	    else if (sig.v !== v) {
	        logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
	    }
	    raw.push((0, lib$1.hexlify)(v));
	    raw.push((0, lib$1.stripZeros)((0, lib$1.arrayify)(sig.r)));
	    raw.push((0, lib$1.stripZeros)((0, lib$1.arrayify)(sig.s)));
	    return RLP.encode(raw);
	}
	function serialize(transaction, signature) {
	    // Legacy and EIP-155 Transactions
	    if (transaction.type == null || transaction.type === 0) {
	        if (transaction.accessList != null) {
	            logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
	        }
	        return _serialize(transaction, signature);
	    }
	    // Typed Transactions (EIP-2718)
	    switch (transaction.type) {
	        case 1:
	            return _serializeEip2930(transaction, signature);
	        case 2:
	            return _serializeEip1559(transaction, signature);
	        default:
	            break;
	    }
	    return logger.throwError("unsupported transaction type: " + transaction.type, lib.Logger.errors.UNSUPPORTED_OPERATION, {
	        operation: "serializeTransaction",
	        transactionType: transaction.type
	    });
	}
	exports.serialize = serialize;
	function _parseEipSignature(tx, fields, serialize) {
	    try {
	        var recid = handleNumber(fields[0]).toNumber();
	        if (recid !== 0 && recid !== 1) {
	            throw new Error("bad recid");
	        }
	        tx.v = recid;
	    }
	    catch (error) {
	        logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
	    }
	    tx.r = (0, lib$1.hexZeroPad)(fields[1], 32);
	    tx.s = (0, lib$1.hexZeroPad)(fields[2], 32);
	    try {
	        var digest = (0, lib$4.keccak256)(serialize(tx));
	        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
	    }
	    catch (error) { }
	}
	function _parseEip1559(payload) {
	    var transaction = RLP.decode(payload.slice(1));
	    if (transaction.length !== 9 && transaction.length !== 12) {
	        logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, lib$1.hexlify)(payload));
	    }
	    var maxPriorityFeePerGas = handleNumber(transaction[2]);
	    var maxFeePerGas = handleNumber(transaction[3]);
	    var tx = {
	        type: 2,
	        chainId: handleNumber(transaction[0]).toNumber(),
	        nonce: handleNumber(transaction[1]).toNumber(),
	        maxPriorityFeePerGas: maxPriorityFeePerGas,
	        maxFeePerGas: maxFeePerGas,
	        gasPrice: null,
	        gasLimit: handleNumber(transaction[4]),
	        to: handleAddress(transaction[5]),
	        value: handleNumber(transaction[6]),
	        data: transaction[7],
	        accessList: accessListify(transaction[8]),
	    };
	    // Unsigned EIP-1559 Transaction
	    if (transaction.length === 9) {
	        return tx;
	    }
	    tx.hash = (0, lib$4.keccak256)(payload);
	    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
	    return tx;
	}
	function _parseEip2930(payload) {
	    var transaction = RLP.decode(payload.slice(1));
	    if (transaction.length !== 8 && transaction.length !== 11) {
	        logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, lib$1.hexlify)(payload));
	    }
	    var tx = {
	        type: 1,
	        chainId: handleNumber(transaction[0]).toNumber(),
	        nonce: handleNumber(transaction[1]).toNumber(),
	        gasPrice: handleNumber(transaction[2]),
	        gasLimit: handleNumber(transaction[3]),
	        to: handleAddress(transaction[4]),
	        value: handleNumber(transaction[5]),
	        data: transaction[6],
	        accessList: accessListify(transaction[7])
	    };
	    // Unsigned EIP-2930 Transaction
	    if (transaction.length === 8) {
	        return tx;
	    }
	    tx.hash = (0, lib$4.keccak256)(payload);
	    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
	    return tx;
	}
	// Legacy Transactions and EIP-155
	function _parse(rawTransaction) {
	    var transaction = RLP.decode(rawTransaction);
	    if (transaction.length !== 9 && transaction.length !== 6) {
	        logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
	    }
	    var tx = {
	        nonce: handleNumber(transaction[0]).toNumber(),
	        gasPrice: handleNumber(transaction[1]),
	        gasLimit: handleNumber(transaction[2]),
	        to: handleAddress(transaction[3]),
	        value: handleNumber(transaction[4]),
	        data: transaction[5],
	        chainId: 0
	    };
	    // Legacy unsigned transaction
	    if (transaction.length === 6) {
	        return tx;
	    }
	    try {
	        tx.v = lib$2.BigNumber.from(transaction[6]).toNumber();
	    }
	    catch (error) {
	        // @TODO: What makes snese to do? The v is too big
	        return tx;
	    }
	    tx.r = (0, lib$1.hexZeroPad)(transaction[7], 32);
	    tx.s = (0, lib$1.hexZeroPad)(transaction[8], 32);
	    if (lib$2.BigNumber.from(tx.r).isZero() && lib$2.BigNumber.from(tx.s).isZero()) {
	        // EIP-155 unsigned transaction
	        tx.chainId = tx.v;
	        tx.v = 0;
	    }
	    else {
	        // Signed Transaction
	        tx.chainId = Math.floor((tx.v - 35) / 2);
	        if (tx.chainId < 0) {
	            tx.chainId = 0;
	        }
	        var recoveryParam = tx.v - 27;
	        var raw = transaction.slice(0, 6);
	        if (tx.chainId !== 0) {
	            raw.push((0, lib$1.hexlify)(tx.chainId));
	            raw.push("0x");
	            raw.push("0x");
	            recoveryParam -= tx.chainId * 2 + 8;
	        }
	        var digest = (0, lib$4.keccak256)(RLP.encode(raw));
	        try {
	            tx.from = recoverAddress(digest, { r: (0, lib$1.hexlify)(tx.r), s: (0, lib$1.hexlify)(tx.s), recoveryParam: recoveryParam });
	        }
	        catch (error) { }
	        tx.hash = (0, lib$4.keccak256)(rawTransaction);
	    }
	    tx.type = null;
	    return tx;
	}
	function parse(rawTransaction) {
	    var payload = (0, lib$1.arrayify)(rawTransaction);
	    // Legacy and EIP-155 Transactions
	    if (payload[0] > 0x7f) {
	        return _parse(payload);
	    }
	    // Typed Transaction (EIP-2718)
	    switch (payload[0]) {
	        case 1:
	            return _parseEip2930(payload);
	        case 2:
	            return _parseEip1559(payload);
	        default:
	            break;
	    }
	    return logger.throwError("unsupported transaction type: " + payload[0], lib.Logger.errors.UNSUPPORTED_OPERATION, {
	        operation: "parseTransaction",
	        transactionType: payload[0]
	    });
	}
	exports.parse = parse;

	});

	var index$f = /*@__PURE__*/getDefaultExportFromCjs(lib$h);

	var _version$q = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "contracts/5.8.0";

	});

	var _version$r = /*@__PURE__*/getDefaultExportFromCjs(_version$q);

	var lib$i = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;










	var logger = new lib.Logger(_version$q.version);
	;
	;
	///////////////////////////////
	var allowedTransactionKeys = {
	    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
	    type: true, accessList: true,
	    maxFeePerGas: true, maxPriorityFeePerGas: true,
	    customData: true,
	    ccipReadEnabled: true
	};
	function resolveName(resolver, nameOrPromise) {
	    return __awaiter(this, void 0, void 0, function () {
	        var name, address;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, nameOrPromise];
	                case 1:
	                    name = _a.sent();
	                    if (typeof (name) !== "string") {
	                        logger.throwArgumentError("invalid address or ENS name", "name", name);
	                    }
	                    // If it is already an address, just use it (after adding checksum)
	                    try {
	                        return [2 /*return*/, (0, lib$6.getAddress)(name)];
	                    }
	                    catch (error) { }
	                    if (!resolver) {
	                        logger.throwError("a provider or signer is needed to resolve ENS names", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                            operation: "resolveName"
	                        });
	                    }
	                    return [4 /*yield*/, resolver.resolveName(name)];
	                case 2:
	                    address = _a.sent();
	                    if (address == null) {
	                        logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
	                    }
	                    return [2 /*return*/, address];
	            }
	        });
	    });
	}
	// Recursively replaces ENS names with promises to resolve the name and resolves all properties
	function resolveAddresses(resolver, value, paramType) {
	    return __awaiter(this, void 0, void 0, function () {
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (!Array.isArray(paramType)) return [3 /*break*/, 2];
	                    return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {
	                            return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
	                        }))];
	                case 1: return [2 /*return*/, _a.sent()];
	                case 2:
	                    if (!(paramType.type === "address")) return [3 /*break*/, 4];
	                    return [4 /*yield*/, resolveName(resolver, value)];
	                case 3: return [2 /*return*/, _a.sent()];
	                case 4:
	                    if (!(paramType.type === "tuple")) return [3 /*break*/, 6];
	                    return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];
	                case 5: return [2 /*return*/, _a.sent()];
	                case 6:
	                    if (!(paramType.baseType === "array")) return [3 /*break*/, 8];
	                    if (!Array.isArray(value)) {
	                        return [2 /*return*/, Promise.reject(logger.makeError("invalid value for array", lib.Logger.errors.INVALID_ARGUMENT, {
	                                argument: "value",
	                                value: value
	                            }))];
	                    }
	                    return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];
	                case 7: return [2 /*return*/, _a.sent()];
	                case 8: return [2 /*return*/, value];
	            }
	        });
	    });
	}
	function populateTransaction(contract, fragment, args) {
	    return __awaiter(this, void 0, void 0, function () {
	        var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
	        var _this = this;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    overrides = {};
	                    if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
	                        overrides = (0, lib$3.shallowCopy)(args.pop());
	                    }
	                    // Make sure the parameter count matches
	                    logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
	                    // Populate "from" override (allow promises)
	                    if (contract.signer) {
	                        if (overrides.from) {
	                            // Contracts with a Signer are from the Signer's frame-of-reference;
	                            // but we allow overriding "from" if it matches the signer
	                            overrides.from = (0, lib$3.resolveProperties)({
	                                override: resolveName(contract.signer, overrides.from),
	                                signer: contract.signer.getAddress()
	                            }).then(function (check) { return __awaiter(_this, void 0, void 0, function () {
	                                return __generator(this, function (_a) {
	                                    if ((0, lib$6.getAddress)(check.signer) !== check.override) {
	                                        logger.throwError("Contract with a Signer cannot override from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                            operation: "overrides.from"
	                                        });
	                                    }
	                                    return [2 /*return*/, check.override];
	                                });
	                            }); });
	                        }
	                        else {
	                            overrides.from = contract.signer.getAddress();
	                        }
	                    }
	                    else if (overrides.from) {
	                        overrides.from = resolveName(contract.provider, overrides.from);
	                        //} else {
	                        // Contracts without a signer can override "from", and if
	                        // unspecified the zero address is used
	                        //overrides.from = AddressZero;
	                    }
	                    return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
	                            address: contract.resolvedAddress,
	                            overrides: ((0, lib$3.resolveProperties)(overrides) || {})
	                        })];
	                case 1:
	                    resolved = _a.sent();
	                    data = contract.interface.encodeFunctionData(fragment, resolved.args);
	                    tx = {
	                        data: data,
	                        to: resolved.address
	                    };
	                    ro = resolved.overrides;
	                    // Populate simple overrides
	                    if (ro.nonce != null) {
	                        tx.nonce = lib$2.BigNumber.from(ro.nonce).toNumber();
	                    }
	                    if (ro.gasLimit != null) {
	                        tx.gasLimit = lib$2.BigNumber.from(ro.gasLimit);
	                    }
	                    if (ro.gasPrice != null) {
	                        tx.gasPrice = lib$2.BigNumber.from(ro.gasPrice);
	                    }
	                    if (ro.maxFeePerGas != null) {
	                        tx.maxFeePerGas = lib$2.BigNumber.from(ro.maxFeePerGas);
	                    }
	                    if (ro.maxPriorityFeePerGas != null) {
	                        tx.maxPriorityFeePerGas = lib$2.BigNumber.from(ro.maxPriorityFeePerGas);
	                    }
	                    if (ro.from != null) {
	                        tx.from = ro.from;
	                    }
	                    if (ro.type != null) {
	                        tx.type = ro.type;
	                    }
	                    if (ro.accessList != null) {
	                        tx.accessList = (0, lib$h.accessListify)(ro.accessList);
	                    }
	                    // If there was no "gasLimit" override, but the ABI specifies a default, use it
	                    if (tx.gasLimit == null && fragment.gas != null) {
	                        intrinsic = 21000;
	                        bytes = (0, lib$1.arrayify)(data);
	                        for (i = 0; i < bytes.length; i++) {
	                            intrinsic += 4;
	                            if (bytes[i]) {
	                                intrinsic += 64;
	                            }
	                        }
	                        tx.gasLimit = lib$2.BigNumber.from(fragment.gas).add(intrinsic);
	                    }
	                    // Populate "value" override
	                    if (ro.value) {
	                        roValue = lib$2.BigNumber.from(ro.value);
	                        if (!roValue.isZero() && !fragment.payable) {
	                            logger.throwError("non-payable method cannot override value", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "overrides.value",
	                                value: overrides.value
	                            });
	                        }
	                        tx.value = roValue;
	                    }
	                    if (ro.customData) {
	                        tx.customData = (0, lib$3.shallowCopy)(ro.customData);
	                    }
	                    if (ro.ccipReadEnabled) {
	                        tx.ccipReadEnabled = !!ro.ccipReadEnabled;
	                    }
	                    // Remove the overrides
	                    delete overrides.nonce;
	                    delete overrides.gasLimit;
	                    delete overrides.gasPrice;
	                    delete overrides.from;
	                    delete overrides.value;
	                    delete overrides.type;
	                    delete overrides.accessList;
	                    delete overrides.maxFeePerGas;
	                    delete overrides.maxPriorityFeePerGas;
	                    delete overrides.customData;
	                    delete overrides.ccipReadEnabled;
	                    leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });
	                    if (leftovers.length) {
	                        logger.throwError("cannot override " + leftovers.map(function (l) { return JSON.stringify(l); }).join(","), lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                            operation: "overrides",
	                            overrides: leftovers
	                        });
	                    }
	                    return [2 /*return*/, tx];
	            }
	        });
	    });
	}
	function buildPopulate(contract, fragment) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return populateTransaction(contract, fragment, args);
	    };
	}
	function buildEstimate(contract, fragment) {
	    var signerOrProvider = (contract.signer || contract.provider);
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter(this, void 0, void 0, function () {
	            var tx;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!signerOrProvider) {
	                            logger.throwError("estimate require a provider or signer", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "estimateGas"
	                            });
	                        }
	                        return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, signerOrProvider.estimateGas(tx)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	}
	function addContractWait(contract, tx) {
	    var wait = tx.wait.bind(tx);
	    tx.wait = function (confirmations) {
	        return wait(confirmations).then(function (receipt) {
	            receipt.events = receipt.logs.map(function (log) {
	                var event = (0, lib$3.deepCopy)(log);
	                var parsed = null;
	                try {
	                    parsed = contract.interface.parseLog(log);
	                }
	                catch (e) { }
	                // Successfully parsed the event log; include it
	                if (parsed) {
	                    event.args = parsed.args;
	                    event.decode = function (data, topics) {
	                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
	                    };
	                    event.event = parsed.name;
	                    event.eventSignature = parsed.signature;
	                }
	                // Useful operations
	                event.removeListener = function () { return contract.provider; };
	                event.getBlock = function () {
	                    return contract.provider.getBlock(receipt.blockHash);
	                };
	                event.getTransaction = function () {
	                    return contract.provider.getTransaction(receipt.transactionHash);
	                };
	                event.getTransactionReceipt = function () {
	                    return Promise.resolve(receipt);
	                };
	                return event;
	            });
	            return receipt;
	        });
	    };
	}
	function buildCall(contract, fragment, collapseSimple) {
	    var signerOrProvider = (contract.signer || contract.provider);
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter(this, void 0, void 0, function () {
	            var blockTag, overrides, tx, result, value;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        blockTag = undefined;
	                        if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object")) return [3 /*break*/, 3];
	                        overrides = (0, lib$3.shallowCopy)(args.pop());
	                        if (!(overrides.blockTag != null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, overrides.blockTag];
	                    case 1:
	                        blockTag = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        delete overrides.blockTag;
	                        args.push(overrides);
	                        _a.label = 3;
	                    case 3:
	                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];
	                        return [4 /*yield*/, contract._deployed(blockTag)];
	                    case 4:
	                        _a.sent();
	                        _a.label = 5;
	                    case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 6:
	                        tx = _a.sent();
	                        return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];
	                    case 7:
	                        result = _a.sent();
	                        try {
	                            value = contract.interface.decodeFunctionResult(fragment, result);
	                            if (collapseSimple && fragment.outputs.length === 1) {
	                                value = value[0];
	                            }
	                            return [2 /*return*/, value];
	                        }
	                        catch (error) {
	                            if (error.code === lib.Logger.errors.CALL_EXCEPTION) {
	                                error.address = contract.address;
	                                error.args = args;
	                                error.transaction = tx;
	                            }
	                            throw error;
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	}
	function buildSend(contract, fragment) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter(this, void 0, void 0, function () {
	            var txRequest, tx;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!contract.signer) {
	                            logger.throwError("sending a transaction requires a signer", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "sendTransaction"
	                            });
	                        }
	                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, contract._deployed()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 3:
	                        txRequest = _a.sent();
	                        return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];
	                    case 4:
	                        tx = _a.sent();
	                        // Tweak the tx.wait so the receipt has extra properties
	                        addContractWait(contract, tx);
	                        return [2 /*return*/, tx];
	                }
	            });
	        });
	    };
	}
	function buildDefault(contract, fragment, collapseSimple) {
	    if (fragment.constant) {
	        return buildCall(contract, fragment, collapseSimple);
	    }
	    return buildSend(contract, fragment);
	}
	function getEventTag(filter) {
	    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
	        return "*";
	    }
	    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
	        if (Array.isArray(topic)) {
	            return topic.join("|");
	        }
	        return topic;
	    }).join(":") : "");
	}
	var RunningEvent = /** @class */ (function () {
	    function RunningEvent(tag, filter) {
	        (0, lib$3.defineReadOnly)(this, "tag", tag);
	        (0, lib$3.defineReadOnly)(this, "filter", filter);
	        this._listeners = [];
	    }
	    RunningEvent.prototype.addListener = function (listener, once) {
	        this._listeners.push({ listener: listener, once: once });
	    };
	    RunningEvent.prototype.removeListener = function (listener) {
	        var done = false;
	        this._listeners = this._listeners.filter(function (item) {
	            if (done || item.listener !== listener) {
	                return true;
	            }
	            done = true;
	            return false;
	        });
	    };
	    RunningEvent.prototype.removeAllListeners = function () {
	        this._listeners = [];
	    };
	    RunningEvent.prototype.listeners = function () {
	        return this._listeners.map(function (i) { return i.listener; });
	    };
	    RunningEvent.prototype.listenerCount = function () {
	        return this._listeners.length;
	    };
	    RunningEvent.prototype.run = function (args) {
	        var _this = this;
	        var listenerCount = this.listenerCount();
	        this._listeners = this._listeners.filter(function (item) {
	            var argsCopy = args.slice();
	            // Call the callback in the next event loop
	            setTimeout(function () {
	                item.listener.apply(_this, argsCopy);
	            }, 0);
	            // Reschedule it if it not "once"
	            return !(item.once);
	        });
	        return listenerCount;
	    };
	    RunningEvent.prototype.prepareEvent = function (event) {
	    };
	    // Returns the array that will be applied to an emit
	    RunningEvent.prototype.getEmit = function (event) {
	        return [event];
	    };
	    return RunningEvent;
	}());
	var ErrorRunningEvent = /** @class */ (function (_super) {
	    __extends(ErrorRunningEvent, _super);
	    function ErrorRunningEvent() {
	        return _super.call(this, "error", null) || this;
	    }
	    return ErrorRunningEvent;
	}(RunningEvent));
	// @TODO Fragment should inherit Wildcard? and just override getEmit?
	//       or have a common abstract super class, with enough constructor
	//       options to configure both.
	// A Fragment Event will populate all the properties that Wildcard
	// will, and additionally dereference the arguments when emitting
	var FragmentRunningEvent = /** @class */ (function (_super) {
	    __extends(FragmentRunningEvent, _super);
	    function FragmentRunningEvent(address, contractInterface, fragment, topics) {
	        var _this = this;
	        var filter = {
	            address: address
	        };
	        var topic = contractInterface.getEventTopic(fragment);
	        if (topics) {
	            if (topic !== topics[0]) {
	                logger.throwArgumentError("topic mismatch", "topics", topics);
	            }
	            filter.topics = topics.slice();
	        }
	        else {
	            filter.topics = [topic];
	        }
	        _this = _super.call(this, getEventTag(filter), filter) || this;
	        (0, lib$3.defineReadOnly)(_this, "address", address);
	        (0, lib$3.defineReadOnly)(_this, "interface", contractInterface);
	        (0, lib$3.defineReadOnly)(_this, "fragment", fragment);
	        return _this;
	    }
	    FragmentRunningEvent.prototype.prepareEvent = function (event) {
	        var _this = this;
	        _super.prototype.prepareEvent.call(this, event);
	        event.event = this.fragment.name;
	        event.eventSignature = this.fragment.format();
	        event.decode = function (data, topics) {
	            return _this.interface.decodeEventLog(_this.fragment, data, topics);
	        };
	        try {
	            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
	        }
	        catch (error) {
	            event.args = null;
	            event.decodeError = error;
	        }
	    };
	    FragmentRunningEvent.prototype.getEmit = function (event) {
	        var errors = (0, lib$d.checkResultErrors)(event.args);
	        if (errors.length) {
	            throw errors[0].error;
	        }
	        var args = (event.args || []).slice();
	        args.push(event);
	        return args;
	    };
	    return FragmentRunningEvent;
	}(RunningEvent));
	// A Wildcard Event will attempt to populate:
	//  - event            The name of the event name
	//  - eventSignature   The full signature of the event
	//  - decode           A function to decode data and topics
	//  - args             The decoded data and topics
	var WildcardRunningEvent = /** @class */ (function (_super) {
	    __extends(WildcardRunningEvent, _super);
	    function WildcardRunningEvent(address, contractInterface) {
	        var _this = _super.call(this, "*", { address: address }) || this;
	        (0, lib$3.defineReadOnly)(_this, "address", address);
	        (0, lib$3.defineReadOnly)(_this, "interface", contractInterface);
	        return _this;
	    }
	    WildcardRunningEvent.prototype.prepareEvent = function (event) {
	        var _this = this;
	        _super.prototype.prepareEvent.call(this, event);
	        try {
	            var parsed_1 = this.interface.parseLog(event);
	            event.event = parsed_1.name;
	            event.eventSignature = parsed_1.signature;
	            event.decode = function (data, topics) {
	                return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
	            };
	            event.args = parsed_1.args;
	        }
	        catch (error) {
	            // No matching event
	        }
	    };
	    return WildcardRunningEvent;
	}(RunningEvent));
	var BaseContract = /** @class */ (function () {
	    function BaseContract(addressOrName, contractInterface, signerOrProvider) {
	        var _newTarget = this.constructor;
	        var _this = this;
	        // @TODO: Maybe still check the addressOrName looks like a valid address or name?
	        //address = getAddress(address);
	        (0, lib$3.defineReadOnly)(this, "interface", (0, lib$3.getStatic)(_newTarget, "getInterface")(contractInterface));
	        if (signerOrProvider == null) {
	            (0, lib$3.defineReadOnly)(this, "provider", null);
	            (0, lib$3.defineReadOnly)(this, "signer", null);
	        }
	        else if (lib$f.Signer.isSigner(signerOrProvider)) {
	            (0, lib$3.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
	            (0, lib$3.defineReadOnly)(this, "signer", signerOrProvider);
	        }
	        else if (lib$e.Provider.isProvider(signerOrProvider)) {
	            (0, lib$3.defineReadOnly)(this, "provider", signerOrProvider);
	            (0, lib$3.defineReadOnly)(this, "signer", null);
	        }
	        else {
	            logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
	        }
	        (0, lib$3.defineReadOnly)(this, "callStatic", {});
	        (0, lib$3.defineReadOnly)(this, "estimateGas", {});
	        (0, lib$3.defineReadOnly)(this, "functions", {});
	        (0, lib$3.defineReadOnly)(this, "populateTransaction", {});
	        (0, lib$3.defineReadOnly)(this, "filters", {});
	        {
	            var uniqueFilters_1 = {};
	            Object.keys(this.interface.events).forEach(function (eventSignature) {
	                var event = _this.interface.events[eventSignature];
	                (0, lib$3.defineReadOnly)(_this.filters, eventSignature, function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    return {
	                        address: _this.address,
	                        topics: _this.interface.encodeFilterTopics(event, args)
	                    };
	                });
	                if (!uniqueFilters_1[event.name]) {
	                    uniqueFilters_1[event.name] = [];
	                }
	                uniqueFilters_1[event.name].push(eventSignature);
	            });
	            Object.keys(uniqueFilters_1).forEach(function (name) {
	                var filters = uniqueFilters_1[name];
	                if (filters.length === 1) {
	                    (0, lib$3.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);
	                }
	                else {
	                    logger.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
	                }
	            });
	        }
	        (0, lib$3.defineReadOnly)(this, "_runningEvents", {});
	        (0, lib$3.defineReadOnly)(this, "_wrappedEmits", {});
	        if (addressOrName == null) {
	            logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
	        }
	        (0, lib$3.defineReadOnly)(this, "address", addressOrName);
	        if (this.provider) {
	            (0, lib$3.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
	        }
	        else {
	            try {
	                (0, lib$3.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, lib$6.getAddress)(addressOrName)));
	            }
	            catch (error) {
	                // Without a provider, we cannot use ENS names
	                logger.throwError("provider is required to use ENS name as contract address", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "new Contract"
	                });
	            }
	        }
	        // Swallow bad ENS names to prevent Unhandled Exceptions
	        this.resolvedAddress.catch(function (e) { });
	        var uniqueNames = {};
	        var uniqueSignatures = {};
	        Object.keys(this.interface.functions).forEach(function (signature) {
	            var fragment = _this.interface.functions[signature];
	            // Check that the signature is unique; if not the ABI generation has
	            // not been cleaned or may be incorrectly generated
	            if (uniqueSignatures[signature]) {
	                logger.warn("Duplicate ABI entry for " + JSON.stringify(signature));
	                return;
	            }
	            uniqueSignatures[signature] = true;
	            // Track unique names; we only expose bare named functions if they
	            // are ambiguous
	            {
	                var name_1 = fragment.name;
	                if (!uniqueNames["%" + name_1]) {
	                    uniqueNames["%" + name_1] = [];
	                }
	                uniqueNames["%" + name_1].push(signature);
	            }
	            if (_this[signature] == null) {
	                (0, lib$3.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));
	            }
	            // We do not collapse simple calls on this bucket, which allows
	            // frameworks to safely use this without introspection as well as
	            // allows decoding error recovery.
	            if (_this.functions[signature] == null) {
	                (0, lib$3.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));
	            }
	            if (_this.callStatic[signature] == null) {
	                (0, lib$3.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));
	            }
	            if (_this.populateTransaction[signature] == null) {
	                (0, lib$3.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));
	            }
	            if (_this.estimateGas[signature] == null) {
	                (0, lib$3.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));
	            }
	        });
	        Object.keys(uniqueNames).forEach(function (name) {
	            // Ambiguous names to not get attached as bare names
	            var signatures = uniqueNames[name];
	            if (signatures.length > 1) {
	                return;
	            }
	            // Strip off the leading "%" used for prototype protection
	            name = name.substring(1);
	            var signature = signatures[0];
	            // If overwriting a member property that is null, swallow the error
	            try {
	                if (_this[name] == null) {
	                    (0, lib$3.defineReadOnly)(_this, name, _this[signature]);
	                }
	            }
	            catch (e) { }
	            if (_this.functions[name] == null) {
	                (0, lib$3.defineReadOnly)(_this.functions, name, _this.functions[signature]);
	            }
	            if (_this.callStatic[name] == null) {
	                (0, lib$3.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);
	            }
	            if (_this.populateTransaction[name] == null) {
	                (0, lib$3.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);
	            }
	            if (_this.estimateGas[name] == null) {
	                (0, lib$3.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);
	            }
	        });
	    }
	    BaseContract.getContractAddress = function (transaction) {
	        return (0, lib$6.getContractAddress)(transaction);
	    };
	    BaseContract.getInterface = function (contractInterface) {
	        if (lib$d.Interface.isInterface(contractInterface)) {
	            return contractInterface;
	        }
	        return new lib$d.Interface(contractInterface);
	    };
	    // @TODO: Allow timeout?
	    BaseContract.prototype.deployed = function () {
	        return this._deployed();
	    };
	    BaseContract.prototype._deployed = function (blockTag) {
	        var _this = this;
	        if (!this._deployedPromise) {
	            // If we were just deployed, we know the transaction we should occur in
	            if (this.deployTransaction) {
	                this._deployedPromise = this.deployTransaction.wait().then(function () {
	                    return _this;
	                });
	            }
	            else {
	                // @TODO: Once we allow a timeout to be passed in, we will wait
	                // up to that many blocks for getCode
	                // Otherwise, poll for our code to be deployed
	                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
	                    if (code === "0x") {
	                        logger.throwError("contract not deployed", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                            contractAddress: _this.address,
	                            operation: "getDeployed"
	                        });
	                    }
	                    return _this;
	                });
	            }
	        }
	        return this._deployedPromise;
	    };
	    // @TODO:
	    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
	    // @TODO:
	    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
	    BaseContract.prototype.fallback = function (overrides) {
	        var _this = this;
	        if (!this.signer) {
	            logger.throwError("sending a transactions require a signer", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
	        }
	        var tx = (0, lib$3.shallowCopy)(overrides || {});
	        ["from", "to"].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            logger.throwError("cannot override " + key, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        tx.to = this.resolvedAddress;
	        return this.deployed().then(function () {
	            return _this.signer.sendTransaction(tx);
	        });
	    };
	    // Reconnect to a different signer or provider
	    BaseContract.prototype.connect = function (signerOrProvider) {
	        if (typeof (signerOrProvider) === "string") {
	            signerOrProvider = new lib$f.VoidSigner(signerOrProvider, this.provider);
	        }
	        var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
	        if (this.deployTransaction) {
	            (0, lib$3.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
	        }
	        return contract;
	    };
	    // Re-attach to a different on-chain instance of this contract
	    BaseContract.prototype.attach = function (addressOrName) {
	        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
	    };
	    BaseContract.isIndexed = function (value) {
	        return lib$d.Indexed.isIndexed(value);
	    };
	    BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {
	        // Already have an instance of this event running; we can re-use it
	        if (this._runningEvents[runningEvent.tag]) {
	            return this._runningEvents[runningEvent.tag];
	        }
	        return runningEvent;
	    };
	    BaseContract.prototype._getRunningEvent = function (eventName) {
	        if (typeof (eventName) === "string") {
	            // Listen for "error" events (if your contract has an error event, include
	            // the full signature to bypass this special event keyword)
	            if (eventName === "error") {
	                return this._normalizeRunningEvent(new ErrorRunningEvent());
	            }
	            // Listen for any event that is registered
	            if (eventName === "event") {
	                return this._normalizeRunningEvent(new RunningEvent("event", null));
	            }
	            // Listen for any event
	            if (eventName === "*") {
	                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
	            }
	            // Get the event Fragment (throws if ambiguous/unknown event)
	            var fragment = this.interface.getEvent(eventName);
	            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
	        }
	        // We have topics to filter by...
	        if (eventName.topics && eventName.topics.length > 0) {
	            // Is it a known topichash? (throws if no matching topichash)
	            try {
	                var topic = eventName.topics[0];
	                if (typeof (topic) !== "string") {
	                    throw new Error("invalid topic"); // @TODO: May happen for anonymous events
	                }
	                var fragment = this.interface.getEvent(topic);
	                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
	            }
	            catch (error) { }
	            // Filter by the unknown topichash
	            var filter = {
	                address: this.address,
	                topics: eventName.topics
	            };
	            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
	        }
	        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
	    };
	    BaseContract.prototype._checkRunningEvents = function (runningEvent) {
	        if (runningEvent.listenerCount() === 0) {
	            delete this._runningEvents[runningEvent.tag];
	            // If we have a poller for this, remove it
	            var emit = this._wrappedEmits[runningEvent.tag];
	            if (emit && runningEvent.filter) {
	                this.provider.off(runningEvent.filter, emit);
	                delete this._wrappedEmits[runningEvent.tag];
	            }
	        }
	    };
	    // Subclasses can override this to gracefully recover
	    // from parse errors if they wish
	    BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {
	        var _this = this;
	        var event = (0, lib$3.deepCopy)(log);
	        event.removeListener = function () {
	            if (!listener) {
	                return;
	            }
	            runningEvent.removeListener(listener);
	            _this._checkRunningEvents(runningEvent);
	        };
	        event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
	        event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
	        event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
	        // This may throw if the topics and data mismatch the signature
	        runningEvent.prepareEvent(event);
	        return event;
	    };
	    BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {
	        var _this = this;
	        if (!this.provider) {
	            logger.throwError("events require a provider or a signer with a provider", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
	        }
	        runningEvent.addListener(listener, once);
	        // Track this running event and its listeners (may already be there; but no harm in updating)
	        this._runningEvents[runningEvent.tag] = runningEvent;
	        // If we are not polling the provider, start polling
	        if (!this._wrappedEmits[runningEvent.tag]) {
	            var wrappedEmit = function (log) {
	                var event = _this._wrapEvent(runningEvent, log, listener);
	                // Try to emit the result for the parameterized event...
	                if (event.decodeError == null) {
	                    try {
	                        var args = runningEvent.getEmit(event);
	                        _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));
	                    }
	                    catch (error) {
	                        event.decodeError = error.error;
	                    }
	                }
	                // Always emit "event" for fragment-base events
	                if (runningEvent.filter != null) {
	                    _this.emit("event", event);
	                }
	                // Emit "error" if there was an error
	                if (event.decodeError != null) {
	                    _this.emit("error", event.decodeError, event);
	                }
	            };
	            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
	            // Special events, like "error" do not have a filter
	            if (runningEvent.filter != null) {
	                this.provider.on(runningEvent.filter, wrappedEmit);
	            }
	        }
	    };
	    BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {
	        var _this = this;
	        var runningEvent = this._getRunningEvent(event);
	        var filter = (0, lib$3.shallowCopy)(runningEvent.filter);
	        if (typeof (fromBlockOrBlockhash) === "string" && (0, lib$1.isHexString)(fromBlockOrBlockhash, 32)) {
	            if (toBlock != null) {
	                logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
	            }
	            filter.blockHash = fromBlockOrBlockhash;
	        }
	        else {
	            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
	            filter.toBlock = ((toBlock != null) ? toBlock : "latest");
	        }
	        return this.provider.getLogs(filter).then(function (logs) {
	            return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });
	        });
	    };
	    BaseContract.prototype.on = function (event, listener) {
	        this._addEventListener(this._getRunningEvent(event), listener, false);
	        return this;
	    };
	    BaseContract.prototype.once = function (event, listener) {
	        this._addEventListener(this._getRunningEvent(event), listener, true);
	        return this;
	    };
	    BaseContract.prototype.emit = function (eventName) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (!this.provider) {
	            return false;
	        }
	        var runningEvent = this._getRunningEvent(eventName);
	        var result = (runningEvent.run(args) > 0);
	        // May have drained all the "once" events; check for living events
	        this._checkRunningEvents(runningEvent);
	        return result;
	    };
	    BaseContract.prototype.listenerCount = function (eventName) {
	        var _this = this;
	        if (!this.provider) {
	            return 0;
	        }
	        if (eventName == null) {
	            return Object.keys(this._runningEvents).reduce(function (accum, key) {
	                return accum + _this._runningEvents[key].listenerCount();
	            }, 0);
	        }
	        return this._getRunningEvent(eventName).listenerCount();
	    };
	    BaseContract.prototype.listeners = function (eventName) {
	        if (!this.provider) {
	            return [];
	        }
	        if (eventName == null) {
	            var result_1 = [];
	            for (var tag in this._runningEvents) {
	                this._runningEvents[tag].listeners().forEach(function (listener) {
	                    result_1.push(listener);
	                });
	            }
	            return result_1;
	        }
	        return this._getRunningEvent(eventName).listeners();
	    };
	    BaseContract.prototype.removeAllListeners = function (eventName) {
	        if (!this.provider) {
	            return this;
	        }
	        if (eventName == null) {
	            for (var tag in this._runningEvents) {
	                var runningEvent_1 = this._runningEvents[tag];
	                runningEvent_1.removeAllListeners();
	                this._checkRunningEvents(runningEvent_1);
	            }
	            return this;
	        }
	        // Delete any listeners
	        var runningEvent = this._getRunningEvent(eventName);
	        runningEvent.removeAllListeners();
	        this._checkRunningEvents(runningEvent);
	        return this;
	    };
	    BaseContract.prototype.off = function (eventName, listener) {
	        if (!this.provider) {
	            return this;
	        }
	        var runningEvent = this._getRunningEvent(eventName);
	        runningEvent.removeListener(listener);
	        this._checkRunningEvents(runningEvent);
	        return this;
	    };
	    BaseContract.prototype.removeListener = function (eventName, listener) {
	        return this.off(eventName, listener);
	    };
	    return BaseContract;
	}());
	exports.BaseContract = BaseContract;
	var Contract = /** @class */ (function (_super) {
	    __extends(Contract, _super);
	    function Contract() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return Contract;
	}(BaseContract));
	exports.Contract = Contract;
	var ContractFactory = /** @class */ (function () {
	    function ContractFactory(contractInterface, bytecode, signer) {
	        var _newTarget = this.constructor;
	        var bytecodeHex = null;
	        if (typeof (bytecode) === "string") {
	            bytecodeHex = bytecode;
	        }
	        else if ((0, lib$1.isBytes)(bytecode)) {
	            bytecodeHex = (0, lib$1.hexlify)(bytecode);
	        }
	        else if (bytecode && typeof (bytecode.object) === "string") {
	            // Allow the bytecode object from the Solidity compiler
	            bytecodeHex = bytecode.object;
	        }
	        else {
	            // Crash in the next verification step
	            bytecodeHex = "!";
	        }
	        // Make sure it is 0x prefixed
	        if (bytecodeHex.substring(0, 2) !== "0x") {
	            bytecodeHex = "0x" + bytecodeHex;
	        }
	        // Make sure the final result is valid bytecode
	        if (!(0, lib$1.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {
	            logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
	        }
	        // If we have a signer, make sure it is valid
	        if (signer && !lib$f.Signer.isSigner(signer)) {
	            logger.throwArgumentError("invalid signer", "signer", signer);
	        }
	        (0, lib$3.defineReadOnly)(this, "bytecode", bytecodeHex);
	        (0, lib$3.defineReadOnly)(this, "interface", (0, lib$3.getStatic)(_newTarget, "getInterface")(contractInterface));
	        (0, lib$3.defineReadOnly)(this, "signer", signer || null);
	    }
	    // @TODO: Future; rename to populateTransaction?
	    ContractFactory.prototype.getDeployTransaction = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var tx = {};
	        // If we have 1 additional argument, we allow transaction overrides
	        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
	            tx = (0, lib$3.shallowCopy)(args.pop());
	            for (var key in tx) {
	                if (!allowedTransactionKeys[key]) {
	                    throw new Error("unknown transaction override " + key);
	                }
	            }
	        }
	        // Do not allow these to be overridden in a deployment transaction
	        ["data", "from", "to"].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            logger.throwError("cannot override " + key, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        if (tx.value) {
	            var value = lib$2.BigNumber.from(tx.value);
	            if (!value.isZero() && !this.interface.deploy.payable) {
	                logger.throwError("non-payable constructor cannot override value", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "overrides.value",
	                    value: tx.value
	                });
	            }
	        }
	        // Make sure the call matches the constructor signature
	        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
	        // Set the data to the bytecode + the encoded constructor arguments
	        tx.data = (0, lib$1.hexlify)((0, lib$1.concat)([
	            this.bytecode,
	            this.interface.encodeDeploy(args)
	        ]));
	        return tx;
	    };
	    ContractFactory.prototype.deploy = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter(this, void 0, void 0, function () {
	            var overrides, params, unsignedTx, tx, address, contract;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        overrides = {};
	                        // If 1 extra parameter was passed in, it contains overrides
	                        if (args.length === this.interface.deploy.inputs.length + 1) {
	                            overrides = args.pop();
	                        }
	                        // Make sure the call matches the constructor signature
	                        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
	                        return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
	                    case 1:
	                        params = _a.sent();
	                        params.push(overrides);
	                        unsignedTx = this.getDeployTransaction.apply(this, params);
	                        return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];
	                    case 2:
	                        tx = _a.sent();
	                        address = (0, lib$3.getStatic)(this.constructor, "getContractAddress")(tx);
	                        contract = (0, lib$3.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
	                        // Add the modified wait that wraps events
	                        addContractWait(contract, tx);
	                        (0, lib$3.defineReadOnly)(contract, "deployTransaction", tx);
	                        return [2 /*return*/, contract];
	                }
	            });
	        });
	    };
	    ContractFactory.prototype.attach = function (address) {
	        return (this.constructor).getContract(address, this.interface, this.signer);
	    };
	    ContractFactory.prototype.connect = function (signer) {
	        return new (this.constructor)(this.interface, this.bytecode, signer);
	    };
	    ContractFactory.fromSolidity = function (compilerOutput, signer) {
	        if (compilerOutput == null) {
	            logger.throwError("missing compiler output", lib.Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
	        }
	        if (typeof (compilerOutput) === "string") {
	            compilerOutput = JSON.parse(compilerOutput);
	        }
	        var abi = compilerOutput.abi;
	        var bytecode = null;
	        if (compilerOutput.bytecode) {
	            bytecode = compilerOutput.bytecode;
	        }
	        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
	            bytecode = compilerOutput.evm.bytecode;
	        }
	        return new this(abi, bytecode, signer);
	    };
	    ContractFactory.getInterface = function (contractInterface) {
	        return Contract.getInterface(contractInterface);
	    };
	    ContractFactory.getContractAddress = function (tx) {
	        return (0, lib$6.getContractAddress)(tx);
	    };
	    ContractFactory.getContract = function (address, contractInterface, signer) {
	        return new Contract(address, contractInterface, signer);
	    };
	    return ContractFactory;
	}());
	exports.ContractFactory = ContractFactory;

	});

	var index$g = /*@__PURE__*/getDefaultExportFromCjs(lib$i);

	var lib$j = createCommonjsModule(function (module, exports) {
	"use strict";
	/**
	 * var basex = require("base-x");
	 *
	 * This implementation is heavily based on base-x. The main reason to
	 * deviate was to prevent the dependency of Buffer.
	 *
	 * Contributors:
	 *
	 * base-x encoding
	 * Forked from https://github.com/cryptocoinjs/bs58
	 * Originally written by Mike Hearn for BitcoinJ
	 * Copyright (c) 2011 Google Inc
	 * Ported to JavaScript by Stefan Thomas
	 * Merged Buffer refactorings from base58-native by Stephen Pair
	 * Copyright (c) 2013 BitPay Inc
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright base-x contributors (c) 2016
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 *
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Base58 = exports.Base32 = exports.BaseX = void 0;


	var BaseX = /** @class */ (function () {
	    function BaseX(alphabet) {
	        (0, lib$3.defineReadOnly)(this, "alphabet", alphabet);
	        (0, lib$3.defineReadOnly)(this, "base", alphabet.length);
	        (0, lib$3.defineReadOnly)(this, "_alphabetMap", {});
	        (0, lib$3.defineReadOnly)(this, "_leader", alphabet.charAt(0));
	        // pre-compute lookup table
	        for (var i = 0; i < alphabet.length; i++) {
	            this._alphabetMap[alphabet.charAt(i)] = i;
	        }
	    }
	    BaseX.prototype.encode = function (value) {
	        var source = (0, lib$1.arrayify)(value);
	        if (source.length === 0) {
	            return "";
	        }
	        var digits = [0];
	        for (var i = 0; i < source.length; ++i) {
	            var carry = source[i];
	            for (var j = 0; j < digits.length; ++j) {
	                carry += digits[j] << 8;
	                digits[j] = carry % this.base;
	                carry = (carry / this.base) | 0;
	            }
	            while (carry > 0) {
	                digits.push(carry % this.base);
	                carry = (carry / this.base) | 0;
	            }
	        }
	        var string = "";
	        // deal with leading zeros
	        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
	            string += this._leader;
	        }
	        // convert digits to a string
	        for (var q = digits.length - 1; q >= 0; --q) {
	            string += this.alphabet[digits[q]];
	        }
	        return string;
	    };
	    BaseX.prototype.decode = function (value) {
	        if (typeof (value) !== "string") {
	            throw new TypeError("Expected String");
	        }
	        var bytes = [];
	        if (value.length === 0) {
	            return new Uint8Array(bytes);
	        }
	        bytes.push(0);
	        for (var i = 0; i < value.length; i++) {
	            var byte = this._alphabetMap[value[i]];
	            if (byte === undefined) {
	                throw new Error("Non-base" + this.base + " character");
	            }
	            var carry = byte;
	            for (var j = 0; j < bytes.length; ++j) {
	                carry += bytes[j] * this.base;
	                bytes[j] = carry & 0xff;
	                carry >>= 8;
	            }
	            while (carry > 0) {
	                bytes.push(carry & 0xff);
	                carry >>= 8;
	            }
	        }
	        // deal with leading zeros
	        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
	            bytes.push(0);
	        }
	        return (0, lib$1.arrayify)(new Uint8Array(bytes.reverse()));
	    };
	    return BaseX;
	}());
	exports.BaseX = BaseX;
	var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
	exports.Base32 = Base32;
	var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
	exports.Base58 = Base58;
	//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
	//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

	});

	var index$h = /*@__PURE__*/getDefaultExportFromCjs(lib$j);

	var types = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SupportedAlgorithm = void 0;
	var SupportedAlgorithm;
	(function (SupportedAlgorithm) {
	    SupportedAlgorithm["sha256"] = "sha256";
	    SupportedAlgorithm["sha512"] = "sha512";
	})(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));
	;

	});

	var types$1 = /*@__PURE__*/getDefaultExportFromCjs(types);

	var _version$s = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "sha2/5.8.0";

	});

	var _version$t = /*@__PURE__*/getDefaultExportFromCjs(_version$s);

	var browserSha2 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.computeHmac = exports.sha512 = exports.sha256 = exports.ripemd160 = void 0;
	var hash_js_1 = __importDefault(hash_1);
	//const _ripemd160 = _hash.ripemd160;




	var logger = new lib.Logger(_version$s.version);
	function ripemd160(data) {
	    return "0x" + (hash_js_1.default.ripemd160().update((0, lib$1.arrayify)(data)).digest("hex"));
	}
	exports.ripemd160 = ripemd160;
	function sha256(data) {
	    return "0x" + (hash_js_1.default.sha256().update((0, lib$1.arrayify)(data)).digest("hex"));
	}
	exports.sha256 = sha256;
	function sha512(data) {
	    return "0x" + (hash_js_1.default.sha512().update((0, lib$1.arrayify)(data)).digest("hex"));
	}
	exports.sha512 = sha512;
	function computeHmac(algorithm, key, data) {
	    if (!types.SupportedAlgorithm[algorithm]) {
	        logger.throwError("unsupported algorithm " + algorithm, lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "hmac",
	            algorithm: algorithm
	        });
	    }
	    return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, lib$1.arrayify)(key)).update((0, lib$1.arrayify)(data)).digest("hex");
	}
	exports.computeHmac = computeHmac;

	});

	var browserSha2$1 = /*@__PURE__*/getDefaultExportFromCjs(browserSha2);

	var lib$k = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;

	Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return browserSha2.computeHmac; } });
	Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return browserSha2.ripemd160; } });
	Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return browserSha2.sha256; } });
	Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return browserSha2.sha512; } });

	Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return types.SupportedAlgorithm; } });

	});

	var index$i = /*@__PURE__*/getDefaultExportFromCjs(lib$k);

	var browserPbkdf2 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pbkdf2 = void 0;


	function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
	    password = (0, lib$1.arrayify)(password);
	    salt = (0, lib$1.arrayify)(salt);
	    var hLen;
	    var l = 1;
	    var DK = new Uint8Array(keylen);
	    var block1 = new Uint8Array(salt.length + 4);
	    block1.set(salt);
	    //salt.copy(block1, 0, 0, salt.length)
	    var r;
	    var T;
	    for (var i = 1; i <= l; i++) {
	        //block1.writeUInt32BE(i, salt.length)
	        block1[salt.length] = (i >> 24) & 0xff;
	        block1[salt.length + 1] = (i >> 16) & 0xff;
	        block1[salt.length + 2] = (i >> 8) & 0xff;
	        block1[salt.length + 3] = i & 0xff;
	        //let U = createHmac(password).update(block1).digest();
	        var U = (0, lib$1.arrayify)((0, lib$k.computeHmac)(hashAlgorithm, password, block1));
	        if (!hLen) {
	            hLen = U.length;
	            T = new Uint8Array(hLen);
	            l = Math.ceil(keylen / hLen);
	            r = keylen - (l - 1) * hLen;
	        }
	        //U.copy(T, 0, 0, hLen)
	        T.set(U);
	        for (var j = 1; j < iterations; j++) {
	            //U = createHmac(password).update(U).digest();
	            U = (0, lib$1.arrayify)((0, lib$k.computeHmac)(hashAlgorithm, password, U));
	            for (var k = 0; k < hLen; k++)
	                T[k] ^= U[k];
	        }
	        var destPos = (i - 1) * hLen;
	        var len = (i === l ? r : hLen);
	        //T.copy(DK, destPos, 0, len)
	        DK.set((0, lib$1.arrayify)(T).slice(0, len), destPos);
	    }
	    return (0, lib$1.hexlify)(DK);
	}
	exports.pbkdf2 = pbkdf2;

	});

	var browserPbkdf2$1 = /*@__PURE__*/getDefaultExportFromCjs(browserPbkdf2);

	var lib$l = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pbkdf2 = void 0;

	Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return browserPbkdf2.pbkdf2; } });

	});

	var index$j = /*@__PURE__*/getDefaultExportFromCjs(lib$l);

	var _version$u = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "wordlists/5.8.0";

	});

	var _version$v = /*@__PURE__*/getDefaultExportFromCjs(_version$u);

	var wordlist = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Wordlist = exports.logger = void 0;
	// This gets overridden by rollup
	var exportWordlist = false;




	exports.logger = new lib.Logger(_version$u.version);
	var Wordlist = /** @class */ (function () {
	    function Wordlist(locale) {
	        var _newTarget = this.constructor;
	        exports.logger.checkAbstract(_newTarget, Wordlist);
	        (0, lib$3.defineReadOnly)(this, "locale", locale);
	    }
	    // Subclasses may override this
	    Wordlist.prototype.split = function (mnemonic) {
	        return mnemonic.toLowerCase().split(/ +/g);
	    };
	    // Subclasses may override this
	    Wordlist.prototype.join = function (words) {
	        return words.join(" ");
	    };
	    Wordlist.check = function (wordlist) {
	        var words = [];
	        for (var i = 0; i < 2048; i++) {
	            var word = wordlist.getWord(i);
	            /* istanbul ignore if */
	            if (i !== wordlist.getWordIndex(word)) {
	                return "0x";
	            }
	            words.push(word);
	        }
	        return (0, lib$c.id)(words.join("\n") + "\n");
	    };
	    Wordlist.register = function (lang, name) {
	        if (!name) {
	            name = lang.locale;
	        }
	        /* istanbul ignore if */
	        if (exportWordlist) {
	            try {
	                var anyGlobal = window;
	                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
	                    if (!anyGlobal._ethers.wordlists[name]) {
	                        (0, lib$3.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
	                    }
	                }
	            }
	            catch (error) { }
	        }
	    };
	    return Wordlist;
	}());
	exports.Wordlist = Wordlist;

	});

	var wordlist$1 = /*@__PURE__*/getDefaultExportFromCjs(wordlist);

	var langEn_1 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.langEn = void 0;

	var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
	var wordlist$1 = null;
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
	        wordlist$1 = null;
	        throw new Error("BIP39 Wordlist for en (English) FAILED");
	    }
	}
	var LangEn = /** @class */ (function (_super) {
	    __extends(LangEn, _super);
	    function LangEn() {
	        return _super.call(this, "en") || this;
	    }
	    LangEn.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangEn.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1.indexOf(word);
	    };
	    return LangEn;
	}(wordlist.Wordlist));
	var langEn = new LangEn();
	exports.langEn = langEn;
	wordlist.Wordlist.register(langEn);

	});

	var langEn = /*@__PURE__*/getDefaultExportFromCjs(langEn_1);

	var browserWordlists = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.wordlists = void 0;

	exports.wordlists = {
	    en: langEn_1.langEn
	};

	});

	var browserWordlists$1 = /*@__PURE__*/getDefaultExportFromCjs(browserWordlists);

	var lib$m = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.wordlists = exports.Wordlist = exports.logger = void 0;
	// Wordlists
	// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md

	Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return wordlist.logger; } });
	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlist.Wordlist; } });

	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return browserWordlists.wordlists; } });

	});

	var index$k = /*@__PURE__*/getDefaultExportFromCjs(lib$m);

	var _version$w = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "hdnode/5.8.0";

	});

	var _version$x = /*@__PURE__*/getDefaultExportFromCjs(_version$w);

	var lib$n = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;












	var logger = new lib.Logger(_version$w.version);
	var N = lib$2.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
	// "Bitcoin seed"
	var MasterSecret = (0, lib$8.toUtf8Bytes)("Bitcoin seed");
	var HardenedBit = 0x80000000;
	// Returns a byte with the MSB bits set
	function getUpperMask(bits) {
	    return ((1 << bits) - 1) << (8 - bits);
	}
	// Returns a byte with the LSB bits set
	function getLowerMask(bits) {
	    return (1 << bits) - 1;
	}
	function bytes32(value) {
	    return (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(value), 32);
	}
	function base58check(data) {
	    return lib$j.Base58.encode((0, lib$1.concat)([data, (0, lib$1.hexDataSlice)((0, lib$k.sha256)((0, lib$k.sha256)(data)), 0, 4)]));
	}
	function getWordlist(wordlist) {
	    if (wordlist == null) {
	        return lib$m.wordlists["en"];
	    }
	    if (typeof (wordlist) === "string") {
	        var words = lib$m.wordlists[wordlist];
	        if (words == null) {
	            logger.throwArgumentError("unknown locale", "wordlist", wordlist);
	        }
	        return words;
	    }
	    return wordlist;
	}
	var _constructorGuard = {};
	exports.defaultPath = "m/44'/60'/0'/0/0";
	;
	var HDNode = /** @class */ (function () {
	    /**
	     *  This constructor should not be called directly.
	     *
	     *  Please use:
	     *   - fromMnemonic
	     *   - fromSeed
	     */
	    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
	        /* istanbul ignore if */
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error("HDNode constructor cannot be called directly");
	        }
	        if (privateKey) {
	            var signingKey = new lib$g.SigningKey(privateKey);
	            (0, lib$3.defineReadOnly)(this, "privateKey", signingKey.privateKey);
	            (0, lib$3.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
	        }
	        else {
	            (0, lib$3.defineReadOnly)(this, "privateKey", null);
	            (0, lib$3.defineReadOnly)(this, "publicKey", (0, lib$1.hexlify)(publicKey));
	        }
	        (0, lib$3.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
	        (0, lib$3.defineReadOnly)(this, "fingerprint", (0, lib$1.hexDataSlice)((0, lib$k.ripemd160)((0, lib$k.sha256)(this.publicKey)), 0, 4));
	        (0, lib$3.defineReadOnly)(this, "address", (0, lib$h.computeAddress)(this.publicKey));
	        (0, lib$3.defineReadOnly)(this, "chainCode", chainCode);
	        (0, lib$3.defineReadOnly)(this, "index", index);
	        (0, lib$3.defineReadOnly)(this, "depth", depth);
	        if (mnemonicOrPath == null) {
	            // From a source that does not preserve the path (e.g. extended keys)
	            (0, lib$3.defineReadOnly)(this, "mnemonic", null);
	            (0, lib$3.defineReadOnly)(this, "path", null);
	        }
	        else if (typeof (mnemonicOrPath) === "string") {
	            // From a source that does not preserve the mnemonic (e.g. neutered)
	            (0, lib$3.defineReadOnly)(this, "mnemonic", null);
	            (0, lib$3.defineReadOnly)(this, "path", mnemonicOrPath);
	        }
	        else {
	            // From a fully qualified source
	            (0, lib$3.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
	            (0, lib$3.defineReadOnly)(this, "path", mnemonicOrPath.path);
	        }
	    }
	    Object.defineProperty(HDNode.prototype, "extendedKey", {
	        get: function () {
	            // We only support the mainnet values for now, but if anyone needs
	            // testnet values, let me know. I believe current sentiment is that
	            // we should always use mainnet, and use BIP-44 to derive the network
	            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
	            //   - Testnet: public=0x043587CF, private=0x04358394
	            if (this.depth >= 256) {
	                throw new Error("Depth too large!");
	            }
	            return base58check((0, lib$1.concat)([
	                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
	                (0, lib$1.hexlify)(this.depth),
	                this.parentFingerprint,
	                (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(this.index), 4),
	                this.chainCode,
	                ((this.privateKey != null) ? (0, lib$1.concat)(["0x00", this.privateKey]) : this.publicKey),
	            ]));
	        },
	        enumerable: false,
	        configurable: true
	    });
	    HDNode.prototype.neuter = function () {
	        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
	    };
	    HDNode.prototype._derive = function (index) {
	        if (index > 0xffffffff) {
	            throw new Error("invalid index - " + String(index));
	        }
	        // Base path
	        var path = this.path;
	        if (path) {
	            path += "/" + (index & ~HardenedBit);
	        }
	        var data = new Uint8Array(37);
	        if (index & HardenedBit) {
	            if (!this.privateKey) {
	                throw new Error("cannot derive child of neutered node");
	            }
	            // Data = 0x00 || ser_256(k_par)
	            data.set((0, lib$1.arrayify)(this.privateKey), 1);
	            // Hardened path
	            if (path) {
	                path += "'";
	            }
	        }
	        else {
	            // Data = ser_p(point(k_par))
	            data.set((0, lib$1.arrayify)(this.publicKey));
	        }
	        // Data += ser_32(i)
	        for (var i = 24; i >= 0; i -= 8) {
	            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
	        }
	        var I = (0, lib$1.arrayify)((0, lib$k.computeHmac)(lib$k.SupportedAlgorithm.sha512, this.chainCode, data));
	        var IL = I.slice(0, 32);
	        var IR = I.slice(32);
	        // The private key
	        var ki = null;
	        // The public key
	        var Ki = null;
	        if (this.privateKey) {
	            ki = bytes32(lib$2.BigNumber.from(IL).add(this.privateKey).mod(N));
	        }
	        else {
	            var ek = new lib$g.SigningKey((0, lib$1.hexlify)(IL));
	            Ki = ek._addPoint(this.publicKey);
	        }
	        var mnemonicOrPath = path;
	        var srcMnemonic = this.mnemonic;
	        if (srcMnemonic) {
	            mnemonicOrPath = Object.freeze({
	                phrase: srcMnemonic.phrase,
	                path: path,
	                locale: (srcMnemonic.locale || "en")
	            });
	        }
	        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
	    };
	    HDNode.prototype.derivePath = function (path) {
	        var components = path.split("/");
	        if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
	            throw new Error("invalid path - " + path);
	        }
	        if (components[0] === "m") {
	            components.shift();
	        }
	        var result = this;
	        for (var i = 0; i < components.length; i++) {
	            var component = components[i];
	            if (component.match(/^[0-9]+'$/)) {
	                var index = parseInt(component.substring(0, component.length - 1));
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(HardenedBit + index);
	            }
	            else if (component.match(/^[0-9]+$/)) {
	                var index = parseInt(component);
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(index);
	            }
	            else {
	                throw new Error("invalid path component - " + component);
	            }
	        }
	        return result;
	    };
	    HDNode._fromSeed = function (seed, mnemonic) {
	        var seedArray = (0, lib$1.arrayify)(seed);
	        if (seedArray.length < 16 || seedArray.length > 64) {
	            throw new Error("invalid seed");
	        }
	        var I = (0, lib$1.arrayify)((0, lib$k.computeHmac)(lib$k.SupportedAlgorithm.sha512, MasterSecret, seedArray));
	        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
	    };
	    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {
	        // If a locale name was passed in, find the associated wordlist
	        wordlist = getWordlist(wordlist);
	        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
	        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
	        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
	            phrase: mnemonic,
	            path: "m",
	            locale: wordlist.locale
	        });
	    };
	    HDNode.fromSeed = function (seed) {
	        return HDNode._fromSeed(seed, null);
	    };
	    HDNode.fromExtendedKey = function (extendedKey) {
	        var bytes = lib$j.Base58.decode(extendedKey);
	        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
	            logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	        }
	        var depth = bytes[4];
	        var parentFingerprint = (0, lib$1.hexlify)(bytes.slice(5, 9));
	        var index = parseInt((0, lib$1.hexlify)(bytes.slice(9, 13)).substring(2), 16);
	        var chainCode = (0, lib$1.hexlify)(bytes.slice(13, 45));
	        var key = bytes.slice(45, 78);
	        switch ((0, lib$1.hexlify)(bytes.slice(0, 4))) {
	            // Public Key
	            case "0x0488b21e":
	            case "0x043587cf":
	                return new HDNode(_constructorGuard, null, (0, lib$1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
	            // Private Key
	            case "0x0488ade4":
	            case "0x04358394 ":
	                if (key[0] !== 0) {
	                    break;
	                }
	                return new HDNode(_constructorGuard, (0, lib$1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
	        }
	        return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	    };
	    return HDNode;
	}());
	exports.HDNode = HDNode;
	function mnemonicToSeed(mnemonic, password) {
	    if (!password) {
	        password = "";
	    }
	    var salt = (0, lib$8.toUtf8Bytes)("mnemonic" + password, lib$8.UnicodeNormalizationForm.NFKD);
	    return (0, lib$l.pbkdf2)((0, lib$8.toUtf8Bytes)(mnemonic, lib$8.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
	}
	exports.mnemonicToSeed = mnemonicToSeed;
	function mnemonicToEntropy(mnemonic, wordlist) {
	    wordlist = getWordlist(wordlist);
	    logger.checkNormalize();
	    var words = wordlist.split(mnemonic);
	    if ((words.length % 3) !== 0) {
	        throw new Error("invalid mnemonic");
	    }
	    var entropy = (0, lib$1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
	    var offset = 0;
	    for (var i = 0; i < words.length; i++) {
	        var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
	        if (index === -1) {
	            throw new Error("invalid mnemonic");
	        }
	        for (var bit = 0; bit < 11; bit++) {
	            if (index & (1 << (10 - bit))) {
	                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
	            }
	            offset++;
	        }
	    }
	    var entropyBits = 32 * words.length / 3;
	    var checksumBits = words.length / 3;
	    var checksumMask = getUpperMask(checksumBits);
	    var checksum = (0, lib$1.arrayify)((0, lib$k.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
	    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
	        throw new Error("invalid checksum");
	    }
	    return (0, lib$1.hexlify)(entropy.slice(0, entropyBits / 8));
	}
	exports.mnemonicToEntropy = mnemonicToEntropy;
	function entropyToMnemonic(entropy, wordlist) {
	    wordlist = getWordlist(wordlist);
	    entropy = (0, lib$1.arrayify)(entropy);
	    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
	        throw new Error("invalid entropy");
	    }
	    var indices = [0];
	    var remainingBits = 11;
	    for (var i = 0; i < entropy.length; i++) {
	        // Consume the whole byte (with still more to go)
	        if (remainingBits > 8) {
	            indices[indices.length - 1] <<= 8;
	            indices[indices.length - 1] |= entropy[i];
	            remainingBits -= 8;
	            // This byte will complete an 11-bit index
	        }
	        else {
	            indices[indices.length - 1] <<= remainingBits;
	            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
	            // Start the next word
	            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
	            remainingBits += 3;
	        }
	    }
	    // Compute the checksum bits
	    var checksumBits = entropy.length / 4;
	    var checksum = (0, lib$1.arrayify)((0, lib$k.sha256)(entropy))[0] & getUpperMask(checksumBits);
	    // Shift the checksum into the word indices
	    indices[indices.length - 1] <<= checksumBits;
	    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
	    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
	}
	exports.entropyToMnemonic = entropyToMnemonic;
	function isValidMnemonic(mnemonic, wordlist) {
	    try {
	        mnemonicToEntropy(mnemonic, wordlist);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	exports.isValidMnemonic = isValidMnemonic;
	function getAccountPath(index) {
	    if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
	        logger.throwArgumentError("invalid account index", "index", index);
	    }
	    return "m/44'/60'/" + index + "'/0/0";
	}
	exports.getAccountPath = getAccountPath;

	});

	var index$l = /*@__PURE__*/getDefaultExportFromCjs(lib$n);

	var _version$y = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "random/5.8.0";

	});

	var _version$z = /*@__PURE__*/getDefaultExportFromCjs(_version$y);

	var browserRandom = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.randomBytes = void 0;



	var logger = new lib.Logger(_version$y.version);
	// Debugging line for testing browser lib in node
	//const window = { crypto: { getRandomValues: () => { } } };
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
	function getGlobal() {
	    if (typeof self !== 'undefined') {
	        return self;
	    }
	    if (typeof window !== 'undefined') {
	        return window;
	    }
	    if (typeof commonjsGlobal !== 'undefined') {
	        return commonjsGlobal;
	    }
	    throw new Error('unable to locate global object');
	}
	;
	var anyGlobal = getGlobal();
	var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
	if (!crypto || !crypto.getRandomValues) {
	    logger.warn("WARNING: Missing strong random number source");
	    crypto = {
	        getRandomValues: function (buffer) {
	            return logger.throwError("no secure random source avaialble", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "crypto.getRandomValues"
	            });
	        }
	    };
	}
	function randomBytes(length) {
	    if (length <= 0 || length > 1024 || (length % 1) || length != length) {
	        logger.throwArgumentError("invalid length", "length", length);
	    }
	    var result = new Uint8Array(length);
	    crypto.getRandomValues(result);
	    return (0, lib$1.arrayify)(result);
	}
	exports.randomBytes = randomBytes;
	;

	});

	var browserRandom$1 = /*@__PURE__*/getDefaultExportFromCjs(browserRandom);

	var shuffle = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.shuffled = void 0;
	function shuffled(array) {
	    array = array.slice();
	    for (var i = array.length - 1; i > 0; i--) {
	        var j = Math.floor(Math.random() * (i + 1));
	        var tmp = array[i];
	        array[i] = array[j];
	        array[j] = tmp;
	    }
	    return array;
	}
	exports.shuffled = shuffled;

	});

	var shuffle$1 = /*@__PURE__*/getDefaultExportFromCjs(shuffle);

	var lib$o = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.shuffled = exports.randomBytes = void 0;

	Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return browserRandom.randomBytes; } });

	Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return shuffle.shuffled; } });

	});

	var index$m = /*@__PURE__*/getDefaultExportFromCjs(lib$o);

	var aesJs = createCommonjsModule(function (module, exports) {
	"use strict";

	(function(root) {

	    function checkInt(value) {
	        return (parseInt(value) === value);
	    }

	    function checkInts(arrayish) {
	        if (!checkInt(arrayish.length)) { return false; }

	        for (var i = 0; i < arrayish.length; i++) {
	            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
	                return false;
	            }
	        }

	        return true;
	    }

	    function coerceArray(arg, copy) {

	        // ArrayBuffer view
	        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

	            if (copy) {
	                if (arg.slice) {
	                    arg = arg.slice();
	                } else {
	                    arg = Array.prototype.slice.call(arg);
	                }
	            }

	            return arg;
	        }

	        // It's an array; check it is a valid representation of a byte
	        if (Array.isArray(arg)) {
	            if (!checkInts(arg)) {
	                throw new Error('Array contains invalid value: ' + arg);
	            }

	            return new Uint8Array(arg);
	        }

	        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
	        if (checkInt(arg.length) && checkInts(arg)) {
	            return new Uint8Array(arg);
	        }

	        throw new Error('unsupported array-like object');
	    }

	    function createArray(length) {
	        return new Uint8Array(length);
	    }

	    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
	        if (sourceStart != null || sourceEnd != null) {
	            if (sourceArray.slice) {
	                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
	            } else {
	                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
	            }
	        }
	        targetArray.set(sourceArray, targetStart);
	    }



	    var convertUtf8 = (function() {
	        function toBytes(text) {
	            var result = [], i = 0;
	            text = encodeURI(text);
	            while (i < text.length) {
	                var c = text.charCodeAt(i++);

	                // if it is a % sign, encode the following 2 bytes as a hex value
	                if (c === 37) {
	                    result.push(parseInt(text.substr(i, 2), 16));
	                    i += 2;

	                // otherwise, just the actual byte
	                } else {
	                    result.push(c);
	                }
	            }

	            return coerceArray(result);
	        }

	        function fromBytes(bytes) {
	            var result = [], i = 0;

	            while (i < bytes.length) {
	                var c = bytes[i];

	                if (c < 128) {
	                    result.push(String.fromCharCode(c));
	                    i++;
	                } else if (c > 191 && c < 224) {
	                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
	                    i += 2;
	                } else {
	                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
	                    i += 3;
	                }
	            }

	            return result.join('');
	        }

	        return {
	            toBytes: toBytes,
	            fromBytes: fromBytes,
	        }
	    })();

	    var convertHex = (function() {
	        function toBytes(text) {
	            var result = [];
	            for (var i = 0; i < text.length; i += 2) {
	                result.push(parseInt(text.substr(i, 2), 16));
	            }

	            return result;
	        }

	        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
	        var Hex = '0123456789abcdef';

	        function fromBytes(bytes) {
	                var result = [];
	                for (var i = 0; i < bytes.length; i++) {
	                    var v = bytes[i];
	                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
	                }
	                return result.join('');
	        }

	        return {
	            toBytes: toBytes,
	            fromBytes: fromBytes,
	        }
	    })();


	    // Number of rounds by keysize
	    var numberOfRounds = {16: 10, 24: 12, 32: 14};

	    // Round constant words
	    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

	    // S-box and Inverse S-box (S is for Substitution)
	    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
	    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

	    // Transformations for encryption
	    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
	    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
	    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
	    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

	    // Transformations for decryption
	    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
	    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
	    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
	    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

	    // Transformations for decryption key expansion
	    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
	    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
	    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
	    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

	    function convertToInt32(bytes) {
	        var result = [];
	        for (var i = 0; i < bytes.length; i += 4) {
	            result.push(
	                (bytes[i    ] << 24) |
	                (bytes[i + 1] << 16) |
	                (bytes[i + 2] <<  8) |
	                 bytes[i + 3]
	            );
	        }
	        return result;
	    }

	    var AES = function(key) {
	        if (!(this instanceof AES)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        Object.defineProperty(this, 'key', {
	            value: coerceArray(key, true)
	        });

	        this._prepare();
	    };


	    AES.prototype._prepare = function() {

	        var rounds = numberOfRounds[this.key.length];
	        if (rounds == null) {
	            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
	        }

	        // encryption round keys
	        this._Ke = [];

	        // decryption round keys
	        this._Kd = [];

	        for (var i = 0; i <= rounds; i++) {
	            this._Ke.push([0, 0, 0, 0]);
	            this._Kd.push([0, 0, 0, 0]);
	        }

	        var roundKeyCount = (rounds + 1) * 4;
	        var KC = this.key.length / 4;

	        // convert the key into ints
	        var tk = convertToInt32(this.key);

	        // copy values into round key arrays
	        var index;
	        for (var i = 0; i < KC; i++) {
	            index = i >> 2;
	            this._Ke[index][i % 4] = tk[i];
	            this._Kd[rounds - index][i % 4] = tk[i];
	        }

	        // key expansion (fips-197 section 5.2)
	        var rconpointer = 0;
	        var t = KC, tt;
	        while (t < roundKeyCount) {
	            tt = tk[KC - 1];
	            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
	                      (S[(tt >>  8) & 0xFF] << 16) ^
	                      (S[ tt        & 0xFF] <<  8) ^
	                       S[(tt >> 24) & 0xFF]        ^
	                      (rcon[rconpointer] << 24));
	            rconpointer += 1;

	            // key expansion (for non-256 bit)
	            if (KC != 8) {
	                for (var i = 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }

	            // key expansion for 256-bit keys is "slightly different" (fips-197)
	            } else {
	                for (var i = 1; i < (KC / 2); i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	                tt = tk[(KC / 2) - 1];

	                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
	                              (S[(tt >>  8) & 0xFF] <<  8) ^
	                              (S[(tt >> 16) & 0xFF] << 16) ^
	                              (S[(tt >> 24) & 0xFF] << 24));

	                for (var i = (KC / 2) + 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	            }

	            // copy values into round key arrays
	            var i = 0, r, c;
	            while (i < KC && t < roundKeyCount) {
	                r = t >> 2;
	                c = t % 4;
	                this._Ke[r][c] = tk[i];
	                this._Kd[rounds - r][c] = tk[i++];
	                t++;
	            }
	        }

	        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
	        for (var r = 1; r < rounds; r++) {
	            for (var c = 0; c < 4; c++) {
	                tt = this._Kd[r][c];
	                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
	                                  U2[(tt >> 16) & 0xFF] ^
	                                  U3[(tt >>  8) & 0xFF] ^
	                                  U4[ tt        & 0xFF]);
	            }
	        }
	    };

	    AES.prototype.encrypt = function(plaintext) {
	        if (plaintext.length != 16) {
	            throw new Error('invalid plaintext size (must be 16 bytes)');
	        }

	        var rounds = this._Ke.length - 1;
	        var a = [0, 0, 0, 0];

	        // convert plaintext to (ints ^ key)
	        var t = convertToInt32(plaintext);
	        for (var i = 0; i < 4; i++) {
	            t[i] ^= this._Ke[0][i];
	        }

	        // apply round transforms
	        for (var r = 1; r < rounds; r++) {
	            for (var i = 0; i < 4; i++) {
	                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
	                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
	                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
	                        T4[ t[(i + 3) % 4]        & 0xff] ^
	                        this._Ke[r][i]);
	            }
	            t = a.slice();
	        }

	        // the last round is special
	        var result = createArray(16), tt;
	        for (var i = 0; i < 4; i++) {
	            tt = this._Ke[rounds][i];
	            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
	            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
	        }

	        return result;
	    };

	    AES.prototype.decrypt = function(ciphertext) {
	        if (ciphertext.length != 16) {
	            throw new Error('invalid ciphertext size (must be 16 bytes)');
	        }

	        var rounds = this._Kd.length - 1;
	        var a = [0, 0, 0, 0];

	        // convert plaintext to (ints ^ key)
	        var t = convertToInt32(ciphertext);
	        for (var i = 0; i < 4; i++) {
	            t[i] ^= this._Kd[0][i];
	        }

	        // apply round transforms
	        for (var r = 1; r < rounds; r++) {
	            for (var i = 0; i < 4; i++) {
	                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
	                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
	                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
	                        T8[ t[(i + 1) % 4]        & 0xff] ^
	                        this._Kd[r][i]);
	            }
	            t = a.slice();
	        }

	        // the last round is special
	        var result = createArray(16), tt;
	        for (var i = 0; i < 4; i++) {
	            tt = this._Kd[rounds][i];
	            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
	            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
	        }

	        return result;
	    };


	    /**
	     *  Mode Of Operation - Electonic Codebook (ECB)
	     */
	    var ModeOfOperationECB = function(key) {
	        if (!(this instanceof ModeOfOperationECB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Electronic Code Block";
	        this.name = "ecb";

	        this._aes = new AES(key);
	    };

	    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
	        plaintext = coerceArray(plaintext);

	        if ((plaintext.length % 16) !== 0) {
	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	        }

	        var ciphertext = createArray(plaintext.length);
	        var block = createArray(16);

	        for (var i = 0; i < plaintext.length; i += 16) {
	            copyArray(plaintext, block, 0, i, i + 16);
	            block = this._aes.encrypt(block);
	            copyArray(block, ciphertext, i);
	        }

	        return ciphertext;
	    };

	    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
	        ciphertext = coerceArray(ciphertext);

	        if ((ciphertext.length % 16) !== 0) {
	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	        }

	        var plaintext = createArray(ciphertext.length);
	        var block = createArray(16);

	        for (var i = 0; i < ciphertext.length; i += 16) {
	            copyArray(ciphertext, block, 0, i, i + 16);
	            block = this._aes.decrypt(block);
	            copyArray(block, plaintext, i);
	        }

	        return plaintext;
	    };


	    /**
	     *  Mode Of Operation - Cipher Block Chaining (CBC)
	     */
	    var ModeOfOperationCBC = function(key, iv) {
	        if (!(this instanceof ModeOfOperationCBC)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Cipher Block Chaining";
	        this.name = "cbc";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 bytes)');
	        }

	        this._lastCipherblock = coerceArray(iv, true);

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
	        plaintext = coerceArray(plaintext);

	        if ((plaintext.length % 16) !== 0) {
	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	        }

	        var ciphertext = createArray(plaintext.length);
	        var block = createArray(16);

	        for (var i = 0; i < plaintext.length; i += 16) {
	            copyArray(plaintext, block, 0, i, i + 16);

	            for (var j = 0; j < 16; j++) {
	                block[j] ^= this._lastCipherblock[j];
	            }

	            this._lastCipherblock = this._aes.encrypt(block);
	            copyArray(this._lastCipherblock, ciphertext, i);
	        }

	        return ciphertext;
	    };

	    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
	        ciphertext = coerceArray(ciphertext);

	        if ((ciphertext.length % 16) !== 0) {
	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	        }

	        var plaintext = createArray(ciphertext.length);
	        var block = createArray(16);

	        for (var i = 0; i < ciphertext.length; i += 16) {
	            copyArray(ciphertext, block, 0, i, i + 16);
	            block = this._aes.decrypt(block);

	            for (var j = 0; j < 16; j++) {
	                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
	            }

	            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
	        }

	        return plaintext;
	    };


	    /**
	     *  Mode Of Operation - Cipher Feedback (CFB)
	     */
	    var ModeOfOperationCFB = function(key, iv, segmentSize) {
	        if (!(this instanceof ModeOfOperationCFB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Cipher Feedback";
	        this.name = "cfb";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 size)');
	        }

	        if (!segmentSize) { segmentSize = 1; }

	        this.segmentSize = segmentSize;

	        this._shiftRegister = coerceArray(iv, true);

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
	        if ((plaintext.length % this.segmentSize) != 0) {
	            throw new Error('invalid plaintext size (must be segmentSize bytes)');
	        }

	        var encrypted = coerceArray(plaintext, true);

	        var xorSegment;
	        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
	            xorSegment = this._aes.encrypt(this._shiftRegister);
	            for (var j = 0; j < this.segmentSize; j++) {
	                encrypted[i + j] ^= xorSegment[j];
	            }

	            // Shift the register
	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	        }

	        return encrypted;
	    };

	    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
	        if ((ciphertext.length % this.segmentSize) != 0) {
	            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
	        }

	        var plaintext = coerceArray(ciphertext, true);

	        var xorSegment;
	        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
	            xorSegment = this._aes.encrypt(this._shiftRegister);

	            for (var j = 0; j < this.segmentSize; j++) {
	                plaintext[i + j] ^= xorSegment[j];
	            }

	            // Shift the register
	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	        }

	        return plaintext;
	    };

	    /**
	     *  Mode Of Operation - Output Feedback (OFB)
	     */
	    var ModeOfOperationOFB = function(key, iv) {
	        if (!(this instanceof ModeOfOperationOFB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Output Feedback";
	        this.name = "ofb";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 bytes)');
	        }

	        this._lastPrecipher = coerceArray(iv, true);
	        this._lastPrecipherIndex = 16;

	        this._aes = new AES(key);
	    };

	    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
	        var encrypted = coerceArray(plaintext, true);

	        for (var i = 0; i < encrypted.length; i++) {
	            if (this._lastPrecipherIndex === 16) {
	                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
	                this._lastPrecipherIndex = 0;
	            }
	            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
	        }

	        return encrypted;
	    };

	    // Decryption is symetric
	    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


	    /**
	     *  Counter object for CTR common mode of operation
	     */
	    var Counter = function(initialValue) {
	        if (!(this instanceof Counter)) {
	            throw Error('Counter must be instanitated with `new`');
	        }

	        // We allow 0, but anything false-ish uses the default 1
	        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

	        if (typeof(initialValue) === 'number') {
	            this._counter = createArray(16);
	            this.setValue(initialValue);

	        } else {
	            this.setBytes(initialValue);
	        }
	    };

	    Counter.prototype.setValue = function(value) {
	        if (typeof(value) !== 'number' || parseInt(value) != value) {
	            throw new Error('invalid counter value (must be an integer)');
	        }

	        for (var index = 15; index >= 0; --index) {
	            this._counter[index] = value % 256;
	            value = value >> 8;
	        }
	    };

	    Counter.prototype.setBytes = function(bytes) {
	        bytes = coerceArray(bytes, true);

	        if (bytes.length != 16) {
	            throw new Error('invalid counter bytes size (must be 16 bytes)');
	        }

	        this._counter = bytes;
	    };

	    Counter.prototype.increment = function() {
	        for (var i = 15; i >= 0; i--) {
	            if (this._counter[i] === 255) {
	                this._counter[i] = 0;
	            } else {
	                this._counter[i]++;
	                break;
	            }
	        }
	    };


	    /**
	     *  Mode Of Operation - Counter (CTR)
	     */
	    var ModeOfOperationCTR = function(key, counter) {
	        if (!(this instanceof ModeOfOperationCTR)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Counter";
	        this.name = "ctr";

	        if (!(counter instanceof Counter)) {
	            counter = new Counter(counter);
	        }

	        this._counter = counter;

	        this._remainingCounter = null;
	        this._remainingCounterIndex = 16;

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
	        var encrypted = coerceArray(plaintext, true);

	        for (var i = 0; i < encrypted.length; i++) {
	            if (this._remainingCounterIndex === 16) {
	                this._remainingCounter = this._aes.encrypt(this._counter._counter);
	                this._remainingCounterIndex = 0;
	                this._counter.increment();
	            }
	            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
	        }

	        return encrypted;
	    };

	    // Decryption is symetric
	    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


	    ///////////////////////
	    // Padding

	    // See:https://tools.ietf.org/html/rfc2315
	    function pkcs7pad(data) {
	        data = coerceArray(data, true);
	        var padder = 16 - (data.length % 16);
	        var result = createArray(data.length + padder);
	        copyArray(data, result);
	        for (var i = data.length; i < result.length; i++) {
	            result[i] = padder;
	        }
	        return result;
	    }

	    function pkcs7strip(data) {
	        data = coerceArray(data, true);
	        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

	        var padder = data[data.length - 1];
	        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

	        var length = data.length - padder;
	        for (var i = 0; i < padder; i++) {
	            if (data[length + i] !== padder) {
	                throw new Error('PKCS#7 invalid padding byte');
	            }
	        }

	        var result = createArray(length);
	        copyArray(data, result, 0, 0, length);
	        return result;
	    }

	    ///////////////////////
	    // Exporting


	    // The block cipher
	    var aesjs = {
	        AES: AES,
	        Counter: Counter,

	        ModeOfOperation: {
	            ecb: ModeOfOperationECB,
	            cbc: ModeOfOperationCBC,
	            cfb: ModeOfOperationCFB,
	            ofb: ModeOfOperationOFB,
	            ctr: ModeOfOperationCTR
	        },

	        utils: {
	            hex: convertHex,
	            utf8: convertUtf8
	        },

	        padding: {
	            pkcs7: {
	                pad: pkcs7pad,
	                strip: pkcs7strip
	            }
	        },

	        _arrayTest: {
	            coerceArray: coerceArray,
	            createArray: createArray,
	            copyArray: copyArray,
	        }
	    };


	    // node.js
	    if ('object' !== 'undefined') {
	        module.exports = aesjs;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	    } else if (typeof(undefined) === 'function' && undefined.amd) {
	        undefined(aesjs);

	    // Web Browsers
	    } else {

	        // If there was an existing library at "aesjs" make sure it's still available
	        if (root.aesjs) {
	            aesjs._aesjs = root.aesjs;
	        }

	        root.aesjs = aesjs;
	    }


	})(commonjsGlobal);
	});

	var _version$A = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "json-wallets/5.8.0";

	});

	var _version$B = /*@__PURE__*/getDefaultExportFromCjs(_version$A);

	var utils$1 = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.uuidV4 = exports.searchPath = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;


	function looseArrayify(hexString) {
	    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
	        hexString = '0x' + hexString;
	    }
	    return (0, lib$1.arrayify)(hexString);
	}
	exports.looseArrayify = looseArrayify;
	function zpad(value, length) {
	    value = String(value);
	    while (value.length < length) {
	        value = '0' + value;
	    }
	    return value;
	}
	exports.zpad = zpad;
	function getPassword(password) {
	    if (typeof (password) === 'string') {
	        return (0, lib$8.toUtf8Bytes)(password, lib$8.UnicodeNormalizationForm.NFKC);
	    }
	    return (0, lib$1.arrayify)(password);
	}
	exports.getPassword = getPassword;
	function searchPath(object, path) {
	    var currentChild = object;
	    var comps = path.toLowerCase().split('/');
	    for (var i = 0; i < comps.length; i++) {
	        // Search for a child object with a case-insensitive matching key
	        var matchingChild = null;
	        for (var key in currentChild) {
	            if (key.toLowerCase() === comps[i]) {
	                matchingChild = currentChild[key];
	                break;
	            }
	        }
	        // Didn't find one. :'(
	        if (matchingChild === null) {
	            return null;
	        }
	        // Now check this child...
	        currentChild = matchingChild;
	    }
	    return currentChild;
	}
	exports.searchPath = searchPath;
	// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
	function uuidV4(randomBytes) {
	    var bytes = (0, lib$1.arrayify)(randomBytes);
	    // Section: 4.1.3:
	    // - time_hi_and_version[12:16] = 0b0100
	    bytes[6] = (bytes[6] & 0x0f) | 0x40;
	    // Section 4.4
	    // - clock_seq_hi_and_reserved[6] = 0b0
	    // - clock_seq_hi_and_reserved[7] = 0b1
	    bytes[8] = (bytes[8] & 0x3f) | 0x80;
	    var value = (0, lib$1.hexlify)(bytes);
	    return [
	        value.substring(2, 10),
	        value.substring(10, 14),
	        value.substring(14, 18),
	        value.substring(18, 22),
	        value.substring(22, 34),
	    ].join("-");
	}
	exports.uuidV4 = uuidV4;

	});

	var utils$2 = /*@__PURE__*/getDefaultExportFromCjs(utils$1);

	var crowdsale = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.CrowdsaleAccount = void 0;
	var aes_js_1 = __importDefault(aesJs);








	var logger = new lib.Logger(_version$A.version);

	var CrowdsaleAccount = /** @class */ (function (_super) {
	    __extends(CrowdsaleAccount, _super);
	    function CrowdsaleAccount() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {
	        return !!(value && value._isCrowdsaleAccount);
	    };
	    return CrowdsaleAccount;
	}(lib$3.Description));
	exports.CrowdsaleAccount = CrowdsaleAccount;
	// See: https://github.com/ethereum/pyethsaletool
	function decrypt(json, password) {
	    var data = JSON.parse(json);
	    password = (0, utils$1.getPassword)(password);
	    // Ethereum Address
	    var ethaddr = (0, lib$6.getAddress)((0, utils$1.searchPath)(data, "ethaddr"));
	    // Encrypted Seed
	    var encseed = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "encseed"));
	    if (!encseed || (encseed.length % 16) !== 0) {
	        logger.throwArgumentError("invalid encseed", "json", json);
	    }
	    var key = (0, lib$1.arrayify)((0, lib$l.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
	    var iv = encseed.slice(0, 16);
	    var encryptedSeed = encseed.slice(16);
	    // Decrypt the seed
	    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
	    var seed = aes_js_1.default.padding.pkcs7.strip((0, lib$1.arrayify)(aesCbc.decrypt(encryptedSeed)));
	    // This wallet format is weird... Convert the binary encoded hex to a string.
	    var seedHex = "";
	    for (var i = 0; i < seed.length; i++) {
	        seedHex += String.fromCharCode(seed[i]);
	    }
	    var seedHexBytes = (0, lib$8.toUtf8Bytes)(seedHex);
	    var privateKey = (0, lib$4.keccak256)(seedHexBytes);
	    return new CrowdsaleAccount({
	        _isCrowdsaleAccount: true,
	        address: ethaddr,
	        privateKey: privateKey
	    });
	}
	exports.decrypt = decrypt;

	});

	var crowdsale$1 = /*@__PURE__*/getDefaultExportFromCjs(crowdsale);

	var inspect = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = void 0;

	function isCrowdsaleWallet(json) {
	    var data = null;
	    try {
	        data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    return (data.encseed && data.ethaddr);
	}
	exports.isCrowdsaleWallet = isCrowdsaleWallet;
	function isKeystoreWallet(json) {
	    var data = null;
	    try {
	        data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
	        return false;
	    }
	    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
	    return true;
	}
	exports.isKeystoreWallet = isKeystoreWallet;
	//export function isJsonWallet(json: string): boolean {
	//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
	//}
	function getJsonWalletAddress(json) {
	    if (isCrowdsaleWallet(json)) {
	        try {
	            return (0, lib$6.getAddress)(JSON.parse(json).ethaddr);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    if (isKeystoreWallet(json)) {
	        try {
	            return (0, lib$6.getAddress)(JSON.parse(json).address);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    return null;
	}
	exports.getJsonWalletAddress = getJsonWalletAddress;

	});

	var inspect$1 = /*@__PURE__*/getDefaultExportFromCjs(inspect);

	var scrypt = createCommonjsModule(function (module, exports) {
	"use strict";

	(function(root) {
	    const MAX_VALUE = 0x7fffffff;

	    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
	    // See: https://github.com/dchest/scrypt-async-js
	    function SHA256(m) {
	        const K = new Uint32Array([
	           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	       ]);

	        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
	        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
	        const w = new Uint32Array(64);

	        function blocks(p) {
	            let off = 0, len = p.length;
	            while (len >= 64) {
	                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

	                for (i = 0; i < 16; i++) {
	                    j = off + i*4;
	                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
	                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
	                }

	                for (i = 16; i < 64; i++) {
	                    u = w[i-2];
	                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

	                    u = w[i-15];
	                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

	                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
	                }

	                for (i = 0; i < 64; i++) {
	                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
	                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
	                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

	                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
	                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

	                    h = g;
	                    g = f;
	                    f = e;
	                    e = (d + t1) | 0;
	                    d = c;
	                    c = b;
	                    b = a;
	                    a = (t1 + t2) | 0;
	                }

	                h0 = (h0 + a) | 0;
	                h1 = (h1 + b) | 0;
	                h2 = (h2 + c) | 0;
	                h3 = (h3 + d) | 0;
	                h4 = (h4 + e) | 0;
	                h5 = (h5 + f) | 0;
	                h6 = (h6 + g) | 0;
	                h7 = (h7 + h) | 0;

	                off += 64;
	                len -= 64;
	            }
	        }

	        blocks(m);

	        let i, bytesLeft = m.length % 64,
	        bitLenHi = (m.length / 0x20000000) | 0,
	        bitLenLo = m.length << 3,
	        numZeros = (bytesLeft < 56) ? 56 : 120,
	        p = m.slice(m.length - bytesLeft, m.length);

	        p.push(0x80);
	        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
	        p.push((bitLenHi >>> 24) & 0xff);
	        p.push((bitLenHi >>> 16) & 0xff);
	        p.push((bitLenHi >>> 8)  & 0xff);
	        p.push((bitLenHi >>> 0)  & 0xff);
	        p.push((bitLenLo >>> 24) & 0xff);
	        p.push((bitLenLo >>> 16) & 0xff);
	        p.push((bitLenLo >>> 8)  & 0xff);
	        p.push((bitLenLo >>> 0)  & 0xff);

	        blocks(p);

	        return [
	            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
	            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
	            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
	            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
	            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
	            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
	            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
	            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
	        ];
	    }

	    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
	        // compress password if it's longer than hash block length
	        password = (password.length <= 64) ? password : SHA256(password);

	        const innerLen = 64 + salt.length + 4;
	        const inner = new Array(innerLen);
	        const outerKey = new Array(64);

	        let i;
	        let dk = [];

	        // inner = (password ^ ipad) || salt || counter
	        for (i = 0; i < 64; i++) { inner[i] = 0x36; }
	        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
	        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
	        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

	        // outerKey = password ^ opad
	        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
	        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

	        // increments counter inside inner
	        function incrementCounter() {
	            for (let i = innerLen - 1; i >= innerLen - 4; i--) {
	                inner[i]++;
	                if (inner[i] <= 0xff) return;
	                inner[i] = 0;
	            }
	        }

	        // output blocks = SHA256(outerKey || SHA256(inner)) ...
	        while (dkLen >= 32) {
	            incrementCounter();
	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
	            dkLen -= 32;
	        }
	        if (dkLen > 0) {
	            incrementCounter();
	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
	        }

	        return dk;
	    }

	    // The following is an adaptation of scryptsy
	    // See: https://www.npmjs.com/package/scryptsy
	    function blockmix_salsa8(BY, Yi, r, x, _X) {
	        let i;

	        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
	        for (i = 0; i < 2 * r; i++) {
	            blockxor(BY, i * 16, _X, 16);
	            salsa20_8(_X, x);
	            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
	        }

	        for (i = 0; i < r; i++) {
	            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
	        }

	        for (i = 0; i < r; i++) {
	            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
	        }
	    }

	    function R(a, b) {
	        return (a << b) | (a >>> (32 - b));
	    }

	    function salsa20_8(B, x) {
	        arraycopy(B, 0, x, 0, 16);

	        for (let i = 8; i > 0; i -= 2) {
	            x[ 4] ^= R(x[ 0] + x[12], 7);
	            x[ 8] ^= R(x[ 4] + x[ 0], 9);
	            x[12] ^= R(x[ 8] + x[ 4], 13);
	            x[ 0] ^= R(x[12] + x[ 8], 18);
	            x[ 9] ^= R(x[ 5] + x[ 1], 7);
	            x[13] ^= R(x[ 9] + x[ 5], 9);
	            x[ 1] ^= R(x[13] + x[ 9], 13);
	            x[ 5] ^= R(x[ 1] + x[13], 18);
	            x[14] ^= R(x[10] + x[ 6], 7);
	            x[ 2] ^= R(x[14] + x[10], 9);
	            x[ 6] ^= R(x[ 2] + x[14], 13);
	            x[10] ^= R(x[ 6] + x[ 2], 18);
	            x[ 3] ^= R(x[15] + x[11], 7);
	            x[ 7] ^= R(x[ 3] + x[15], 9);
	            x[11] ^= R(x[ 7] + x[ 3], 13);
	            x[15] ^= R(x[11] + x[ 7], 18);
	            x[ 1] ^= R(x[ 0] + x[ 3], 7);
	            x[ 2] ^= R(x[ 1] + x[ 0], 9);
	            x[ 3] ^= R(x[ 2] + x[ 1], 13);
	            x[ 0] ^= R(x[ 3] + x[ 2], 18);
	            x[ 6] ^= R(x[ 5] + x[ 4], 7);
	            x[ 7] ^= R(x[ 6] + x[ 5], 9);
	            x[ 4] ^= R(x[ 7] + x[ 6], 13);
	            x[ 5] ^= R(x[ 4] + x[ 7], 18);
	            x[11] ^= R(x[10] + x[ 9], 7);
	            x[ 8] ^= R(x[11] + x[10], 9);
	            x[ 9] ^= R(x[ 8] + x[11], 13);
	            x[10] ^= R(x[ 9] + x[ 8], 18);
	            x[12] ^= R(x[15] + x[14], 7);
	            x[13] ^= R(x[12] + x[15], 9);
	            x[14] ^= R(x[13] + x[12], 13);
	            x[15] ^= R(x[14] + x[13], 18);
	        }

	        for (let i = 0; i < 16; ++i) {
	            B[i] += x[i];
	        }
	    }

	    // naive approach... going back to loop unrolling may yield additional performance
	    function blockxor(S, Si, D, len) {
	        for (let i = 0; i < len; i++) {
	            D[i] ^= S[Si + i];
	        }
	    }

	    function arraycopy(src, srcPos, dest, destPos, length) {
	        while (length--) {
	            dest[destPos++] = src[srcPos++];
	        }
	    }

	    function checkBufferish(o) {
	        if (!o || typeof(o.length) !== 'number') { return false; }

	        for (let i = 0; i < o.length; i++) {
	            const v = o[i];
	            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
	                return false;
	            }
	        }

	        return true;
	    }

	    function ensureInteger(value, name) {
	        if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
	        return value;
	    }

	    // N = Cpu cost, r = Memory cost, p = parallelization cost
	    // callback(error, progress, key)
	    function _scrypt(password, salt, N, r, p, dkLen, callback) {

	        N = ensureInteger(N, 'N');
	        r = ensureInteger(r, 'r');
	        p = ensureInteger(p, 'p');

	        dkLen = ensureInteger(dkLen, 'dkLen');

	        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

	        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
	        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

	        if (!checkBufferish(password)) {
	            throw new Error('password must be an array or buffer');
	        }
	        password = Array.prototype.slice.call(password);

	        if (!checkBufferish(salt)) {
	            throw new Error('salt must be an array or buffer');
	        }
	        salt = Array.prototype.slice.call(salt);

	        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
	        const B = new Uint32Array(p * 32 * r);
	        for (let i = 0; i < B.length; i++) {
	            const j = i * 4;
	            B[i] = ((b[j + 3] & 0xff) << 24) |
	                   ((b[j + 2] & 0xff) << 16) |
	                   ((b[j + 1] & 0xff) << 8) |
	                   ((b[j + 0] & 0xff) << 0);
	        }

	        const XY = new Uint32Array(64 * r);
	        const V = new Uint32Array(32 * r * N);

	        const Yi = 32 * r;

	        // scratch space
	        const x = new Uint32Array(16);       // salsa20_8
	        const _X = new Uint32Array(16);      // blockmix_salsa8

	        const totalOps = p * N * 2;
	        let currentOp = 0;
	        let lastPercent10 = null;

	        // Set this to true to abandon the scrypt on the next step
	        let stop = false;

	        // State information
	        let state = 0;
	        let i0 = 0, i1;
	        let Bi;

	        // How many blockmix_salsa8 can we do per step?
	        const limit = callback ? parseInt(1000 / r): 0xffffffff;

	        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
	        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

	        // This is really all I changed; making scryptsy a state machine so we occasionally
	        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
	        const incrementalSMix = function() {
	            if (stop) {
	                return callback(new Error('cancelled'), currentOp / totalOps);
	            }

	            let steps;

	            switch (state) {
	                case 0:
	                    // for (var i = 0; i < p; i++)...
	                    Bi = i0 * 32 * r;

	                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

	                    state = 1;                                         // Move to ROMix 2
	                    i1 = 0;

	                    // Fall through

	                case 1:

	                    // Run up to 1000 steps of the first inner smix loop
	                    steps = N - i1;
	                    if (steps > limit) { steps = limit; }
	                    for (let i = 0; i < steps; i++) {                  // ROMix - 2
	                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
	                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
	                    }

	                    // for (var i = 0; i < N; i++)
	                    i1 += steps;
	                    currentOp += steps;

	                    if (callback) {
	                        // Call the callback with the progress (optionally stopping us)
	                        const percent10 = parseInt(1000 * currentOp / totalOps);
	                        if (percent10 !== lastPercent10) {
	                            stop = callback(null, currentOp / totalOps);
	                            if (stop) { break; }
	                            lastPercent10 = percent10;
	                        }
	                    }

	                    if (i1 < N) { break; }

	                    i1 = 0;                                          // Move to ROMix 6
	                    state = 2;

	                    // Fall through

	                case 2:

	                    // Run up to 1000 steps of the second inner smix loop
	                    steps = N - i1;
	                    if (steps > limit) { steps = limit; }
	                    for (let i = 0; i < steps; i++) {                // ROMix - 6
	                        const offset = (2 * r - 1) * 16;             // ROMix - 7
	                        const j = XY[offset] & (N - 1);
	                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
	                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
	                    }

	                    // for (var i = 0; i < N; i++)...
	                    i1 += steps;
	                    currentOp += steps;

	                    // Call the callback with the progress (optionally stopping us)
	                    if (callback) {
	                        const percent10 = parseInt(1000 * currentOp / totalOps);
	                        if (percent10 !== lastPercent10) {
	                            stop = callback(null, currentOp / totalOps);
	                            if (stop) { break; }
	                            lastPercent10 = percent10;
	                        }
	                    }

	                    if (i1 < N) { break; }

	                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

	                    // for (var i = 0; i < p; i++)...
	                    i0++;
	                    if (i0 < p) {
	                        state = 0;
	                        break;
	                    }

	                    b = [];
	                    for (let i = 0; i < B.length; i++) {
	                        b.push((B[i] >>  0) & 0xff);
	                        b.push((B[i] >>  8) & 0xff);
	                        b.push((B[i] >> 16) & 0xff);
	                        b.push((B[i] >> 24) & 0xff);
	                    }

	                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

	                    // Send the result to the callback
	                    if (callback) { callback(null, 1.0, derivedKey); }

	                    // Done; don't break (which would reschedule)
	                    return derivedKey;
	            }

	            // Schedule the next steps
	            if (callback) { nextTick(incrementalSMix); }
	        };

	        // Run the smix state machine until completion
	        if (!callback) {
	            while (true) {
	                const derivedKey = incrementalSMix();
	                if (derivedKey != undefined) { return derivedKey; }
	            }
	        }

	        // Bootstrap the async incremental smix
	        incrementalSMix();
	    }

	    const lib = {
	        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
	            return new Promise(function(resolve, reject) {
	                let lastProgress = 0;
	                if (progressCallback) { progressCallback(0); }
	                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
	                    if (error) {
	                        reject(error);
	                    } else if (key) {
	                        if (progressCallback && lastProgress !== 1) {
	                            progressCallback(1);
	                        }
	                        resolve(new Uint8Array(key));
	                    } else if (progressCallback && progress !== lastProgress) {
	                        lastProgress = progress;
	                        return progressCallback(progress);
	                    }
	                });
	            });
	        },
	        syncScrypt: function(password, salt, N, r, p, dkLen) {
	            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
	        }
	    };

	    // node.js
	    if ('object' !== 'undefined') {
	       module.exports = lib;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	    } else if (typeof(undefined) === 'function' && undefined.amd) {
	        undefined(lib);

	    // Web Browsers
	    } else if (root) {

	        // If there was an existing library "scrypt", make sure it is still available
	        if (root.scrypt) {
	            root._scrypt = root.scrypt;
	        }

	        root.scrypt = lib;
	    }

	})(commonjsGlobal);
	});

	var keystore = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encrypt = exports.decrypt = exports.decryptSync = exports.KeystoreAccount = void 0;
	var aes_js_1 = __importDefault(aesJs);
	var scrypt_js_1 = __importDefault(scrypt);











	var logger = new lib.Logger(_version$A.version);
	// Exported Types
	function hasMnemonic(value) {
	    return (value != null && value.mnemonic && value.mnemonic.phrase);
	}
	var KeystoreAccount = /** @class */ (function (_super) {
	    __extends(KeystoreAccount, _super);
	    function KeystoreAccount() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    KeystoreAccount.prototype.isKeystoreAccount = function (value) {
	        return !!(value && value._isKeystoreAccount);
	    };
	    return KeystoreAccount;
	}(lib$3.Description));
	exports.KeystoreAccount = KeystoreAccount;
	function _decrypt(data, key, ciphertext) {
	    var cipher = (0, utils$1.searchPath)(data, "crypto/cipher");
	    if (cipher === "aes-128-ctr") {
	        var iv = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "crypto/cipherparams/iv"));
	        var counter = new aes_js_1.default.Counter(iv);
	        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
	        return (0, lib$1.arrayify)(aesCtr.decrypt(ciphertext));
	    }
	    return null;
	}
	function _getAccount(data, key) {
	    var ciphertext = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "crypto/ciphertext"));
	    var computedMAC = (0, lib$1.hexlify)((0, lib$4.keccak256)((0, lib$1.concat)([key.slice(16, 32), ciphertext]))).substring(2);
	    if (computedMAC !== (0, utils$1.searchPath)(data, "crypto/mac").toLowerCase()) {
	        throw new Error("invalid password");
	    }
	    var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
	    if (!privateKey) {
	        logger.throwError("unsupported cipher", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "decrypt"
	        });
	    }
	    var mnemonicKey = key.slice(32, 64);
	    var address = (0, lib$h.computeAddress)(privateKey);
	    if (data.address) {
	        var check = data.address.toLowerCase();
	        if (check.substring(0, 2) !== "0x") {
	            check = "0x" + check;
	        }
	        if ((0, lib$6.getAddress)(check) !== address) {
	            throw new Error("address mismatch");
	        }
	    }
	    var account = {
	        _isKeystoreAccount: true,
	        address: address,
	        privateKey: (0, lib$1.hexlify)(privateKey)
	    };
	    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
	    if ((0, utils$1.searchPath)(data, "x-ethers/version") === "0.1") {
	        var mnemonicCiphertext = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "x-ethers/mnemonicCiphertext"));
	        var mnemonicIv = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "x-ethers/mnemonicCounter"));
	        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	        var path = (0, utils$1.searchPath)(data, "x-ethers/path") || lib$n.defaultPath;
	        var locale = (0, utils$1.searchPath)(data, "x-ethers/locale") || "en";
	        var entropy = (0, lib$1.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
	        try {
	            var mnemonic = (0, lib$n.entropyToMnemonic)(entropy, locale);
	            var node = lib$n.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
	            if (node.privateKey != account.privateKey) {
	                throw new Error("mnemonic mismatch");
	            }
	            account.mnemonic = node.mnemonic;
	        }
	        catch (error) {
	            // If we don't have the locale wordlist installed to
	            // read this mnemonic, just bail and don't set the
	            // mnemonic
	            if (error.code !== lib.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
	                throw error;
	            }
	        }
	    }
	    return new KeystoreAccount(account);
	}
	function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
	    return (0, lib$1.arrayify)((0, lib$l.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
	}
	function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
	    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
	}
	function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
	    var passwordBytes = (0, utils$1.getPassword)(password);
	    var kdf = (0, utils$1.searchPath)(data, "crypto/kdf");
	    if (kdf && typeof (kdf) === "string") {
	        var throwError = function (name, value) {
	            return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
	        };
	        if (kdf.toLowerCase() === "scrypt") {
	            var salt = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "crypto/kdfparams/salt"));
	            var N = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/n"));
	            var r = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/r"));
	            var p = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/p"));
	            // Check for all required parameters
	            if (!N || !r || !p) {
	                throwError("kdf", kdf);
	            }
	            // Make sure N is a power of 2
	            if ((N & (N - 1)) !== 0) {
	                throwError("N", N);
	            }
	            var dkLen = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/dklen"));
	            if (dkLen !== 32) {
	                throwError("dklen", dkLen);
	            }
	            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
	        }
	        else if (kdf.toLowerCase() === "pbkdf2") {
	            var salt = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, "crypto/kdfparams/salt"));
	            var prfFunc = null;
	            var prf = (0, utils$1.searchPath)(data, "crypto/kdfparams/prf");
	            if (prf === "hmac-sha256") {
	                prfFunc = "sha256";
	            }
	            else if (prf === "hmac-sha512") {
	                prfFunc = "sha512";
	            }
	            else {
	                throwError("prf", prf);
	            }
	            var count = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/c"));
	            var dkLen = parseInt((0, utils$1.searchPath)(data, "crypto/kdfparams/dklen"));
	            if (dkLen !== 32) {
	                throwError("dklen", dkLen);
	            }
	            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
	        }
	    }
	    return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
	}
	function decryptSync(json, password) {
	    var data = JSON.parse(json);
	    var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);
	    return _getAccount(data, key);
	}
	exports.decryptSync = decryptSync;
	function decrypt(json, password, progressCallback) {
	    return __awaiter(this, void 0, void 0, function () {
	        var data, key;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    data = JSON.parse(json);
	                    return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];
	                case 1:
	                    key = _a.sent();
	                    return [2 /*return*/, _getAccount(data, key)];
	            }
	        });
	    });
	}
	exports.decrypt = decrypt;
	function encrypt(account, password, options, progressCallback) {
	    try {
	        // Check the address matches the private key
	        if ((0, lib$6.getAddress)(account.address) !== (0, lib$h.computeAddress)(account.privateKey)) {
	            throw new Error("address/privateKey mismatch");
	        }
	        // Check the mnemonic (if any) matches the private key
	        if (hasMnemonic(account)) {
	            var mnemonic = account.mnemonic;
	            var node = lib$n.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || lib$n.defaultPath);
	            if (node.privateKey != account.privateKey) {
	                throw new Error("mnemonic mismatch");
	            }
	        }
	    }
	    catch (e) {
	        return Promise.reject(e);
	    }
	    // The options are optional, so adjust the call as needed
	    if (typeof (options) === "function" && !progressCallback) {
	        progressCallback = options;
	        options = {};
	    }
	    if (!options) {
	        options = {};
	    }
	    var privateKey = (0, lib$1.arrayify)(account.privateKey);
	    var passwordBytes = (0, utils$1.getPassword)(password);
	    var entropy = null;
	    var path = null;
	    var locale = null;
	    if (hasMnemonic(account)) {
	        var srcMnemonic = account.mnemonic;
	        entropy = (0, lib$1.arrayify)((0, lib$n.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
	        path = srcMnemonic.path || lib$n.defaultPath;
	        locale = srcMnemonic.locale || "en";
	    }
	    var client = options.client;
	    if (!client) {
	        client = "ethers.js";
	    }
	    // Check/generate the salt
	    var salt = null;
	    if (options.salt) {
	        salt = (0, lib$1.arrayify)(options.salt);
	    }
	    else {
	        salt = (0, lib$o.randomBytes)(32);
	        ;
	    }
	    // Override initialization vector
	    var iv = null;
	    if (options.iv) {
	        iv = (0, lib$1.arrayify)(options.iv);
	        if (iv.length !== 16) {
	            throw new Error("invalid iv");
	        }
	    }
	    else {
	        iv = (0, lib$o.randomBytes)(16);
	    }
	    // Override the uuid
	    var uuidRandom = null;
	    if (options.uuid) {
	        uuidRandom = (0, lib$1.arrayify)(options.uuid);
	        if (uuidRandom.length !== 16) {
	            throw new Error("invalid uuid");
	        }
	    }
	    else {
	        uuidRandom = (0, lib$o.randomBytes)(16);
	    }
	    // Override the scrypt password-based key derivation function parameters
	    var N = (1 << 17), r = 8, p = 1;
	    if (options.scrypt) {
	        if (options.scrypt.N) {
	            N = options.scrypt.N;
	        }
	        if (options.scrypt.r) {
	            r = options.scrypt.r;
	        }
	        if (options.scrypt.p) {
	            p = options.scrypt.p;
	        }
	    }
	    // We take 64 bytes:
	    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
	    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
	    return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
	        key = (0, lib$1.arrayify)(key);
	        // This will be used to encrypt the wallet (as per Web3 secret storage)
	        var derivedKey = key.slice(0, 16);
	        var macPrefix = key.slice(16, 32);
	        // This will be used to encrypt the mnemonic phrase (if any)
	        var mnemonicKey = key.slice(32, 64);
	        // Encrypt the private key
	        var counter = new aes_js_1.default.Counter(iv);
	        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
	        var ciphertext = (0, lib$1.arrayify)(aesCtr.encrypt(privateKey));
	        // Compute the message authentication code, used to check the password
	        var mac = (0, lib$4.keccak256)((0, lib$1.concat)([macPrefix, ciphertext]));
	        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
	        var data = {
	            address: account.address.substring(2).toLowerCase(),
	            id: (0, utils$1.uuidV4)(uuidRandom),
	            version: 3,
	            crypto: {
	                cipher: "aes-128-ctr",
	                cipherparams: {
	                    iv: (0, lib$1.hexlify)(iv).substring(2),
	                },
	                ciphertext: (0, lib$1.hexlify)(ciphertext).substring(2),
	                kdf: "scrypt",
	                kdfparams: {
	                    salt: (0, lib$1.hexlify)(salt).substring(2),
	                    n: N,
	                    dklen: 32,
	                    p: p,
	                    r: r
	                },
	                mac: mac.substring(2)
	            }
	        };
	        // If we have a mnemonic, encrypt it into the JSON wallet
	        if (entropy) {
	            var mnemonicIv = (0, lib$o.randomBytes)(16);
	            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	            var mnemonicCiphertext = (0, lib$1.arrayify)(mnemonicAesCtr.encrypt(entropy));
	            var now = new Date();
	            var timestamp = (now.getUTCFullYear() + "-" +
	                (0, utils$1.zpad)(now.getUTCMonth() + 1, 2) + "-" +
	                (0, utils$1.zpad)(now.getUTCDate(), 2) + "T" +
	                (0, utils$1.zpad)(now.getUTCHours(), 2) + "-" +
	                (0, utils$1.zpad)(now.getUTCMinutes(), 2) + "-" +
	                (0, utils$1.zpad)(now.getUTCSeconds(), 2) + ".0Z");
	            data["x-ethers"] = {
	                client: client,
	                gethFilename: ("UTC--" + timestamp + "--" + data.address),
	                mnemonicCounter: (0, lib$1.hexlify)(mnemonicIv).substring(2),
	                mnemonicCiphertext: (0, lib$1.hexlify)(mnemonicCiphertext).substring(2),
	                path: path,
	                locale: locale,
	                version: "0.1"
	            };
	        }
	        return JSON.stringify(data);
	    });
	}
	exports.encrypt = encrypt;

	});

	var keystore$1 = /*@__PURE__*/getDefaultExportFromCjs(keystore);

	var lib$p = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;

	Object.defineProperty(exports, "decryptCrowdsale", { enumerable: true, get: function () { return crowdsale.decrypt; } });

	Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return inspect.getJsonWalletAddress; } });
	Object.defineProperty(exports, "isCrowdsaleWallet", { enumerable: true, get: function () { return inspect.isCrowdsaleWallet; } });
	Object.defineProperty(exports, "isKeystoreWallet", { enumerable: true, get: function () { return inspect.isKeystoreWallet; } });

	Object.defineProperty(exports, "decryptKeystore", { enumerable: true, get: function () { return keystore.decrypt; } });
	Object.defineProperty(exports, "decryptKeystoreSync", { enumerable: true, get: function () { return keystore.decryptSync; } });
	Object.defineProperty(exports, "encryptKeystore", { enumerable: true, get: function () { return keystore.encrypt; } });
	function decryptJsonWallet(json, password, progressCallback) {
	    if ((0, inspect.isCrowdsaleWallet)(json)) {
	        if (progressCallback) {
	            progressCallback(0);
	        }
	        var account = (0, crowdsale.decrypt)(json, password);
	        if (progressCallback) {
	            progressCallback(1);
	        }
	        return Promise.resolve(account);
	    }
	    if ((0, inspect.isKeystoreWallet)(json)) {
	        return (0, keystore.decrypt)(json, password, progressCallback);
	    }
	    return Promise.reject(new Error("invalid JSON wallet"));
	}
	exports.decryptJsonWallet = decryptJsonWallet;
	function decryptJsonWalletSync(json, password) {
	    if ((0, inspect.isCrowdsaleWallet)(json)) {
	        return (0, crowdsale.decrypt)(json, password);
	    }
	    if ((0, inspect.isKeystoreWallet)(json)) {
	        return (0, keystore.decryptSync)(json, password);
	    }
	    throw new Error("invalid JSON wallet");
	}
	exports.decryptJsonWalletSync = decryptJsonWalletSync;

	});

	var index$n = /*@__PURE__*/getDefaultExportFromCjs(lib$p);

	var _version$C = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "wallet/5.8.0";

	});

	var _version$D = /*@__PURE__*/getDefaultExportFromCjs(_version$C);

	var lib$q = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verifyTypedData = exports.verifyMessage = exports.Wallet = void 0;














	var logger = new lib.Logger(_version$C.version);
	function isAccount(value) {
	    return (value != null && (0, lib$1.isHexString)(value.privateKey, 32) && value.address != null);
	}
	function hasMnemonic(value) {
	    var mnemonic = value.mnemonic;
	    return (mnemonic && mnemonic.phrase);
	}
	var Wallet = /** @class */ (function (_super) {
	    __extends(Wallet, _super);
	    function Wallet(privateKey, provider) {
	        var _this = _super.call(this) || this;
	        if (isAccount(privateKey)) {
	            var signingKey_1 = new lib$g.SigningKey(privateKey.privateKey);
	            (0, lib$3.defineReadOnly)(_this, "_signingKey", function () { return signingKey_1; });
	            (0, lib$3.defineReadOnly)(_this, "address", (0, lib$h.computeAddress)(_this.publicKey));
	            if (_this.address !== (0, lib$6.getAddress)(privateKey.address)) {
	                logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
	            }
	            if (hasMnemonic(privateKey)) {
	                var srcMnemonic_1 = privateKey.mnemonic;
	                (0, lib$3.defineReadOnly)(_this, "_mnemonic", function () { return ({
	                    phrase: srcMnemonic_1.phrase,
	                    path: srcMnemonic_1.path || lib$n.defaultPath,
	                    locale: srcMnemonic_1.locale || "en"
	                }); });
	                var mnemonic = _this.mnemonic;
	                var node = lib$n.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
	                if ((0, lib$h.computeAddress)(node.privateKey) !== _this.address) {
	                    logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
	                }
	            }
	            else {
	                (0, lib$3.defineReadOnly)(_this, "_mnemonic", function () { return null; });
	            }
	        }
	        else {
	            if (lib$g.SigningKey.isSigningKey(privateKey)) {
	                /* istanbul ignore if */
	                if (privateKey.curve !== "secp256k1") {
	                    logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
	                }
	                (0, lib$3.defineReadOnly)(_this, "_signingKey", function () { return privateKey; });
	            }
	            else {
	                // A lot of common tools do not prefix private keys with a 0x (see: #1166)
	                if (typeof (privateKey) === "string") {
	                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
	                        privateKey = "0x" + privateKey;
	                    }
	                }
	                var signingKey_2 = new lib$g.SigningKey(privateKey);
	                (0, lib$3.defineReadOnly)(_this, "_signingKey", function () { return signingKey_2; });
	            }
	            (0, lib$3.defineReadOnly)(_this, "_mnemonic", function () { return null; });
	            (0, lib$3.defineReadOnly)(_this, "address", (0, lib$h.computeAddress)(_this.publicKey));
	        }
	        /* istanbul ignore if */
	        if (provider && !lib$e.Provider.isProvider(provider)) {
	            logger.throwArgumentError("invalid provider", "provider", provider);
	        }
	        (0, lib$3.defineReadOnly)(_this, "provider", provider || null);
	        return _this;
	    }
	    Object.defineProperty(Wallet.prototype, "mnemonic", {
	        get: function () { return this._mnemonic(); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "privateKey", {
	        get: function () { return this._signingKey().privateKey; },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "publicKey", {
	        get: function () { return this._signingKey().publicKey; },
	        enumerable: false,
	        configurable: true
	    });
	    Wallet.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    Wallet.prototype.connect = function (provider) {
	        return new Wallet(this, provider);
	    };
	    Wallet.prototype.signTransaction = function (transaction) {
	        var _this = this;
	        return (0, lib$3.resolveProperties)(transaction).then(function (tx) {
	            if (tx.from != null) {
	                if ((0, lib$6.getAddress)(tx.from) !== _this.address) {
	                    logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
	                }
	                delete tx.from;
	            }
	            var signature = _this._signingKey().signDigest((0, lib$4.keccak256)((0, lib$h.serialize)(tx)));
	            return (0, lib$h.serialize)(tx, signature);
	        });
	    };
	    Wallet.prototype.signMessage = function (message) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, (0, lib$1.joinSignature)(this._signingKey().signDigest((0, lib$c.hashMessage)(message)))];
	            });
	        });
	    };
	    Wallet.prototype._signTypedData = function (domain, types, value) {
	        return __awaiter(this, void 0, void 0, function () {
	            var populated;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, lib$c._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
	                            if (_this.provider == null) {
	                                logger.throwError("cannot resolve ENS names without a provider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                    operation: "resolveName",
	                                    value: name
	                                });
	                            }
	                            return _this.provider.resolveName(name);
	                        })];
	                    case 1:
	                        populated = _a.sent();
	                        return [2 /*return*/, (0, lib$1.joinSignature)(this._signingKey().signDigest(lib$c._TypedDataEncoder.hash(populated.domain, types, populated.value)))];
	                }
	            });
	        });
	    };
	    Wallet.prototype.encrypt = function (password, options, progressCallback) {
	        if (typeof (options) === "function" && !progressCallback) {
	            progressCallback = options;
	            options = {};
	        }
	        if (progressCallback && typeof (progressCallback) !== "function") {
	            throw new Error("invalid callback");
	        }
	        if (!options) {
	            options = {};
	        }
	        return (0, lib$p.encryptKeystore)(this, password, options, progressCallback);
	    };
	    /**
	     *  Static methods to create Wallet instances.
	     */
	    Wallet.createRandom = function (options) {
	        var entropy = (0, lib$o.randomBytes)(16);
	        if (!options) {
	            options = {};
	        }
	        if (options.extraEntropy) {
	            entropy = (0, lib$1.arrayify)((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.concat)([entropy, options.extraEntropy])), 0, 16));
	        }
	        var mnemonic = (0, lib$n.entropyToMnemonic)(entropy, options.locale);
	        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
	    };
	    Wallet.fromEncryptedJson = function (json, password, progressCallback) {
	        return (0, lib$p.decryptJsonWallet)(json, password, progressCallback).then(function (account) {
	            return new Wallet(account);
	        });
	    };
	    Wallet.fromEncryptedJsonSync = function (json, password) {
	        return new Wallet((0, lib$p.decryptJsonWalletSync)(json, password));
	    };
	    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
	        if (!path) {
	            path = lib$n.defaultPath;
	        }
	        return new Wallet(lib$n.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
	    };
	    return Wallet;
	}(lib$f.Signer));
	exports.Wallet = Wallet;
	function verifyMessage(message, signature) {
	    return (0, lib$h.recoverAddress)((0, lib$c.hashMessage)(message), signature);
	}
	exports.verifyMessage = verifyMessage;
	function verifyTypedData(domain, types, value, signature) {
	    return (0, lib$h.recoverAddress)(lib$c._TypedDataEncoder.hash(domain, types, value), signature);
	}
	exports.verifyTypedData = verifyTypedData;

	});

	var index$o = /*@__PURE__*/getDefaultExportFromCjs(lib$q);

	var _version$E = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "networks/5.8.0";

	});

	var _version$F = /*@__PURE__*/getDefaultExportFromCjs(_version$E);

	var lib$r = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getNetwork = void 0;


	var logger = new lib.Logger(_version$E.version);
	;
	function isRenetworkable(value) {
	    return (value && typeof (value.renetwork) === "function");
	}
	function ethDefaultProvider(network) {
	    var func = function (providers, options) {
	        if (options == null) {
	            options = {};
	        }
	        var providerList = [];
	        if (providers.InfuraProvider && options.infura !== "-") {
	            try {
	                providerList.push(new providers.InfuraProvider(network, options.infura));
	            }
	            catch (error) { }
	        }
	        if (providers.EtherscanProvider && options.etherscan !== "-") {
	            try {
	                providerList.push(new providers.EtherscanProvider(network, options.etherscan));
	            }
	            catch (error) { }
	        }
	        if (providers.AlchemyProvider && options.alchemy !== "-") {
	            try {
	                providerList.push(new providers.AlchemyProvider(network, options.alchemy));
	            }
	            catch (error) { }
	        }
	        if (providers.PocketProvider && options.pocket !== "-") {
	            // These networks are currently faulty on Pocket as their
	            // network does not handle the Berlin hardfork, which is
	            // live on these ones.
	            // @TODO: This goes away once Pocket has upgraded their nodes
	            var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
	            try {
	                var provider = new providers.PocketProvider(network, options.pocket);
	                if (provider.network && skip.indexOf(provider.network.name) === -1) {
	                    providerList.push(provider);
	                }
	            }
	            catch (error) { }
	        }
	        if (providers.CloudflareProvider && options.cloudflare !== "-") {
	            try {
	                providerList.push(new providers.CloudflareProvider(network));
	            }
	            catch (error) { }
	        }
	        if (providers.AnkrProvider && options.ankr !== "-") {
	            try {
	                var skip = ["ropsten"];
	                var provider = new providers.AnkrProvider(network, options.ankr);
	                if (provider.network && skip.indexOf(provider.network.name) === -1) {
	                    providerList.push(provider);
	                }
	            }
	            catch (error) { }
	        }
	        if (providers.QuickNodeProvider && options.quicknode !== "-") {
	            try {
	                providerList.push(new providers.QuickNodeProvider(network, options.quicknode));
	            }
	            catch (error) { }
	        }
	        if (providerList.length === 0) {
	            return null;
	        }
	        if (providers.FallbackProvider) {
	            var quorum = 1;
	            if (options.quorum != null) {
	                quorum = options.quorum;
	            }
	            else if (network === "homestead") {
	                quorum = 2;
	            }
	            return new providers.FallbackProvider(providerList, quorum);
	        }
	        return providerList[0];
	    };
	    func.renetwork = function (network) {
	        return ethDefaultProvider(network);
	    };
	    return func;
	}
	function etcDefaultProvider(url, network) {
	    var func = function (providers, options) {
	        if (providers.JsonRpcProvider) {
	            return new providers.JsonRpcProvider(url, network);
	        }
	        return null;
	    };
	    func.renetwork = function (network) {
	        return etcDefaultProvider(url, network);
	    };
	    return func;
	}
	var homestead = {
	    chainId: 1,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "homestead",
	    _defaultProvider: ethDefaultProvider("homestead")
	};
	var ropsten = {
	    chainId: 3,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "ropsten",
	    _defaultProvider: ethDefaultProvider("ropsten")
	};
	var classicMordor = {
	    chainId: 63,
	    name: "classicMordor",
	    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
	};
	// See: https://chainlist.org
	var networks = {
	    unspecified: { chainId: 0, name: "unspecified" },
	    homestead: homestead,
	    mainnet: homestead,
	    morden: { chainId: 2, name: "morden" },
	    ropsten: ropsten,
	    testnet: ropsten,
	    rinkeby: {
	        chainId: 4,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "rinkeby",
	        _defaultProvider: ethDefaultProvider("rinkeby")
	    },
	    kovan: {
	        chainId: 42,
	        name: "kovan",
	        _defaultProvider: ethDefaultProvider("kovan")
	    },
	    goerli: {
	        chainId: 5,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "goerli",
	        _defaultProvider: ethDefaultProvider("goerli")
	    },
	    kintsugi: { chainId: 1337702, name: "kintsugi" },
	    sepolia: {
	        chainId: 11155111,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "sepolia",
	        _defaultProvider: ethDefaultProvider("sepolia")
	    },
	    holesky: {
	        chainId: 17000,
	        name: "holesky",
	        _defaultProvider: ethDefaultProvider("holesky")
	    },
	    // ETC (See: #351)
	    classic: {
	        chainId: 61,
	        name: "classic",
	        _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
	    },
	    classicMorden: { chainId: 62, name: "classicMorden" },
	    classicMordor: classicMordor,
	    classicTestnet: classicMordor,
	    classicKotti: {
	        chainId: 6,
	        name: "classicKotti",
	        _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
	    },
	    xdai: { chainId: 100, name: "xdai" },
	    matic: {
	        chainId: 137,
	        name: "matic",
	        _defaultProvider: ethDefaultProvider("matic")
	    },
	    maticmum: {
	        chainId: 80001,
	        name: "maticmum",
	        _defaultProvider: ethDefaultProvider("maticmum")
	    },
	    optimism: {
	        chainId: 10,
	        name: "optimism",
	        _defaultProvider: ethDefaultProvider("optimism")
	    },
	    "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
	    "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
	    "optimism-sepolia": { chainId: 11155420, name: "optimism-sepolia" },
	    arbitrum: { chainId: 42161, name: "arbitrum" },
	    "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
	    "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
	    "arbitrum-sepolia": { chainId: 421614, name: "arbitrum-sepolia" },
	    bnb: { chainId: 56, name: "bnb" },
	    bnbt: { chainId: 97, name: "bnbt" },
	};
	/**
	 *  getNetwork
	 *
	 *  Converts a named common networks or chain ID (network ID) to a Network
	 *  and verifies a network is a valid Network..
	 */
	function getNetwork(network) {
	    // No network (null)
	    if (network == null) {
	        return null;
	    }
	    if (typeof (network) === "number") {
	        for (var name_1 in networks) {
	            var standard_1 = networks[name_1];
	            if (standard_1.chainId === network) {
	                return {
	                    name: standard_1.name,
	                    chainId: standard_1.chainId,
	                    ensAddress: (standard_1.ensAddress || null),
	                    _defaultProvider: (standard_1._defaultProvider || null)
	                };
	            }
	        }
	        return {
	            chainId: network,
	            name: "unknown"
	        };
	    }
	    if (typeof (network) === "string") {
	        var standard_2 = networks[network];
	        if (standard_2 == null) {
	            return null;
	        }
	        return {
	            name: standard_2.name,
	            chainId: standard_2.chainId,
	            ensAddress: standard_2.ensAddress,
	            _defaultProvider: (standard_2._defaultProvider || null)
	        };
	    }
	    var standard = networks[network.name];
	    // Not a standard network; check that it is a valid network in general
	    if (!standard) {
	        if (typeof (network.chainId) !== "number") {
	            logger.throwArgumentError("invalid network chainId", "network", network);
	        }
	        return network;
	    }
	    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
	    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
	        logger.throwArgumentError("network chainId mismatch", "network", network);
	    }
	    // @TODO: In the next major version add an attach function to a defaultProvider
	    // class and move the _defaultProvider internal to this file (extend Network)
	    var defaultProvider = network._defaultProvider || null;
	    if (defaultProvider == null && standard._defaultProvider) {
	        if (isRenetworkable(standard._defaultProvider)) {
	            defaultProvider = standard._defaultProvider.renetwork(network);
	        }
	        else {
	            defaultProvider = standard._defaultProvider;
	        }
	    }
	    // Standard Network (allow overriding the ENS address)
	    return {
	        name: network.name,
	        chainId: standard.chainId,
	        ensAddress: (network.ensAddress || standard.ensAddress || null),
	        _defaultProvider: defaultProvider
	    };
	}
	exports.getNetwork = getNetwork;

	});

	var index$p = /*@__PURE__*/getDefaultExportFromCjs(lib$r);

	var _version$G = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "web/5.8.0";

	});

	var _version$H = /*@__PURE__*/getDefaultExportFromCjs(_version$G);

	var browserGeturl = createCommonjsModule(function (module, exports) {
	"use strict";
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getUrl = void 0;

	function getUrl(href, options) {
	    return __awaiter(this, void 0, void 0, function () {
	        var request, opts, response, body, headers;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (options == null) {
	                        options = {};
	                    }
	                    request = {
	                        method: (options.method || "GET"),
	                        headers: (options.headers || {}),
	                        body: (options.body || undefined),
	                    };
	                    if (options.skipFetchSetup !== true) {
	                        request.mode = "cors"; // no-cors, cors, *same-origin
	                        request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
	                        request.credentials = "same-origin"; // include, *same-origin, omit
	                        request.redirect = "follow"; // manual, *follow, error
	                        request.referrer = "client"; // no-referrer, *client
	                    }
	                    ;
	                    if (options.fetchOptions != null) {
	                        opts = options.fetchOptions;
	                        if (opts.mode) {
	                            request.mode = (opts.mode);
	                        }
	                        if (opts.cache) {
	                            request.cache = (opts.cache);
	                        }
	                        if (opts.credentials) {
	                            request.credentials = (opts.credentials);
	                        }
	                        if (opts.redirect) {
	                            request.redirect = (opts.redirect);
	                        }
	                        if (opts.referrer) {
	                            request.referrer = opts.referrer;
	                        }
	                    }
	                    return [4 /*yield*/, fetch(href, request)];
	                case 1:
	                    response = _a.sent();
	                    return [4 /*yield*/, response.arrayBuffer()];
	                case 2:
	                    body = _a.sent();
	                    headers = {};
	                    if (response.headers.forEach) {
	                        response.headers.forEach(function (value, key) {
	                            headers[key.toLowerCase()] = value;
	                        });
	                    }
	                    else {
	                        ((response.headers).keys)().forEach(function (key) {
	                            headers[key.toLowerCase()] = response.headers.get(key);
	                        });
	                    }
	                    return [2 /*return*/, {
	                            headers: headers,
	                            statusCode: response.status,
	                            statusMessage: response.statusText,
	                            body: (0, lib$1.arrayify)(new Uint8Array(body)),
	                        }];
	            }
	        });
	    });
	}
	exports.getUrl = getUrl;

	});

	var browserGeturl$1 = /*@__PURE__*/getDefaultExportFromCjs(browserGeturl);

	var lib$s = createCommonjsModule(function (module, exports) {
	"use strict";
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.poll = exports.fetchJson = exports._fetchData = void 0;






	var logger = new lib.Logger(_version$G.version);

	function staller(duration) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, duration);
	    });
	}
	function bodyify(value, type) {
	    if (value == null) {
	        return null;
	    }
	    if (typeof (value) === "string") {
	        return value;
	    }
	    if ((0, lib$1.isBytesLike)(value)) {
	        if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
	            try {
	                return (0, lib$8.toUtf8String)(value);
	            }
	            catch (error) { }
	            ;
	        }
	        return (0, lib$1.hexlify)(value);
	    }
	    return value;
	}
	function unpercent(value) {
	    return (0, lib$8.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {
	        return String.fromCharCode(parseInt(code, 16));
	    }));
	}
	// This API is still a work in progress; the future changes will likely be:
	// - ConnectionInfo => FetchDataRequest<T = any>
	// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
	//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
	// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
	// For this reason, it should be considered internal until the API is finalized
	function _fetchData(connection, body, processFunc) {
	    // How many times to retry in the event of a throttle
	    var attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
	    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
	    var throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
	    var throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
	    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
	    var errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
	    var headers = {};
	    var url = null;
	    // @TODO: Allow ConnectionInfo to override some of these values
	    var options = {
	        method: "GET",
	    };
	    var allow304 = false;
	    var timeout = 2 * 60 * 1000;
	    if (typeof (connection) === "string") {
	        url = connection;
	    }
	    else if (typeof (connection) === "object") {
	        if (connection == null || connection.url == null) {
	            logger.throwArgumentError("missing URL", "connection.url", connection);
	        }
	        url = connection.url;
	        if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
	            timeout = connection.timeout;
	        }
	        if (connection.headers) {
	            for (var key in connection.headers) {
	                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
	                if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
	                    allow304 = true;
	                }
	            }
	        }
	        options.allowGzip = !!connection.allowGzip;
	        if (connection.user != null && connection.password != null) {
	            if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
	                logger.throwError("basic authentication requires a secure https url", lib.Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
	            }
	            var authorization = connection.user + ":" + connection.password;
	            headers["authorization"] = {
	                key: "Authorization",
	                value: "Basic " + (0, lib$9.encode)((0, lib$8.toUtf8Bytes)(authorization))
	            };
	        }
	        if (connection.skipFetchSetup != null) {
	            options.skipFetchSetup = !!connection.skipFetchSetup;
	        }
	        if (connection.fetchOptions != null) {
	            options.fetchOptions = (0, lib$3.shallowCopy)(connection.fetchOptions);
	        }
	    }
	    var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
	    var dataMatch = ((url) ? url.match(reData) : null);
	    if (dataMatch) {
	        try {
	            var response = {
	                statusCode: 200,
	                statusMessage: "OK",
	                headers: { "content-type": (dataMatch[1] || "text/plain") },
	                body: (dataMatch[2] ? (0, lib$9.decode)(dataMatch[3]) : unpercent(dataMatch[3]))
	            };
	            var result = response.body;
	            if (processFunc) {
	                result = processFunc(response.body, response);
	            }
	            return Promise.resolve(result);
	        }
	        catch (error) {
	            logger.throwError("processing response error", lib.Logger.errors.SERVER_ERROR, {
	                body: bodyify(dataMatch[1], dataMatch[2]),
	                error: error,
	                requestBody: null,
	                requestMethod: "GET",
	                url: url
	            });
	        }
	    }
	    if (body) {
	        options.method = "POST";
	        options.body = body;
	        if (headers["content-type"] == null) {
	            headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
	        }
	        if (headers["content-length"] == null) {
	            headers["content-length"] = { key: "Content-Length", value: String(body.length) };
	        }
	    }
	    var flatHeaders = {};
	    Object.keys(headers).forEach(function (key) {
	        var header = headers[key];
	        flatHeaders[header.key] = header.value;
	    });
	    options.headers = flatHeaders;
	    var runningTimeout = (function () {
	        var timer = null;
	        var promise = new Promise(function (resolve, reject) {
	            if (timeout) {
	                timer = setTimeout(function () {
	                    if (timer == null) {
	                        return;
	                    }
	                    timer = null;
	                    reject(logger.makeError("timeout", lib.Logger.errors.TIMEOUT, {
	                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                        requestMethod: options.method,
	                        timeout: timeout,
	                        url: url
	                    }));
	                }, timeout);
	            }
	        });
	        var cancel = function () {
	            if (timer == null) {
	                return;
	            }
	            clearTimeout(timer);
	            timer = null;
	        };
	        return { promise: promise, cancel: cancel };
	    })();
	    var runningFetch = (function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var attempt, response, location_1, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        attempt = 0;
	                        _a.label = 1;
	                    case 1:
	                        if (!(attempt < attemptLimit)) return [3 /*break*/, 20];
	                        response = null;
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 9, , 10]);
	                        return [4 /*yield*/, (0, browserGeturl.getUrl)(url, options)];
	                    case 3:
	                        response = _a.sent();
	                        if (!(attempt < attemptLimit)) return [3 /*break*/, 8];
	                        if (!(response.statusCode === 301 || response.statusCode === 302)) return [3 /*break*/, 4];
	                        location_1 = response.headers.location || "";
	                        if (options.method === "GET" && location_1.match(/^https:/)) {
	                            url = response.headers.location;
	                            return [3 /*break*/, 19];
	                        }
	                        return [3 /*break*/, 8];
	                    case 4:
	                        if (!(response.statusCode === 429)) return [3 /*break*/, 8];
	                        tryAgain = true;
	                        if (!throttleCallback) return [3 /*break*/, 6];
	                        return [4 /*yield*/, throttleCallback(attempt, url)];
	                    case 5:
	                        tryAgain = _a.sent();
	                        _a.label = 6;
	                    case 6:
	                        if (!tryAgain) return [3 /*break*/, 8];
	                        stall = 0;
	                        retryAfter = response.headers["retry-after"];
	                        if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
	                            stall = parseInt(retryAfter) * 1000;
	                        }
	                        else {
	                            stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                        }
	                        //console.log("Stalling 429");
	                        return [4 /*yield*/, staller(stall)];
	                    case 7:
	                        //console.log("Stalling 429");
	                        _a.sent();
	                        return [3 /*break*/, 19];
	                    case 8: return [3 /*break*/, 10];
	                    case 9:
	                        error_1 = _a.sent();
	                        response = error_1.response;
	                        if (response == null) {
	                            runningTimeout.cancel();
	                            logger.throwError("missing response", lib.Logger.errors.SERVER_ERROR, {
	                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                                requestMethod: options.method,
	                                serverError: error_1,
	                                url: url
	                            });
	                        }
	                        return [3 /*break*/, 10];
	                    case 10:
	                        body_1 = response.body;
	                        if (allow304 && response.statusCode === 304) {
	                            body_1 = null;
	                        }
	                        else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
	                            runningTimeout.cancel();
	                            logger.throwError("bad response", lib.Logger.errors.SERVER_ERROR, {
	                                status: response.statusCode,
	                                headers: response.headers,
	                                body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
	                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                                requestMethod: options.method,
	                                url: url
	                            });
	                        }
	                        if (!processFunc) return [3 /*break*/, 18];
	                        _a.label = 11;
	                    case 11:
	                        _a.trys.push([11, 13, , 18]);
	                        return [4 /*yield*/, processFunc(body_1, response)];
	                    case 12:
	                        result = _a.sent();
	                        runningTimeout.cancel();
	                        return [2 /*return*/, result];
	                    case 13:
	                        error_2 = _a.sent();
	                        if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3 /*break*/, 17];
	                        tryAgain = true;
	                        if (!throttleCallback) return [3 /*break*/, 15];
	                        return [4 /*yield*/, throttleCallback(attempt, url)];
	                    case 14:
	                        tryAgain = _a.sent();
	                        _a.label = 15;
	                    case 15:
	                        if (!tryAgain) return [3 /*break*/, 17];
	                        timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                        //console.log("Stalling callback");
	                        return [4 /*yield*/, staller(timeout_1)];
	                    case 16:
	                        //console.log("Stalling callback");
	                        _a.sent();
	                        return [3 /*break*/, 19];
	                    case 17:
	                        runningTimeout.cancel();
	                        logger.throwError("processing response error", lib.Logger.errors.SERVER_ERROR, {
	                            body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
	                            error: error_2,
	                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                            requestMethod: options.method,
	                            url: url
	                        });
	                        return [3 /*break*/, 18];
	                    case 18:
	                        runningTimeout.cancel();
	                        // If we had a processFunc, it either returned a T or threw above.
	                        // The "body" is now a Uint8Array.
	                        return [2 /*return*/, body_1];
	                    case 19:
	                        attempt++;
	                        return [3 /*break*/, 1];
	                    case 20: return [2 /*return*/, logger.throwError("failed response", lib.Logger.errors.SERVER_ERROR, {
	                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                            requestMethod: options.method,
	                            url: url
	                        })];
	                }
	            });
	        });
	    })();
	    return Promise.race([runningTimeout.promise, runningFetch]);
	}
	exports._fetchData = _fetchData;
	function fetchJson(connection, json, processFunc) {
	    var processJsonFunc = function (value, response) {
	        var result = null;
	        if (value != null) {
	            try {
	                result = JSON.parse((0, lib$8.toUtf8String)(value));
	            }
	            catch (error) {
	                logger.throwError("invalid JSON", lib.Logger.errors.SERVER_ERROR, {
	                    body: value,
	                    error: error
	                });
	            }
	        }
	        if (processFunc) {
	            result = processFunc(result, response);
	        }
	        return result;
	    };
	    // If we have json to send, we must
	    // - add content-type of application/json (unless already overridden)
	    // - convert the json to bytes
	    var body = null;
	    if (json != null) {
	        body = (0, lib$8.toUtf8Bytes)(json);
	        // Create a connection with the content-type set for JSON
	        var updated = (typeof (connection) === "string") ? ({ url: connection }) : (0, lib$3.shallowCopy)(connection);
	        if (updated.headers) {
	            var hasContentType = (Object.keys(updated.headers).filter(function (k) { return (k.toLowerCase() === "content-type"); }).length) !== 0;
	            if (!hasContentType) {
	                updated.headers = (0, lib$3.shallowCopy)(updated.headers);
	                updated.headers["content-type"] = "application/json";
	            }
	        }
	        else {
	            updated.headers = { "content-type": "application/json" };
	        }
	        connection = updated;
	    }
	    return _fetchData(connection, body, processJsonFunc);
	}
	exports.fetchJson = fetchJson;
	function poll(func, options) {
	    if (!options) {
	        options = {};
	    }
	    options = (0, lib$3.shallowCopy)(options);
	    if (options.floor == null) {
	        options.floor = 0;
	    }
	    if (options.ceiling == null) {
	        options.ceiling = 10000;
	    }
	    if (options.interval == null) {
	        options.interval = 250;
	    }
	    return new Promise(function (resolve, reject) {
	        var timer = null;
	        var done = false;
	        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
	        var cancel = function () {
	            if (done) {
	                return false;
	            }
	            done = true;
	            if (timer) {
	                clearTimeout(timer);
	            }
	            return true;
	        };
	        if (options.timeout) {
	            timer = setTimeout(function () {
	                if (cancel()) {
	                    reject(new Error("timeout"));
	                }
	            }, options.timeout);
	        }
	        var retryLimit = options.retryLimit;
	        var attempt = 0;
	        function check() {
	            return func().then(function (result) {
	                // If we have a result, or are allowed null then we're done
	                if (result !== undefined) {
	                    if (cancel()) {
	                        resolve(result);
	                    }
	                }
	                else if (options.oncePoll) {
	                    options.oncePoll.once("poll", check);
	                }
	                else if (options.onceBlock) {
	                    options.onceBlock.once("block", check);
	                    // Otherwise, exponential back-off (up to 10s) our next request
	                }
	                else if (!done) {
	                    attempt++;
	                    if (attempt > retryLimit) {
	                        if (cancel()) {
	                            reject(new Error("retry limit reached"));
	                        }
	                        return;
	                    }
	                    var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                    if (timeout < options.floor) {
	                        timeout = options.floor;
	                    }
	                    if (timeout > options.ceiling) {
	                        timeout = options.ceiling;
	                    }
	                    setTimeout(check, timeout);
	                }
	                return null;
	            }, function (error) {
	                if (cancel()) {
	                    reject(error);
	                }
	            });
	        }
	        check();
	    });
	}
	exports.poll = poll;

	});

	var index$q = /*@__PURE__*/getDefaultExportFromCjs(lib$s);

	'use strict';
	var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

	// pre-compute lookup table
	var ALPHABET_MAP = {};
	for (var z = 0; z < ALPHABET.length; z++) {
	  var x = ALPHABET.charAt(z);

	  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
	  ALPHABET_MAP[x] = z;
	}

	function polymodStep (pre) {
	  var b = pre >> 25;
	  return ((pre & 0x1FFFFFF) << 5) ^
	    (-((b >> 0) & 1) & 0x3b6a57b2) ^
	    (-((b >> 1) & 1) & 0x26508e6d) ^
	    (-((b >> 2) & 1) & 0x1ea119fa) ^
	    (-((b >> 3) & 1) & 0x3d4233dd) ^
	    (-((b >> 4) & 1) & 0x2a1462b3)
	}

	function prefixChk (prefix) {
	  var chk = 1;
	  for (var i = 0; i < prefix.length; ++i) {
	    var c = prefix.charCodeAt(i);
	    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

	    chk = polymodStep(chk) ^ (c >> 5);
	  }
	  chk = polymodStep(chk);

	  for (i = 0; i < prefix.length; ++i) {
	    var v = prefix.charCodeAt(i);
	    chk = polymodStep(chk) ^ (v & 0x1f);
	  }
	  return chk
	}

	function encode (prefix, words, LIMIT) {
	  LIMIT = LIMIT || 90;
	  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

	  prefix = prefix.toLowerCase();

	  // determine chk mod
	  var chk = prefixChk(prefix);
	  if (typeof chk === 'string') throw new Error(chk)

	  var result = prefix + '1';
	  for (var i = 0; i < words.length; ++i) {
	    var x = words[i];
	    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

	    chk = polymodStep(chk) ^ x;
	    result += ALPHABET.charAt(x);
	  }

	  for (i = 0; i < 6; ++i) {
	    chk = polymodStep(chk);
	  }
	  chk ^= 1;

	  for (i = 0; i < 6; ++i) {
	    var v = (chk >> ((5 - i) * 5)) & 0x1f;
	    result += ALPHABET.charAt(v);
	  }

	  return result
	}

	function __decode (str, LIMIT) {
	  LIMIT = LIMIT || 90;
	  if (str.length < 8) return str + ' too short'
	  if (str.length > LIMIT) return 'Exceeds length limit'

	  // don't allow mixed case
	  var lowered = str.toLowerCase();
	  var uppered = str.toUpperCase();
	  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
	  str = lowered;

	  var split = str.lastIndexOf('1');
	  if (split === -1) return 'No separator character for ' + str
	  if (split === 0) return 'Missing prefix for ' + str

	  var prefix = str.slice(0, split);
	  var wordChars = str.slice(split + 1);
	  if (wordChars.length < 6) return 'Data too short'

	  var chk = prefixChk(prefix);
	  if (typeof chk === 'string') return chk

	  var words = [];
	  for (var i = 0; i < wordChars.length; ++i) {
	    var c = wordChars.charAt(i);
	    var v = ALPHABET_MAP[c];
	    if (v === undefined) return 'Unknown character ' + c
	    chk = polymodStep(chk) ^ v;

	    // not in the checksum?
	    if (i + 6 >= wordChars.length) continue
	    words.push(v);
	  }

	  if (chk !== 1) return 'Invalid checksum for ' + str
	  return { prefix: prefix, words: words }
	}

	function decodeUnsafe () {
	  var res = __decode.apply(null, arguments);
	  if (typeof res === 'object') return res
	}

	function decode (str) {
	  var res = __decode.apply(null, arguments);
	  if (typeof res === 'object') return res

	  throw new Error(res)
	}

	function convert (data, inBits, outBits, pad) {
	  var value = 0;
	  var bits = 0;
	  var maxV = (1 << outBits) - 1;

	  var result = [];
	  for (var i = 0; i < data.length; ++i) {
	    value = (value << inBits) | data[i];
	    bits += inBits;

	    while (bits >= outBits) {
	      bits -= outBits;
	      result.push((value >> bits) & maxV);
	    }
	  }

	  if (pad) {
	    if (bits > 0) {
	      result.push((value << (outBits - bits)) & maxV);
	    }
	  } else {
	    if (bits >= inBits) return 'Excess padding'
	    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
	  }

	  return result
	}

	function toWordsUnsafe (bytes) {
	  var res = convert(bytes, 8, 5, true);
	  if (Array.isArray(res)) return res
	}

	function toWords (bytes) {
	  var res = convert(bytes, 8, 5, true);
	  if (Array.isArray(res)) return res

	  throw new Error(res)
	}

	function fromWordsUnsafe (words) {
	  var res = convert(words, 5, 8, false);
	  if (Array.isArray(res)) return res
	}

	function fromWords (words) {
	  var res = convert(words, 5, 8, false);
	  if (Array.isArray(res)) return res

	  throw new Error(res)
	}

	var bech32 = {
	  decodeUnsafe: decodeUnsafe,
	  decode: decode,
	  encode: encode,
	  toWordsUnsafe: toWordsUnsafe,
	  toWords: toWords,
	  fromWordsUnsafe: fromWordsUnsafe,
	  fromWords: fromWords
	};

	var _version$I = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "providers/5.8.0";

	});

	var _version$J = /*@__PURE__*/getDefaultExportFromCjs(_version$I);

	var formatter = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.showThrottleMessage = exports.isCommunityResource = exports.isCommunityResourcable = exports.Formatter = void 0;








	var logger = new lib.Logger(_version$I.version);
	var Formatter = /** @class */ (function () {
	    function Formatter() {
	        this.formats = this.getDefaultFormats();
	    }
	    Formatter.prototype.getDefaultFormats = function () {
	        var _this = this;
	        var formats = ({});
	        var address = this.address.bind(this);
	        var bigNumber = this.bigNumber.bind(this);
	        var blockTag = this.blockTag.bind(this);
	        var data = this.data.bind(this);
	        var hash = this.hash.bind(this);
	        var hex = this.hex.bind(this);
	        var number = this.number.bind(this);
	        var type = this.type.bind(this);
	        var strictData = function (v) { return _this.data(v, true); };
	        formats.transaction = {
	            hash: hash,
	            type: type,
	            accessList: Formatter.allowNull(this.accessList.bind(this), null),
	            blockHash: Formatter.allowNull(hash, null),
	            blockNumber: Formatter.allowNull(number, null),
	            transactionIndex: Formatter.allowNull(number, null),
	            confirmations: Formatter.allowNull(number, null),
	            from: address,
	            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
	            // must be set
	            gasPrice: Formatter.allowNull(bigNumber),
	            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
	            maxFeePerGas: Formatter.allowNull(bigNumber),
	            gasLimit: bigNumber,
	            to: Formatter.allowNull(address, null),
	            value: bigNumber,
	            nonce: number,
	            data: data,
	            r: Formatter.allowNull(this.uint256),
	            s: Formatter.allowNull(this.uint256),
	            v: Formatter.allowNull(number),
	            creates: Formatter.allowNull(address, null),
	            raw: Formatter.allowNull(data),
	        };
	        formats.transactionRequest = {
	            from: Formatter.allowNull(address),
	            nonce: Formatter.allowNull(number),
	            gasLimit: Formatter.allowNull(bigNumber),
	            gasPrice: Formatter.allowNull(bigNumber),
	            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
	            maxFeePerGas: Formatter.allowNull(bigNumber),
	            to: Formatter.allowNull(address),
	            value: Formatter.allowNull(bigNumber),
	            data: Formatter.allowNull(strictData),
	            type: Formatter.allowNull(number),
	            accessList: Formatter.allowNull(this.accessList.bind(this), null),
	        };
	        formats.receiptLog = {
	            transactionIndex: number,
	            blockNumber: number,
	            transactionHash: hash,
	            address: address,
	            topics: Formatter.arrayOf(hash),
	            data: data,
	            logIndex: number,
	            blockHash: hash,
	        };
	        formats.receipt = {
	            to: Formatter.allowNull(this.address, null),
	            from: Formatter.allowNull(this.address, null),
	            contractAddress: Formatter.allowNull(address, null),
	            transactionIndex: number,
	            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
	            root: Formatter.allowNull(hex),
	            gasUsed: bigNumber,
	            logsBloom: Formatter.allowNull(data),
	            blockHash: hash,
	            transactionHash: hash,
	            logs: Formatter.arrayOf(this.receiptLog.bind(this)),
	            blockNumber: number,
	            confirmations: Formatter.allowNull(number, null),
	            cumulativeGasUsed: bigNumber,
	            effectiveGasPrice: Formatter.allowNull(bigNumber),
	            status: Formatter.allowNull(number),
	            type: type
	        };
	        formats.block = {
	            hash: Formatter.allowNull(hash),
	            parentHash: hash,
	            number: number,
	            timestamp: number,
	            nonce: Formatter.allowNull(hex),
	            difficulty: this.difficulty.bind(this),
	            gasLimit: bigNumber,
	            gasUsed: bigNumber,
	            miner: Formatter.allowNull(address),
	            extraData: data,
	            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
	            baseFeePerGas: Formatter.allowNull(bigNumber)
	        };
	        formats.blockWithTransactions = (0, lib$3.shallowCopy)(formats.block);
	        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
	        formats.filter = {
	            fromBlock: Formatter.allowNull(blockTag, undefined),
	            toBlock: Formatter.allowNull(blockTag, undefined),
	            blockHash: Formatter.allowNull(hash, undefined),
	            address: Formatter.allowNull(address, undefined),
	            topics: Formatter.allowNull(this.topics.bind(this), undefined),
	        };
	        formats.filterLog = {
	            blockNumber: Formatter.allowNull(number),
	            blockHash: Formatter.allowNull(hash),
	            transactionIndex: number,
	            removed: Formatter.allowNull(this.boolean.bind(this)),
	            address: address,
	            data: Formatter.allowFalsish(data, "0x"),
	            topics: Formatter.arrayOf(hash),
	            transactionHash: hash,
	            logIndex: number,
	        };
	        return formats;
	    };
	    Formatter.prototype.accessList = function (accessList) {
	        return (0, lib$h.accessListify)(accessList || []);
	    };
	    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
	    // Strict! Used on input.
	    Formatter.prototype.number = function (number) {
	        if (number === "0x") {
	            return 0;
	        }
	        return lib$2.BigNumber.from(number).toNumber();
	    };
	    Formatter.prototype.type = function (number) {
	        if (number === "0x" || number == null) {
	            return 0;
	        }
	        return lib$2.BigNumber.from(number).toNumber();
	    };
	    // Strict! Used on input.
	    Formatter.prototype.bigNumber = function (value) {
	        return lib$2.BigNumber.from(value);
	    };
	    // Requires a boolean, "true" or  "false"; returns a boolean
	    Formatter.prototype.boolean = function (value) {
	        if (typeof (value) === "boolean") {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            value = value.toLowerCase();
	            if (value === "true") {
	                return true;
	            }
	            if (value === "false") {
	                return false;
	            }
	        }
	        throw new Error("invalid boolean - " + value);
	    };
	    Formatter.prototype.hex = function (value, strict) {
	        if (typeof (value) === "string") {
	            if (!strict && value.substring(0, 2) !== "0x") {
	                value = "0x" + value;
	            }
	            if ((0, lib$1.isHexString)(value)) {
	                return value.toLowerCase();
	            }
	        }
	        return logger.throwArgumentError("invalid hash", "value", value);
	    };
	    Formatter.prototype.data = function (value, strict) {
	        var result = this.hex(value, strict);
	        if ((result.length % 2) !== 0) {
	            throw new Error("invalid data; odd-length - " + value);
	        }
	        return result;
	    };
	    // Requires an address
	    // Strict! Used on input.
	    Formatter.prototype.address = function (value) {
	        return (0, lib$6.getAddress)(value);
	    };
	    Formatter.prototype.callAddress = function (value) {
	        if (!(0, lib$1.isHexString)(value, 32)) {
	            return null;
	        }
	        var address = (0, lib$6.getAddress)((0, lib$1.hexDataSlice)(value, 12));
	        return (address === lib$7.AddressZero) ? null : address;
	    };
	    Formatter.prototype.contractAddress = function (value) {
	        return (0, lib$6.getContractAddress)(value);
	    };
	    // Strict! Used on input.
	    Formatter.prototype.blockTag = function (blockTag) {
	        if (blockTag == null) {
	            return "latest";
	        }
	        if (blockTag === "earliest") {
	            return "0x0";
	        }
	        switch (blockTag) {
	            case "earliest": return "0x0";
	            case "latest":
	            case "pending":
	            case "safe":
	            case "finalized":
	                return blockTag;
	        }
	        if (typeof (blockTag) === "number" || (0, lib$1.isHexString)(blockTag)) {
	            return (0, lib$1.hexValue)(blockTag);
	        }
	        throw new Error("invalid blockTag");
	    };
	    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
	    Formatter.prototype.hash = function (value, strict) {
	        var result = this.hex(value, strict);
	        if ((0, lib$1.hexDataLength)(result) !== 32) {
	            return logger.throwArgumentError("invalid hash", "value", value);
	        }
	        return result;
	    };
	    // Returns the difficulty as a number, or if too large (i.e. PoA network) null
	    Formatter.prototype.difficulty = function (value) {
	        if (value == null) {
	            return null;
	        }
	        var v = lib$2.BigNumber.from(value);
	        try {
	            return v.toNumber();
	        }
	        catch (error) { }
	        return null;
	    };
	    Formatter.prototype.uint256 = function (value) {
	        if (!(0, lib$1.isHexString)(value)) {
	            throw new Error("invalid uint256");
	        }
	        return (0, lib$1.hexZeroPad)(value, 32);
	    };
	    Formatter.prototype._block = function (value, format) {
	        if (value.author != null && value.miner == null) {
	            value.miner = value.author;
	        }
	        // The difficulty may need to come from _difficulty in recursed blocks
	        var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
	        var result = Formatter.check(format, value);
	        result._difficulty = ((difficulty == null) ? null : lib$2.BigNumber.from(difficulty));
	        return result;
	    };
	    Formatter.prototype.block = function (value) {
	        return this._block(value, this.formats.block);
	    };
	    Formatter.prototype.blockWithTransactions = function (value) {
	        return this._block(value, this.formats.blockWithTransactions);
	    };
	    // Strict! Used on input.
	    Formatter.prototype.transactionRequest = function (value) {
	        return Formatter.check(this.formats.transactionRequest, value);
	    };
	    Formatter.prototype.transactionResponse = function (transaction) {
	        // Rename gas to gasLimit
	        if (transaction.gas != null && transaction.gasLimit == null) {
	            transaction.gasLimit = transaction.gas;
	        }
	        // Some clients (TestRPC) do strange things like return 0x0 for the
	        // 0 address; correct this to be a real address
	        if (transaction.to && lib$2.BigNumber.from(transaction.to).isZero()) {
	            transaction.to = "0x0000000000000000000000000000000000000000";
	        }
	        // Rename input to data
	        if (transaction.input != null && transaction.data == null) {
	            transaction.data = transaction.input;
	        }
	        // If to and creates are empty, populate the creates from the transaction
	        if (transaction.to == null && transaction.creates == null) {
	            transaction.creates = this.contractAddress(transaction);
	        }
	        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
	            transaction.accessList = [];
	        }
	        var result = Formatter.check(this.formats.transaction, transaction);
	        if (transaction.chainId != null) {
	            var chainId = transaction.chainId;
	            if ((0, lib$1.isHexString)(chainId)) {
	                chainId = lib$2.BigNumber.from(chainId).toNumber();
	            }
	            result.chainId = chainId;
	        }
	        else {
	            var chainId = transaction.networkId;
	            // geth-etc returns chainId
	            if (chainId == null && result.v == null) {
	                chainId = transaction.chainId;
	            }
	            if ((0, lib$1.isHexString)(chainId)) {
	                chainId = lib$2.BigNumber.from(chainId).toNumber();
	            }
	            if (typeof (chainId) !== "number" && result.v != null) {
	                chainId = (result.v - 35) / 2;
	                if (chainId < 0) {
	                    chainId = 0;
	                }
	                chainId = parseInt(chainId);
	            }
	            if (typeof (chainId) !== "number") {
	                chainId = 0;
	            }
	            result.chainId = chainId;
	        }
	        // 0x0000... should actually be null
	        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
	            result.blockHash = null;
	        }
	        return result;
	    };
	    Formatter.prototype.transaction = function (value) {
	        return (0, lib$h.parse)(value);
	    };
	    Formatter.prototype.receiptLog = function (value) {
	        return Formatter.check(this.formats.receiptLog, value);
	    };
	    Formatter.prototype.receipt = function (value) {
	        var result = Formatter.check(this.formats.receipt, value);
	        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
	        if (result.root != null) {
	            if (result.root.length <= 4) {
	                // Could be 0x00, 0x0, 0x01 or 0x1
	                var value_1 = lib$2.BigNumber.from(result.root).toNumber();
	                if (value_1 === 0 || value_1 === 1) {
	                    // Make sure if both are specified, they match
	                    if (result.status != null && (result.status !== value_1)) {
	                        logger.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
	                    }
	                    result.status = value_1;
	                    delete result.root;
	                }
	                else {
	                    logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
	                }
	            }
	            else if (result.root.length !== 66) {
	                // Must be a valid bytes32
	                logger.throwArgumentError("invalid root hash", "value.root", result.root);
	            }
	        }
	        if (result.status != null) {
	            result.byzantium = true;
	        }
	        return result;
	    };
	    Formatter.prototype.topics = function (value) {
	        var _this = this;
	        if (Array.isArray(value)) {
	            return value.map(function (v) { return _this.topics(v); });
	        }
	        else if (value != null) {
	            return this.hash(value, true);
	        }
	        return null;
	    };
	    Formatter.prototype.filter = function (value) {
	        return Formatter.check(this.formats.filter, value);
	    };
	    Formatter.prototype.filterLog = function (value) {
	        return Formatter.check(this.formats.filterLog, value);
	    };
	    Formatter.check = function (format, object) {
	        var result = {};
	        for (var key in format) {
	            try {
	                var value = format[key](object[key]);
	                if (value !== undefined) {
	                    result[key] = value;
	                }
	            }
	            catch (error) {
	                error.checkKey = key;
	                error.checkValue = object[key];
	                throw error;
	            }
	        }
	        return result;
	    };
	    // if value is null-ish, nullValue is returned
	    Formatter.allowNull = function (format, nullValue) {
	        return (function (value) {
	            if (value == null) {
	                return nullValue;
	            }
	            return format(value);
	        });
	    };
	    // If value is false-ish, replaceValue is returned
	    Formatter.allowFalsish = function (format, replaceValue) {
	        return (function (value) {
	            if (!value) {
	                return replaceValue;
	            }
	            return format(value);
	        });
	    };
	    // Requires an Array satisfying check
	    Formatter.arrayOf = function (format) {
	        return (function (array) {
	            if (!Array.isArray(array)) {
	                throw new Error("not an array");
	            }
	            var result = [];
	            array.forEach(function (value) {
	                result.push(format(value));
	            });
	            return result;
	        });
	    };
	    return Formatter;
	}());
	exports.Formatter = Formatter;
	function isCommunityResourcable(value) {
	    return (value && typeof (value.isCommunityResource) === "function");
	}
	exports.isCommunityResourcable = isCommunityResourcable;
	function isCommunityResource(value) {
	    return (isCommunityResourcable(value) && value.isCommunityResource());
	}
	exports.isCommunityResource = isCommunityResource;
	// Show the throttle message only once
	var throttleMessage = false;
	function showThrottleMessage() {
	    if (throttleMessage) {
	        return;
	    }
	    throttleMessage = true;
	    console.log("========= NOTICE =========");
	    console.log("Request-Rate Exceeded  (this message will not be repeated)");
	    console.log("");
	    console.log("The default API keys for each service are provided as a highly-throttled,");
	    console.log("community resource for low-traffic projects and early prototyping.");
	    console.log("");
	    console.log("While your application will continue to function, we highly recommended");
	    console.log("signing up for your own API keys to improve performance, increase your");
	    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
	    console.log("");
	    console.log("For more details: https:/\/docs.ethers.io/api-keys/");
	    console.log("==========================");
	}
	exports.showThrottleMessage = showThrottleMessage;

	});

	var formatter$1 = /*@__PURE__*/getDefaultExportFromCjs(formatter);

	var baseProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BaseProvider = exports.Resolver = exports.Event = void 0;












	var bech32_1 = __importDefault(bech32);


	var logger = new lib.Logger(_version$I.version);

	var MAX_CCIP_REDIRECTS = 10;
	//////////////////////////////
	// Event Serializeing
	function checkTopic(topic) {
	    if (topic == null) {
	        return "null";
	    }
	    if ((0, lib$1.hexDataLength)(topic) !== 32) {
	        logger.throwArgumentError("invalid topic", "topic", topic);
	    }
	    return topic.toLowerCase();
	}
	function serializeTopics(topics) {
	    // Remove trailing null AND-topics; they are redundant
	    topics = topics.slice();
	    while (topics.length > 0 && topics[topics.length - 1] == null) {
	        topics.pop();
	    }
	    return topics.map(function (topic) {
	        if (Array.isArray(topic)) {
	            // Only track unique OR-topics
	            var unique_1 = {};
	            topic.forEach(function (topic) {
	                unique_1[checkTopic(topic)] = true;
	            });
	            // The order of OR-topics does not matter
	            var sorted = Object.keys(unique_1);
	            sorted.sort();
	            return sorted.join("|");
	        }
	        else {
	            return checkTopic(topic);
	        }
	    }).join("&");
	}
	function deserializeTopics(data) {
	    if (data === "") {
	        return [];
	    }
	    return data.split(/&/g).map(function (topic) {
	        if (topic === "") {
	            return [];
	        }
	        var comps = topic.split("|").map(function (topic) {
	            return ((topic === "null") ? null : topic);
	        });
	        return ((comps.length === 1) ? comps[0] : comps);
	    });
	}
	function getEventTag(eventName) {
	    if (typeof (eventName) === "string") {
	        eventName = eventName.toLowerCase();
	        if ((0, lib$1.hexDataLength)(eventName) === 32) {
	            return "tx:" + eventName;
	        }
	        if (eventName.indexOf(":") === -1) {
	            return eventName;
	        }
	    }
	    else if (Array.isArray(eventName)) {
	        return "filter:*:" + serializeTopics(eventName);
	    }
	    else if (lib$e.ForkEvent.isForkEvent(eventName)) {
	        logger.warn("not implemented");
	        throw new Error("not implemented");
	    }
	    else if (eventName && typeof (eventName) === "object") {
	        return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
	    }
	    throw new Error("invalid event - " + eventName);
	}
	//////////////////////////////
	// Helper Object
	function getTime() {
	    return (new Date()).getTime();
	}
	function stall(duration) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, duration);
	    });
	}
	//////////////////////////////
	// Provider Object
	/**
	 *  EventType
	 *   - "block"
	 *   - "poll"
	 *   - "didPoll"
	 *   - "pending"
	 *   - "error"
	 *   - "network"
	 *   - filter
	 *   - topics array
	 *   - transaction hash
	 */
	var PollableEvents = ["block", "network", "pending", "poll"];
	var Event = /** @class */ (function () {
	    function Event(tag, listener, once) {
	        (0, lib$3.defineReadOnly)(this, "tag", tag);
	        (0, lib$3.defineReadOnly)(this, "listener", listener);
	        (0, lib$3.defineReadOnly)(this, "once", once);
	        this._lastBlockNumber = -2;
	        this._inflight = false;
	    }
	    Object.defineProperty(Event.prototype, "event", {
	        get: function () {
	            switch (this.type) {
	                case "tx":
	                    return this.hash;
	                case "filter":
	                    return this.filter;
	            }
	            return this.tag;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "type", {
	        get: function () {
	            return this.tag.split(":")[0];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "hash", {
	        get: function () {
	            var comps = this.tag.split(":");
	            if (comps[0] !== "tx") {
	                return null;
	            }
	            return comps[1];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "filter", {
	        get: function () {
	            var comps = this.tag.split(":");
	            if (comps[0] !== "filter") {
	                return null;
	            }
	            var address = comps[1];
	            var topics = deserializeTopics(comps[2]);
	            var filter = {};
	            if (topics.length > 0) {
	                filter.topics = topics;
	            }
	            if (address && address !== "*") {
	                filter.address = address;
	            }
	            return filter;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Event.prototype.pollable = function () {
	        return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
	    };
	    return Event;
	}());
	exports.Event = Event;
	;
	// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
	var coinInfos = {
	    "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
	    "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
	    "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
	    "60": { symbol: "eth", ilk: "eth" },
	    "61": { symbol: "etc", ilk: "eth" },
	    "700": { symbol: "xdai", ilk: "eth" },
	};
	function bytes32ify(value) {
	    return (0, lib$1.hexZeroPad)(lib$2.BigNumber.from(value).toHexString(), 32);
	}
	// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
	function base58Encode(data) {
	    return lib$j.Base58.encode((0, lib$1.concat)([data, (0, lib$1.hexDataSlice)((0, lib$k.sha256)((0, lib$k.sha256)(data)), 0, 4)]));
	}
	var matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
	var matchers = [
	    new RegExp("^(https):/\/(.*)$", "i"),
	    new RegExp("^(data):(.*)$", "i"),
	    matcherIpfs,
	    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
	];
	function _parseString(result, start) {
	    try {
	        return (0, lib$8.toUtf8String)(_parseBytes(result, start));
	    }
	    catch (error) { }
	    return null;
	}
	function _parseBytes(result, start) {
	    if (result === "0x") {
	        return null;
	    }
	    var offset = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(result, start, start + 32)).toNumber();
	    var length = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(result, offset, offset + 32)).toNumber();
	    return (0, lib$1.hexDataSlice)(result, offset + 32, offset + 32 + length);
	}
	// Trim off the ipfs:// prefix and return the default gateway URL
	function getIpfsLink(link) {
	    if (link.match(/^ipfs:\/\/ipfs\//i)) {
	        link = link.substring(12);
	    }
	    else if (link.match(/^ipfs:\/\//i)) {
	        link = link.substring(7);
	    }
	    else {
	        logger.throwArgumentError("unsupported IPFS format", "link", link);
	    }
	    return "https://gateway.ipfs.io/ipfs/" + link;
	}
	function numPad(value) {
	    var result = (0, lib$1.arrayify)(value);
	    if (result.length > 32) {
	        throw new Error("internal; should not happen");
	    }
	    var padded = new Uint8Array(32);
	    padded.set(result, 32 - result.length);
	    return padded;
	}
	function bytesPad(value) {
	    if ((value.length % 32) === 0) {
	        return value;
	    }
	    var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
	    result.set(value);
	    return result;
	}
	// ABI Encodes a series of (bytes, bytes, ...)
	function encodeBytes(datas) {
	    var result = [];
	    var byteCount = 0;
	    // Add place-holders for pointers as we add items
	    for (var i = 0; i < datas.length; i++) {
	        result.push(null);
	        byteCount += 32;
	    }
	    for (var i = 0; i < datas.length; i++) {
	        var data = (0, lib$1.arrayify)(datas[i]);
	        // Update the bytes offset
	        result[i] = numPad(byteCount);
	        // The length and padded value of data
	        result.push(numPad(data.length));
	        result.push(bytesPad(data));
	        byteCount += 32 + Math.ceil(data.length / 32) * 32;
	    }
	    return (0, lib$1.hexConcat)(result);
	}
	var Resolver = /** @class */ (function () {
	    // The resolvedAddress is only for creating a ReverseLookup resolver
	    function Resolver(provider, address, name, resolvedAddress) {
	        (0, lib$3.defineReadOnly)(this, "provider", provider);
	        (0, lib$3.defineReadOnly)(this, "name", name);
	        (0, lib$3.defineReadOnly)(this, "address", provider.formatter.address(address));
	        (0, lib$3.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
	    }
	    Resolver.prototype.supportsWildcard = function () {
	        var _this = this;
	        if (!this._supportsEip2544) {
	            // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
	            this._supportsEip2544 = this.provider.call({
	                to: this.address,
	                data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
	            }).then(function (result) {
	                return lib$2.BigNumber.from(result).eq(1);
	            }).catch(function (error) {
	                if (error.code === lib.Logger.errors.CALL_EXCEPTION) {
	                    return false;
	                }
	                // Rethrow the error: link is down, etc. Let future attempts retry.
	                _this._supportsEip2544 = null;
	                throw error;
	            });
	        }
	        return this._supportsEip2544;
	    };
	    Resolver.prototype._fetch = function (selector, parameters) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx, parseBytes, result, error_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        tx = {
	                            to: this.address,
	                            ccipReadEnabled: true,
	                            data: (0, lib$1.hexConcat)([selector, (0, lib$c.namehash)(this.name), (parameters || "0x")])
	                        };
	                        parseBytes = false;
	                        return [4 /*yield*/, this.supportsWildcard()];
	                    case 1:
	                        if (_a.sent()) {
	                            parseBytes = true;
	                            // selector("resolve(bytes,bytes)")
	                            tx.data = (0, lib$1.hexConcat)(["0x9061b923", encodeBytes([(0, lib$c.dnsEncode)(this.name), tx.data])]);
	                        }
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.call(tx)];
	                    case 3:
	                        result = _a.sent();
	                        if (((0, lib$1.arrayify)(result).length % 32) === 4) {
	                            logger.throwError("resolver threw error", lib.Logger.errors.CALL_EXCEPTION, {
	                                transaction: tx, data: result
	                            });
	                        }
	                        if (parseBytes) {
	                            result = _parseBytes(result, 0);
	                        }
	                        return [2 /*return*/, result];
	                    case 4:
	                        error_1 = _a.sent();
	                        if (error_1.code === lib.Logger.errors.CALL_EXCEPTION) {
	                            return [2 /*return*/, null];
	                        }
	                        throw error_1;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Resolver.prototype._fetchBytes = function (selector, parameters) {
	        return __awaiter(this, void 0, void 0, function () {
	            var result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._fetch(selector, parameters)];
	                    case 1:
	                        result = _a.sent();
	                        if (result != null) {
	                            return [2 /*return*/, _parseBytes(result, 0)];
	                        }
	                        return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    Resolver.prototype._getAddress = function (coinType, hexBytes) {
	        var coinInfo = coinInfos[String(coinType)];
	        if (coinInfo == null) {
	            logger.throwError("unsupported coin type: " + coinType, lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "getAddress(" + coinType + ")"
	            });
	        }
	        if (coinInfo.ilk === "eth") {
	            return this.provider.formatter.address(hexBytes);
	        }
	        var bytes = (0, lib$1.arrayify)(hexBytes);
	        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
	        if (coinInfo.p2pkh != null) {
	            var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
	            if (p2pkh) {
	                var length_1 = parseInt(p2pkh[1], 16);
	                if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
	                    return base58Encode((0, lib$1.concat)([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
	                }
	            }
	        }
	        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
	        if (coinInfo.p2sh != null) {
	            var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
	            if (p2sh) {
	                var length_2 = parseInt(p2sh[1], 16);
	                if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
	                    return base58Encode((0, lib$1.concat)([[coinInfo.p2sh], ("0x" + p2sh[2])]));
	                }
	            }
	        }
	        // Bech32
	        if (coinInfo.prefix != null) {
	            var length_3 = bytes[1];
	            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
	            var version_1 = bytes[0];
	            if (version_1 === 0x00) {
	                if (length_3 !== 20 && length_3 !== 32) {
	                    version_1 = -1;
	                }
	            }
	            else {
	                version_1 = -1;
	            }
	            if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
	                var words = bech32_1.default.toWords(bytes.slice(2));
	                words.unshift(version_1);
	                return bech32_1.default.encode(coinInfo.prefix, words);
	            }
	        }
	        return null;
	    };
	    Resolver.prototype.getAddress = function (coinType) {
	        return __awaiter(this, void 0, void 0, function () {
	            var result, error_2, hexBytes, address;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (coinType == null) {
	                            coinType = 60;
	                        }
	                        if (!(coinType === 60)) return [3 /*break*/, 4];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._fetch("0x3b3b57de")];
	                    case 2:
	                        result = _a.sent();
	                        // No address
	                        if (result === "0x" || result === lib$7.HashZero) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, this.provider.formatter.callAddress(result)];
	                    case 3:
	                        error_2 = _a.sent();
	                        if (error_2.code === lib.Logger.errors.CALL_EXCEPTION) {
	                            return [2 /*return*/, null];
	                        }
	                        throw error_2;
	                    case 4: return [4 /*yield*/, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
	                    case 5:
	                        hexBytes = _a.sent();
	                        // No address
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        address = this._getAddress(coinType, hexBytes);
	                        if (address == null) {
	                            logger.throwError("invalid or unsupported coin data", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "getAddress(" + coinType + ")",
	                                coinType: coinType,
	                                data: hexBytes
	                            });
	                        }
	                        return [2 /*return*/, address];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getAvatar = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;
	            return __generator(this, function (_h) {
	                switch (_h.label) {
	                    case 0:
	                        linkage = [{ type: "name", content: this.name }];
	                        _h.label = 1;
	                    case 1:
	                        _h.trys.push([1, 19, , 20]);
	                        return [4 /*yield*/, this.getText("avatar")];
	                    case 2:
	                        avatar = _h.sent();
	                        if (avatar == null) {
	                            return [2 /*return*/, null];
	                        }
	                        i = 0;
	                        _h.label = 3;
	                    case 3:
	                        if (!(i < matchers.length)) return [3 /*break*/, 18];
	                        match = avatar.match(matchers[i]);
	                        if (match == null) {
	                            return [3 /*break*/, 17];
	                        }
	                        scheme = match[1].toLowerCase();
	                        _a = scheme;
	                        switch (_a) {
	                            case "https": return [3 /*break*/, 4];
	                            case "data": return [3 /*break*/, 5];
	                            case "ipfs": return [3 /*break*/, 6];
	                            case "erc721": return [3 /*break*/, 7];
	                            case "erc1155": return [3 /*break*/, 7];
	                        }
	                        return [3 /*break*/, 17];
	                    case 4:
	                        linkage.push({ type: "url", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: avatar }];
	                    case 5:
	                        linkage.push({ type: "data", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: avatar }];
	                    case 6:
	                        linkage.push({ type: "ipfs", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: getIpfsLink(avatar) }];
	                    case 7:
	                        selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
	                        linkage.push({ type: scheme, content: avatar });
	                        _b = this._resolvedAddress;
	                        if (_b) return [3 /*break*/, 9];
	                        return [4 /*yield*/, this.getAddress()];
	                    case 8:
	                        _b = (_h.sent());
	                        _h.label = 9;
	                    case 9:
	                        owner = (_b);
	                        comps = (match[2] || "").split("/");
	                        if (comps.length !== 2) {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this.provider.formatter.address(comps[0])];
	                    case 10:
	                        addr = _h.sent();
	                        tokenId = (0, lib$1.hexZeroPad)(lib$2.BigNumber.from(comps[1]).toHexString(), 32);
	                        if (!(scheme === "erc721")) return [3 /*break*/, 12];
	                        _d = (_c = this.provider.formatter).callAddress;
	                        return [4 /*yield*/, this.provider.call({
	                                to: addr, data: (0, lib$1.hexConcat)(["0x6352211e", tokenId])
	                            })];
	                    case 11:
	                        tokenOwner = _d.apply(_c, [_h.sent()]);
	                        if (owner !== tokenOwner) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "owner", content: tokenOwner });
	                        return [3 /*break*/, 14];
	                    case 12:
	                        if (!(scheme === "erc1155")) return [3 /*break*/, 14];
	                        _f = (_e = lib$2.BigNumber).from;
	                        return [4 /*yield*/, this.provider.call({
	                                to: addr, data: (0, lib$1.hexConcat)(["0x00fdd58e", (0, lib$1.hexZeroPad)(owner, 32), tokenId])
	                            })];
	                    case 13:
	                        balance = _f.apply(_e, [_h.sent()]);
	                        if (balance.isZero()) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "balance", content: balance.toString() });
	                        _h.label = 14;
	                    case 14:
	                        tx = {
	                            to: this.provider.formatter.address(comps[0]),
	                            data: (0, lib$1.hexConcat)([selector, tokenId])
	                        };
	                        _g = _parseString;
	                        return [4 /*yield*/, this.provider.call(tx)];
	                    case 15:
	                        metadataUrl = _g.apply(void 0, [_h.sent(), 0]);
	                        if (metadataUrl == null) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "metadata-url-base", content: metadataUrl });
	                        // ERC-1155 allows a generic {id} in the URL
	                        if (scheme === "erc1155") {
	                            metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
	                            linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
	                        }
	                        // Transform IPFS metadata links
	                        if (metadataUrl.match(/^ipfs:/i)) {
	                            metadataUrl = getIpfsLink(metadataUrl);
	                        }
	                        linkage.push({ type: "metadata-url", content: metadataUrl });
	                        return [4 /*yield*/, (0, lib$s.fetchJson)(metadataUrl)];
	                    case 16:
	                        metadata = _h.sent();
	                        if (!metadata) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
	                        imageUrl = metadata.image;
	                        if (typeof (imageUrl) !== "string") {
	                            return [2 /*return*/, null];
	                        }
	                        if (imageUrl.match(/^(https:\/\/|data:)/i)) {
	                            // Allow
	                        }
	                        else {
	                            ipfs = imageUrl.match(matcherIpfs);
	                            if (ipfs == null) {
	                                return [2 /*return*/, null];
	                            }
	                            linkage.push({ type: "url-ipfs", content: imageUrl });
	                            imageUrl = getIpfsLink(imageUrl);
	                        }
	                        linkage.push({ type: "url", content: imageUrl });
	                        return [2 /*return*/, { linkage: linkage, url: imageUrl }];
	                    case 17:
	                        i++;
	                        return [3 /*break*/, 3];
	                    case 18: return [3 /*break*/, 20];
	                    case 19:
	                        error_3 = _h.sent();
	                        return [3 /*break*/, 20];
	                    case 20: return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getContentHash = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._fetchBytes("0xbc1c58d1")];
	                    case 1:
	                        hexBytes = _a.sent();
	                        // No contenthash
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
	                        if (ipfs) {
	                            length_4 = parseInt(ipfs[3], 16);
	                            if (ipfs[4].length === length_4 * 2) {
	                                return [2 /*return*/, "ipfs:/\/" + lib$j.Base58.encode("0x" + ipfs[1])];
	                            }
	                        }
	                        ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
	                        if (ipns) {
	                            length_5 = parseInt(ipns[3], 16);
	                            if (ipns[4].length === length_5 * 2) {
	                                return [2 /*return*/, "ipns:/\/" + lib$j.Base58.encode("0x" + ipns[1])];
	                            }
	                        }
	                        swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
	                        if (swarm) {
	                            if (swarm[1].length === (32 * 2)) {
	                                return [2 /*return*/, "bzz:/\/" + swarm[1]];
	                            }
	                        }
	                        skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
	                        if (skynet) {
	                            if (skynet[1].length === (34 * 2)) {
	                                urlSafe_1 = { "=": "", "+": "-", "/": "_" };
	                                hash = (0, lib$9.encode)("0x" + skynet[1]).replace(/[=+\/]/g, function (a) { return (urlSafe_1[a]); });
	                                return [2 /*return*/, "sia:/\/" + hash];
	                            }
	                        }
	                        return [2 /*return*/, logger.throwError("invalid or unsupported content hash data", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "getContentHash()",
	                                data: hexBytes
	                            })];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getText = function (key) {
	        return __awaiter(this, void 0, void 0, function () {
	            var keyBytes, hexBytes;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        keyBytes = (0, lib$8.toUtf8Bytes)(key);
	                        // The nodehash consumes the first slot, so the string pointer targets
	                        // offset 64, with the length at offset 64 and data starting at offset 96
	                        keyBytes = (0, lib$1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
	                        // Pad to word-size (32 bytes)
	                        if ((keyBytes.length % 32) !== 0) {
	                            keyBytes = (0, lib$1.concat)([keyBytes, (0, lib$1.hexZeroPad)("0x", 32 - (key.length % 32))]);
	                        }
	                        return [4 /*yield*/, this._fetchBytes("0x59d1d43c", (0, lib$1.hexlify)(keyBytes))];
	                    case 1:
	                        hexBytes = _a.sent();
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, (0, lib$8.toUtf8String)(hexBytes)];
	                }
	            });
	        });
	    };
	    return Resolver;
	}());
	exports.Resolver = Resolver;
	var defaultFormatter = null;
	var nextPollId = 1;
	var BaseProvider = /** @class */ (function (_super) {
	    __extends(BaseProvider, _super);
	    /**
	     *  ready
	     *
	     *  A Promise<Network> that resolves only once the provider is ready.
	     *
	     *  Sub-classes that call the super with a network without a chainId
	     *  MUST set this. Standard named networks have a known chainId.
	     *
	     */
	    function BaseProvider(network) {
	        var _newTarget = this.constructor;
	        var _this = _super.call(this) || this;
	        // Events being listened to
	        _this._events = [];
	        _this._emitted = { block: -2 };
	        _this.disableCcipRead = false;
	        _this.formatter = _newTarget.getFormatter();
	        // If network is any, this Provider allows the underlying
	        // network to change dynamically, and we auto-detect the
	        // current network
	        (0, lib$3.defineReadOnly)(_this, "anyNetwork", (network === "any"));
	        if (_this.anyNetwork) {
	            network = _this.detectNetwork();
	        }
	        if (network instanceof Promise) {
	            _this._networkPromise = network;
	            // Squash any "unhandled promise" errors; that do not need to be handled
	            network.catch(function (error) { });
	            // Trigger initial network setting (async)
	            _this._ready().catch(function (error) { });
	        }
	        else {
	            var knownNetwork = (0, lib$3.getStatic)(_newTarget, "getNetwork")(network);
	            if (knownNetwork) {
	                (0, lib$3.defineReadOnly)(_this, "_network", knownNetwork);
	                _this.emit("network", knownNetwork, null);
	            }
	            else {
	                logger.throwArgumentError("invalid network", "network", network);
	            }
	        }
	        _this._maxInternalBlockNumber = -1024;
	        _this._lastBlockNumber = -2;
	        _this._maxFilterBlockRange = 10;
	        _this._pollingInterval = 4000;
	        _this._fastQueryDate = 0;
	        return _this;
	    }
	    BaseProvider.prototype._ready = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var network, error_4;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(this._network == null)) return [3 /*break*/, 7];
	                        network = null;
	                        if (!this._networkPromise) return [3 /*break*/, 4];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._networkPromise];
	                    case 2:
	                        network = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        error_4 = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 4:
	                        if (!(network == null)) return [3 /*break*/, 6];
	                        return [4 /*yield*/, this.detectNetwork()];
	                    case 5:
	                        network = _a.sent();
	                        _a.label = 6;
	                    case 6:
	                        // This should never happen; every Provider sub-class should have
	                        // suggested a network by here (or have thrown).
	                        if (!network) {
	                            logger.throwError("no network detected", lib.Logger.errors.UNKNOWN_ERROR, {});
	                        }
	                        // Possible this call stacked so do not call defineReadOnly again
	                        if (this._network == null) {
	                            if (this.anyNetwork) {
	                                this._network = network;
	                            }
	                            else {
	                                (0, lib$3.defineReadOnly)(this, "_network", network);
	                            }
	                            this.emit("network", network, null);
	                        }
	                        _a.label = 7;
	                    case 7: return [2 /*return*/, this._network];
	                }
	            });
	        });
	    };
	    Object.defineProperty(BaseProvider.prototype, "ready", {
	        // This will always return the most recently established network.
	        // For "any", this can change (a "network" event is emitted before
	        // any change is reflected); otherwise this cannot change
	        get: function () {
	            var _this = this;
	            return (0, lib$s.poll)(function () {
	                return _this._ready().then(function (network) {
	                    return network;
	                }, function (error) {
	                    // If the network isn't running yet, we will wait
	                    if (error.code === lib.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
	                        return undefined;
	                    }
	                    throw error;
	                });
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // @TODO: Remove this and just create a singleton formatter
	    BaseProvider.getFormatter = function () {
	        if (defaultFormatter == null) {
	            defaultFormatter = new formatter.Formatter();
	        }
	        return defaultFormatter;
	    };
	    // @TODO: Remove this and just use getNetwork
	    BaseProvider.getNetwork = function (network) {
	        return (0, lib$r.getNetwork)((network == null) ? "homestead" : network);
	    };
	    BaseProvider.prototype.ccipReadFetch = function (tx, calldata, urls) {
	        return __awaiter(this, void 0, void 0, function () {
	            var sender, data, errorMessages, i, url, href, json, result, errorMessage;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.disableCcipRead || urls.length === 0) {
	                            return [2 /*return*/, null];
	                        }
	                        sender = tx.to.toLowerCase();
	                        data = calldata.toLowerCase();
	                        errorMessages = [];
	                        i = 0;
	                        _a.label = 1;
	                    case 1:
	                        if (!(i < urls.length)) return [3 /*break*/, 4];
	                        url = urls[i];
	                        href = url.replace("{sender}", sender).replace("{data}", data);
	                        json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data: data, sender: sender });
	                        return [4 /*yield*/, (0, lib$s.fetchJson)({ url: href, errorPassThrough: true }, json, function (value, response) {
	                                value.status = response.statusCode;
	                                return value;
	                            })];
	                    case 2:
	                        result = _a.sent();
	                        if (result.data) {
	                            return [2 /*return*/, result.data];
	                        }
	                        errorMessage = (result.message || "unknown error");
	                        // 4xx indicates the result is not present; stop
	                        if (result.status >= 400 && result.status < 500) {
	                            return [2 /*return*/, logger.throwError("response not found during CCIP fetch: " + errorMessage, lib.Logger.errors.SERVER_ERROR, { url: url, errorMessage: errorMessage })];
	                        }
	                        // 5xx indicates server issue; try the next url
	                        errorMessages.push(errorMessage);
	                        _a.label = 3;
	                    case 3:
	                        i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [2 /*return*/, logger.throwError("error encountered during CCIP fetch: " + errorMessages.map(function (m) { return JSON.stringify(m); }).join(", "), lib.Logger.errors.SERVER_ERROR, {
	                            urls: urls,
	                            errorMessages: errorMessages
	                        })];
	                }
	            });
	        });
	    };
	    // Fetches the blockNumber, but will reuse any result that is less
	    // than maxAge old or has been requested since the last request
	    BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {
	        return __awaiter(this, void 0, void 0, function () {
	            var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._ready()];
	                    case 1:
	                        _a.sent();
	                        if (!(maxAge > 0)) return [3 /*break*/, 7];
	                        _a.label = 2;
	                    case 2:
	                        if (!this._internalBlockNumber) return [3 /*break*/, 7];
	                        internalBlockNumber = this._internalBlockNumber;
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, internalBlockNumber];
	                    case 4:
	                        result = _a.sent();
	                        if ((getTime() - result.respTime) <= maxAge) {
	                            return [2 /*return*/, result.blockNumber];
	                        }
	                        // Too old; fetch a new value
	                        return [3 /*break*/, 7];
	                    case 5:
	                        error_5 = _a.sent();
	                        // The fetch rejected; if we are the first to get the
	                        // rejection, drop through so we replace it with a new
	                        // fetch; all others blocked will then get that fetch
	                        // which won't match the one they "remembered" and loop
	                        if (this._internalBlockNumber === internalBlockNumber) {
	                            return [3 /*break*/, 7];
	                        }
	                        return [3 /*break*/, 6];
	                    case 6: return [3 /*break*/, 2];
	                    case 7:
	                        reqTime = getTime();
	                        checkInternalBlockNumber = (0, lib$3.resolveProperties)({
	                            blockNumber: this.perform("getBlockNumber", {}),
	                            networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })
	                        }).then(function (_a) {
	                            var blockNumber = _a.blockNumber, networkError = _a.networkError;
	                            if (networkError) {
	                                // Unremember this bad internal block number
	                                if (_this._internalBlockNumber === checkInternalBlockNumber) {
	                                    _this._internalBlockNumber = null;
	                                }
	                                throw networkError;
	                            }
	                            var respTime = getTime();
	                            blockNumber = lib$2.BigNumber.from(blockNumber).toNumber();
	                            if (blockNumber < _this._maxInternalBlockNumber) {
	                                blockNumber = _this._maxInternalBlockNumber;
	                            }
	                            _this._maxInternalBlockNumber = blockNumber;
	                            _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
	                            return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };
	                        });
	                        this._internalBlockNumber = checkInternalBlockNumber;
	                        // Swallow unhandled exceptions; if needed they are handled else where
	                        checkInternalBlockNumber.catch(function (error) {
	                            // Don't null the dead (rejected) fetch, if it has already been updated
	                            if (_this._internalBlockNumber === checkInternalBlockNumber) {
	                                _this._internalBlockNumber = null;
	                            }
	                        });
	                        return [4 /*yield*/, checkInternalBlockNumber];
	                    case 8: return [2 /*return*/, (_a.sent()).blockNumber];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.poll = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var pollId, runners, blockNumber, error_6, i;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        pollId = nextPollId++;
	                        runners = [];
	                        blockNumber = null;
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
	                    case 2:
	                        blockNumber = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        error_6 = _a.sent();
	                        this.emit("error", error_6);
	                        return [2 /*return*/];
	                    case 4:
	                        this._setFastBlockNumber(blockNumber);
	                        // Emit a poll event after we have the latest (fast) block number
	                        this.emit("poll", pollId, blockNumber);
	                        // If the block has not changed, meh.
	                        if (blockNumber === this._lastBlockNumber) {
	                            this.emit("didPoll", pollId);
	                            return [2 /*return*/];
	                        }
	                        // First polling cycle, trigger a "block" events
	                        if (this._emitted.block === -2) {
	                            this._emitted.block = blockNumber - 1;
	                        }
	                        if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
	                            logger.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
	                            this.emit("error", logger.makeError("network block skew detected", lib.Logger.errors.NETWORK_ERROR, {
	                                blockNumber: blockNumber,
	                                event: "blockSkew",
	                                previousBlockNumber: this._emitted.block
	                            }));
	                            this.emit("block", blockNumber);
	                        }
	                        else {
	                            // Notify all listener for each block that has passed
	                            for (i = this._emitted.block + 1; i <= blockNumber; i++) {
	                                this.emit("block", i);
	                            }
	                        }
	                        // The emitted block was updated, check for obsolete events
	                        if (this._emitted.block !== blockNumber) {
	                            this._emitted.block = blockNumber;
	                            Object.keys(this._emitted).forEach(function (key) {
	                                // The block event does not expire
	                                if (key === "block") {
	                                    return;
	                                }
	                                // The block we were at when we emitted this event
	                                var eventBlockNumber = _this._emitted[key];
	                                // We cannot garbage collect pending transactions or blocks here
	                                // They should be garbage collected by the Provider when setting
	                                // "pending" events
	                                if (eventBlockNumber === "pending") {
	                                    return;
	                                }
	                                // Evict any transaction hashes or block hashes over 12 blocks
	                                // old, since they should not return null anyways
	                                if (blockNumber - eventBlockNumber > 12) {
	                                    delete _this._emitted[key];
	                                }
	                            });
	                        }
	                        // First polling cycle
	                        if (this._lastBlockNumber === -2) {
	                            this._lastBlockNumber = blockNumber - 1;
	                        }
	                        // Find all transaction hashes we are waiting on
	                        this._events.forEach(function (event) {
	                            switch (event.type) {
	                                case "tx": {
	                                    var hash_2 = event.hash;
	                                    var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {
	                                        if (!receipt || receipt.blockNumber == null) {
	                                            return null;
	                                        }
	                                        _this._emitted["t:" + hash_2] = receipt.blockNumber;
	                                        _this.emit(hash_2, receipt);
	                                        return null;
	                                    }).catch(function (error) { _this.emit("error", error); });
	                                    runners.push(runner);
	                                    break;
	                                }
	                                case "filter": {
	                                    // We only allow a single getLogs to be in-flight at a time
	                                    if (!event._inflight) {
	                                        event._inflight = true;
	                                        // This is the first filter for this event, so we want to
	                                        // restrict events to events that happened no earlier than now
	                                        if (event._lastBlockNumber === -2) {
	                                            event._lastBlockNumber = blockNumber - 1;
	                                        }
	                                        // Filter from the last *known* event; due to load-balancing
	                                        // and some nodes returning updated block numbers before
	                                        // indexing events, a logs result with 0 entries cannot be
	                                        // trusted and we must retry a range which includes it again
	                                        var filter_1 = event.filter;
	                                        filter_1.fromBlock = event._lastBlockNumber + 1;
	                                        filter_1.toBlock = blockNumber;
	                                        // Prevent fitler ranges from growing too wild, since it is quite
	                                        // likely there just haven't been any events to move the lastBlockNumber.
	                                        var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;
	                                        if (minFromBlock > filter_1.fromBlock) {
	                                            filter_1.fromBlock = minFromBlock;
	                                        }
	                                        if (filter_1.fromBlock < 0) {
	                                            filter_1.fromBlock = 0;
	                                        }
	                                        var runner = _this.getLogs(filter_1).then(function (logs) {
	                                            // Allow the next getLogs
	                                            event._inflight = false;
	                                            if (logs.length === 0) {
	                                                return;
	                                            }
	                                            logs.forEach(function (log) {
	                                                // Only when we get an event for a given block number
	                                                // can we trust the events are indexed
	                                                if (log.blockNumber > event._lastBlockNumber) {
	                                                    event._lastBlockNumber = log.blockNumber;
	                                                }
	                                                // Make sure we stall requests to fetch blocks and txs
	                                                _this._emitted["b:" + log.blockHash] = log.blockNumber;
	                                                _this._emitted["t:" + log.transactionHash] = log.blockNumber;
	                                                _this.emit(filter_1, log);
	                                            });
	                                        }).catch(function (error) {
	                                            _this.emit("error", error);
	                                            // Allow another getLogs (the range was not updated)
	                                            event._inflight = false;
	                                        });
	                                        runners.push(runner);
	                                    }
	                                    break;
	                                }
	                            }
	                        });
	                        this._lastBlockNumber = blockNumber;
	                        // Once all events for this loop have been processed, emit "didPoll"
	                        Promise.all(runners).then(function () {
	                            _this.emit("didPoll", pollId);
	                        }).catch(function (error) { _this.emit("error", error); });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // Deprecated; do not use this
	    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
	        this._lastBlockNumber = blockNumber - 1;
	        if (this.polling) {
	            this.poll();
	        }
	    };
	    Object.defineProperty(BaseProvider.prototype, "network", {
	        get: function () {
	            return this._network;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // This method should query the network if the underlying network
	    // can change, such as when connected to a JSON-RPC backend
	    BaseProvider.prototype.detectNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, logger.throwError("provider does not support network detection", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                        operation: "provider.detectNetwork"
	                    })];
	            });
	        });
	    };
	    BaseProvider.prototype.getNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var network, currentNetwork, error;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._ready()];
	                    case 1:
	                        network = _a.sent();
	                        return [4 /*yield*/, this.detectNetwork()];
	                    case 2:
	                        currentNetwork = _a.sent();
	                        if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];
	                        if (!this.anyNetwork) return [3 /*break*/, 4];
	                        this._network = currentNetwork;
	                        // Reset all internal block number guards and caches
	                        this._lastBlockNumber = -2;
	                        this._fastBlockNumber = null;
	                        this._fastBlockNumberPromise = null;
	                        this._fastQueryDate = 0;
	                        this._emitted.block = -2;
	                        this._maxInternalBlockNumber = -1024;
	                        this._internalBlockNumber = null;
	                        // The "network" event MUST happen before this method resolves
	                        // so any events have a chance to unregister, so we stall an
	                        // additional event loop before returning from /this/ call
	                        this.emit("network", currentNetwork, network);
	                        return [4 /*yield*/, stall(0)];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/, this._network];
	                    case 4:
	                        error = logger.makeError("underlying network changed", lib.Logger.errors.NETWORK_ERROR, {
	                            event: "changed",
	                            network: network,
	                            detectedNetwork: currentNetwork
	                        });
	                        this.emit("error", error);
	                        throw error;
	                    case 5: return [2 /*return*/, network];
	                }
	            });
	        });
	    };
	    Object.defineProperty(BaseProvider.prototype, "blockNumber", {
	        get: function () {
	            var _this = this;
	            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
	                _this._setFastBlockNumber(blockNumber);
	            }, function (error) { });
	            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "polling", {
	        get: function () {
	            return (this._poller != null);
	        },
	        set: function (value) {
	            var _this = this;
	            if (value && !this._poller) {
	                this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);
	                if (!this._bootstrapPoll) {
	                    this._bootstrapPoll = setTimeout(function () {
	                        _this.poll();
	                        // We block additional polls until the polling interval
	                        // is done, to prevent overwhelming the poll function
	                        _this._bootstrapPoll = setTimeout(function () {
	                            // If polling was disabled, something may require a poke
	                            // since starting the bootstrap poll and it was disabled
	                            if (!_this._poller) {
	                                _this.poll();
	                            }
	                            // Clear out the bootstrap so we can do another
	                            _this._bootstrapPoll = null;
	                        }, _this.pollingInterval);
	                    }, 0);
	                }
	            }
	            else if (!value && this._poller) {
	                clearInterval(this._poller);
	                this._poller = null;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
	        get: function () {
	            return this._pollingInterval;
	        },
	        set: function (value) {
	            var _this = this;
	            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
	                throw new Error("invalid polling interval");
	            }
	            this._pollingInterval = value;
	            if (this._poller) {
	                clearInterval(this._poller);
	                this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BaseProvider.prototype._getFastBlockNumber = function () {
	        var _this = this;
	        var now = getTime();
	        // Stale block number, request a newer value
	        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
	            this._fastQueryDate = now;
	            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
	                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
	                    _this._fastBlockNumber = blockNumber;
	                }
	                return _this._fastBlockNumber;
	            });
	        }
	        return this._fastBlockNumberPromise;
	    };
	    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
	        // Older block, maybe a stale request
	        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
	            return;
	        }
	        // Update the time we updated the blocknumber
	        this._fastQueryDate = getTime();
	        // Newer block number, use  it
	        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
	            this._fastBlockNumber = blockNumber;
	            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
	        }
	    };
	    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];
	            });
	        });
	    };
	    BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {
	        return __awaiter(this, void 0, void 0, function () {
	            var receipt;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];
	                    case 1:
	                        receipt = _a.sent();
	                        // Receipt is already good
	                        if ((receipt ? receipt.confirmations : 0) >= confirmations) {
	                            return [2 /*return*/, receipt];
	                        }
	                        // Poll until the receipt is good...
	                        return [2 /*return*/, new Promise(function (resolve, reject) {
	                                var cancelFuncs = [];
	                                var done = false;
	                                var alreadyDone = function () {
	                                    if (done) {
	                                        return true;
	                                    }
	                                    done = true;
	                                    cancelFuncs.forEach(function (func) { func(); });
	                                    return false;
	                                };
	                                var minedHandler = function (receipt) {
	                                    if (receipt.confirmations < confirmations) {
	                                        return;
	                                    }
	                                    if (alreadyDone()) {
	                                        return;
	                                    }
	                                    resolve(receipt);
	                                };
	                                _this.on(transactionHash, minedHandler);
	                                cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });
	                                if (replaceable) {
	                                    var lastBlockNumber_1 = replaceable.startBlock;
	                                    var scannedBlock_1 = null;
	                                    var replaceHandler_1 = function (blockNumber) { return __awaiter(_this, void 0, void 0, function () {
	                                        var _this = this;
	                                        return __generator(this, function (_a) {
	                                            switch (_a.label) {
	                                                case 0:
	                                                    if (done) {
	                                                        return [2 /*return*/];
	                                                    }
	                                                    // Wait 1 second; this is only used in the case of a fault, so
	                                                    // we will trade off a little bit of latency for more consistent
	                                                    // results and fewer JSON-RPC calls
	                                                    return [4 /*yield*/, stall(1000)];
	                                                case 1:
	                                                    // Wait 1 second; this is only used in the case of a fault, so
	                                                    // we will trade off a little bit of latency for more consistent
	                                                    // results and fewer JSON-RPC calls
	                                                    _a.sent();
	                                                    this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter(_this, void 0, void 0, function () {
	                                                        var mined, block, ti, tx, receipt_1, reason;
	                                                        return __generator(this, function (_a) {
	                                                            switch (_a.label) {
	                                                                case 0:
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];
	                                                                    lastBlockNumber_1 = blockNumber;
	                                                                    return [3 /*break*/, 9];
	                                                                case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];
	                                                                case 2:
	                                                                    mined = _a.sent();
	                                                                    if (mined && mined.blockNumber != null) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    // First time scanning. We start a little earlier for some
	                                                                    // wiggle room here to handle the eventually consistent nature
	                                                                    // of blockchain (e.g. the getTransactionCount was for a
	                                                                    // different block)
	                                                                    if (scannedBlock_1 == null) {
	                                                                        scannedBlock_1 = lastBlockNumber_1 - 3;
	                                                                        if (scannedBlock_1 < replaceable.startBlock) {
	                                                                            scannedBlock_1 = replaceable.startBlock;
	                                                                        }
	                                                                    }
	                                                                    _a.label = 3;
	                                                                case 3:
	                                                                    if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];
	                                                                case 4:
	                                                                    block = _a.sent();
	                                                                    ti = 0;
	                                                                    _a.label = 5;
	                                                                case 5:
	                                                                    if (!(ti < block.transactions.length)) return [3 /*break*/, 8];
	                                                                    tx = block.transactions[ti];
	                                                                    // Successfully mined!
	                                                                    if (tx.hash === transactionHash) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];
	                                                                case 6:
	                                                                    receipt_1 = _a.sent();
	                                                                    // Already resolved or rejected (prolly a timeout)
	                                                                    if (alreadyDone()) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    reason = "replaced";
	                                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
	                                                                        reason = "repriced";
	                                                                    }
	                                                                    else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
	                                                                        reason = "cancelled";
	                                                                    }
	                                                                    // Explain why we were replaced
	                                                                    reject(logger.makeError("transaction was replaced", lib.Logger.errors.TRANSACTION_REPLACED, {
	                                                                        cancelled: (reason === "replaced" || reason === "cancelled"),
	                                                                        reason: reason,
	                                                                        replacement: this._wrapTransaction(tx),
	                                                                        hash: transactionHash,
	                                                                        receipt: receipt_1
	                                                                    }));
	                                                                    return [2 /*return*/];
	                                                                case 7:
	                                                                    ti++;
	                                                                    return [3 /*break*/, 5];
	                                                                case 8:
	                                                                    scannedBlock_1++;
	                                                                    return [3 /*break*/, 3];
	                                                                case 9:
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    this.once("block", replaceHandler_1);
	                                                                    return [2 /*return*/];
	                                                            }
	                                                        });
	                                                    }); }, function (error) {
	                                                        if (done) {
	                                                            return;
	                                                        }
	                                                        _this.once("block", replaceHandler_1);
	                                                    });
	                                                    return [2 /*return*/];
	                                            }
	                                        });
	                                    }); };
	                                    if (done) {
	                                        return;
	                                    }
	                                    _this.once("block", replaceHandler_1);
	                                    cancelFuncs.push(function () {
	                                        _this.removeListener("block", replaceHandler_1);
	                                    });
	                                }
	                                if (typeof (timeout) === "number" && timeout > 0) {
	                                    var timer_1 = setTimeout(function () {
	                                        if (alreadyDone()) {
	                                            return;
	                                        }
	                                        reject(logger.makeError("timeout exceeded", lib.Logger.errors.TIMEOUT, { timeout: timeout }));
	                                    }, timeout);
	                                    if (timer_1.unref) {
	                                        timer_1.unref();
	                                    }
	                                    cancelFuncs.push(function () { clearTimeout(timer_1); });
	                                }
	                            })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBlockNumber = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, this._getInternalBlockNumber(0)];
	            });
	        });
	    };
	    BaseProvider.prototype.getGasPrice = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.perform("getGasPrice", {})];
	                    case 2:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, lib$2.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "getGasPrice",
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getBalance", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, lib$2.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "getBalance",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getTransactionCount", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, lib$2.BigNumber.from(result).toNumber()];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "getTransactionCount",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getCode", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, (0, lib$1.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "getCode",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag),
	                                position: Promise.resolve(position).then(function (p) { return (0, lib$1.hexValue)(p); })
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getStorageAt", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, (0, lib$1.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "getStorageAt",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // This should be called by any subclass wrapping a TransactionResponse
	    BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {
	        var _this = this;
	        if (hash != null && (0, lib$1.hexDataLength)(hash) !== 32) {
	            throw new Error("invalid response - sendTransaction");
	        }
	        var result = tx;
	        // Check the hash we expect is the same as the hash the server reported
	        if (hash != null && tx.hash !== hash) {
	            logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", lib.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
	        }
	        result.wait = function (confirms, timeout) { return __awaiter(_this, void 0, void 0, function () {
	            var replacement, receipt;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (confirms == null) {
	                            confirms = 1;
	                        }
	                        if (timeout == null) {
	                            timeout = 0;
	                        }
	                        replacement = undefined;
	                        if (confirms !== 0 && startBlock != null) {
	                            replacement = {
	                                data: tx.data,
	                                from: tx.from,
	                                nonce: tx.nonce,
	                                to: tx.to,
	                                value: tx.value,
	                                startBlock: startBlock
	                            };
	                        }
	                        return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];
	                    case 1:
	                        receipt = _a.sent();
	                        if (receipt == null && confirms === 0) {
	                            return [2 /*return*/, null];
	                        }
	                        // No longer pending, allow the polling loop to garbage collect this
	                        this._emitted["t:" + tx.hash] = receipt.blockNumber;
	                        if (receipt.status === 0) {
	                            logger.throwError("transaction failed", lib.Logger.errors.CALL_EXCEPTION, {
	                                transactionHash: tx.hash,
	                                transaction: tx,
	                                receipt: receipt
	                            });
	                        }
	                        return [2 /*return*/, receipt];
	                }
	            });
	        }); };
	        return result;
	    };
	    BaseProvider.prototype.sendTransaction = function (signedTransaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var hexTx, tx, blockNumber, hash, error_7;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, lib$1.hexlify)(t); })];
	                    case 2:
	                        hexTx = _a.sent();
	                        tx = this.formatter.transaction(signedTransaction);
	                        if (tx.confirmations == null) {
	                            tx.confirmations = 0;
	                        }
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                    case 3:
	                        blockNumber = _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        _a.trys.push([4, 6, , 7]);
	                        return [4 /*yield*/, this.perform("sendTransaction", { signedTransaction: hexTx })];
	                    case 5:
	                        hash = _a.sent();
	                        return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];
	                    case 6:
	                        error_7 = _a.sent();
	                        error_7.transaction = tx;
	                        error_7.transactionHash = tx.hash;
	                        throw error_7;
	                    case 7: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getTransactionRequest = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var values, tx, _a, _b;
	            var _this = this;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, transaction];
	                    case 1:
	                        values = _c.sent();
	                        tx = {};
	                        ["from", "to"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });
	                        });
	                        ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? lib$2.BigNumber.from(v) : null); });
	                        });
	                        ["type"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });
	                        });
	                        if (values.accessList) {
	                            tx.accessList = this.formatter.accessList(values.accessList);
	                        }
	                        ["data"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, lib$1.hexlify)(v) : null); });
	                        });
	                        _b = (_a = this.formatter).transactionRequest;
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)(tx)];
	                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getFilter = function (filter) {
	        return __awaiter(this, void 0, void 0, function () {
	            var result, _a, _b;
	            var _this = this;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, filter];
	                    case 1:
	                        filter = _c.sent();
	                        result = {};
	                        if (filter.address != null) {
	                            result.address = this._getAddress(filter.address);
	                        }
	                        ["blockHash", "topics"].forEach(function (key) {
	                            if (filter[key] == null) {
	                                return;
	                            }
	                            result[key] = filter[key];
	                        });
	                        ["fromBlock", "toBlock"].forEach(function (key) {
	                            if (filter[key] == null) {
	                                return;
	                            }
	                            result[key] = _this._getBlockTag(filter[key]);
	                        });
	                        _b = (_a = this.formatter).filter;
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)(result)];
	                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._call = function (transaction, blockTag, attempt) {
	        return __awaiter(this, void 0, void 0, function () {
	            var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx, error_8;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (attempt >= MAX_CCIP_REDIRECTS) {
	                            logger.throwError("CCIP read exceeded maximum redirections", lib.Logger.errors.SERVER_ERROR, {
	                                redirects: attempt,
	                                transaction: transaction
	                            });
	                        }
	                        txSender = transaction.to;
	                        return [4 /*yield*/, this.perform("call", { transaction: transaction, blockTag: blockTag })];
	                    case 1:
	                        result = _a.sent();
	                        if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && ((0, lib$1.hexDataLength)(result) % 32 === 4))) return [3 /*break*/, 5];
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        data = (0, lib$1.hexDataSlice)(result, 4);
	                        sender = (0, lib$1.hexDataSlice)(data, 0, 32);
	                        if (!lib$2.BigNumber.from(sender).eq(txSender)) {
	                            logger.throwError("CCIP Read sender did not match", lib.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        urls = [];
	                        urlsOffset = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(data, 32, 64)).toNumber();
	                        urlsLength = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
	                        urlsData = (0, lib$1.hexDataSlice)(data, urlsOffset + 32);
	                        for (u = 0; u < urlsLength; u++) {
	                            url = _parseString(urlsData, u * 32);
	                            if (url == null) {
	                                logger.throwError("CCIP Read contained corrupt URL string", lib.Logger.errors.CALL_EXCEPTION, {
	                                    name: "OffchainLookup",
	                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                    transaction: transaction,
	                                    data: result
	                                });
	                            }
	                            urls.push(url);
	                        }
	                        calldata = _parseBytes(data, 64);
	                        // Get the callbackSelector (bytes4)
	                        if (!lib$2.BigNumber.from((0, lib$1.hexDataSlice)(data, 100, 128)).isZero()) {
	                            logger.throwError("CCIP Read callback selector included junk", lib.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        callbackSelector = (0, lib$1.hexDataSlice)(data, 96, 100);
	                        extraData = _parseBytes(data, 128);
	                        return [4 /*yield*/, this.ccipReadFetch(transaction, calldata, urls)];
	                    case 3:
	                        ccipResult = _a.sent();
	                        if (ccipResult == null) {
	                            logger.throwError("CCIP Read disabled or provided no URLs", lib.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        tx = {
	                            to: txSender,
	                            data: (0, lib$1.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])
	                        };
	                        return [2 /*return*/, this._call(tx, blockTag, attempt + 1)];
	                    case 4:
	                        error_8 = _a.sent();
	                        if (error_8.code === lib.Logger.errors.SERVER_ERROR) {
	                            throw error_8;
	                        }
	                        return [3 /*break*/, 5];
	                    case 5:
	                        try {
	                            return [2 /*return*/, (0, lib$1.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "call",
	                                    params: { transaction: transaction, blockTag: blockTag },
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.call = function (transaction, blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var resolved;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                transaction: this._getTransactionRequest(transaction),
	                                blockTag: this._getBlockTag(blockTag),
	                                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
	                            })];
	                    case 2:
	                        resolved = _a.sent();
	                        return [2 /*return*/, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.estimateGas = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({
	                                transaction: this._getTransactionRequest(transaction)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("estimateGas", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, lib$2.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger.throwError("bad result from backend", lib.Logger.errors.SERVER_ERROR, {
	                                    method: "estimateGas",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getAddress = function (addressOrName) {
	        return __awaiter(this, void 0, void 0, function () {
	            var address;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, addressOrName];
	                    case 1:
	                        addressOrName = _a.sent();
	                        if (typeof (addressOrName) !== "string") {
	                            logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
	                        }
	                        return [4 /*yield*/, this.resolveName(addressOrName)];
	                    case 2:
	                        address = _a.sent();
	                        if (address == null) {
	                            logger.throwError("ENS name not configured", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
	                            });
	                        }
	                        return [2 /*return*/, address];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {
	        return __awaiter(this, void 0, void 0, function () {
	            var blockNumber, params, _a, error_9;
	            var _this = this;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _b.sent();
	                        return [4 /*yield*/, blockHashOrBlockTag];
	                    case 2:
	                        blockHashOrBlockTag = _b.sent();
	                        blockNumber = -128;
	                        params = {
	                            includeTransactions: !!includeTransactions
	                        };
	                        if (!(0, lib$1.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];
	                        params.blockHash = blockHashOrBlockTag;
	                        return [3 /*break*/, 6];
	                    case 3:
	                        _b.trys.push([3, 5, , 6]);
	                        _a = params;
	                        return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];
	                    case 4:
	                        _a.blockTag = _b.sent();
	                        if ((0, lib$1.isHexString)(params.blockTag)) {
	                            blockNumber = parseInt(params.blockTag.substring(2), 16);
	                        }
	                        return [3 /*break*/, 6];
	                    case 5:
	                        error_9 = _b.sent();
	                        logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
	                        return [3 /*break*/, 6];
	                    case 6: return [2 /*return*/, (0, lib$s.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
	                            var block, blockNumber_1, i, tx, confirmations, blockWithTxs;
	                            var _this = this;
	                            return __generator(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0: return [4 /*yield*/, this.perform("getBlock", params)];
	                                    case 1:
	                                        block = _a.sent();
	                                        // Block was not found
	                                        if (block == null) {
	                                            // For blockhashes, if we didn't say it existed, that blockhash may
	                                            // not exist. If we did see it though, perhaps from a log, we know
	                                            // it exists, and this node is just not caught up yet.
	                                            if (params.blockHash != null) {
	                                                if (this._emitted["b:" + params.blockHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                            }
	                                            // For block tags, if we are asking for a future block, we return null
	                                            if (params.blockTag != null) {
	                                                if (blockNumber > this._emitted.block) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                            }
	                                            // Retry on the next block
	                                            return [2 /*return*/, undefined];
	                                        }
	                                        if (!includeTransactions) return [3 /*break*/, 8];
	                                        blockNumber_1 = null;
	                                        i = 0;
	                                        _a.label = 2;
	                                    case 2:
	                                        if (!(i < block.transactions.length)) return [3 /*break*/, 7];
	                                        tx = block.transactions[i];
	                                        if (!(tx.blockNumber == null)) return [3 /*break*/, 3];
	                                        tx.confirmations = 0;
	                                        return [3 /*break*/, 6];
	                                    case 3:
	                                        if (!(tx.confirmations == null)) return [3 /*break*/, 6];
	                                        if (!(blockNumber_1 == null)) return [3 /*break*/, 5];
	                                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                    case 4:
	                                        blockNumber_1 = _a.sent();
	                                        _a.label = 5;
	                                    case 5:
	                                        confirmations = (blockNumber_1 - tx.blockNumber) + 1;
	                                        if (confirmations <= 0) {
	                                            confirmations = 1;
	                                        }
	                                        tx.confirmations = confirmations;
	                                        _a.label = 6;
	                                    case 6:
	                                        i++;
	                                        return [3 /*break*/, 2];
	                                    case 7:
	                                        blockWithTxs = this.formatter.blockWithTransactions(block);
	                                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });
	                                        return [2 /*return*/, blockWithTxs];
	                                    case 8: return [2 /*return*/, this.formatter.block(block)];
	                                }
	                            });
	                        }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {
	        return (this._getBlock(blockHashOrBlockTag, false));
	    };
	    BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {
	        return (this._getBlock(blockHashOrBlockTag, true));
	    };
	    BaseProvider.prototype.getTransaction = function (transactionHash) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, transactionHash];
	                    case 2:
	                        transactionHash = _a.sent();
	                        params = { transactionHash: this.formatter.hash(transactionHash, true) };
	                        return [2 /*return*/, (0, lib$s.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
	                                var result, tx, blockNumber, confirmations;
	                                return __generator(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.perform("getTransaction", params)];
	                                        case 1:
	                                            result = _a.sent();
	                                            if (result == null) {
	                                                if (this._emitted["t:" + transactionHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            tx = this.formatter.transactionResponse(result);
	                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 2];
	                                            tx.confirmations = 0;
	                                            return [3 /*break*/, 4];
	                                        case 2:
	                                            if (!(tx.confirmations == null)) return [3 /*break*/, 4];
	                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                        case 3:
	                                            blockNumber = _a.sent();
	                                            confirmations = (blockNumber - tx.blockNumber) + 1;
	                                            if (confirmations <= 0) {
	                                                confirmations = 1;
	                                            }
	                                            tx.confirmations = confirmations;
	                                            _a.label = 4;
	                                        case 4: return [2 /*return*/, this._wrapTransaction(tx)];
	                                    }
	                                });
	                            }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, transactionHash];
	                    case 2:
	                        transactionHash = _a.sent();
	                        params = { transactionHash: this.formatter.hash(transactionHash, true) };
	                        return [2 /*return*/, (0, lib$s.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
	                                var result, receipt, blockNumber, confirmations;
	                                return __generator(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.perform("getTransactionReceipt", params)];
	                                        case 1:
	                                            result = _a.sent();
	                                            if (result == null) {
	                                                if (this._emitted["t:" + transactionHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            // "geth-etc" returns receipts before they are ready
	                                            if (result.blockHash == null) {
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            receipt = this.formatter.receipt(result);
	                                            if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];
	                                            receipt.confirmations = 0;
	                                            return [3 /*break*/, 4];
	                                        case 2:
	                                            if (!(receipt.confirmations == null)) return [3 /*break*/, 4];
	                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                        case 3:
	                                            blockNumber = _a.sent();
	                                            confirmations = (blockNumber - receipt.blockNumber) + 1;
	                                            if (confirmations <= 0) {
	                                                confirmations = 1;
	                                            }
	                                            receipt.confirmations = confirmations;
	                                            _a.label = 4;
	                                        case 4: return [2 /*return*/, receipt];
	                                    }
	                                });
	                            }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getLogs = function (filter) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, logs;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, lib$3.resolveProperties)({ filter: this._getFilter(filter) })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getLogs", params)];
	                    case 3:
	                        logs = _a.sent();
	                        logs.forEach(function (log) {
	                            if (log.removed == null) {
	                                log.removed = false;
	                            }
	                        });
	                        return [2 /*return*/, formatter.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getEtherPrice = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, this.perform("getEtherPrice", {})];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getBlockTag = function (blockTag) {
	        return __awaiter(this, void 0, void 0, function () {
	            var blockNumber;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, blockTag];
	                    case 1:
	                        blockTag = _a.sent();
	                        if (!(typeof (blockTag) === "number" && blockTag < 0)) return [3 /*break*/, 3];
	                        if (blockTag % 1) {
	                            logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
	                        }
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                    case 2:
	                        blockNumber = _a.sent();
	                        blockNumber += blockTag;
	                        if (blockNumber < 0) {
	                            blockNumber = 0;
	                        }
	                        return [2 /*return*/, this.formatter.blockTag(blockNumber)];
	                    case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getResolver = function (name) {
	        return __awaiter(this, void 0, void 0, function () {
	            var currentName, addr, resolver, _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        currentName = name;
	                        _b.label = 1;
	                    case 1:
	                        if (!true) return [3 /*break*/, 6];
	                        if (currentName === "" || currentName === ".") {
	                            return [2 /*return*/, null];
	                        }
	                        // Optimization since the eth node cannot change and does
	                        // not have a wildcard resolver
	                        if (name !== "eth" && currentName === "eth") {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this._getResolver(currentName, "getResolver")];
	                    case 2:
	                        addr = _b.sent();
	                        if (!(addr != null)) return [3 /*break*/, 5];
	                        resolver = new Resolver(this, addr, name);
	                        _a = currentName !== name;
	                        if (!_a) return [3 /*break*/, 4];
	                        return [4 /*yield*/, resolver.supportsWildcard()];
	                    case 3:
	                        _a = !(_b.sent());
	                        _b.label = 4;
	                    case 4:
	                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
	                        if (_a) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, resolver];
	                    case 5:
	                        // Get the parent node
	                        currentName = currentName.split(".").slice(1).join(".");
	                        return [3 /*break*/, 1];
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getResolver = function (name, operation) {
	        return __awaiter(this, void 0, void 0, function () {
	            var network, addrData, error_10;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (operation == null) {
	                            operation = "ENS";
	                        }
	                        return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        network = _a.sent();
	                        // No ENS...
	                        if (!network.ensAddress) {
	                            logger.throwError("network does not support ENS", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation, network: network.name });
	                        }
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.call({
	                                to: network.ensAddress,
	                                data: ("0x0178b8bf" + (0, lib$c.namehash)(name).substring(2))
	                            })];
	                    case 3:
	                        addrData = _a.sent();
	                        return [2 /*return*/, this.formatter.callAddress(addrData)];
	                    case 4:
	                        error_10 = _a.sent();
	                        return [3 /*break*/, 5];
	                    case 5: return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.resolveName = function (name) {
	        return __awaiter(this, void 0, void 0, function () {
	            var resolver;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, name];
	                    case 1:
	                        name = _a.sent();
	                        // If it is already an address, nothing to resolve
	                        try {
	                            return [2 /*return*/, Promise.resolve(this.formatter.address(name))];
	                        }
	                        catch (error) {
	                            // If is is a hexstring, the address is bad (See #694)
	                            if ((0, lib$1.isHexString)(name)) {
	                                throw error;
	                            }
	                        }
	                        if (typeof (name) !== "string") {
	                            logger.throwArgumentError("invalid ENS name", "name", name);
	                        }
	                        return [4 /*yield*/, this.getResolver(name)];
	                    case 2:
	                        resolver = _a.sent();
	                        if (!resolver) {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, resolver.getAddress()];
	                    case 3: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.lookupAddress = function (address) {
	        return __awaiter(this, void 0, void 0, function () {
	            var node, resolverAddr, name, _a, addr;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, address];
	                    case 1:
	                        address = _b.sent();
	                        address = this.formatter.address(address);
	                        node = address.substring(2).toLowerCase() + ".addr.reverse";
	                        return [4 /*yield*/, this._getResolver(node, "lookupAddress")];
	                    case 2:
	                        resolverAddr = _b.sent();
	                        if (resolverAddr == null) {
	                            return [2 /*return*/, null];
	                        }
	                        _a = _parseString;
	                        return [4 /*yield*/, this.call({
	                                to: resolverAddr,
	                                data: ("0x691f3431" + (0, lib$c.namehash)(node).substring(2))
	                            })];
	                    case 3:
	                        name = _a.apply(void 0, [_b.sent(), 0]);
	                        return [4 /*yield*/, this.resolveName(name)];
	                    case 4:
	                        addr = _b.sent();
	                        if (addr != address) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, name];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getAvatar = function (nameOrAddress) {
	        return __awaiter(this, void 0, void 0, function () {
	            var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        resolver = null;
	                        if (!(0, lib$1.isHexString)(nameOrAddress)) return [3 /*break*/, 10];
	                        address = this.formatter.address(nameOrAddress);
	                        node = address.substring(2).toLowerCase() + ".addr.reverse";
	                        return [4 /*yield*/, this._getResolver(node, "getAvatar")];
	                    case 1:
	                        resolverAddress = _b.sent();
	                        if (!resolverAddress) {
	                            return [2 /*return*/, null];
	                        }
	                        // Try resolving the avatar against the addr.reverse resolver
	                        resolver = new Resolver(this, resolverAddress, node);
	                        _b.label = 2;
	                    case 2:
	                        _b.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, resolver.getAvatar()];
	                    case 3:
	                        avatar_1 = _b.sent();
	                        if (avatar_1) {
	                            return [2 /*return*/, avatar_1.url];
	                        }
	                        return [3 /*break*/, 5];
	                    case 4:
	                        error_11 = _b.sent();
	                        if (error_11.code !== lib.Logger.errors.CALL_EXCEPTION) {
	                            throw error_11;
	                        }
	                        return [3 /*break*/, 5];
	                    case 5:
	                        _b.trys.push([5, 8, , 9]);
	                        _a = _parseString;
	                        return [4 /*yield*/, this.call({
	                                to: resolverAddress,
	                                data: ("0x691f3431" + (0, lib$c.namehash)(node).substring(2))
	                            })];
	                    case 6:
	                        name_1 = _a.apply(void 0, [_b.sent(), 0]);
	                        return [4 /*yield*/, this.getResolver(name_1)];
	                    case 7:
	                        resolver = _b.sent();
	                        return [3 /*break*/, 9];
	                    case 8:
	                        error_12 = _b.sent();
	                        if (error_12.code !== lib.Logger.errors.CALL_EXCEPTION) {
	                            throw error_12;
	                        }
	                        return [2 /*return*/, null];
	                    case 9: return [3 /*break*/, 12];
	                    case 10: return [4 /*yield*/, this.getResolver(nameOrAddress)];
	                    case 11:
	                        // ENS name; forward lookup with wildcard
	                        resolver = _b.sent();
	                        if (!resolver) {
	                            return [2 /*return*/, null];
	                        }
	                        _b.label = 12;
	                    case 12: return [4 /*yield*/, resolver.getAvatar()];
	                    case 13:
	                        avatar = _b.sent();
	                        if (avatar == null) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, avatar.url];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.perform = function (method, params) {
	        return logger.throwError(method + " not implemented", lib.Logger.errors.NOT_IMPLEMENTED, { operation: method });
	    };
	    BaseProvider.prototype._startEvent = function (event) {
	        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
	    };
	    BaseProvider.prototype._stopEvent = function (event) {
	        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
	    };
	    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
	        var event = new Event(getEventTag(eventName), listener, once);
	        this._events.push(event);
	        this._startEvent(event);
	        return this;
	    };
	    BaseProvider.prototype.on = function (eventName, listener) {
	        return this._addEventListener(eventName, listener, false);
	    };
	    BaseProvider.prototype.once = function (eventName, listener) {
	        return this._addEventListener(eventName, listener, true);
	    };
	    BaseProvider.prototype.emit = function (eventName) {
	        var _this = this;
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var result = false;
	        var stopped = [];
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag) {
	                return true;
	            }
	            setTimeout(function () {
	                event.listener.apply(_this, args);
	            }, 0);
	            result = true;
	            if (event.once) {
	                stopped.push(event);
	                return false;
	            }
	            return true;
	        });
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return result;
	    };
	    BaseProvider.prototype.listenerCount = function (eventName) {
	        if (!eventName) {
	            return this._events.length;
	        }
	        var eventTag = getEventTag(eventName);
	        return this._events.filter(function (event) {
	            return (event.tag === eventTag);
	        }).length;
	    };
	    BaseProvider.prototype.listeners = function (eventName) {
	        if (eventName == null) {
	            return this._events.map(function (event) { return event.listener; });
	        }
	        var eventTag = getEventTag(eventName);
	        return this._events
	            .filter(function (event) { return (event.tag === eventTag); })
	            .map(function (event) { return event.listener; });
	    };
	    BaseProvider.prototype.off = function (eventName, listener) {
	        var _this = this;
	        if (listener == null) {
	            return this.removeAllListeners(eventName);
	        }
	        var stopped = [];
	        var found = false;
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag || event.listener != listener) {
	                return true;
	            }
	            if (found) {
	                return true;
	            }
	            found = true;
	            stopped.push(event);
	            return false;
	        });
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return this;
	    };
	    BaseProvider.prototype.removeAllListeners = function (eventName) {
	        var _this = this;
	        var stopped = [];
	        if (eventName == null) {
	            stopped = this._events;
	            this._events = [];
	        }
	        else {
	            var eventTag_1 = getEventTag(eventName);
	            this._events = this._events.filter(function (event) {
	                if (event.tag !== eventTag_1) {
	                    return true;
	                }
	                stopped.push(event);
	                return false;
	            });
	        }
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return this;
	    };
	    return BaseProvider;
	}(lib$e.Provider));
	exports.BaseProvider = BaseProvider;

	});

	var baseProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(baseProvider);

	var jsonRpcProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JsonRpcProvider = exports.JsonRpcSigner = void 0;










	var logger = new lib.Logger(_version$I.version);

	var errorGas = ["call", "estimateGas"];
	function spelunk(value, requireData) {
	    if (value == null) {
	        return null;
	    }
	    // These *are* the droids we're looking for.
	    if (typeof (value.message) === "string" && value.message.match("reverted")) {
	        var data = (0, lib$1.isHexString)(value.data) ? value.data : null;
	        if (!requireData || data) {
	            return { message: value.message, data: data };
	        }
	    }
	    // Spelunk further...
	    if (typeof (value) === "object") {
	        for (var key in value) {
	            var result = spelunk(value[key], requireData);
	            if (result) {
	                return result;
	            }
	        }
	        return null;
	    }
	    // Might be a JSON string we can further descend...
	    if (typeof (value) === "string") {
	        try {
	            return spelunk(JSON.parse(value), requireData);
	        }
	        catch (error) { }
	    }
	    return null;
	}
	function checkError(method, error, params) {
	    var transaction = params.transaction || params.signedTransaction;
	    // Undo the "convenience" some nodes are attempting to prevent backwards
	    // incompatibility; maybe for v6 consider forwarding reverts as errors
	    if (method === "call") {
	        var result = spelunk(error, true);
	        if (result) {
	            return result.data;
	        }
	        // Nothing descriptive..
	        logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", lib.Logger.errors.CALL_EXCEPTION, {
	            data: "0x",
	            transaction: transaction,
	            error: error
	        });
	    }
	    if (method === "estimateGas") {
	        // Try to find something, with a preference on SERVER_ERROR body
	        var result = spelunk(error.body, false);
	        if (result == null) {
	            result = spelunk(error, false);
	        }
	        // Found "reverted", this is a CALL_EXCEPTION
	        if (result) {
	            logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	                reason: result.message,
	                method: method,
	                transaction: transaction,
	                error: error
	            });
	        }
	    }
	    // @TODO: Should we spelunk for message too?
	    var message = error.message;
	    if (error.code === lib.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
	        message = error.error.message;
	    }
	    else if (typeof (error.body) === "string") {
	        message = error.body;
	    }
	    else if (typeof (error.responseText) === "string") {
	        message = error.responseText;
	    }
	    message = (message || "").toLowerCase();
	    // "insufficient funds for gas * price + value + cost(data)"
	    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
	        logger.throwError("insufficient funds for intrinsic transaction cost", lib.Logger.errors.INSUFFICIENT_FUNDS, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "nonce too low"
	    if (message.match(/nonce (is )?too low/i)) {
	        logger.throwError("nonce has already been used", lib.Logger.errors.NONCE_EXPIRED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "replacement transaction underpriced"
	    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
	        logger.throwError("replacement fee too low", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "replacement transaction underpriced"
	    if (message.match(/only replay-protected/i)) {
	        logger.throwError("legacy pre-eip-155 transactions not supported", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
	        logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    throw error;
	}
	function timer(timeout) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, timeout);
	    });
	}
	function getResult(payload) {
	    if (payload.error) {
	        // @TODO: not any
	        var error = new Error(payload.error.message);
	        error.code = payload.error.code;
	        error.data = payload.error.data;
	        throw error;
	    }
	    return payload.result;
	}
	function getLowerCase(value) {
	    if (value) {
	        return value.toLowerCase();
	    }
	    return value;
	}
	var _constructorGuard = {};
	var JsonRpcSigner = /** @class */ (function (_super) {
	    __extends(JsonRpcSigner, _super);
	    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
	        var _this = _super.call(this) || this;
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
	        }
	        (0, lib$3.defineReadOnly)(_this, "provider", provider);
	        if (addressOrIndex == null) {
	            addressOrIndex = 0;
	        }
	        if (typeof (addressOrIndex) === "string") {
	            (0, lib$3.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
	            (0, lib$3.defineReadOnly)(_this, "_index", null);
	        }
	        else if (typeof (addressOrIndex) === "number") {
	            (0, lib$3.defineReadOnly)(_this, "_index", addressOrIndex);
	            (0, lib$3.defineReadOnly)(_this, "_address", null);
	        }
	        else {
	            logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
	        }
	        return _this;
	    }
	    JsonRpcSigner.prototype.connect = function (provider) {
	        return logger.throwError("cannot alter JSON-RPC Signer connection", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "connect"
	        });
	    };
	    JsonRpcSigner.prototype.connectUnchecked = function () {
	        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
	    };
	    JsonRpcSigner.prototype.getAddress = function () {
	        var _this = this;
	        if (this._address) {
	            return Promise.resolve(this._address);
	        }
	        return this.provider.send("eth_accounts", []).then(function (accounts) {
	            if (accounts.length <= _this._index) {
	                logger.throwError("unknown account #" + _this._index, lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "getAddress"
	                });
	            }
	            return _this.provider.formatter.address(accounts[_this._index]);
	        });
	    };
	    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
	        var _this = this;
	        transaction = (0, lib$3.shallowCopy)(transaction);
	        var fromAddress = this.getAddress().then(function (address) {
	            if (address) {
	                address = address.toLowerCase();
	            }
	            return address;
	        });
	        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
	        // wishes to use this, it is easy to specify explicitly, otherwise
	        // we look it up for them.
	        if (transaction.gasLimit == null) {
	            var estimate = (0, lib$3.shallowCopy)(transaction);
	            estimate.from = fromAddress;
	            transaction.gasLimit = this.provider.estimateGas(estimate);
	        }
	        if (transaction.to != null) {
	            transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {
	                var address;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (to == null) {
	                                return [2 /*return*/, null];
	                            }
	                            return [4 /*yield*/, this.provider.resolveName(to)];
	                        case 1:
	                            address = _a.sent();
	                            if (address == null) {
	                                logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
	                            }
	                            return [2 /*return*/, address];
	                    }
	                });
	            }); });
	        }
	        return (0, lib$3.resolveProperties)({
	            tx: (0, lib$3.resolveProperties)(transaction),
	            sender: fromAddress
	        }).then(function (_a) {
	            var tx = _a.tx, sender = _a.sender;
	            if (tx.from != null) {
	                if (tx.from.toLowerCase() !== sender) {
	                    logger.throwArgumentError("from address mismatch", "transaction", transaction);
	                }
	            }
	            else {
	                tx.from = sender;
	            }
	            var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
	            return _this.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
	                return hash;
	            }, function (error) {
	                if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
	                    logger.throwError("user rejected transaction", lib.Logger.errors.ACTION_REJECTED, {
	                        action: "sendTransaction",
	                        transaction: tx
	                    });
	                }
	                return checkError("sendTransaction", error, hexTx);
	            });
	        });
	    };
	    JsonRpcSigner.prototype.signTransaction = function (transaction) {
	        return logger.throwError("signing transactions is unsupported", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "signTransaction"
	        });
	    };
	    JsonRpcSigner.prototype.sendTransaction = function (transaction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var blockNumber, hash, error_1;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
	                    case 1:
	                        blockNumber = _a.sent();
	                        return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];
	                    case 2:
	                        hash = _a.sent();
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, (0, lib$s.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
	                                var tx;
	                                return __generator(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];
	                                        case 1:
	                                            tx = _a.sent();
	                                            if (tx === null) {
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];
	                                    }
	                                });
	                            }); }, { oncePoll: this.provider })];
	                    case 4: 
	                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
	                    // for a response, and we need the actual transaction, so we poll
	                    // for it; it should show up very quickly
	                    return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_1 = _a.sent();
	                        error_1.transactionHash = hash;
	                        throw error_1;
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype.signMessage = function (message) {
	        return __awaiter(this, void 0, void 0, function () {
	            var data, address, error_2;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        data = ((typeof (message) === "string") ? (0, lib$8.toUtf8Bytes)(message) : message);
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.send("personal_sign", [(0, lib$1.hexlify)(data), address.toLowerCase()])];
	                    case 3: return [2 /*return*/, _a.sent()];
	                    case 4:
	                        error_2 = _a.sent();
	                        if (typeof (error_2.message) === "string" && error_2.message.match(/user denied/i)) {
	                            logger.throwError("user rejected signing", lib.Logger.errors.ACTION_REJECTED, {
	                                action: "signMessage",
	                                from: address,
	                                messageData: message
	                            });
	                        }
	                        throw error_2;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype._legacySignMessage = function (message) {
	        return __awaiter(this, void 0, void 0, function () {
	            var data, address, error_3;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        data = ((typeof (message) === "string") ? (0, lib$8.toUtf8Bytes)(message) : message);
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.send("eth_sign", [address.toLowerCase(), (0, lib$1.hexlify)(data)])];
	                    case 3: 
	                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
	                    return [2 /*return*/, _a.sent()];
	                    case 4:
	                        error_3 = _a.sent();
	                        if (typeof (error_3.message) === "string" && error_3.message.match(/user denied/i)) {
	                            logger.throwError("user rejected signing", lib.Logger.errors.ACTION_REJECTED, {
	                                action: "_legacySignMessage",
	                                from: address,
	                                messageData: message
	                            });
	                        }
	                        throw error_3;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {
	        return __awaiter(this, void 0, void 0, function () {
	            var populated, address, error_4;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, lib$c._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
	                            return _this.provider.resolveName(name);
	                        })];
	                    case 1:
	                        populated = _a.sent();
	                        return [4 /*yield*/, this.getAddress()];
	                    case 2:
	                        address = _a.sent();
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, this.provider.send("eth_signTypedData_v4", [
	                                address.toLowerCase(),
	                                JSON.stringify(lib$c._TypedDataEncoder.getPayload(populated.domain, types, populated.value))
	                            ])];
	                    case 4: return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_4 = _a.sent();
	                        if (typeof (error_4.message) === "string" && error_4.message.match(/user denied/i)) {
	                            logger.throwError("user rejected signing", lib.Logger.errors.ACTION_REJECTED, {
	                                action: "_signTypedData",
	                                from: address,
	                                messageData: { domain: populated.domain, types: types, value: populated.value }
	                            });
	                        }
	                        throw error_4;
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype.unlock = function (password) {
	        return __awaiter(this, void 0, void 0, function () {
	            var provider, address;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        provider = this.provider;
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        return [2 /*return*/, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
	                }
	            });
	        });
	    };
	    return JsonRpcSigner;
	}(lib$f.Signer));
	exports.JsonRpcSigner = JsonRpcSigner;
	var UncheckedJsonRpcSigner = /** @class */ (function (_super) {
	    __extends(UncheckedJsonRpcSigner, _super);
	    function UncheckedJsonRpcSigner() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {
	        var _this = this;
	        return this.sendUncheckedTransaction(transaction).then(function (hash) {
	            return {
	                hash: hash,
	                nonce: null,
	                gasLimit: null,
	                gasPrice: null,
	                data: null,
	                value: null,
	                chainId: null,
	                confirmations: 0,
	                from: null,
	                wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }
	            };
	        });
	    };
	    return UncheckedJsonRpcSigner;
	}(JsonRpcSigner));
	var allowedTransactionKeys = {
	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
	    type: true, accessList: true,
	    maxFeePerGas: true, maxPriorityFeePerGas: true
	};
	var JsonRpcProvider = /** @class */ (function (_super) {
	    __extends(JsonRpcProvider, _super);
	    function JsonRpcProvider(url, network) {
	        var _this = this;
	        var networkOrReady = network;
	        // The network is unknown, query the JSON-RPC for it
	        if (networkOrReady == null) {
	            networkOrReady = new Promise(function (resolve, reject) {
	                setTimeout(function () {
	                    _this.detectNetwork().then(function (network) {
	                        resolve(network);
	                    }, function (error) {
	                        reject(error);
	                    });
	                }, 0);
	            });
	        }
	        _this = _super.call(this, networkOrReady) || this;
	        // Default URL
	        if (!url) {
	            url = (0, lib$3.getStatic)(_this.constructor, "defaultUrl")();
	        }
	        if (typeof (url) === "string") {
	            (0, lib$3.defineReadOnly)(_this, "connection", Object.freeze({
	                url: url
	            }));
	        }
	        else {
	            (0, lib$3.defineReadOnly)(_this, "connection", Object.freeze((0, lib$3.shallowCopy)(url)));
	        }
	        _this._nextId = 42;
	        return _this;
	    }
	    Object.defineProperty(JsonRpcProvider.prototype, "_cache", {
	        get: function () {
	            if (this._eventLoopCache == null) {
	                this._eventLoopCache = {};
	            }
	            return this._eventLoopCache;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    JsonRpcProvider.defaultUrl = function () {
	        return "http:/\/localhost:8545";
	    };
	    JsonRpcProvider.prototype.detectNetwork = function () {
	        var _this = this;
	        if (!this._cache["detectNetwork"]) {
	            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
	            // Clear this cache at the beginning of the next event loop
	            setTimeout(function () {
	                _this._cache["detectNetwork"] = null;
	            }, 0);
	        }
	        return this._cache["detectNetwork"];
	    };
	    JsonRpcProvider.prototype._uncachedDetectNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var chainId, error_5, error_6, getNetwork;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, timer(0)];
	                    case 1:
	                        _a.sent();
	                        chainId = null;
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 9]);
	                        return [4 /*yield*/, this.send("eth_chainId", [])];
	                    case 3:
	                        chainId = _a.sent();
	                        return [3 /*break*/, 9];
	                    case 4:
	                        error_5 = _a.sent();
	                        _a.label = 5;
	                    case 5:
	                        _a.trys.push([5, 7, , 8]);
	                        return [4 /*yield*/, this.send("net_version", [])];
	                    case 6:
	                        chainId = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 7:
	                        error_6 = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 8: return [3 /*break*/, 9];
	                    case 9:
	                        if (chainId != null) {
	                            getNetwork = (0, lib$3.getStatic)(this.constructor, "getNetwork");
	                            try {
	                                return [2 /*return*/, getNetwork(lib$2.BigNumber.from(chainId).toNumber())];
	                            }
	                            catch (error) {
	                                return [2 /*return*/, logger.throwError("could not detect network", lib.Logger.errors.NETWORK_ERROR, {
	                                        chainId: chainId,
	                                        event: "invalidNetwork",
	                                        serverError: error
	                                    })];
	                            }
	                        }
	                        return [2 /*return*/, logger.throwError("could not detect network", lib.Logger.errors.NETWORK_ERROR, {
	                                event: "noNetwork"
	                            })];
	                }
	            });
	        });
	    };
	    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
	        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
	    };
	    JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {
	        return this.getSigner(addressOrIndex).connectUnchecked();
	    };
	    JsonRpcProvider.prototype.listAccounts = function () {
	        var _this = this;
	        return this.send("eth_accounts", []).then(function (accounts) {
	            return accounts.map(function (a) { return _this.formatter.address(a); });
	        });
	    };
	    JsonRpcProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (this._nextId++),
	            jsonrpc: "2.0"
	        };
	        this.emit("debug", {
	            action: "request",
	            request: (0, lib$3.deepCopy)(request),
	            provider: this
	        });
	        // We can expand this in the future to any call, but for now these
	        // are the biggest wins and do not require any serializing parameters.
	        var cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
	        if (cache && this._cache[method]) {
	            return this._cache[method];
	        }
	        var result = (0, lib$s.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function (result) {
	            _this.emit("debug", {
	                action: "response",
	                request: request,
	                response: result,
	                provider: _this
	            });
	            return result;
	        }, function (error) {
	            _this.emit("debug", {
	                action: "response",
	                error: error,
	                request: request,
	                provider: _this
	            });
	            throw error;
	        });
	        // Cache the fetch, but clear it on the next event loop
	        if (cache) {
	            this._cache[method] = result;
	            setTimeout(function () {
	                _this._cache[method] = null;
	            }, 0);
	        }
	        return result;
	    };
	    JsonRpcProvider.prototype.prepareRequest = function (method, params) {
	        switch (method) {
	            case "getBlockNumber":
	                return ["eth_blockNumber", []];
	            case "getGasPrice":
	                return ["eth_gasPrice", []];
	            case "getBalance":
	                return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
	            case "getTransactionCount":
	                return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
	            case "getCode":
	                return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
	            case "getStorageAt":
	                return ["eth_getStorageAt", [getLowerCase(params.address), (0, lib$1.hexZeroPad)(params.position, 32), params.blockTag]];
	            case "sendTransaction":
	                return ["eth_sendRawTransaction", [params.signedTransaction]];
	            case "getBlock":
	                if (params.blockTag) {
	                    return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
	                }
	                else if (params.blockHash) {
	                    return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
	                }
	                return null;
	            case "getTransaction":
	                return ["eth_getTransactionByHash", [params.transactionHash]];
	            case "getTransactionReceipt":
	                return ["eth_getTransactionReceipt", [params.transactionHash]];
	            case "call": {
	                var hexlifyTransaction = (0, lib$3.getStatic)(this.constructor, "hexlifyTransaction");
	                return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
	            }
	            case "estimateGas": {
	                var hexlifyTransaction = (0, lib$3.getStatic)(this.constructor, "hexlifyTransaction");
	                return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
	            }
	            case "getLogs":
	                if (params.filter && params.filter.address != null) {
	                    params.filter.address = getLowerCase(params.filter.address);
	                }
	                return ["eth_getLogs", [params.filter]];
	            default:
	                break;
	        }
	        return null;
	    };
	    JsonRpcProvider.prototype.perform = function (method, params) {
	        return __awaiter(this, void 0, void 0, function () {
	            var tx, feeData, args, error_7;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "call" || method === "estimateGas")) return [3 /*break*/, 2];
	                        tx = params.transaction;
	                        if (!(tx && tx.type != null && lib$2.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];
	                        if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.getFeeData()];
	                    case 1:
	                        feeData = _a.sent();
	                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
	                            // Network doesn't know about EIP-1559 (and hence type)
	                            params = (0, lib$3.shallowCopy)(params);
	                            params.transaction = (0, lib$3.shallowCopy)(tx);
	                            delete params.transaction.type;
	                        }
	                        _a.label = 2;
	                    case 2:
	                        args = this.prepareRequest(method, params);
	                        if (args == null) {
	                            logger.throwError(method + " not implemented", lib.Logger.errors.NOT_IMPLEMENTED, { operation: method });
	                        }
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, this.send(args[0], args[1])];
	                    case 4: return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_7 = _a.sent();
	                        return [2 /*return*/, checkError(method, error_7, params)];
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcProvider.prototype._startEvent = function (event) {
	        if (event.tag === "pending") {
	            this._startPending();
	        }
	        _super.prototype._startEvent.call(this, event);
	    };
	    JsonRpcProvider.prototype._startPending = function () {
	        if (this._pendingFilter != null) {
	            return;
	        }
	        var self = this;
	        var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
	        this._pendingFilter = pendingFilter;
	        pendingFilter.then(function (filterId) {
	            function poll() {
	                self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
	                    if (self._pendingFilter != pendingFilter) {
	                        return null;
	                    }
	                    var seq = Promise.resolve();
	                    hashes.forEach(function (hash) {
	                        // @TODO: This should be garbage collected at some point... How? When?
	                        self._emitted["t:" + hash.toLowerCase()] = "pending";
	                        seq = seq.then(function () {
	                            return self.getTransaction(hash).then(function (tx) {
	                                self.emit("pending", tx);
	                                return null;
	                            });
	                        });
	                    });
	                    return seq.then(function () {
	                        return timer(1000);
	                    });
	                }).then(function () {
	                    if (self._pendingFilter != pendingFilter) {
	                        self.send("eth_uninstallFilter", [filterId]);
	                        return;
	                    }
	                    setTimeout(function () { poll(); }, 0);
	                    return null;
	                }).catch(function (error) { });
	            }
	            poll();
	            return filterId;
	        }).catch(function (error) { });
	    };
	    JsonRpcProvider.prototype._stopEvent = function (event) {
	        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
	            this._pendingFilter = null;
	        }
	        _super.prototype._stopEvent.call(this, event);
	    };
	    // Convert an ethers.js transaction into a JSON-RPC transaction
	    //  - gasLimit => gas
	    //  - All values hexlified
	    //  - All numeric values zero-striped
	    //  - All addresses are lowercased
	    // NOTE: This allows a TransactionRequest, but all values should be resolved
	    //       before this is called
	    // @TODO: This will likely be removed in future versions and prepareRequest
	    //        will be the preferred method for this.
	    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
	        // Check only allowed properties are given
	        var allowed = (0, lib$3.shallowCopy)(allowedTransactionKeys);
	        if (allowExtra) {
	            for (var key in allowExtra) {
	                if (allowExtra[key]) {
	                    allowed[key] = true;
	                }
	            }
	        }
	        (0, lib$3.checkProperties)(transaction, allowed);
	        var result = {};
	        // JSON-RPC now requires numeric values to be "quantity" values
	        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            var value = (0, lib$1.hexValue)(lib$2.BigNumber.from(transaction[key]));
	            if (key === "gasLimit") {
	                key = "gas";
	            }
	            result[key] = value;
	        });
	        ["from", "to", "data"].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            result[key] = (0, lib$1.hexlify)(transaction[key]);
	        });
	        if (transaction.accessList) {
	            result["accessList"] = (0, lib$h.accessListify)(transaction.accessList);
	        }
	        return result;
	    };
	    return JsonRpcProvider;
	}(baseProvider.BaseProvider));
	exports.JsonRpcProvider = JsonRpcProvider;

	});

	var jsonRpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(jsonRpcProvider);

	var browserWs = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocket = void 0;


	var WS = null;
	exports.WebSocket = WS;
	try {
	    exports.WebSocket = WS = WebSocket;
	    if (WS == null) {
	        throw new Error("inject please");
	    }
	}
	catch (error) {
	    var logger_2 = new lib.Logger(_version$I.version);
	    exports.WebSocket = WS = function () {
	        logger_2.throwError("WebSockets not supported in this environment", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "new WebSocket()"
	        });
	    };
	}

	});

	var browserWs$1 = /*@__PURE__*/getDefaultExportFromCjs(browserWs);

	var websocketProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketProvider = void 0;






	var logger = new lib.Logger(_version$I.version);
	/**
	 *  Notes:
	 *
	 *  This provider differs a bit from the polling providers. One main
	 *  difference is how it handles consistency. The polling providers
	 *  will stall responses to ensure a consistent state, while this
	 *  WebSocket provider assumes the connected backend will manage this.
	 *
	 *  For example, if a polling provider emits an event which indicates
	 *  the event occurred in blockhash XXX, a call to fetch that block by
	 *  its hash XXX, if not present will retry until it is present. This
	 *  can occur when querying a pool of nodes that are mildly out of sync
	 *  with each other.
	 */
	var NextId = 1;
	// For more info about the Real-time Event API see:
	//   https://geth.ethereum.org/docs/rpc/pubsub
	var WebSocketProvider = /** @class */ (function (_super) {
	    __extends(WebSocketProvider, _super);
	    function WebSocketProvider(url, network) {
	        var _this = this;
	        // This will be added in the future; please open an issue to expedite
	        if (network === "any") {
	            logger.throwError("WebSocketProvider does not support 'any' network yet", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "network:any"
	            });
	        }
	        if (typeof (url) === "string") {
	            _this = _super.call(this, url, network) || this;
	        }
	        else {
	            _this = _super.call(this, "_websocket", network) || this;
	        }
	        _this._pollingInterval = -1;
	        _this._wsReady = false;
	        if (typeof (url) === "string") {
	            (0, lib$3.defineReadOnly)(_this, "_websocket", new browserWs.WebSocket(_this.connection.url));
	        }
	        else {
	            (0, lib$3.defineReadOnly)(_this, "_websocket", url);
	        }
	        (0, lib$3.defineReadOnly)(_this, "_requests", {});
	        (0, lib$3.defineReadOnly)(_this, "_subs", {});
	        (0, lib$3.defineReadOnly)(_this, "_subIds", {});
	        (0, lib$3.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
	        // Stall sending requests until the socket is open...
	        _this.websocket.onopen = function () {
	            _this._wsReady = true;
	            Object.keys(_this._requests).forEach(function (id) {
	                _this.websocket.send(_this._requests[id].payload);
	            });
	        };
	        _this.websocket.onmessage = function (messageEvent) {
	            var data = messageEvent.data;
	            var result = JSON.parse(data);
	            if (result.id != null) {
	                var id = String(result.id);
	                var request = _this._requests[id];
	                delete _this._requests[id];
	                if (result.result !== undefined) {
	                    request.callback(null, result.result);
	                    _this.emit("debug", {
	                        action: "response",
	                        request: JSON.parse(request.payload),
	                        response: result.result,
	                        provider: _this
	                    });
	                }
	                else {
	                    var error = null;
	                    if (result.error) {
	                        error = new Error(result.error.message || "unknown error");
	                        (0, lib$3.defineReadOnly)(error, "code", result.error.code || null);
	                        (0, lib$3.defineReadOnly)(error, "response", data);
	                    }
	                    else {
	                        error = new Error("unknown error");
	                    }
	                    request.callback(error, undefined);
	                    _this.emit("debug", {
	                        action: "response",
	                        error: error,
	                        request: JSON.parse(request.payload),
	                        provider: _this
	                    });
	                }
	            }
	            else if (result.method === "eth_subscription") {
	                // Subscription...
	                var sub = _this._subs[result.params.subscription];
	                if (sub) {
	                    //this.emit.apply(this,                  );
	                    sub.processFunc(result.params.result);
	                }
	            }
	            else {
	                console.warn("this should not happen");
	            }
	        };
	        // This Provider does not actually poll, but we want to trigger
	        // poll events for things that depend on them (like stalling for
	        // block and transaction lookups)
	        var fauxPoll = setInterval(function () {
	            _this.emit("poll");
	        }, 1000);
	        if (fauxPoll.unref) {
	            fauxPoll.unref();
	        }
	        return _this;
	    }
	    Object.defineProperty(WebSocketProvider.prototype, "websocket", {
	        // Cannot narrow the type of _websocket, as that is not backwards compatible
	        // so we add a getter and let the WebSocket be a public API.
	        get: function () { return this._websocket; },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.detectNetwork = function () {
	        return this._detectNetwork;
	    };
	    Object.defineProperty(WebSocketProvider.prototype, "pollingInterval", {
	        get: function () {
	            return 0;
	        },
	        set: function (value) {
	            logger.throwError("cannot set polling interval on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setPollingInterval"
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {
	        logger.throwError("cannot reset events block on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "resetEventBlock"
	        });
	    };
	    WebSocketProvider.prototype.poll = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, null];
	            });
	        });
	    };
	    Object.defineProperty(WebSocketProvider.prototype, "polling", {
	        set: function (value) {
	            if (!value) {
	                return;
	            }
	            logger.throwError("cannot set polling on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setPolling"
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var rid = NextId++;
	        return new Promise(function (resolve, reject) {
	            function callback(error, result) {
	                if (error) {
	                    return reject(error);
	                }
	                return resolve(result);
	            }
	            var payload = JSON.stringify({
	                method: method,
	                params: params,
	                id: rid,
	                jsonrpc: "2.0"
	            });
	            _this.emit("debug", {
	                action: "request",
	                request: JSON.parse(payload),
	                provider: _this
	            });
	            _this._requests[String(rid)] = { callback: callback, payload: payload };
	            if (_this._wsReady) {
	                _this.websocket.send(payload);
	            }
	        });
	    };
	    WebSocketProvider.defaultUrl = function () {
	        return "ws:/\/localhost:8546";
	    };
	    WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {
	        return __awaiter(this, void 0, void 0, function () {
	            var subIdPromise, subId;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        subIdPromise = this._subIds[tag];
	                        if (subIdPromise == null) {
	                            subIdPromise = Promise.all(param).then(function (param) {
	                                return _this.send("eth_subscribe", param);
	                            });
	                            this._subIds[tag] = subIdPromise;
	                        }
	                        return [4 /*yield*/, subIdPromise];
	                    case 1:
	                        subId = _a.sent();
	                        this._subs[subId] = { tag: tag, processFunc: processFunc };
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    WebSocketProvider.prototype._startEvent = function (event) {
	        var _this = this;
	        switch (event.type) {
	            case "block":
	                this._subscribe("block", ["newHeads"], function (result) {
	                    var blockNumber = lib$2.BigNumber.from(result.number).toNumber();
	                    _this._emitted.block = blockNumber;
	                    _this.emit("block", blockNumber);
	                });
	                break;
	            case "pending":
	                this._subscribe("pending", ["newPendingTransactions"], function (result) {
	                    _this.emit("pending", result);
	                });
	                break;
	            case "filter":
	                this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
	                    if (result.removed == null) {
	                        result.removed = false;
	                    }
	                    _this.emit(event.filter, _this.formatter.filterLog(result));
	                });
	                break;
	            case "tx": {
	                var emitReceipt_1 = function (event) {
	                    var hash = event.hash;
	                    _this.getTransactionReceipt(hash).then(function (receipt) {
	                        if (!receipt) {
	                            return;
	                        }
	                        _this.emit(hash, receipt);
	                    });
	                };
	                // In case it is already mined
	                emitReceipt_1(event);
	                // To keep things simple, we start up a single newHeads subscription
	                // to keep an eye out for transactions we are watching for.
	                // Starting a subscription for an event (i.e. "tx") that is already
	                // running is (basically) a nop.
	                this._subscribe("tx", ["newHeads"], function (result) {
	                    _this._events.filter(function (e) { return (e.type === "tx"); }).forEach(emitReceipt_1);
	                });
	                break;
	            }
	            // Nothing is needed
	            case "debug":
	            case "poll":
	            case "willPoll":
	            case "didPoll":
	            case "error":
	                break;
	            default:
	                console.log("unhandled:", event);
	                break;
	        }
	    };
	    WebSocketProvider.prototype._stopEvent = function (event) {
	        var _this = this;
	        var tag = event.tag;
	        if (event.type === "tx") {
	            // There are remaining transaction event listeners
	            if (this._events.filter(function (e) { return (e.type === "tx"); }).length) {
	                return;
	            }
	            tag = "tx";
	        }
	        else if (this.listenerCount(event.event)) {
	            // There are remaining event listeners
	            return;
	        }
	        var subId = this._subIds[tag];
	        if (!subId) {
	            return;
	        }
	        delete this._subIds[tag];
	        subId.then(function (subId) {
	            if (!_this._subs[subId]) {
	                return;
	            }
	            delete _this._subs[subId];
	            _this.send("eth_unsubscribe", [subId]);
	        });
	    };
	    WebSocketProvider.prototype.destroy = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(this.websocket.readyState === browserWs.WebSocket.CONNECTING)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, (new Promise(function (resolve) {
	                                _this.websocket.onopen = function () {
	                                    resolve(true);
	                                };
	                                _this.websocket.onerror = function () {
	                                    resolve(false);
	                                };
	                            }))];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        // Hangup
	                        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
	                        this.websocket.close(1000);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return WebSocketProvider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.WebSocketProvider = WebSocketProvider;

	});

	var websocketProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(websocketProvider);

	var urlJsonRpcProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;



	var logger = new lib.Logger(_version$I.version);

	// A StaticJsonRpcProvider is useful when you *know* for certain that
	// the backend will never change, as it never calls eth_chainId to
	// verify its backend. However, if the backend does change, the effects
	// are undefined and may include:
	// - inconsistent results
	// - locking up the UI
	// - block skew warnings
	// - wrong results
	// If the network is not explicit (i.e. auto-detection is expected), the
	// node MUST be running and available to respond to requests BEFORE this
	// is instantiated.
	var StaticJsonRpcProvider = /** @class */ (function (_super) {
	    __extends(StaticJsonRpcProvider, _super);
	    function StaticJsonRpcProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    StaticJsonRpcProvider.prototype.detectNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var network;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        network = this.network;
	                        if (!(network == null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];
	                    case 1:
	                        network = _a.sent();
	                        if (!network) {
	                            logger.throwError("no network detected", lib.Logger.errors.UNKNOWN_ERROR, {});
	                        }
	                        // If still not set, set it
	                        if (this._network == null) {
	                            // A static network does not support "any"
	                            (0, lib$3.defineReadOnly)(this, "_network", network);
	                            this.emit("network", network, null);
	                        }
	                        _a.label = 2;
	                    case 2: return [2 /*return*/, network];
	                }
	            });
	        });
	    };
	    return StaticJsonRpcProvider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.StaticJsonRpcProvider = StaticJsonRpcProvider;
	var UrlJsonRpcProvider = /** @class */ (function (_super) {
	    __extends(UrlJsonRpcProvider, _super);
	    function UrlJsonRpcProvider(network, apiKey) {
	        var _newTarget = this.constructor;
	        var _this = this;
	        logger.checkAbstract(_newTarget, UrlJsonRpcProvider);
	        // Normalize the Network and API Key
	        network = (0, lib$3.getStatic)(_newTarget, "getNetwork")(network);
	        apiKey = (0, lib$3.getStatic)(_newTarget, "getApiKey")(apiKey);
	        var connection = (0, lib$3.getStatic)(_newTarget, "getUrl")(network, apiKey);
	        _this = _super.call(this, connection, network) || this;
	        if (typeof (apiKey) === "string") {
	            (0, lib$3.defineReadOnly)(_this, "apiKey", apiKey);
	        }
	        else if (apiKey != null) {
	            Object.keys(apiKey).forEach(function (key) {
	                (0, lib$3.defineReadOnly)(_this, key, apiKey[key]);
	            });
	        }
	        return _this;
	    }
	    UrlJsonRpcProvider.prototype._startPending = function () {
	        logger.warn("WARNING: API provider does not support pending filters");
	    };
	    UrlJsonRpcProvider.prototype.isCommunityResource = function () {
	        return false;
	    };
	    UrlJsonRpcProvider.prototype.getSigner = function (address) {
	        return logger.throwError("API provider does not support signing", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
	    };
	    UrlJsonRpcProvider.prototype.listAccounts = function () {
	        return Promise.resolve([]);
	    };
	    // Return a defaultApiKey if null, otherwise validate the API key
	    UrlJsonRpcProvider.getApiKey = function (apiKey) {
	        return apiKey;
	    };
	    // Returns the url or connection for the given network and API key. The
	    // API key will have been sanitized by the getApiKey first, so any validation
	    // or transformations can be done there.
	    UrlJsonRpcProvider.getUrl = function (network, apiKey) {
	        return logger.throwError("not implemented; sub-classes must override getUrl", lib.Logger.errors.NOT_IMPLEMENTED, {
	            operation: "getUrl"
	        });
	    };
	    return UrlJsonRpcProvider;
	}(StaticJsonRpcProvider));
	exports.UrlJsonRpcProvider = UrlJsonRpcProvider;

	});

	var urlJsonRpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(urlJsonRpcProvider);

	var alchemyProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AlchemyProvider = exports.AlchemyWebSocketProvider = void 0;





	var logger = new lib.Logger(_version$I.version);

	// This key was provided to ethers.js by Alchemy to be used by the
	// default provider, but it is recommended that for your own
	// production environments, that you acquire your own API key at:
	//   https://dashboard.alchemyapi.io
	var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
	var AlchemyWebSocketProvider = /** @class */ (function (_super) {
	    __extends(AlchemyWebSocketProvider, _super);
	    function AlchemyWebSocketProvider(network, apiKey) {
	        var _this = this;
	        var provider = new AlchemyProvider(network, apiKey);
	        var url = provider.connection.url.replace(/^http/i, "ws")
	            .replace(".alchemyapi.", ".ws.alchemyapi.");
	        _this = _super.call(this, url, provider.network) || this;
	        (0, lib$3.defineReadOnly)(_this, "apiKey", provider.apiKey);
	        return _this;
	    }
	    AlchemyWebSocketProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey);
	    };
	    return AlchemyWebSocketProvider;
	}(websocketProvider.WebSocketProvider));
	exports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
	var AlchemyProvider = /** @class */ (function (_super) {
	    __extends(AlchemyProvider, _super);
	    function AlchemyProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AlchemyProvider.getWebSocketProvider = function (network, apiKey) {
	        return new AlchemyWebSocketProvider(network, apiKey);
	    };
	    AlchemyProvider.getApiKey = function (apiKey) {
	        if (apiKey == null) {
	            return defaultApiKey;
	        }
	        if (apiKey && typeof (apiKey) !== "string") {
	            logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
	        }
	        return apiKey;
	    };
	    AlchemyProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "eth-mainnet.alchemyapi.io/v2/";
	                break;
	            case "goerli":
	                host = "eth-goerli.g.alchemy.com/v2/";
	                break;
	            case "sepolia":
	                host = "eth-sepolia.g.alchemy.com/v2/";
	                break;
	            case "matic":
	                host = "polygon-mainnet.g.alchemy.com/v2/";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai.g.alchemy.com/v2/";
	                break;
	            case "arbitrum":
	                host = "arb-mainnet.g.alchemy.com/v2/";
	                break;
	            case "arbitrum-goerli":
	                host = "arb-goerli.g.alchemy.com/v2/";
	                break;
	            case "arbitrum-sepolia":
	                host = "arb-sepolia.g.alchemy.com/v2/";
	                break;
	            case "optimism":
	                host = "opt-mainnet.g.alchemy.com/v2/";
	                break;
	            case "optimism-goerli":
	                host = "opt-goerli.g.alchemy.com/v2/";
	                break;
	            case "optimism-sepolia":
	                host = "opt-sepolia.g.alchemy.com/v2/";
	                break;
	            default:
	                logger.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return {
	            allowGzip: true,
	            url: ("https:/" + "/" + host + apiKey),
	            throttleCallback: function (attempt, url) {
	                if (apiKey === defaultApiKey) {
	                    (0, formatter.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	    };
	    AlchemyProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey);
	    };
	    return AlchemyProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.AlchemyProvider = AlchemyProvider;

	});

	var alchemyProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(alchemyProvider);

	var ankrProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AnkrProvider = void 0;




	var logger = new lib.Logger(_version$I.version);
	var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
	function getHost(name) {
	    switch (name) {
	        case "homestead":
	            return "rpc.ankr.com/eth/";
	        case "ropsten":
	            return "rpc.ankr.com/eth_ropsten/";
	        case "rinkeby":
	            return "rpc.ankr.com/eth_rinkeby/";
	        case "goerli":
	            return "rpc.ankr.com/eth_goerli/";
	        case "sepolia":
	            return "rpc.ankr.com/eth_sepolia/";
	        case "matic":
	            return "rpc.ankr.com/polygon/";
	        case "maticmum":
	            return "rpc.ankr.com/polygon_mumbai/";
	        case "optimism":
	            return "rpc.ankr.com/optimism/";
	        case "optimism-goerli":
	            return "rpc.ankr.com/optimism_testnet/";
	        case "optimism-sepolia":
	            return "rpc.ankr.com/optimism_sepolia/";
	        case "arbitrum":
	            return "rpc.ankr.com/arbitrum/";
	    }
	    return logger.throwArgumentError("unsupported network", "name", name);
	}
	var AnkrProvider = /** @class */ (function (_super) {
	    __extends(AnkrProvider, _super);
	    function AnkrProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnkrProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey);
	    };
	    AnkrProvider.getApiKey = function (apiKey) {
	        if (apiKey == null) {
	            return defaultApiKey;
	        }
	        return apiKey;
	    };
	    AnkrProvider.getUrl = function (network, apiKey) {
	        if (apiKey == null) {
	            apiKey = defaultApiKey;
	        }
	        var connection = {
	            allowGzip: true,
	            url: ("https:/\/" + getHost(network.name) + apiKey),
	            throttleCallback: function (attempt, url) {
	                if (apiKey.apiKey === defaultApiKey) {
	                    (0, formatter.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	        if (apiKey.projectSecret != null) {
	            connection.user = "";
	            connection.password = apiKey.projectSecret;
	        }
	        return connection;
	    };
	    return AnkrProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.AnkrProvider = AnkrProvider;

	});

	var ankrProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(ankrProvider);

	var cloudflareProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloudflareProvider = void 0;



	var logger = new lib.Logger(_version$I.version);
	var CloudflareProvider = /** @class */ (function (_super) {
	    __extends(CloudflareProvider, _super);
	    function CloudflareProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CloudflareProvider.getApiKey = function (apiKey) {
	        if (apiKey != null) {
	            logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
	        }
	        return null;
	    };
	    CloudflareProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "https://cloudflare-eth.com/";
	                break;
	            default:
	                logger.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return host;
	    };
	    CloudflareProvider.prototype.perform = function (method, params) {
	        return __awaiter(this, void 0, void 0, function () {
	            var block;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "getBlockNumber")) return [3 /*break*/, 2];
	                        return [4 /*yield*/, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
	                    case 1:
	                        block = _a.sent();
	                        return [2 /*return*/, block.number];
	                    case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
	                }
	            });
	        });
	    };
	    return CloudflareProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.CloudflareProvider = CloudflareProvider;

	});

	var cloudflareProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(cloudflareProvider);

	var etherscanProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EtherscanProvider = void 0;







	var logger = new lib.Logger(_version$I.version);

	// The transaction has already been sanitized by the calls in Provider
	function getTransactionPostData(transaction) {
	    var result = {};
	    for (var key in transaction) {
	        if (transaction[key] == null) {
	            continue;
	        }
	        var value = transaction[key];
	        if (key === "type" && value === 0) {
	            continue;
	        }
	        // Quantity-types require no leading zero, unless 0
	        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
	            value = (0, lib$1.hexValue)((0, lib$1.hexlify)(value));
	        }
	        else if (key === "accessList") {
	            value = "[" + (0, lib$h.accessListify)(value).map(function (set) {
	                return "{address:\"" + set.address + "\",storageKeys:[\"" + set.storageKeys.join('","') + "\"]}";
	            }).join(",") + "]";
	        }
	        else {
	            value = (0, lib$1.hexlify)(value);
	        }
	        result[key] = value;
	    }
	    return result;
	}
	function getResult(result) {
	    // getLogs, getHistory have weird success responses
	    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
	        return result.result;
	    }
	    if (result.status != 1 || typeof (result.message) !== "string" || !result.message.match(/^OK/)) {
	        var error = new Error("invalid response");
	        error.result = JSON.stringify(result);
	        if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
	            error.throttleRetry = true;
	        }
	        throw error;
	    }
	    return result.result;
	}
	function getJsonResult(result) {
	    // This response indicates we are being throttled
	    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
	        var error = new Error("throttled response");
	        error.result = JSON.stringify(result);
	        error.throttleRetry = true;
	        throw error;
	    }
	    if (result.jsonrpc != "2.0") {
	        // @TODO: not any
	        var error = new Error("invalid response");
	        error.result = JSON.stringify(result);
	        throw error;
	    }
	    if (result.error) {
	        // @TODO: not any
	        var error = new Error(result.error.message || "unknown error");
	        if (result.error.code) {
	            error.code = result.error.code;
	        }
	        if (result.error.data) {
	            error.data = result.error.data;
	        }
	        throw error;
	    }
	    return result.result;
	}
	// The blockTag was normalized as a string by the Provider pre-perform operations
	function checkLogTag(blockTag) {
	    if (blockTag === "pending") {
	        throw new Error("pending not supported");
	    }
	    if (blockTag === "latest") {
	        return blockTag;
	    }
	    return parseInt(blockTag.substring(2), 16);
	}
	function checkError(method, error, transaction) {
	    // Undo the "convenience" some nodes are attempting to prevent backwards
	    // incompatibility; maybe for v6 consider forwarding reverts as errors
	    if (method === "call" && error.code === lib.Logger.errors.SERVER_ERROR) {
	        var e = error.error;
	        // Etherscan keeps changing their string
	        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
	            // Etherscan prefixes the data like "Reverted 0x1234"
	            var data = e.data;
	            if (data) {
	                data = "0x" + data.replace(/^.*0x/i, "");
	            }
	            if ((0, lib$1.isHexString)(data)) {
	                return data;
	            }
	            logger.throwError("missing revert data in call exception", lib.Logger.errors.CALL_EXCEPTION, {
	                error: error,
	                data: "0x"
	            });
	        }
	    }
	    // Get the message from any nested error structure
	    var message = error.message;
	    if (error.code === lib.Logger.errors.SERVER_ERROR) {
	        if (error.error && typeof (error.error.message) === "string") {
	            message = error.error.message;
	        }
	        else if (typeof (error.body) === "string") {
	            message = error.body;
	        }
	        else if (typeof (error.responseText) === "string") {
	            message = error.responseText;
	        }
	    }
	    message = (message || "").toLowerCase();
	    // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
	    if (message.match(/insufficient funds/)) {
	        logger.throwError("insufficient funds for intrinsic transaction cost", lib.Logger.errors.INSUFFICIENT_FUNDS, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "Transaction with the same hash was already imported."
	    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
	        logger.throwError("nonce has already been used", lib.Logger.errors.NONCE_EXPIRED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
	    if (message.match(/another transaction with same nonce/)) {
	        logger.throwError("replacement fee too low", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    if (message.match(/execution failed due to an exception|execution reverted/)) {
	        logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    throw error;
	}
	var EtherscanProvider = /** @class */ (function (_super) {
	    __extends(EtherscanProvider, _super);
	    function EtherscanProvider(network, apiKey) {
	        var _this = _super.call(this, network) || this;
	        (0, lib$3.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
	        (0, lib$3.defineReadOnly)(_this, "apiKey", apiKey || null);
	        return _this;
	    }
	    EtherscanProvider.prototype.getBaseUrl = function () {
	        switch (this.network ? this.network.name : "invalid") {
	            case "homestead":
	                return "https:/\/api.etherscan.io";
	            case "goerli":
	                return "https:/\/api-goerli.etherscan.io";
	            case "sepolia":
	                return "https:/\/api-sepolia.etherscan.io";
	            case "matic":
	                return "https:/\/api.polygonscan.com";
	            case "maticmum":
	                return "https:/\/api-testnet.polygonscan.com";
	            case "arbitrum":
	                return "https:/\/api.arbiscan.io";
	            case "arbitrum-goerli":
	                return "https:/\/api-goerli.arbiscan.io";
	            case "optimism":
	                return "https:/\/api-optimistic.etherscan.io";
	            case "optimism-goerli":
	                return "https:/\/api-goerli-optimistic.etherscan.io";
	            default:
	        }
	        return logger.throwArgumentError("unsupported network", "network", this.network.name);
	    };
	    EtherscanProvider.prototype.getUrl = function (module, params) {
	        var query = Object.keys(params).reduce(function (accum, key) {
	            var value = params[key];
	            if (value != null) {
	                accum += "&" + key + "=" + value;
	            }
	            return accum;
	        }, "");
	        var apiKey = ((this.apiKey) ? "&apikey=" + this.apiKey : "");
	        return this.baseUrl + "/api?module=" + module + query + apiKey;
	    };
	    EtherscanProvider.prototype.getPostUrl = function () {
	        return this.baseUrl + "/api";
	    };
	    EtherscanProvider.prototype.getPostData = function (module, params) {
	        params.module = module;
	        params.apikey = this.apiKey;
	        return params;
	    };
	    EtherscanProvider.prototype.fetch = function (module, params, post) {
	        return __awaiter(this, void 0, void 0, function () {
	            var url, payload, procFunc, connection, payloadStr, result;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        url = (post ? this.getPostUrl() : this.getUrl(module, params));
	                        payload = (post ? this.getPostData(module, params) : null);
	                        procFunc = (module === "proxy") ? getJsonResult : getResult;
	                        this.emit("debug", {
	                            action: "request",
	                            request: url,
	                            provider: this
	                        });
	                        connection = {
	                            url: url,
	                            throttleSlotInterval: 1000,
	                            throttleCallback: function (attempt, url) {
	                                if (_this.isCommunityResource()) {
	                                    (0, formatter.showThrottleMessage)();
	                                }
	                                return Promise.resolve(true);
	                            }
	                        };
	                        payloadStr = null;
	                        if (payload) {
	                            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
	                            payloadStr = Object.keys(payload).map(function (key) {
	                                return key + "=" + payload[key];
	                            }).join("&");
	                        }
	                        return [4 /*yield*/, (0, lib$s.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
	                    case 1:
	                        result = _a.sent();
	                        this.emit("debug", {
	                            action: "response",
	                            request: url,
	                            response: (0, lib$3.deepCopy)(result),
	                            provider: this
	                        });
	                        return [2 /*return*/, result];
	                }
	            });
	        });
	    };
	    EtherscanProvider.prototype.detectNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, this.network];
	            });
	        });
	    };
	    EtherscanProvider.prototype.perform = function (method, params) {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        _a = method;
	                        switch (_a) {
	                            case "getBlockNumber": return [3 /*break*/, 1];
	                            case "getGasPrice": return [3 /*break*/, 2];
	                            case "getBalance": return [3 /*break*/, 3];
	                            case "getTransactionCount": return [3 /*break*/, 4];
	                            case "getCode": return [3 /*break*/, 5];
	                            case "getStorageAt": return [3 /*break*/, 6];
	                            case "sendTransaction": return [3 /*break*/, 7];
	                            case "getBlock": return [3 /*break*/, 8];
	                            case "getTransaction": return [3 /*break*/, 9];
	                            case "getTransactionReceipt": return [3 /*break*/, 10];
	                            case "call": return [3 /*break*/, 11];
	                            case "estimateGas": return [3 /*break*/, 15];
	                            case "getLogs": return [3 /*break*/, 19];
	                            case "getEtherPrice": return [3 /*break*/, 26];
	                        }
	                        return [3 /*break*/, 28];
	                    case 1: return [2 /*return*/, this.fetch("proxy", { action: "eth_blockNumber" })];
	                    case 2: return [2 /*return*/, this.fetch("proxy", { action: "eth_gasPrice" })];
	                    case 3: 
	                    // Returns base-10 result
	                    return [2 /*return*/, this.fetch("account", {
	                            action: "balance",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 4: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionCount",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 5: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getCode",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 6: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getStorageAt",
	                            address: params.address,
	                            position: params.position,
	                            tag: params.blockTag
	                        })];
	                    case 7: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_sendRawTransaction",
	                            hex: params.signedTransaction
	                        }, true).catch(function (error) {
	                            return checkError("sendTransaction", error, params.signedTransaction);
	                        })];
	                    case 8:
	                        if (params.blockTag) {
	                            return [2 /*return*/, this.fetch("proxy", {
	                                    action: "eth_getBlockByNumber",
	                                    tag: params.blockTag,
	                                    boolean: (params.includeTransactions ? "true" : "false")
	                                })];
	                        }
	                        throw new Error("getBlock by blockHash not implemented");
	                    case 9: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionByHash",
	                            txhash: params.transactionHash
	                        })];
	                    case 10: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionReceipt",
	                            txhash: params.transactionHash
	                        })];
	                    case 11:
	                        if (params.blockTag !== "latest") {
	                            throw new Error("EtherscanProvider does not support blockTag for call");
	                        }
	                        postData = getTransactionPostData(params.transaction);
	                        postData.module = "proxy";
	                        postData.action = "eth_call";
	                        _c.label = 12;
	                    case 12:
	                        _c.trys.push([12, 14, , 15]);
	                        return [4 /*yield*/, this.fetch("proxy", postData, true)];
	                    case 13: return [2 /*return*/, _c.sent()];
	                    case 14:
	                        error_1 = _c.sent();
	                        return [2 /*return*/, checkError("call", error_1, params.transaction)];
	                    case 15:
	                        postData = getTransactionPostData(params.transaction);
	                        postData.module = "proxy";
	                        postData.action = "eth_estimateGas";
	                        _c.label = 16;
	                    case 16:
	                        _c.trys.push([16, 18, , 19]);
	                        return [4 /*yield*/, this.fetch("proxy", postData, true)];
	                    case 17: return [2 /*return*/, _c.sent()];
	                    case 18:
	                        error_2 = _c.sent();
	                        return [2 /*return*/, checkError("estimateGas", error_2, params.transaction)];
	                    case 19:
	                        args = { action: "getLogs" };
	                        if (params.filter.fromBlock) {
	                            args.fromBlock = checkLogTag(params.filter.fromBlock);
	                        }
	                        if (params.filter.toBlock) {
	                            args.toBlock = checkLogTag(params.filter.toBlock);
	                        }
	                        if (params.filter.address) {
	                            args.address = params.filter.address;
	                        }
	                        // @TODO: We can handle slightly more complicated logs using the logs API
	                        if (params.filter.topics && params.filter.topics.length > 0) {
	                            if (params.filter.topics.length > 1) {
	                                logger.throwError("unsupported topic count", lib.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
	                            }
	                            if (params.filter.topics.length === 1) {
	                                topic0 = params.filter.topics[0];
	                                if (typeof (topic0) !== "string" || topic0.length !== 66) {
	                                    logger.throwError("unsupported topic format", lib.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
	                                }
	                                args.topic0 = topic0;
	                            }
	                        }
	                        return [4 /*yield*/, this.fetch("logs", args)];
	                    case 20:
	                        logs = _c.sent();
	                        blocks = {};
	                        i = 0;
	                        _c.label = 21;
	                    case 21:
	                        if (!(i < logs.length)) return [3 /*break*/, 25];
	                        log = logs[i];
	                        if (log.blockHash != null) {
	                            return [3 /*break*/, 24];
	                        }
	                        if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];
	                        return [4 /*yield*/, this.getBlock(log.blockNumber)];
	                    case 22:
	                        block = _c.sent();
	                        if (block) {
	                            blocks[log.blockNumber] = block.hash;
	                        }
	                        _c.label = 23;
	                    case 23:
	                        log.blockHash = blocks[log.blockNumber];
	                        _c.label = 24;
	                    case 24:
	                        i++;
	                        return [3 /*break*/, 21];
	                    case 25: return [2 /*return*/, logs];
	                    case 26:
	                        if (this.network.name !== "homestead") {
	                            return [2 /*return*/, 0.0];
	                        }
	                        _b = parseFloat;
	                        return [4 /*yield*/, this.fetch("stats", { action: "ethprice" })];
	                    case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];
	                    case 28: return [3 /*break*/, 29];
	                    case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
	                }
	            });
	        });
	    };
	    // Note: The `page` page parameter only allows pagination within the
	    //       10,000 window available without a page and offset parameter
	    //       Error: Result window is too large, PageNo x Offset size must
	    //              be less than or equal to 10000
	    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
	        return __awaiter(this, void 0, void 0, function () {
	            var params, result;
	            var _a;
	            var _this = this;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _a = {
	                            action: "txlist"
	                        };
	                        return [4 /*yield*/, this.resolveName(addressOrName)];
	                    case 1:
	                        params = (_a.address = (_b.sent()),
	                            _a.startblock = ((startBlock == null) ? 0 : startBlock),
	                            _a.endblock = ((endBlock == null) ? 99999999 : endBlock),
	                            _a.sort = "asc",
	                            _a);
	                        return [4 /*yield*/, this.fetch("account", params)];
	                    case 2:
	                        result = _b.sent();
	                        return [2 /*return*/, result.map(function (tx) {
	                                ["contractAddress", "to"].forEach(function (key) {
	                                    if (tx[key] == "") {
	                                        delete tx[key];
	                                    }
	                                });
	                                if (tx.creates == null && tx.contractAddress != null) {
	                                    tx.creates = tx.contractAddress;
	                                }
	                                var item = _this.formatter.transactionResponse(tx);
	                                if (tx.timeStamp) {
	                                    item.timestamp = parseInt(tx.timeStamp);
	                                }
	                                return item;
	                            })];
	                }
	            });
	        });
	    };
	    EtherscanProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey == null);
	    };
	    return EtherscanProvider;
	}(baseProvider.BaseProvider));
	exports.EtherscanProvider = EtherscanProvider;

	});

	var etherscanProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(etherscanProvider);

	var fallbackProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FallbackProvider = void 0;










	var logger = new lib.Logger(_version$I.version);
	function now() { return (new Date()).getTime(); }
	// Returns to network as long as all agree, or null if any is null.
	// Throws an error if any two networks do not match.
	function checkNetworks(networks) {
	    var result = null;
	    for (var i = 0; i < networks.length; i++) {
	        var network = networks[i];
	        // Null! We do not know our network; bail.
	        if (network == null) {
	            return null;
	        }
	        if (result) {
	            // Make sure the network matches the previous networks
	            if (!(result.name === network.name && result.chainId === network.chainId &&
	                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
	                logger.throwArgumentError("provider mismatch", "networks", networks);
	            }
	        }
	        else {
	            result = network;
	        }
	    }
	    return result;
	}
	function median(values, maxDelta) {
	    values = values.slice().sort();
	    var middle = Math.floor(values.length / 2);
	    // Odd length; take the middle
	    if (values.length % 2) {
	        return values[middle];
	    }
	    // Even length; take the average of the two middle
	    var a = values[middle - 1], b = values[middle];
	    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
	        return null;
	    }
	    return (a + b) / 2;
	}
	function serialize(value) {
	    if (value === null) {
	        return "null";
	    }
	    else if (typeof (value) === "number" || typeof (value) === "boolean") {
	        return JSON.stringify(value);
	    }
	    else if (typeof (value) === "string") {
	        return value;
	    }
	    else if (lib$2.BigNumber.isBigNumber(value)) {
	        return value.toString();
	    }
	    else if (Array.isArray(value)) {
	        return JSON.stringify(value.map(function (i) { return serialize(i); }));
	    }
	    else if (typeof (value) === "object") {
	        var keys = Object.keys(value);
	        keys.sort();
	        return "{" + keys.map(function (key) {
	            var v = value[key];
	            if (typeof (v) === "function") {
	                v = "[function]";
	            }
	            else {
	                v = serialize(v);
	            }
	            return JSON.stringify(key) + ":" + v;
	        }).join(",") + "}";
	    }
	    throw new Error("unknown value type: " + typeof (value));
	}
	// Next request ID to use for emitting debug info
	var nextRid = 1;
	;
	function stall(duration) {
	    var cancel = null;
	    var timer = null;
	    var promise = (new Promise(function (resolve) {
	        cancel = function () {
	            if (timer) {
	                clearTimeout(timer);
	                timer = null;
	            }
	            resolve();
	        };
	        timer = setTimeout(cancel, duration);
	    }));
	    var wait = function (func) {
	        promise = promise.then(func);
	        return promise;
	    };
	    function getPromise() {
	        return promise;
	    }
	    return { cancel: cancel, getPromise: getPromise, wait: wait };
	}
	var ForwardErrors = [
	    lib.Logger.errors.CALL_EXCEPTION,
	    lib.Logger.errors.INSUFFICIENT_FUNDS,
	    lib.Logger.errors.NONCE_EXPIRED,
	    lib.Logger.errors.REPLACEMENT_UNDERPRICED,
	    lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT
	];
	var ForwardProperties = [
	    "address",
	    "args",
	    "errorArgs",
	    "errorSignature",
	    "method",
	    "transaction",
	];
	;
	function exposeDebugConfig(config, now) {
	    var result = {
	        weight: config.weight
	    };
	    Object.defineProperty(result, "provider", { get: function () { return config.provider; } });
	    if (config.start) {
	        result.start = config.start;
	    }
	    if (now) {
	        result.duration = (now - config.start);
	    }
	    if (config.done) {
	        if (config.error) {
	            result.error = config.error;
	        }
	        else {
	            result.result = config.result || null;
	        }
	    }
	    return result;
	}
	function normalizedTally(normalize, quorum) {
	    return function (configs) {
	        // Count the votes for each result
	        var tally = {};
	        configs.forEach(function (c) {
	            var value = normalize(c.result);
	            if (!tally[value]) {
	                tally[value] = { count: 0, result: c.result };
	            }
	            tally[value].count++;
	        });
	        // Check for a quorum on any given result
	        var keys = Object.keys(tally);
	        for (var i = 0; i < keys.length; i++) {
	            var check = tally[keys[i]];
	            if (check.count >= quorum) {
	                return check.result;
	            }
	        }
	        // No quroum
	        return undefined;
	    };
	}
	function getProcessFunc(provider, method, params) {
	    var normalize = serialize;
	    switch (method) {
	        case "getBlockNumber":
	            // Return the median value, unless there is (median + 1) is also
	            // present, in which case that is probably true and the median
	            // is going to be stale soon. In the event of a malicious node,
	            // the lie will be true soon enough.
	            return function (configs) {
	                var values = configs.map(function (c) { return c.result; });
	                // Get the median block number
	                var blockNumber = median(configs.map(function (c) { return c.result; }), 2);
	                if (blockNumber == null) {
	                    return undefined;
	                }
	                blockNumber = Math.ceil(blockNumber);
	                // If the next block height is present, its prolly safe to use
	                if (values.indexOf(blockNumber + 1) >= 0) {
	                    blockNumber++;
	                }
	                // Don't ever roll back the blockNumber
	                if (blockNumber >= provider._highestBlockNumber) {
	                    provider._highestBlockNumber = blockNumber;
	                }
	                return provider._highestBlockNumber;
	            };
	        case "getGasPrice":
	            // Return the middle (round index up) value, similar to median
	            // but do not average even entries and choose the higher.
	            // Malicious actors must compromise 50% of the nodes to lie.
	            return function (configs) {
	                var values = configs.map(function (c) { return c.result; });
	                values.sort();
	                return values[Math.floor(values.length / 2)];
	            };
	        case "getEtherPrice":
	            // Returns the median price. Malicious actors must compromise at
	            // least 50% of the nodes to lie (in a meaningful way).
	            return function (configs) {
	                return median(configs.map(function (c) { return c.result; }));
	            };
	        // No additional normalizing required; serialize is enough
	        case "getBalance":
	        case "getTransactionCount":
	        case "getCode":
	        case "getStorageAt":
	        case "call":
	        case "estimateGas":
	        case "getLogs":
	            break;
	        // We drop the confirmations from transactions as it is approximate
	        case "getTransaction":
	        case "getTransactionReceipt":
	            normalize = function (tx) {
	                if (tx == null) {
	                    return null;
	                }
	                tx = (0, lib$3.shallowCopy)(tx);
	                tx.confirmations = -1;
	                return serialize(tx);
	            };
	            break;
	        // We drop the confirmations from transactions as it is approximate
	        case "getBlock":
	            // We drop the confirmations from transactions as it is approximate
	            if (params.includeTransactions) {
	                normalize = function (block) {
	                    if (block == null) {
	                        return null;
	                    }
	                    block = (0, lib$3.shallowCopy)(block);
	                    block.transactions = block.transactions.map(function (tx) {
	                        tx = (0, lib$3.shallowCopy)(tx);
	                        tx.confirmations = -1;
	                        return tx;
	                    });
	                    return serialize(block);
	                };
	            }
	            else {
	                normalize = function (block) {
	                    if (block == null) {
	                        return null;
	                    }
	                    return serialize(block);
	                };
	            }
	            break;
	        default:
	            throw new Error("unknown method: " + method);
	    }
	    // Return the result if and only if the expected quorum is
	    // satisfied and agreed upon for the final result.
	    return normalizedTally(normalize, provider.quorum);
	}
	// If we are doing a blockTag query, we need to make sure the backend is
	// caught up to the FallbackProvider, before sending a request to it.
	function waitForSync(config, blockNumber) {
	    return __awaiter(this, void 0, void 0, function () {
	        var provider;
	        return __generator(this, function (_a) {
	            provider = (config.provider);
	            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
	                return [2 /*return*/, provider];
	            }
	            return [2 /*return*/, (0, lib$s.poll)(function () {
	                    return new Promise(function (resolve, reject) {
	                        setTimeout(function () {
	                            // We are synced
	                            if (provider.blockNumber >= blockNumber) {
	                                return resolve(provider);
	                            }
	                            // We're done; just quit
	                            if (config.cancelled) {
	                                return resolve(null);
	                            }
	                            // Try again, next block
	                            return resolve(undefined);
	                        }, 0);
	                    });
	                }, { oncePoll: provider })];
	        });
	    });
	}
	function getRunner(config, currentBlockNumber, method, params) {
	    return __awaiter(this, void 0, void 0, function () {
	        var provider, _a, filter;
	        return __generator(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    provider = config.provider;
	                    _a = method;
	                    switch (_a) {
	                        case "getBlockNumber": return [3 /*break*/, 1];
	                        case "getGasPrice": return [3 /*break*/, 1];
	                        case "getEtherPrice": return [3 /*break*/, 2];
	                        case "getBalance": return [3 /*break*/, 3];
	                        case "getTransactionCount": return [3 /*break*/, 3];
	                        case "getCode": return [3 /*break*/, 3];
	                        case "getStorageAt": return [3 /*break*/, 6];
	                        case "getBlock": return [3 /*break*/, 9];
	                        case "call": return [3 /*break*/, 12];
	                        case "estimateGas": return [3 /*break*/, 12];
	                        case "getTransaction": return [3 /*break*/, 15];
	                        case "getTransactionReceipt": return [3 /*break*/, 15];
	                        case "getLogs": return [3 /*break*/, 16];
	                    }
	                    return [3 /*break*/, 19];
	                case 1: return [2 /*return*/, provider[method]()];
	                case 2:
	                    if (provider.getEtherPrice) {
	                        return [2 /*return*/, provider.getEtherPrice()];
	                    }
	                    return [3 /*break*/, 19];
	                case 3:
	                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 5];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 4:
	                    provider = _b.sent();
	                    _b.label = 5;
	                case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || "latest")];
	                case 6:
	                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 8];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 7:
	                    provider = _b.sent();
	                    _b.label = 8;
	                case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
	                case 9:
	                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 11];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 10:
	                    provider = _b.sent();
	                    _b.label = 11;
	                case 11: return [2 /*return*/, provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash)];
	                case 12:
	                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 14];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 13:
	                    provider = _b.sent();
	                    _b.label = 14;
	                case 14:
	                    if (method === "call" && params.blockTag) {
	                        return [2 /*return*/, provider[method](params.transaction, params.blockTag)];
	                    }
	                    return [2 /*return*/, provider[method](params.transaction)];
	                case 15: return [2 /*return*/, provider[method](params.transactionHash)];
	                case 16:
	                    filter = params.filter;
	                    if (!((filter.fromBlock && (0, lib$1.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, lib$1.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 17:
	                    provider = _b.sent();
	                    _b.label = 18;
	                case 18: return [2 /*return*/, provider.getLogs(filter)];
	                case 19: return [2 /*return*/, logger.throwError("unknown method error", lib.Logger.errors.UNKNOWN_ERROR, {
	                        method: method,
	                        params: params
	                    })];
	            }
	        });
	    });
	}
	var FallbackProvider = /** @class */ (function (_super) {
	    __extends(FallbackProvider, _super);
	    function FallbackProvider(providers, quorum) {
	        var _this = this;
	        if (providers.length === 0) {
	            logger.throwArgumentError("missing providers", "providers", providers);
	        }
	        var providerConfigs = providers.map(function (configOrProvider, index) {
	            if (lib$e.Provider.isProvider(configOrProvider)) {
	                var stallTimeout = (0, formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
	                var priority = 1;
	                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });
	            }
	            var config = (0, lib$3.shallowCopy)(configOrProvider);
	            if (config.priority == null) {
	                config.priority = 1;
	            }
	            if (config.stallTimeout == null) {
	                config.stallTimeout = (0, formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
	            }
	            if (config.weight == null) {
	                config.weight = 1;
	            }
	            var weight = config.weight;
	            if (weight % 1 || weight > 512 || weight < 1) {
	                logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
	            }
	            return Object.freeze(config);
	        });
	        var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);
	        if (quorum == null) {
	            quorum = total / 2;
	        }
	        else if (quorum > total) {
	            logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
	        }
	        // Are all providers' networks are known
	        var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));
	        // Not all networks are known; we must stall
	        if (networkOrReady == null) {
	            networkOrReady = new Promise(function (resolve, reject) {
	                setTimeout(function () {
	                    _this.detectNetwork().then(resolve, reject);
	                }, 0);
	            });
	        }
	        _this = _super.call(this, networkOrReady) || this;
	        // Preserve a copy, so we do not get mutated
	        (0, lib$3.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
	        (0, lib$3.defineReadOnly)(_this, "quorum", quorum);
	        _this._highestBlockNumber = -1;
	        return _this;
	    }
	    FallbackProvider.prototype.detectNetwork = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var networks;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];
	                    case 1:
	                        networks = _a.sent();
	                        return [2 /*return*/, checkNetworks(networks)];
	                }
	            });
	        });
	    };
	    FallbackProvider.prototype.perform = function (method, params) {
	        return __awaiter(this, void 0, void 0, function () {
	            var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "sendTransaction")) return [3 /*break*/, 2];
	                        return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {
	                                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
	                                    return result.hash;
	                                }, function (error) {
	                                    return error;
	                                });
	                            }))];
	                    case 1:
	                        results = _a.sent();
	                        // Any success is good enough (other errors are likely "already seen" errors
	                        for (i_1 = 0; i_1 < results.length; i_1++) {
	                            result = results[i_1];
	                            if (typeof (result) === "string") {
	                                return [2 /*return*/, result];
	                            }
	                        }
	                        // They were all an error; pick the first error
	                        throw results[0];
	                    case 2:
	                        if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) return [3 /*break*/, 4];
	                        return [4 /*yield*/, this.getBlockNumber()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        processFunc = getProcessFunc(this, method, params);
	                        configs = (0, lib$o.shuffled)(this.providerConfigs.map(lib$3.shallowCopy));
	                        configs.sort(function (a, b) { return (a.priority - b.priority); });
	                        currentBlockNumber = this._highestBlockNumber;
	                        i = 0;
	                        first = true;
	                        _loop_1 = function () {
	                            var t0, inflightWeight, _loop_2, waiting, results, result, errors;
	                            return __generator(this, function (_b) {
	                                switch (_b.label) {
	                                    case 0:
	                                        t0 = now();
	                                        inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })
	                                            .reduce(function (accum, c) { return (accum + c.weight); }, 0);
	                                        _loop_2 = function () {
	                                            var config = configs[i++];
	                                            var rid = nextRid++;
	                                            config.start = now();
	                                            config.staller = stall(config.stallTimeout);
	                                            config.staller.wait(function () { config.staller = null; });
	                                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
	                                                config.done = true;
	                                                config.result = result;
	                                                if (_this.listenerCount("debug")) {
	                                                    _this.emit("debug", {
	                                                        action: "request",
	                                                        rid: rid,
	                                                        backend: exposeDebugConfig(config, now()),
	                                                        request: { method: method, params: (0, lib$3.deepCopy)(params) },
	                                                        provider: _this
	                                                    });
	                                                }
	                                            }, function (error) {
	                                                config.done = true;
	                                                config.error = error;
	                                                if (_this.listenerCount("debug")) {
	                                                    _this.emit("debug", {
	                                                        action: "request",
	                                                        rid: rid,
	                                                        backend: exposeDebugConfig(config, now()),
	                                                        request: { method: method, params: (0, lib$3.deepCopy)(params) },
	                                                        provider: _this
	                                                    });
	                                                }
	                                            });
	                                            if (this_1.listenerCount("debug")) {
	                                                this_1.emit("debug", {
	                                                    action: "request",
	                                                    rid: rid,
	                                                    backend: exposeDebugConfig(config, null),
	                                                    request: { method: method, params: (0, lib$3.deepCopy)(params) },
	                                                    provider: this_1
	                                                });
	                                            }
	                                            inflightWeight += config.weight;
	                                        };
	                                        // Start running enough to meet quorum
	                                        while (inflightWeight < this_1.quorum && i < configs.length) {
	                                            _loop_2();
	                                        }
	                                        waiting = [];
	                                        configs.forEach(function (c) {
	                                            if (c.done || !c.runner) {
	                                                return;
	                                            }
	                                            waiting.push(c.runner);
	                                            if (c.staller) {
	                                                waiting.push(c.staller.getPromise());
	                                            }
	                                        });
	                                        if (!waiting.length) return [3 /*break*/, 2];
	                                        return [4 /*yield*/, Promise.race(waiting)];
	                                    case 1:
	                                        _b.sent();
	                                        _b.label = 2;
	                                    case 2:
	                                        results = configs.filter(function (c) { return (c.done && c.error == null); });
	                                        if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];
	                                        result = processFunc(results);
	                                        if (result !== undefined) {
	                                            // Shut down any stallers
	                                            configs.forEach(function (c) {
	                                                if (c.staller) {
	                                                    c.staller.cancel();
	                                                }
	                                                c.cancelled = true;
	                                            });
	                                            return [2 /*return*/, { value: result }];
	                                        }
	                                        if (!!first) return [3 /*break*/, 4];
	                                        return [4 /*yield*/, stall(100).getPromise()];
	                                    case 3:
	                                        _b.sent();
	                                        _b.label = 4;
	                                    case 4:
	                                        first = false;
	                                        _b.label = 5;
	                                    case 5:
	                                        errors = configs.reduce(function (accum, c) {
	                                            if (!c.done || c.error == null) {
	                                                return accum;
	                                            }
	                                            var code = (c.error).code;
	                                            if (ForwardErrors.indexOf(code) >= 0) {
	                                                if (!accum[code]) {
	                                                    accum[code] = { error: c.error, weight: 0 };
	                                                }
	                                                accum[code].weight += c.weight;
	                                            }
	                                            return accum;
	                                        }, ({}));
	                                        Object.keys(errors).forEach(function (errorCode) {
	                                            var tally = errors[errorCode];
	                                            if (tally.weight < _this.quorum) {
	                                                return;
	                                            }
	                                            // Shut down any stallers
	                                            configs.forEach(function (c) {
	                                                if (c.staller) {
	                                                    c.staller.cancel();
	                                                }
	                                                c.cancelled = true;
	                                            });
	                                            var e = (tally.error);
	                                            var props = {};
	                                            ForwardProperties.forEach(function (name) {
	                                                if (e[name] == null) {
	                                                    return;
	                                                }
	                                                props[name] = e[name];
	                                            });
	                                            logger.throwError(e.reason || e.message, errorCode, props);
	                                        });
	                                        // All configs have run to completion; we will never get more data
	                                        if (configs.filter(function (c) { return !c.done; }).length === 0) {
	                                            return [2 /*return*/, "break"];
	                                        }
	                                        return [2 /*return*/];
	                                }
	                            });
	                        };
	                        this_1 = this;
	                        _a.label = 5;
	                    case 5:
	                        if (!true) return [3 /*break*/, 7];
	                        return [5 /*yield**/, _loop_1()];
	                    case 6:
	                        state_1 = _a.sent();
	                        if (typeof state_1 === "object")
	                            return [2 /*return*/, state_1.value];
	                        if (state_1 === "break")
	                            return [3 /*break*/, 7];
	                        return [3 /*break*/, 5];
	                    case 7:
	                        // Shut down any stallers; shouldn't be any
	                        configs.forEach(function (c) {
	                            if (c.staller) {
	                                c.staller.cancel();
	                            }
	                            c.cancelled = true;
	                        });
	                        return [2 /*return*/, logger.throwError("failed to meet quorum", lib.Logger.errors.SERVER_ERROR, {
	                                method: method,
	                                params: params,
	                                //results: configs.map((c) => c.result),
	                                //errors: configs.map((c) => c.error),
	                                results: configs.map(function (c) { return exposeDebugConfig(c); }),
	                                provider: this
	                            })];
	                }
	            });
	        });
	    };
	    return FallbackProvider;
	}(baseProvider.BaseProvider));
	exports.FallbackProvider = FallbackProvider;

	});

	var fallbackProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(fallbackProvider);

	var browserIpcProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.IpcProvider = void 0;
	var IpcProvider = null;
	exports.IpcProvider = IpcProvider;

	});

	var browserIpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(browserIpcProvider);

	var infuraProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;





	var logger = new lib.Logger(_version$I.version);

	var defaultProjectId = "84842078b09946638c03157f83405213";
	var InfuraWebSocketProvider = /** @class */ (function (_super) {
	    __extends(InfuraWebSocketProvider, _super);
	    function InfuraWebSocketProvider(network, apiKey) {
	        var _this = this;
	        var provider = new InfuraProvider(network, apiKey);
	        var connection = provider.connection;
	        if (connection.password) {
	            logger.throwError("INFURA WebSocket project secrets unsupported", lib.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "InfuraProvider.getWebSocketProvider()"
	            });
	        }
	        var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
	        _this = _super.call(this, url, network) || this;
	        (0, lib$3.defineReadOnly)(_this, "apiKey", provider.projectId);
	        (0, lib$3.defineReadOnly)(_this, "projectId", provider.projectId);
	        (0, lib$3.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
	        return _this;
	    }
	    InfuraWebSocketProvider.prototype.isCommunityResource = function () {
	        return (this.projectId === defaultProjectId);
	    };
	    return InfuraWebSocketProvider;
	}(websocketProvider.WebSocketProvider));
	exports.InfuraWebSocketProvider = InfuraWebSocketProvider;
	var InfuraProvider = /** @class */ (function (_super) {
	    __extends(InfuraProvider, _super);
	    function InfuraProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    InfuraProvider.getWebSocketProvider = function (network, apiKey) {
	        return new InfuraWebSocketProvider(network, apiKey);
	    };
	    InfuraProvider.getApiKey = function (apiKey) {
	        var apiKeyObj = {
	            apiKey: defaultProjectId,
	            projectId: defaultProjectId,
	            projectSecret: null
	        };
	        if (apiKey == null) {
	            return apiKeyObj;
	        }
	        if (typeof (apiKey) === "string") {
	            apiKeyObj.projectId = apiKey;
	        }
	        else if (apiKey.projectSecret != null) {
	            logger.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
	            logger.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
	            apiKeyObj.projectId = apiKey.projectId;
	            apiKeyObj.projectSecret = apiKey.projectSecret;
	        }
	        else if (apiKey.projectId) {
	            apiKeyObj.projectId = apiKey.projectId;
	        }
	        apiKeyObj.apiKey = apiKeyObj.projectId;
	        return apiKeyObj;
	    };
	    InfuraProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network ? network.name : "unknown") {
	            case "homestead":
	                host = "mainnet.infura.io";
	                break;
	            case "goerli":
	                host = "goerli.infura.io";
	                break;
	            case "sepolia":
	                host = "sepolia.infura.io";
	                break;
	            case "matic":
	                host = "polygon-mainnet.infura.io";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai.infura.io";
	                break;
	            case "optimism":
	                host = "optimism-mainnet.infura.io";
	                break;
	            case "optimism-goerli":
	                host = "optimism-goerli.infura.io";
	                break;
	            case "optimism-sepolia":
	                host = "optimism-sepolia.infura.io";
	                break;
	            case "arbitrum":
	                host = "arbitrum-mainnet.infura.io";
	                break;
	            case "arbitrum-goerli":
	                host = "arbitrum-goerli.infura.io";
	                break;
	            case "arbitrum-sepolia":
	                host = "arbitrum-sepolia.infura.io";
	                break;
	            default:
	                logger.throwError("unsupported network", lib.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "network",
	                    value: network
	                });
	        }
	        var connection = {
	            allowGzip: true,
	            url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
	            throttleCallback: function (attempt, url) {
	                if (apiKey.projectId === defaultProjectId) {
	                    (0, formatter.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	        if (apiKey.projectSecret != null) {
	            connection.user = "";
	            connection.password = apiKey.projectSecret;
	        }
	        return connection;
	    };
	    InfuraProvider.prototype.isCommunityResource = function () {
	        return (this.projectId === defaultProjectId);
	    };
	    return InfuraProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.InfuraProvider = InfuraProvider;

	});

	var infuraProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(infuraProvider);

	var jsonRpcBatchProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JsonRpcBatchProvider = void 0;



	// Experimental
	var JsonRpcBatchProvider = /** @class */ (function (_super) {
	    __extends(JsonRpcBatchProvider, _super);
	    function JsonRpcBatchProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    JsonRpcBatchProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (this._nextId++),
	            jsonrpc: "2.0"
	        };
	        if (this._pendingBatch == null) {
	            this._pendingBatch = [];
	        }
	        var inflightRequest = { request: request, resolve: null, reject: null };
	        var promise = new Promise(function (resolve, reject) {
	            inflightRequest.resolve = resolve;
	            inflightRequest.reject = reject;
	        });
	        this._pendingBatch.push(inflightRequest);
	        if (!this._pendingBatchAggregator) {
	            // Schedule batch for next event loop + short duration
	            this._pendingBatchAggregator = setTimeout(function () {
	                // Get teh current batch and clear it, so new requests
	                // go into the next batch
	                var batch = _this._pendingBatch;
	                _this._pendingBatch = null;
	                _this._pendingBatchAggregator = null;
	                // Get the request as an array of requests
	                var request = batch.map(function (inflight) { return inflight.request; });
	                _this.emit("debug", {
	                    action: "requestBatch",
	                    request: (0, lib$3.deepCopy)(request),
	                    provider: _this
	                });
	                return (0, lib$s.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {
	                    _this.emit("debug", {
	                        action: "response",
	                        request: request,
	                        response: result,
	                        provider: _this
	                    });
	                    // For each result, feed it to the correct Promise, depending
	                    // on whether it was a success or error
	                    batch.forEach(function (inflightRequest, index) {
	                        var payload = result[index];
	                        if (payload.error) {
	                            var error = new Error(payload.error.message);
	                            error.code = payload.error.code;
	                            error.data = payload.error.data;
	                            inflightRequest.reject(error);
	                        }
	                        else {
	                            inflightRequest.resolve(payload.result);
	                        }
	                    });
	                }, function (error) {
	                    _this.emit("debug", {
	                        action: "response",
	                        error: error,
	                        request: request,
	                        provider: _this
	                    });
	                    batch.forEach(function (inflightRequest) {
	                        inflightRequest.reject(error);
	                    });
	                });
	            }, 10);
	        }
	        return promise;
	    };
	    return JsonRpcBatchProvider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.JsonRpcBatchProvider = JsonRpcBatchProvider;

	});

	var jsonRpcBatchProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(jsonRpcBatchProvider);

	var nodesmithProvider = createCommonjsModule(function (module, exports) {
	/* istanbul ignore file */
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.NodesmithProvider = void 0;



	var logger = new lib.Logger(_version$I.version);
	// Special API key provided by Nodesmith for ethers.js
	var defaultApiKey = "ETHERS_JS_SHARED";
	var NodesmithProvider = /** @class */ (function (_super) {
	    __extends(NodesmithProvider, _super);
	    function NodesmithProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NodesmithProvider.getApiKey = function (apiKey) {
	        if (apiKey && typeof (apiKey) !== "string") {
	            logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
	        }
	        return apiKey || defaultApiKey;
	    };
	    NodesmithProvider.getUrl = function (network, apiKey) {
	        logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
	                break;
	            case "ropsten":
	                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
	                break;
	            case "rinkeby":
	                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
	                break;
	            case "goerli":
	                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
	                break;
	            case "kovan":
	                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
	                break;
	            default:
	                logger.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return (host + "?apiKey=" + apiKey);
	    };
	    return NodesmithProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.NodesmithProvider = NodesmithProvider;

	});

	var nodesmithProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(nodesmithProvider);

	var pocketProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PocketProvider = void 0;


	var logger = new lib.Logger(_version$I.version);

	var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
	var PocketProvider = /** @class */ (function (_super) {
	    __extends(PocketProvider, _super);
	    function PocketProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PocketProvider.getApiKey = function (apiKey) {
	        var apiKeyObj = {
	            applicationId: null,
	            loadBalancer: true,
	            applicationSecretKey: null
	        };
	        // Parse applicationId and applicationSecretKey
	        if (apiKey == null) {
	            apiKeyObj.applicationId = defaultApplicationId;
	        }
	        else if (typeof (apiKey) === "string") {
	            apiKeyObj.applicationId = apiKey;
	        }
	        else if (apiKey.applicationSecretKey != null) {
	            apiKeyObj.applicationId = apiKey.applicationId;
	            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
	        }
	        else if (apiKey.applicationId) {
	            apiKeyObj.applicationId = apiKey.applicationId;
	        }
	        else {
	            logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
	        }
	        return apiKeyObj;
	    };
	    PocketProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network ? network.name : "unknown") {
	            case "goerli":
	                host = "eth-goerli.gateway.pokt.network";
	                break;
	            case "homestead":
	                host = "eth-mainnet.gateway.pokt.network";
	                break;
	            case "kovan":
	                host = "poa-kovan.gateway.pokt.network";
	                break;
	            case "matic":
	                host = "poly-mainnet.gateway.pokt.network";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai-rpc.gateway.pokt.network";
	                break;
	            case "rinkeby":
	                host = "eth-rinkeby.gateway.pokt.network";
	                break;
	            case "ropsten":
	                host = "eth-ropsten.gateway.pokt.network";
	                break;
	            default:
	                logger.throwError("unsupported network", lib.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "network",
	                    value: network
	                });
	        }
	        var url = "https://" + host + "/v1/lb/" + apiKey.applicationId;
	        var connection = { headers: {}, url: url };
	        if (apiKey.applicationSecretKey != null) {
	            connection.user = "";
	            connection.password = apiKey.applicationSecretKey;
	        }
	        return connection;
	    };
	    PocketProvider.prototype.isCommunityResource = function () {
	        return (this.applicationId === defaultApplicationId);
	    };
	    return PocketProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.PocketProvider = PocketProvider;

	});

	var pocketProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(pocketProvider);

	var quicknodeProvider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QuickNodeProvider = void 0;



	var logger = new lib.Logger(_version$I.version);
	// Special API key provided by Quicknode for ethers.js
	var defaultApiKey = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
	var QuickNodeProvider = /** @class */ (function (_super) {
	    __extends(QuickNodeProvider, _super);
	    function QuickNodeProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    QuickNodeProvider.getApiKey = function (apiKey) {
	        if (apiKey && typeof (apiKey) !== "string") {
	            logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
	        }
	        return apiKey || defaultApiKey;
	    };
	    QuickNodeProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "ethers.quiknode.pro";
	                break;
	            case "goerli":
	                host = "ethers.ethereum-goerli.quiknode.pro";
	                break;
	            case "sepolia":
	                host = "ethers.ethereum-sepolia.quiknode.pro";
	                break;
	            case "holesky":
	                host = "ethers.ethereum-holesky.quiknode.pro";
	                break;
	            case "arbitrum":
	                host = "ethers.arbitrum-mainnet.quiknode.pro";
	                break;
	            case "arbitrum-goerli":
	                host = "ethers.arbitrum-goerli.quiknode.pro";
	                break;
	            case "arbitrum-sepolia":
	                host = "ethers.arbitrum-sepolia.quiknode.pro";
	                break;
	            case "base":
	                host = "ethers.base-mainnet.quiknode.pro";
	                break;
	            case "base-goerli":
	                host = "ethers.base-goerli.quiknode.pro";
	                break;
	            case "base-spolia":
	                host = "ethers.base-sepolia.quiknode.pro";
	                break;
	            case "bnb":
	                host = "ethers.bsc.quiknode.pro";
	                break;
	            case "bnbt":
	                host = "ethers.bsc-testnet.quiknode.pro";
	                break;
	            case "matic":
	                host = "ethers.matic.quiknode.pro";
	                break;
	            case "maticmum":
	                host = "ethers.matic-testnet.quiknode.pro";
	                break;
	            case "optimism":
	                host = "ethers.optimism.quiknode.pro";
	                break;
	            case "optimism-goerli":
	                host = "ethers.optimism-goerli.quiknode.pro";
	                break;
	            case "optimism-sepolia":
	                host = "ethers.optimism-sepolia.quiknode.pro";
	                break;
	            case "xdai":
	                host = "ethers.xdai.quiknode.pro";
	                break;
	            default:
	                logger.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return ("https:/" + "/" + host + "/" + apiKey);
	    };
	    return QuickNodeProvider;
	}(urlJsonRpcProvider.UrlJsonRpcProvider));
	exports.QuickNodeProvider = QuickNodeProvider;

	});

	var quicknodeProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(quicknodeProvider);

	var web3Provider = createCommonjsModule(function (module, exports) {
	"use strict";
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Web3Provider = void 0;



	var logger = new lib.Logger(_version$I.version);

	var _nextId = 1;
	function buildWeb3LegacyFetcher(provider, sendFunc) {
	    var fetcher = "Web3LegacyFetcher";
	    return function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (_nextId++),
	            jsonrpc: "2.0"
	        };
	        return new Promise(function (resolve, reject) {
	            _this.emit("debug", {
	                action: "request",
	                fetcher: fetcher,
	                request: (0, lib$3.deepCopy)(request),
	                provider: _this
	            });
	            sendFunc(request, function (error, response) {
	                if (error) {
	                    _this.emit("debug", {
	                        action: "response",
	                        fetcher: fetcher,
	                        error: error,
	                        request: request,
	                        provider: _this
	                    });
	                    return reject(error);
	                }
	                _this.emit("debug", {
	                    action: "response",
	                    fetcher: fetcher,
	                    request: request,
	                    response: response,
	                    provider: _this
	                });
	                if (response.error) {
	                    var error_1 = new Error(response.error.message);
	                    error_1.code = response.error.code;
	                    error_1.data = response.error.data;
	                    return reject(error_1);
	                }
	                resolve(response.result);
	            });
	        });
	    };
	}
	function buildEip1193Fetcher(provider) {
	    return function (method, params) {
	        var _this = this;
	        if (params == null) {
	            params = [];
	        }
	        var request = { method: method, params: params };
	        this.emit("debug", {
	            action: "request",
	            fetcher: "Eip1193Fetcher",
	            request: (0, lib$3.deepCopy)(request),
	            provider: this
	        });
	        return provider.request(request).then(function (response) {
	            _this.emit("debug", {
	                action: "response",
	                fetcher: "Eip1193Fetcher",
	                request: request,
	                response: response,
	                provider: _this
	            });
	            return response;
	        }, function (error) {
	            _this.emit("debug", {
	                action: "response",
	                fetcher: "Eip1193Fetcher",
	                request: request,
	                error: error,
	                provider: _this
	            });
	            throw error;
	        });
	    };
	}
	var Web3Provider = /** @class */ (function (_super) {
	    __extends(Web3Provider, _super);
	    function Web3Provider(provider, network) {
	        var _this = this;
	        if (provider == null) {
	            logger.throwArgumentError("missing provider", "provider", provider);
	        }
	        var path = null;
	        var jsonRpcFetchFunc = null;
	        var subprovider = null;
	        if (typeof (provider) === "function") {
	            path = "unknown:";
	            jsonRpcFetchFunc = provider;
	        }
	        else {
	            path = provider.host || provider.path || "";
	            if (!path && provider.isMetaMask) {
	                path = "metamask";
	            }
	            subprovider = provider;
	            if (provider.request) {
	                if (path === "") {
	                    path = "eip-1193:";
	                }
	                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
	            }
	            else if (provider.sendAsync) {
	                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
	            }
	            else if (provider.send) {
	                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
	            }
	            else {
	                logger.throwArgumentError("unsupported provider", "provider", provider);
	            }
	            if (!path) {
	                path = "unknown:";
	            }
	        }
	        _this = _super.call(this, path, network) || this;
	        (0, lib$3.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
	        (0, lib$3.defineReadOnly)(_this, "provider", subprovider);
	        return _this;
	    }
	    Web3Provider.prototype.send = function (method, params) {
	        return this.jsonRpcFetchFunc(method, params);
	    };
	    return Web3Provider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.Web3Provider = Web3Provider;

	});

	var web3Provider$1 = /*@__PURE__*/getDefaultExportFromCjs(web3Provider);

	var lib$t = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;

	Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return lib$e.Provider; } });

	Object.defineProperty(exports, "getNetwork", { enumerable: true, get: function () { return lib$r.getNetwork; } });

	Object.defineProperty(exports, "BaseProvider", { enumerable: true, get: function () { return baseProvider.BaseProvider; } });
	Object.defineProperty(exports, "Resolver", { enumerable: true, get: function () { return baseProvider.Resolver; } });

	Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return alchemyProvider.AlchemyProvider; } });
	Object.defineProperty(exports, "AlchemyWebSocketProvider", { enumerable: true, get: function () { return alchemyProvider.AlchemyWebSocketProvider; } });

	Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function () { return ankrProvider.AnkrProvider; } });

	Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return cloudflareProvider.CloudflareProvider; } });

	Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return etherscanProvider.EtherscanProvider; } });

	Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return fallbackProvider.FallbackProvider; } });

	Object.defineProperty(exports, "IpcProvider", { enumerable: true, get: function () { return browserIpcProvider.IpcProvider; } });

	Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return infuraProvider.InfuraProvider; } });
	Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return infuraProvider.InfuraWebSocketProvider; } });

	Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return jsonRpcProvider.JsonRpcProvider; } });
	Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return jsonRpcProvider.JsonRpcSigner; } });

	Object.defineProperty(exports, "JsonRpcBatchProvider", { enumerable: true, get: function () { return jsonRpcBatchProvider.JsonRpcBatchProvider; } });

	Object.defineProperty(exports, "NodesmithProvider", { enumerable: true, get: function () { return nodesmithProvider.NodesmithProvider; } });

	Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return pocketProvider.PocketProvider; } });

	Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function () { return quicknodeProvider.QuickNodeProvider; } });

	Object.defineProperty(exports, "StaticJsonRpcProvider", { enumerable: true, get: function () { return urlJsonRpcProvider.StaticJsonRpcProvider; } });
	Object.defineProperty(exports, "UrlJsonRpcProvider", { enumerable: true, get: function () { return urlJsonRpcProvider.UrlJsonRpcProvider; } });

	Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function () { return web3Provider.Web3Provider; } });

	Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return websocketProvider.WebSocketProvider; } });

	Object.defineProperty(exports, "Formatter", { enumerable: true, get: function () { return formatter.Formatter; } });
	Object.defineProperty(exports, "isCommunityResourcable", { enumerable: true, get: function () { return formatter.isCommunityResourcable; } });
	Object.defineProperty(exports, "isCommunityResource", { enumerable: true, get: function () { return formatter.isCommunityResource; } });
	Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return formatter.showThrottleMessage; } });


	var logger = new lib.Logger(_version$I.version);
	////////////////////////
	// Helper Functions
	function getDefaultProvider(network, options) {
	    if (network == null) {
	        network = "homestead";
	    }
	    // If passed a URL, figure out the right type of provider based on the scheme
	    if (typeof (network) === "string") {
	        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
	        // Handle http and ws (and their secure variants)
	        var match = network.match(/^(ws|http)s?:/i);
	        if (match) {
	            switch (match[1].toLowerCase()) {
	                case "http":
	                case "https":
	                    return new jsonRpcProvider.JsonRpcProvider(network);
	                case "ws":
	                case "wss":
	                    return new websocketProvider.WebSocketProvider(network);
	                default:
	                    logger.throwArgumentError("unsupported URL scheme", "network", network);
	            }
	        }
	    }
	    var n = (0, lib$r.getNetwork)(network);
	    if (!n || !n._defaultProvider) {
	        logger.throwError("unsupported getDefaultProvider network", lib.Logger.errors.NETWORK_ERROR, {
	            operation: "getDefaultProvider",
	            network: network
	        });
	    }
	    return n._defaultProvider({
	        FallbackProvider: fallbackProvider.FallbackProvider,
	        AlchemyProvider: alchemyProvider.AlchemyProvider,
	        AnkrProvider: ankrProvider.AnkrProvider,
	        CloudflareProvider: cloudflareProvider.CloudflareProvider,
	        EtherscanProvider: etherscanProvider.EtherscanProvider,
	        InfuraProvider: infuraProvider.InfuraProvider,
	        JsonRpcProvider: jsonRpcProvider.JsonRpcProvider,
	        NodesmithProvider: nodesmithProvider.NodesmithProvider,
	        PocketProvider: pocketProvider.PocketProvider,
	        QuickNodeProvider: quicknodeProvider.QuickNodeProvider,
	        Web3Provider: web3Provider.Web3Provider,
	        IpcProvider: browserIpcProvider.IpcProvider,
	    }, options);
	}
	exports.getDefaultProvider = getDefaultProvider;

	});

	var index$r = /*@__PURE__*/getDefaultExportFromCjs(lib$t);

	var _version$K = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "solidity/5.8.0";

	});

	var _version$L = /*@__PURE__*/getDefaultExportFromCjs(_version$K);

	var lib$u = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha256 = exports.keccak256 = exports.pack = void 0;





	var regexBytes = new RegExp("^bytes([0-9]+)$");
	var regexNumber = new RegExp("^(u?int)([0-9]*)$");
	var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
	var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";


	var logger = new lib.Logger(_version$K.version);
	function _pack(type, value, isArray) {
	    switch (type) {
	        case "address":
	            if (isArray) {
	                return (0, lib$1.zeroPad)(value, 32);
	            }
	            return (0, lib$1.arrayify)(value);
	        case "string":
	            return (0, lib$8.toUtf8Bytes)(value);
	        case "bytes":
	            return (0, lib$1.arrayify)(value);
	        case "bool":
	            value = (value ? "0x01" : "0x00");
	            if (isArray) {
	                return (0, lib$1.zeroPad)(value, 32);
	            }
	            return (0, lib$1.arrayify)(value);
	    }
	    var match = type.match(regexNumber);
	    if (match) {
	        //let signed = (match[1] === "int")
	        var size = parseInt(match[2] || "256");
	        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
	            logger.throwArgumentError("invalid number type", "type", type);
	        }
	        if (isArray) {
	            size = 256;
	        }
	        value = lib$2.BigNumber.from(value).toTwos(size);
	        return (0, lib$1.zeroPad)(value, size / 8);
	    }
	    match = type.match(regexBytes);
	    if (match) {
	        var size = parseInt(match[1]);
	        if (String(size) !== match[1] || size === 0 || size > 32) {
	            logger.throwArgumentError("invalid bytes type", "type", type);
	        }
	        if ((0, lib$1.arrayify)(value).byteLength !== size) {
	            logger.throwArgumentError("invalid value for " + type, "value", value);
	        }
	        if (isArray) {
	            return (0, lib$1.arrayify)((value + Zeros).substring(0, 66));
	        }
	        return value;
	    }
	    match = type.match(regexArray);
	    if (match && Array.isArray(value)) {
	        var baseType_1 = match[1];
	        var count = parseInt(match[2] || String(value.length));
	        if (count != value.length) {
	            logger.throwArgumentError("invalid array length for " + type, "value", value);
	        }
	        var result_1 = [];
	        value.forEach(function (value) {
	            result_1.push(_pack(baseType_1, value, true));
	        });
	        return (0, lib$1.concat)(result_1);
	    }
	    return logger.throwArgumentError("invalid type", "type", type);
	}
	// @TODO: Array Enum
	function pack(types, values) {
	    if (types.length != values.length) {
	        logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
	    }
	    var tight = [];
	    types.forEach(function (type, index) {
	        tight.push(_pack(type, values[index]));
	    });
	    return (0, lib$1.hexlify)((0, lib$1.concat)(tight));
	}
	exports.pack = pack;
	function keccak256(types, values) {
	    return (0, lib$4.keccak256)(pack(types, values));
	}
	exports.keccak256 = keccak256;
	function sha256(types, values) {
	    return (0, lib$k.sha256)(pack(types, values));
	}
	exports.sha256 = sha256;

	});

	var index$s = /*@__PURE__*/getDefaultExportFromCjs(lib$u);

	var _version$M = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "units/5.8.0";

	});

	var _version$N = /*@__PURE__*/getDefaultExportFromCjs(_version$M);

	var lib$v = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = exports.commify = void 0;



	var logger = new lib.Logger(_version$M.version);
	var names = [
	    "wei",
	    "kwei",
	    "mwei",
	    "gwei",
	    "szabo",
	    "finney",
	    "ether",
	];
	// Some environments have issues with RegEx that contain back-tracking, so we cannot
	// use them.
	function commify(value) {
	    var comps = String(value).split(".");
	    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
	        logger.throwArgumentError("invalid value", "value", value);
	    }
	    // Make sure we have at least one whole digit (0 if none)
	    var whole = comps[0];
	    var negative = "";
	    if (whole.substring(0, 1) === "-") {
	        negative = "-";
	        whole = whole.substring(1);
	    }
	    // Make sure we have at least 1 whole digit with no leading zeros
	    while (whole.substring(0, 1) === "0") {
	        whole = whole.substring(1);
	    }
	    if (whole === "") {
	        whole = "0";
	    }
	    var suffix = "";
	    if (comps.length === 2) {
	        suffix = "." + (comps[1] || "0");
	    }
	    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
	        suffix = suffix.substring(0, suffix.length - 1);
	    }
	    var formatted = [];
	    while (whole.length) {
	        if (whole.length <= 3) {
	            formatted.unshift(whole);
	            break;
	        }
	        else {
	            var index = whole.length - 3;
	            formatted.unshift(whole.substring(index));
	            whole = whole.substring(0, index);
	        }
	    }
	    return negative + formatted.join(",") + suffix;
	}
	exports.commify = commify;
	function formatUnits(value, unitName) {
	    if (typeof (unitName) === "string") {
	        var index = names.indexOf(unitName);
	        if (index !== -1) {
	            unitName = 3 * index;
	        }
	    }
	    return (0, lib$2.formatFixed)(value, (unitName != null) ? unitName : 18);
	}
	exports.formatUnits = formatUnits;
	function parseUnits(value, unitName) {
	    if (typeof (value) !== "string") {
	        logger.throwArgumentError("value must be a string", "value", value);
	    }
	    if (typeof (unitName) === "string") {
	        var index = names.indexOf(unitName);
	        if (index !== -1) {
	            unitName = 3 * index;
	        }
	    }
	    return (0, lib$2.parseFixed)(value, (unitName != null) ? unitName : 18);
	}
	exports.parseUnits = parseUnits;
	function formatEther(wei) {
	    return formatUnits(wei, 18);
	}
	exports.formatEther = formatEther;
	function parseEther(ether) {
	    return parseUnits(ether, 18);
	}
	exports.parseEther = parseEther;

	});

	var index$t = /*@__PURE__*/getDefaultExportFromCjs(lib$v);

	var utils$3 = createCommonjsModule(function (module, exports) {
	"use strict";
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
	exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;

	Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return lib$d.AbiCoder; } });
	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return lib$d.checkResultErrors; } });
	Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return lib$d.ConstructorFragment; } });
	Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return lib$d.defaultAbiCoder; } });
	Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return lib$d.ErrorFragment; } });
	Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return lib$d.EventFragment; } });
	Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return lib$d.FormatTypes; } });
	Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return lib$d.Fragment; } });
	Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return lib$d.FunctionFragment; } });
	Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return lib$d.Indexed; } });
	Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return lib$d.Interface; } });
	Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return lib$d.LogDescription; } });
	Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return lib$d.ParamType; } });
	Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return lib$d.TransactionDescription; } });

	Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return lib$6.getAddress; } });
	Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return lib$6.getCreate2Address; } });
	Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return lib$6.getContractAddress; } });
	Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return lib$6.getIcapAddress; } });
	Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return lib$6.isAddress; } });
	var base64 = __importStar(lib$9);
	exports.base64 = base64;

	Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return lib$j.Base58; } });

	Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return lib$1.arrayify; } });
	Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return lib$1.concat; } });
	Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return lib$1.hexConcat; } });
	Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return lib$1.hexDataSlice; } });
	Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return lib$1.hexDataLength; } });
	Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return lib$1.hexlify; } });
	Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return lib$1.hexStripZeros; } });
	Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return lib$1.hexValue; } });
	Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return lib$1.hexZeroPad; } });
	Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return lib$1.isBytes; } });
	Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return lib$1.isBytesLike; } });
	Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return lib$1.isHexString; } });
	Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return lib$1.joinSignature; } });
	Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return lib$1.zeroPad; } });
	Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return lib$1.splitSignature; } });
	Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return lib$1.stripZeros; } });

	Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return lib$c._TypedDataEncoder; } });
	Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return lib$c.dnsEncode; } });
	Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return lib$c.hashMessage; } });
	Object.defineProperty(exports, "id", { enumerable: true, get: function () { return lib$c.id; } });
	Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return lib$c.isValidName; } });
	Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return lib$c.namehash; } });

	Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return lib$n.defaultPath; } });
	Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return lib$n.entropyToMnemonic; } });
	Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return lib$n.getAccountPath; } });
	Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return lib$n.HDNode; } });
	Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return lib$n.isValidMnemonic; } });
	Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return lib$n.mnemonicToEntropy; } });
	Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return lib$n.mnemonicToSeed; } });

	Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return lib$p.getJsonWalletAddress; } });

	Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return lib$4.keccak256; } });

	Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return lib.Logger; } });

	Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return lib$k.computeHmac; } });
	Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return lib$k.ripemd160; } });
	Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return lib$k.sha256; } });
	Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return lib$k.sha512; } });

	Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return lib$u.keccak256; } });
	Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return lib$u.pack; } });
	Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return lib$u.sha256; } });

	Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return lib$o.randomBytes; } });
	Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return lib$o.shuffled; } });

	Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return lib$3.checkProperties; } });
	Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return lib$3.deepCopy; } });
	Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return lib$3.defineReadOnly; } });
	Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return lib$3.getStatic; } });
	Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return lib$3.resolveProperties; } });
	Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return lib$3.shallowCopy; } });
	var RLP = __importStar(lib$5);
	exports.RLP = RLP;

	Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return lib$g.computePublicKey; } });
	Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return lib$g.recoverPublicKey; } });
	Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return lib$g.SigningKey; } });

	Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return lib$8.formatBytes32String; } });
	Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return lib$8.nameprep; } });
	Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return lib$8.parseBytes32String; } });
	Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return lib$8._toEscapedUtf8String; } });
	Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return lib$8.toUtf8Bytes; } });
	Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return lib$8.toUtf8CodePoints; } });
	Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return lib$8.toUtf8String; } });
	Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return lib$8.Utf8ErrorFuncs; } });

	Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return lib$h.accessListify; } });
	Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return lib$h.computeAddress; } });
	Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return lib$h.parse; } });
	Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return lib$h.recoverAddress; } });
	Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return lib$h.serialize; } });
	Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return lib$h.TransactionTypes; } });

	Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return lib$v.commify; } });
	Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return lib$v.formatEther; } });
	Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return lib$v.parseEther; } });
	Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return lib$v.formatUnits; } });
	Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return lib$v.parseUnits; } });

	Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return lib$q.verifyMessage; } });
	Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return lib$q.verifyTypedData; } });

	Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return lib$s._fetchData; } });
	Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return lib$s.fetchJson; } });
	Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return lib$s.poll; } });
	////////////////////////
	// Enums
	var sha2_2 = lib$k;
	Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
	var strings_2 = lib$8;
	Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
	Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });

	});

	var utils$4 = /*@__PURE__*/getDefaultExportFromCjs(utils$3);

	var _version$O = createCommonjsModule(function (module, exports) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = void 0;
	exports.version = "ethers/5.8.0";

	});

	var _version$P = /*@__PURE__*/getDefaultExportFromCjs(_version$O);

	var ethers = createCommonjsModule(function (module, exports) {
	"use strict";
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;

	Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return lib$i.BaseContract; } });
	Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return lib$i.Contract; } });
	Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return lib$i.ContractFactory; } });

	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return lib$2.BigNumber; } });
	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return lib$2.FixedNumber; } });

	Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return lib$f.Signer; } });
	Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return lib$f.VoidSigner; } });

	Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return lib$q.Wallet; } });
	var constants = __importStar(lib$7);
	exports.constants = constants;
	var providers = __importStar(lib$t);
	exports.providers = providers;
	var providers_1 = lib$t;
	Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return providers_1.getDefaultProvider; } });

	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return lib$m.Wordlist; } });
	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return lib$m.wordlists; } });
	var utils = __importStar(utils$3);
	exports.utils = utils;

	Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return lib.ErrorCode; } });
	////////////////////////
	// Compile-Time Constants
	// This is generated by "npm run dist"

	Object.defineProperty(exports, "version", { enumerable: true, get: function () { return _version$O.version; } });
	var logger = new lib.Logger(_version$O.version);
	exports.logger = logger;

	});

	var ethers$1 = /*@__PURE__*/getDefaultExportFromCjs(ethers);

	var lib$w = createCommonjsModule(function (module, exports) {
	"use strict";
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;
	// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js
	var ethers$1 = __importStar(ethers);
	exports.ethers = ethers$1;
	try {
	    var anyGlobal = window;
	    if (anyGlobal._ethers == null) {
	        anyGlobal._ethers = ethers$1;
	    }
	}
	catch (error) { }
	var ethers_1 = ethers;
	Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return ethers_1.Signer; } });
	Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return ethers_1.Wallet; } });
	Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return ethers_1.VoidSigner; } });
	Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return ethers_1.getDefaultProvider; } });
	Object.defineProperty(exports, "providers", { enumerable: true, get: function () { return ethers_1.providers; } });
	Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return ethers_1.BaseContract; } });
	Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return ethers_1.Contract; } });
	Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return ethers_1.ContractFactory; } });
	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return ethers_1.BigNumber; } });
	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return ethers_1.FixedNumber; } });
	Object.defineProperty(exports, "constants", { enumerable: true, get: function () { return ethers_1.constants; } });
	Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return ethers_1.errors; } });
	Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return ethers_1.logger; } });
	Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return ethers_1.utils; } });
	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return ethers_1.wordlists; } });
	////////////////////////
	// Compile-Time Constants
	Object.defineProperty(exports, "version", { enumerable: true, get: function () { return ethers_1.version; } });
	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return ethers_1.Wordlist; } });

	});

	var index$u = /*@__PURE__*/getDefaultExportFromCjs(lib$w);

	return index$u;

})));
>>>>>>> ba11e9b4e (Initial commit after reset)
//# sourceMappingURL=ethers.umd.js.map
