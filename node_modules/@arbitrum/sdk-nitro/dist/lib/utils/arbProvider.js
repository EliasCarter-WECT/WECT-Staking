"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArbBlockByHash = exports.getArbTransactionReceipt = void 0;
const providers_1 = require("@ethersproject/providers");
class ArbFormatter extends providers_1.Formatter {
    getDefaultFormats() {
        // formats was already initialised in super, so we can just access here
        const superFormats = super.getDefaultFormats();
        const bigNumber = this.bigNumber.bind(this);
        const hash = this.hash.bind(this);
        const number = this.number.bind(this);
        const arbBlockProps = {
            sendRoot: hash,
            sendCount: bigNumber,
            l1BlockNumber: number,
        };
        const arbReceiptFormat = Object.assign(Object.assign({}, superFormats.receipt), { l1BlockNumber: number, gasUsedForL1: bigNumber });
        return Object.assign(Object.assign({}, superFormats), { receipt: arbReceiptFormat, block: Object.assign(Object.assign({}, superFormats.block), arbBlockProps), blockWithTransactions: Object.assign(Object.assign({}, superFormats.blockWithTransactions), arbBlockProps) });
    }
    receipt(value) {
        return super.receipt(value);
    }
    block(block) {
        return super.block(block);
    }
    blockWithTransactions(block) {
        return super.blockWithTransactions(block);
    }
}
/**
 * Fetch a transaction receipt from an l2Provider
 * Additional batch info is also returned if requested
 * @param l2Provider
 * @param txHash
 * @returns
 */
async function getArbTransactionReceipt(l2Provider, txHash) {
    const rec = await l2Provider.send('eth_getTransactionReceipt', [txHash]);
    if (rec == null)
        return null;
    const arbFormatter = new ArbFormatter();
    return arbFormatter.receipt(rec);
}
exports.getArbTransactionReceipt = getArbTransactionReceipt;
async function getArbBlockByHash(l2Provider, blockHash, includeTransactions) {
    const l2Block = await l2Provider.send('eth_getBlockByHash', [
        blockHash,
        includeTransactions,
    ]);
    if (l2Block === null)
        return null;
    const arbFormatter = new ArbFormatter();
    return includeTransactions
        ? arbFormatter.blockWithTransactions(l2Block)
        : arbFormatter.block(l2Block);
}
exports.getArbBlockByHash = getArbBlockByHash;
