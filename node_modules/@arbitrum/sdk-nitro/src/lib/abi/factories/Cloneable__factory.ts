/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Cloneable, CloneableInterface } from "../Cloneable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "isMaster",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b506000805460ff1916600117905560868061002b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f791d2914602d575b600080fd5b60336047565b604080519115158252519081900360200190f35b60005460ff169056fea26469706673582212209c4423140c1c6cef987783aaf0cc62c2e9e3adbb4ceaa2f73a18a5ed247b9bd164736f6c634300060b0033";

type CloneableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CloneableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cloneable__factory extends ContractFactory {
  constructor(...args: CloneableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Cloneable";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Cloneable> {
    return super.deploy(overrides || {}) as Promise<Cloneable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Cloneable {
    return super.attach(address) as Cloneable;
  }
  connect(signer: Signer): Cloneable__factory {
    return super.connect(signer) as Cloneable__factory;
  }
  static readonly contractName: "Cloneable";
  public readonly contractName: "Cloneable";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneableInterface {
    return new utils.Interface(_abi) as CloneableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cloneable {
    return new Contract(address, _abi, signerOrProvider) as Cloneable;
  }
}
